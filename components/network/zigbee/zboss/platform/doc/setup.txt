/* ZBOSS Zigbee software protocol stack
 *
 * Copyright (c) 2012-2020 DSR Corporation, Denver CO, USA.
 * http://www.dsr-zboss.com
 * http://www.dsr-corporation.com
 * All rights reserved.
 *
 * This is unpublished proprietary source code of DSR Corporation
 * The copyright notice does not evidence any actual or intended
 * publication of such source code.
 *
 * ZBOSS is a registered trademark of Data Storage Research LLC d/b/a DSR
 * Corporation
 *
 * Commercial Usage
 * Licensees holding valid DSR Commercial licenses may use
 * this file in accordance with the DSR Commercial License
 * Agreement provided with the Software or, alternatively, in accordance
 * with the terms contained in a written agreement between you and
 * DSR.
 */

# CC2538 platform for ZBOSS - Setup for gcc build in Linux

## Install gcc
Install gcc gcc-arm-none-eabi-6-2017-q2-update from ARM site into
/usr/local/gcc-arm-none-eabi-6-2017-q2-update.
See https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads        
Maybe, other gcc versionw will also work.

## Install TI Uniflash

Install TI Uniflash from http://www.ti.com/tool/download/UNIFLASH.
- load uniflash_sl.6.0.0.2710.run
- chmod +x uniflash_sl.6.0.0.2710.run
- run uniflash_sl.6.0.0.2710.run
- after install complete
cd ~/ti/uniflash_6.0.0 && sudo sh postinstall.sh

Plug devboard.
Can check device presence by running detect-devices.sh.

Run Uniflash UI by:
cd node-webkit
./nw

From the list choose CC2538NF11 && XDS100v3. Press Start.
Check that UNiflash works in Settings&Utilities - Primary IEEE
address.
Generate config in Standalone Command Line - Generate package.
Unpack generated uuflash_linux.zip somewhere (into ~/ti/2538, for example).
Run there one_time_setup.sh.
chmod +x dslite.sh
chmod +x ccs_base/DebugServer/bin/DSLite

Finally can flash using line:
./dslite.sh -c user_files/configs/cc2538nf11.ccxml -e -f -v ${binary}.hex

Many thanks to TI for that funny Linux way..
And where is gdb server?..
Seems like no other way that install their CCS with its Eclipse.

## Setup USB serial for trace:

sudo usermod -a -G plugdev <user>
sudo usermod -a -G  dialout <user>
sudo usermod -a -G  wireshark <user>

Or:
add into /etc/udev/rules.d/99-ftdi.rules
ACTION=="add", ATTRS{idVendor}=="0403", ATTRS{idProduct}=="a6d1", RUN+="/sbin/modprobe ftdi_sio" RUN+="/bin/sh -c 'echo 0403 a6d1 > /sys/bus/usb-serial/drivers/ftdi_sio/new_id'"

Disable Modem Manager:
echo 'ATTRS{idVendor}=="0403", ATTRS{idProduct}=="a6d1", ENV{ID_MM_DEVICE_IGNORE}="1"' >> /lib/udev/rules.d/77-mm-usb-device-blacklist.rules

Or run after every boot:
sudo modprobe ftdi_sio
sudo su
echo 0403 a6d1 > /sys/bus/usb-serial/drivers/ftdi_sio/new_id

Now have /dev/ttyUSB0 and /dev/ttyUSB1

Debug trace goes from /dev/ttyUSB1. Can check it by picocom -b 115200 /dev/ttyUSB1.

## Compile and use lin_com_dump to get trace
cd devtools/win_com_dump
make -f Makefile.linux

cd ../..
devtools/win_com_dump/lin_com_dump -U /dev/ttyUSB1 trace dump

Note: lin_com_dump MUST be run from ZBOSS sources root.

# SDK build

1. Clone ssh://git@bitbucket-zoi.dsr-corporation.com:7999/zoi/zboss_stable.git repo
2. Clone ssh://git@bitbucket-zoi.dsr-corporation.com:7999/zoi/zb_revision.git to the same level as previous
2. Clone ssh://git@bitbucket-zoi.dsr-corporation.com:7999/zoi/platform_cc2538.git repo one-level inside zboss_stable
3. Just run build script for SDK build platform_cc2538/build/cc2538/build-cc2538_sdk.sh
For Zigbee 3.0 ZGP and SE

# Setup for IAR build in Windows

This readme highlights cc2538 environment setup and application build.

Creating Workspace
================================
1. You need following software:
	IAR 6.60 (file EWARM-CD-6601-5104.exe) or similar
2.	Setup_SmartRF_Studio_7-1.15.0.exe install this programm for nessecary drivers and programs
	
4.	For Evaluation board SmartFR06 install following drivers from
	"c:\Program Files (x86)\IAR Systems\Embedded Workbench 6.60.1\arm\drivers\ti-xds\ti_emupack_setup.exe" 
	This enables debugging in IAR
	
5.	Maybe needed in the other work with board:
	Setup_SmartRF_Flash_Programmer_2-1.4.0.exe 
	
	WARNING!
		Do not forget to adjust COM-ports after installing drivers
			for EB SmartFR06 according it's instruction: swru321a.pdf 
	Also COM_BAUD_RATE of the Virtual COM-port need to be set to 115200/8/N/1
	
Loading Project
================================
1.	Copy stack/include/zb_vendor_cfg_ti_cc2538 [_gpp] .h to stack/include/zb_vendor.h
2. 	In IAR open workspace stack\build\cc2538\cc2538.eww
3. 	Compile cc2538_ker project into library
4.	Select work project and tune it (right-click on project name on left tree):
	In project options select debugger 	Debugger/setup/driver/ -> TI XDS100; choose TI XDS 100v3.
										Download -> Use flash loader
										Debugger/TI XDS100/200/Emulator/ TI XDS 100/v3 USB Emulator 2-pin cJTAG
5.	Select active test and use F7 to compile and Ctrl+D for debug project

Tracing output
================================
1.	You can use dev_tools/win_com_dump/release for trace packets and execution of the tests
	!!!win_com_dump must be placed in the stack root directory
	Use option -U for USART trace
		win_com_dump -U \\.\COM5 a.log a.dump
	Then you can convert dump to pcap for WireShark:
		dev_tools/dump_converter a.dump a.pcap

