1) NCP layout

high_level:
Platform dependent high level protocol implementation. HL uses low level and provides it with transport interface.
Dev side is based on ZBOSS stack and developed as application.
Host side is implemented as shared library plugged to python scripts.

low_level:
Platform independent low level protocol implementation

transport:
nsng - NSNG adapter for HOST and DEV sides
rpi_spidev - linux SPIDEV adapter+implementation for HOST side
osif - common interface to ZB osif transports and spi adapter for DEV side


2) How to build  ZBOSS to develop SNCP using nsng

## build
- goto platform_linux_nsng/build/linux-nsng-ncp-dev-py
- compile kernel, ncp fw, shared libs by run of build_kernel.sh
Note:     ZBOSS_VENDOR="zb_vendor_cfg_ncp_nsng_se.h"
- copy or link ncp/high_level/host-shared/ncp_ll_nsng.so to tests/ncp
- go to tests/ncp/ncp_feature_tests
- compile tests which you need (for example, zbs_echo) by cd $test; make

## run the echo test
- go to ncp/high_level/dev/ncpfw
- start nsng in background:
../../../../platform/devtools/nsng/nsng &
- at another tty go to Python tests dir tests/ncp/py
- start your test like
python3 zbs_echo_zc.py
- start NCP FW binary at tty which is in  ncp/high_level/dev/ncpfw
./ncp_fw
- open third tty. go to tests/ncp/ncp_feature_tests/zbs_echo
- start standalone test
./zbs_echo_zr

## 3-devices tests
With current nsng implementation only 1 NCF FW can be run,
so it is impossible to use 2 NCP in the single test.
So must use 2 standalone tests and 1 Python NCP test.

Certificates from ZB spec supports only 2 devices.
Use generated certificates.
Can get it from git repo git@gitlab.dsr-corporation.com:zboss/internal_key_storage.git.

Use .prod files from internal_key_storage/se/pc_internal/24ghz

2.2.4 Test TCLK establishment and Partner LK establishment in ZR role / in ZED role

Standalone test for ZC - application/samples/se/energy_service_interface/esi_device_ncp.
Use .prod file with both cs1 and cs2 - esi_cs1_cs2.prod.
Copy it to application/samples/se/energy_service_interface/esi_device.prod.
MAC address aaaaaaaaaaaaaaaa.

Standalone test for ZED - application/samples/se/metering metering_device_ncp (make metering_device_ncp)
Use .prod file elmet_cs1_cs2.prod (cs1 & cs2).
Copy as metering_device.prod.

Standalone test for ZR - application/samples/se/in_home_display/display_device_ncp
Use ihd_cs1_cs2.prod. Copy to display_device.prod

When NCP is in ZR role, use ihd_cs1_cs2.prod as a prod file for ncp_fw.
Copy ihd_cs1_cs2.prod into ncp/high_level/dev/ncpfw, as ncp_fw.prod

When NCP is in ZED role, use elmet_cs1_cs2.prod as a prod file for ncp_fw.

Note that all prod configfs use same installcode.

To run ZR test which initiates Partner LK start:
use ihd_cs1_cs2.prod as a prod file for ncp_fw.
- nsng 
- esi_device_ncp
- python3 zbs_se_key_est_zr_cs2.py
- ncp_fw
- metering_device_ncp

To run ZED test which initiates Partner LK start:
use elmet_cs1_cs2.prod as a prod file for ncp_fw.
- nsng 
- esi_device_ncp
- python3 zbs_se_key_est_zed_cs2.py
- ncp_fw
- display_device_ncp


## debug

Any component can be run under gdb.

### Useful trace:

- standalone trace in tests/ncp/ncp_feature_tests/zbs_echo (and other dirs)

zbs_echo_zc.log, zbs_echo_zc.dump
To cnvert zbs_echo_zc.dump to pcap, compile devtools/dump_converter by running
make -f Makefile_linux
Decde dump file by
./dump_converter zbs_echo_zc.dump zbs_echo_zc.pcap

- trace produced by ncp fw - in ncp/high_level/dev/ncpfw
Use ncp_fw.log, ncp_fw.dump.
Also, there is pg0ch19.pcap generated by nsng.


2) How to build and run

Purpose of this test - perform a zdo_startup procedure between ZC and ZR.
ZC resides on HOST(python) and NCP(ZBOSS).
ZR is ZBOSS application.
Test runs on Network Simulator(NS/NSNG).

