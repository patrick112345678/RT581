Overview
========
ZGPD implementation is needed only for debugging purposes.
Target platform is network simulator.

ZGPD device source files are located in $SVN_ROOT/zgp directory. 
ZGPD device functionality is compiled into library libzgpd.a.

ZGPD device configuration
=============================================

ZB_MAC_ONLY_STACK define can be helpful to have stubs for NWK and other higher
level layers.

Use commodity ZB_INIT() macro during ZGPD device initialization.

New define ZB_ZGPD_ROLE shall be added to zb_config.h. It is mutually exclusive 
with ED_ROLE, ROUTER_ROLE and COORDINATOR_ROLE.

Since ZGPD will be used for testing purposes, it's better to configure ZGPD
device parameters in runtime without rebuilding libzgpd.a.

Global ZGPD context have following fields.

struct zb_zgpd_ctx_s
{
	zgp_application_id_t application_id;
    zb_uint32_t srcId;
    zb_bool_t bidirectional_communication_enabled;
    zb_bool_t use_random_seq_num;
    zb_uint8_t security_level;
    zb_uint8_t security_key_type;
    zb_uint16_t security_key;
};

ZGPD supports all possible channels. There is no reason for testing purposes to
implement user-configured supported channels.

API for device configuration. 
Device configuration should be done before commissioning start.

ZB_ZGPD_INIT_ZGPD_CTX(application_id, 
                      bidirectional_enabled);
ZB_ZGPD_SET_SRC_ID(srcId);
ZB_ZGPD_SET_SECURITY(level, key_type, key);
ZB_ZGPD_USE_RANDOM_SEQ_NUM();

Processing GPDF frames
======================
MAC header in GPDF is the same as in common Zigbee frame, so
zb_mcps_data_request can be used in order to add MAC header to transmitted
GPDF and send command.

Other fields of GPDF (NWK + some others) are different from common Zigbee NWK
and APS layer. New function is needed in order to form these other fields.

Incoming GPDF is handled by application using user-defined callback. Also,
stack zb_mcps_data_indication function should be reimplemented for ZGPD.

API:
ZB_ZGPD_SEND_PAYLOADLESS_REQ(buf, cmd_id)

For every command with payload separate macro should be defined, e.g.
ZB_ZGPD_SEND_MOVE_UP_REQ(buf, rate)

Callback should be registered to handle incoming GPDFs:
ZB_ZGPD_SET_RECV_HANDLER(callback)

CSMA-CA usage
=============
ZGPD can disable CSMA-CA usage during transmission. Don't implement this
feature for now.

Commissioning
=============

ZGPD enters into commissioning mode via user action. Commissioning lasts until
ZGPS doesn't indicate to user success or failure status of operation. So, user
of ZGPD can try commissioning several times.

If ZGPD supports bidirectional communication, then sequence of messages is as
follows:
1. TX: ZGPD Channel Request on all supported channels at one attempt
2. RX: ZGPD Channel Configuration
3. TX: Commissioning GPDF
4. RX: Commissioning reply GPDF
5. TX: Success GPDF

If ZGPD doesn't support bidirectional communication, but supports sending of
commissioning GPDF, then it sends commissioning GPDF on memorized channel.

If ZGPD doesn't support bidirectional communication, and doesn't support
sending of commissioning GPDF, then after user action ZGPD sends Data GPDF
with Auto-commissioning field set to one. Also user defines operating channel
via device-specific means.

If the ZGPD is Rx-capable, it should be able to receive the ZGPD Channel Configuration
command also during the operation. The ZGPD Channel Configuration command may be sent by
the network in the event of network channel change.
This allows for avoiding ZGPD recommissioning.

If ZGPD can't be put into commissioning mode, then it should be capable of
sending some Data GPDFs with Auto-commissioning flag set to 1.

API:
zb_zgpd_start_commissioning(zb_uint8_t buf_param)
zb_zgpd_start_decommissioning(zb_uint8_t buf_param)

In order to set ZGPD operating channel, user can call
ZB_TRANSCEIVER_SET_CHANNEL()

Commissioning status should be retrieved from ZGPS device.

If ZGPD supports bidirectional commissioning, then user is notified about
commissioning completion via zgpd_commissioning_complete() callback.

Security
========

Security entities:
1. Security level (4 levels)
2. Security key
2. Security key type (6 types)

* Security-related fields in GPDF *

1. Security level         : 0/2 (bits)
2. Security key           : 0/1
3. Security frame counter : 0/32
4. MIC                    : 0/16/32

Security level and security key are sub-fields of Extended NWK Frame control
field, so they can be omitted in ZGPD TX packet if Extended NWK Frame control
field is not present. In this case Security level is assumed as 0b00 at the
receiving side.

Security Key field means security key type: individual, shared or no key.

Security frame counter field has 32-bit length if security level equals 0b10
or 0b11.
If security level is 0b01, then security frame counter field is not present,
but its 1 LSB is stored in MAC seq number field. Receiving side should restore
security frame counter to its full 32-bit size. Reconstruction is based on
last stored in sink/proxy table ZGPD security frame counter value. Restored
frame counter has 3 MSBs from sink/proxy table and 1 LSB from incoming frame.
If "roll over" of MAC seq number field value is detected at receiving side,
then 3 MSBs security frame counter value stored in sink/proxy table is
incremented by 1. Also, there is special parameter in ZGP infrastructure
devices zgppSecurityWindow. This parameter defines maximum value that can be
added to 3 MSBs in order to successfully pass security processing of incoming
GPDF.

MIC has 16-bit size if security level is 0b01 and 32-bit size if security
level either 0b10 or 0b11. If MIC has 16-bit size, then it contains 2 LSBs of
the 32-bit MIC.

If security level is 0b11, then GPDF payload is encrypted.

When ZGPS sends response to ZGPD it uses the same security frame counter value
as was in incoming frame that has triggered response.

* Security and commissioning *

ZGPS are responsible for selecting security level during commissioning.

If the ZGPD is Rx-capable, it may request security key in commissioning
command and receive it via ZGPD Commissioning Reply command sent by ZGPS.

If ZGPD can send commissioning command, then it can provide predefined
security key to ZGPS. Optionally, this key can be secured with default Trust
Center Link key (TC-LK).

If ZGPD makes commissioning via Auto-commissioning
field of GPDF, then I suppose that security level on ZGPD should be 0x00.

* AES nonce *

Fields:
Source address   : 64 (bits)
Frame counter    : 32
Security control : 1

Source address field is ZGPD address (SrcId or IEEE address)
Security control has fixed value.

Security implementation notes:
Always protect key during commissioning with TC-LK.

zb_ccm_encrypt_n_auth and zb_ccm_decrypt_n_auth API from stack seems to make
both authentication and encryption. What if I need only authentication (MIC)?
Seems that function auth_trans shouldn't be static for this purpose.
