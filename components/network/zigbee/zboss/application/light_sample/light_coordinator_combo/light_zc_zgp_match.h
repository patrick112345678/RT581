/* ZBOSS Zigbee software protocol stack
 *
 * Copyright (c) 2012-2020 DSR Corporation, Denver CO, USA.
 * www.dsr-zboss.com
 * www.dsr-corporation.com
 * All rights reserved.
 *
 * This is unpublished proprietary source code of DSR Corporation
 * The copyright notice does not evidence any actual or intended
 * publication of such source code.
 *
 * ZBOSS is a registered trademark of Data Storage Research LLC d/b/a DSR
 * Corporation
 *
 * Commercial Usage
 * Licensees holding valid DSR Commercial licenses may use
 * this file in accordance with the DSR Commercial License
 * Agreement provided with the Software or, alternatively, in accordance
 * with the terms contained in a written agreement between you and
 * DSR.
 */
/* PURPOSE: Provides example of matching table declaration for ZGPS sink
*/

#ifndef MATCH_INFO_H
#define MATCH_INFO_H 1

#include "zboss_api.h"


/* Copy-paste from LCGW. Sure overkill. */

enum zb_zcl_clusters_idx_e
{
  ZB_ZCL_CLUSTER_IDX_POWER_CONFIG = 0,
  ZB_ZCL_CLUSTER_IDX_IAS_ZONE,
  ZB_ZCL_CLUSTER_IDX_GRPW_FREQ_AGILITY, /* GreenPeak-specific */
  ZB_ZCL_CLUSTER_IDX_TEMP_MEASUREMENT,
  ZB_ZCL_CLUSTER_IDX_REL_HUMIDITY_MEASUREMENT,
  ZB_ZCL_CLUSTER_IDX_OCCUPANCY_SENSING,
  ZB_ZCL_CLUSTER_IDX_ON_OFF,
  ZB_ZCL_CLUSTER_IDX_SCENES,
  ZB_ZCL_CLUSTER_IDX_METERING,
  ZB_ZCL_CLUSTER_IDX_BASIC,

  /*--------------*/
  ZB_ZCL_CLUSTER_IDX_UNDEFINED = 0xff
};

static const ZB_CODE zgps_dev_cluster_rec_t g_dev_cluster_tbl[] =
{
  {
    ZB_ZCL_CLUSTER_ID_POWER_CONFIG,
    ZB_ZCL_CLUSTER_CLIENT_ROLE,
    {ZB_GPDF_CMD_ATTR_REPORT, 0, 0, 0},
  },
  {
    ZB_ZCL_CLUSTER_ID_IAS_ZONE,
    ZB_ZCL_CLUSTER_CLIENT_ROLE,
    {ZB_GPDF_CMD_ATTR_REPORT, 0, 0, 0},
  },
  {
    ZB_ZCL_CLUSTER_ID_GRPW_FREQ_AGILITY,
    ZB_ZCL_CLUSTER_CLIENT_ROLE,
    {ZB_GPDF_CMD_REQUEST_ATTRIBUTES, 0, 0, 0},
  },
  {
    ZB_ZCL_CLUSTER_ID_TEMP_MEASUREMENT,
    ZB_ZCL_CLUSTER_CLIENT_ROLE,
    {ZB_GPDF_CMD_ATTR_REPORT, 0, 0, 0},
  },
  {
    ZB_ZCL_CLUSTER_ID_REL_HUMIDITY_MEASUREMENT,
    ZB_ZCL_CLUSTER_CLIENT_ROLE,
    {ZB_GPDF_CMD_ATTR_REPORT, 0, 0, 0},
  },
  {
    ZB_ZCL_CLUSTER_ID_OCCUPANCY_SENSING,
    ZB_ZCL_CLUSTER_CLIENT_ROLE,
    {ZB_GPDF_CMD_MANUF_SPEC_ATTR_REPORT, 0, 0, 0},
  },
  {
    ZB_ZCL_CLUSTER_ID_ON_OFF,
    ZB_ZCL_CLUSTER_CLIENT_ROLE,
    {ZB_GPDF_CMD_OFF, ZB_GPDF_CMD_ON, ZB_GPDF_CMD_TOGGLE, 0},
  },
  {
    ZB_ZCL_CLUSTER_ID_SCENES,
    ZB_ZCL_CLUSTER_CLIENT_ROLE,
    {ZB_GPDF_CMD_RECALL_SCENE0, ZB_GPDF_CMD_RECALL_SCENE1,
     ZB_GPDF_CMD_RECALL_SCENE2, ZB_GPDF_CMD_RECALL_SCENE3},
  },
  {
    ZB_ZCL_CLUSTER_ID_METERING,
    ZB_ZCL_CLUSTER_CLIENT_ROLE,
    {ZB_GPDF_CMD_READ_ATTR_RESP, ZB_GPDF_CMD_ATTR_REPORT, 0, 0},
  },
  {
    ZB_ZCL_CLUSTER_ID_BASIC,
    ZB_ZCL_CLUSTER_CLIENT_ROLE,
    {ZB_GPDF_CMD_ATTR_REPORT, 0, 0, 0},
  },
};

/* [AS] ZB_ZCL_CLUSTER_IDX_BASIC, ZB_ZCL_CLUSTER_IDX_POWER_CONFIG, and ZB_ZCL_CLUSTER_IDX_GRPW_FREQ_AGILITY are common for all devices (except Legrand OnOff switch).
 * To minimaze number of config size and errors with forgetting to add, clusters can combined to a separate constant array.
 */
static const ZB_CODE zgps_dev_match_rec_t g_zgps_match_tbl[] =
{
  {
    {ZB_ZCL_CLUSTER_IDX_BASIC, ZB_ZCL_CLUSTER_IDX_POWER_CONFIG, ZB_ZCL_CLUSTER_IDX_GRPW_FREQ_AGILITY, ZB_ZCL_CLUSTER_IDX_TEMP_MEASUREMENT, ZB_ZCL_CLUSTER_IDX_UNDEFINED},
    ZB_ZGPD_MANUF_ID_UNSPEC,
    ZB_ZGP_TEMPERATURE_SENSOR_DEV_ID,
  },
  {
    {ZB_ZCL_CLUSTER_IDX_BASIC, ZB_ZCL_CLUSTER_IDX_POWER_CONFIG, ZB_ZCL_CLUSTER_IDX_TEMP_MEASUREMENT, ZB_ZCL_CLUSTER_IDX_REL_HUMIDITY_MEASUREMENT, ZB_ZCL_CLUSTER_IDX_UNDEFINED},
    ZB_ZGPD_MANUF_ID_UNSPEC,
    ZB_ZGP_ENVIRONMENT_SENSOR_DEV_ID,
  },
  {
    {ZB_ZCL_CLUSTER_IDX_BASIC, ZB_ZCL_CLUSTER_IDX_POWER_CONFIG, ZB_ZCL_CLUSTER_IDX_IAS_ZONE, ZB_ZCL_CLUSTER_IDX_GRPW_FREQ_AGILITY, ZB_ZCL_CLUSTER_IDX_UNDEFINED},
    ZB_ZGPD_DEF_MANUFACTURER_ID,
    ZB_ZGP_MS_DOOR_SENSOR_DEV_ID,
  },
  {
    {ZB_ZCL_CLUSTER_IDX_BASIC, ZB_ZCL_CLUSTER_IDX_POWER_CONFIG, ZB_ZCL_CLUSTER_IDX_IAS_ZONE, ZB_ZCL_CLUSTER_IDX_GRPW_FREQ_AGILITY, ZB_ZCL_CLUSTER_IDX_UNDEFINED},
    ZB_ZGPD_DEF_MANUFACTURER_ID,
    ZB_ZGP_MS_DOOR_WINDOW_SENSOR_DEV_ID,
  },
  {
    {ZB_ZCL_CLUSTER_IDX_BASIC, ZB_ZCL_CLUSTER_IDX_POWER_CONFIG, ZB_ZCL_CLUSTER_IDX_IAS_ZONE, ZB_ZCL_CLUSTER_IDX_GRPW_FREQ_AGILITY, ZB_ZCL_CLUSTER_IDX_UNDEFINED},
    ZB_ZGPD_DEF_MANUFACTURER_ID,
    ZB_ZGP_MS_LEAKAGE_SENSOR_DEV_ID,
  },
  {
    {ZB_ZCL_CLUSTER_IDX_BASIC, ZB_ZCL_CLUSTER_IDX_POWER_CONFIG, ZB_ZCL_CLUSTER_IDX_GRPW_FREQ_AGILITY, ZB_ZCL_CLUSTER_IDX_REL_HUMIDITY_MEASUREMENT, ZB_ZCL_CLUSTER_IDX_UNDEFINED},
    ZB_ZGPD_DEF_MANUFACTURER_ID,
    ZB_ZGP_MS_HUMIDITY_SENSOR_DEV_ID,
  },
  {
    {ZB_ZCL_CLUSTER_IDX_BASIC, ZB_ZCL_CLUSTER_IDX_POWER_CONFIG, ZB_ZCL_CLUSTER_IDX_IAS_ZONE, ZB_ZCL_CLUSTER_IDX_GRPW_FREQ_AGILITY, ZB_ZCL_CLUSTER_IDX_UNDEFINED},
    ZB_ZGPD_DEF_MANUFACTURER_ID,
    ZB_ZGP_MS_MOTION_SENSOR_DEV_ID,
  },
  {
    {ZB_ZCL_CLUSTER_IDX_BASIC, ZB_ZCL_CLUSTER_IDX_POWER_CONFIG, ZB_ZCL_CLUSTER_IDX_IAS_ZONE, ZB_ZCL_CLUSTER_IDX_GRPW_FREQ_AGILITY, ZB_ZCL_CLUSTER_IDX_UNDEFINED},
    ZB_ZGPD_DEF_MANUFACTURER_ID,
    ZB_ZGP_MS_MOVEMENT_SENSOR_DEV_ID,
  },
  {
    {ZB_ZCL_CLUSTER_IDX_BASIC, ZB_ZCL_CLUSTER_IDX_POWER_CONFIG, ZB_ZCL_CLUSTER_IDX_GRPW_FREQ_AGILITY, ZB_ZCL_CLUSTER_IDX_OCCUPANCY_SENSING, ZB_ZCL_CLUSTER_IDX_UNDEFINED},
    ZB_ZGPD_DEF_MANUFACTURER_ID,
    ZB_ZGP_MS_PARKING_SENSOR_DEV_ID,
  },
  {
    {ZB_ZCL_CLUSTER_IDX_BASIC, ZB_ZCL_CLUSTER_IDX_POWER_CONFIG, ZB_ZCL_CLUSTER_IDX_ON_OFF, ZB_ZCL_CLUSTER_IDX_METERING, ZB_ZCL_CLUSTER_IDX_GRPW_FREQ_AGILITY},
    ZB_ZGPD_DEF_MANUFACTURER_ID,
    ZB_ZGP_MS_SMART_PLUG_DEV_ID,
  },
  {
    {ZB_ZCL_CLUSTER_IDX_ON_OFF, ZB_ZCL_CLUSTER_IDX_SCENES, ZB_ZCL_CLUSTER_IDX_UNDEFINED, ZB_ZCL_CLUSTER_IDX_UNDEFINED, ZB_ZCL_CLUSTER_IDX_UNDEFINED},
    ZB_ZGPD_MANUF_ID_UNSPEC,
    ZB_ZGP_ON_OFF_SWITCH_DEV_ID,
  },
#ifdef GW_GP_PANIC_BUTTON_SUPPORT
  {
    {ZB_ZCL_CLUSTER_IDX_BASIC, ZB_ZCL_CLUSTER_IDX_POWER_CONFIG, ZB_ZCL_CLUSTER_IDX_IAS_ZONE, ZB_ZCL_CLUSTER_IDX_GRPW_FREQ_AGILITY, ZB_ZCL_CLUSTER_IDX_UNDEFINED},
    ZB_ZGPD_DEF_MANUFACTURER_ID,
    ZB_ZGP_MS_KEY_FOB_DEV_ID,
  },
#endif
};

static const ZB_CODE zgp_to_zb_cmd_mapping_t g_cmd_mapping[] =
{
  {ZB_GPDF_CMD_ATTR_REPORT, ZB_ZCL_CMD_REPORT_ATTRIB},
  {ZB_GPDF_CMD_MANUF_SPEC_ATTR_REPORT, ZB_ZCL_CMD_REPORT_ATTRIB},
  {ZB_GPDF_CMD_REQUEST_ATTRIBUTES, ZB_ZCL_CMD_READ_ATTRIB},
  {ZB_GPDF_CMD_READ_ATTR_RESP, ZB_ZCL_CMD_READ_ATTRIB_RESP},
  {ZB_GPDF_CMD_ON, ZB_ZCL_CMD_ON_OFF_ON_ID},
  {ZB_GPDF_CMD_OFF, ZB_ZCL_CMD_ON_OFF_OFF_ID},
  {ZB_GPDF_CMD_TOGGLE, ZB_ZCL_CMD_ON_OFF_TOGGLE_ID},
  {ZB_GPDF_CMD_RECALL_SCENE0, ZB_ZCL_CMD_SCENES_RECALL_SCENE},
  {ZB_GPDF_CMD_RECALL_SCENE1, ZB_ZCL_CMD_SCENES_RECALL_SCENE},
  {ZB_GPDF_CMD_RECALL_SCENE2, ZB_ZCL_CMD_SCENES_RECALL_SCENE},
  {ZB_GPDF_CMD_RECALL_SCENE3, ZB_ZCL_CMD_SCENES_RECALL_SCENE},
  {ZB_GPDF_CMD_RECALL_SCENE4, ZB_ZCL_CMD_SCENES_RECALL_SCENE},
  {ZB_GPDF_CMD_RECALL_SCENE5, ZB_ZCL_CMD_SCENES_RECALL_SCENE},
  {ZB_GPDF_CMD_RECALL_SCENE6, ZB_ZCL_CMD_SCENES_RECALL_SCENE},
  {ZB_GPDF_CMD_RECALL_SCENE7, ZB_ZCL_CMD_SCENES_RECALL_SCENE},
};


static const ZB_CODE zb_zgps_match_info_t g_zgps_match_info =
{
  ZB_ARRAY_SIZE(g_zgps_match_tbl),
  g_zgps_match_tbl,
  ZB_ARRAY_SIZE(g_cmd_mapping),
  g_cmd_mapping,
  ZB_ARRAY_SIZE(g_dev_cluster_tbl),
  g_dev_cluster_tbl,
};


#endif //MATCH_INFO_H
