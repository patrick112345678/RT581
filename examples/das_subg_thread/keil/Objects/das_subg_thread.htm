<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\das_subg_thread.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\das_subg_thread.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Mon Mar 18 16:38:37 2024
<BR><P>
<H3>Maximum Stack Usage =       3748 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
app_main_entry &rArr; app_main &rArr; app_task &rArr; __uart_task &rArr; __uart2_data_parse &rArr; udf_Meter_received_task &rArr; udf_Meter_Process &rArr; Set_TOU_C2 &rArr; udf_Set_Transmit &rArr; udf_AES_GCM_Encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[8]">BusFault_Handler</a>
 <LI><a href="#[1c2]">RfMcu_AhbIsrHandler</a>
 <LI><a href="#[a3e]">RfMcu_CmdQueueSend</a>
 <LI><a href="#[1c5]">RfMcu_CmdQueueSendAhb</a>
 <LI><a href="#[1d6]">RfMcu_DmaBusyCheck</a>
 <LI><a href="#[1c7]">RfMcu_DmaInit</a>
 <LI><a href="#[98d]">RfMcu_EvtQueueRead</a>
 <LI><a href="#[1cb]">RfMcu_EvtQueueReadAhb</a>
 <LI><a href="#[990]">RfMcu_HostCmdSet</a>
 <LI><a href="#[1de]">RfMcu_HostCmdSetAhb</a>
 <LI><a href="#[1c8]">RfMcu_HostCtrlAhb</a>
 <LI><a href="#[1cd]">RfMcu_HostWakeUpMcu</a>
 <LI><a href="#[1ce]">RfMcu_HostWakeUpMcuAhb</a>
 <LI><a href="#[1cf]">RfMcu_ImageLoad</a>
 <LI><a href="#[98a]">RfMcu_InterruptClear</a>
 <LI><a href="#[bb5]">RfMcu_InterruptClearAhb</a>
 <LI><a href="#[1d3]">RfMcu_InterruptDisableAhb</a>
 <LI><a href="#[1d2]">RfMcu_InterruptDisableAll</a>
 <LI><a href="#[b71]">RfMcu_InterruptEnGet</a>
 <LI><a href="#[bb6]">RfMcu_InterruptEnGetAhb</a>
 <LI><a href="#[b72]">RfMcu_InterruptEnSet</a>
 <LI><a href="#[1ca]">RfMcu_InterruptEnSetAhb</a>
 <LI><a href="#[1d5]">RfMcu_InterruptEnableAhb</a>
 <LI><a href="#[1d4]">RfMcu_InterruptEnableAll</a>
 <LI><a href="#[1cc]">RfMcu_IoGetAhb</a>
 <LI><a href="#[1c6]">RfMcu_IoSetAhb</a>
 <LI><a href="#[98f]">RfMcu_McuStateRead</a>
 <LI><a href="#[1dd]">RfMcu_McuStateReadAhb</a>
 <LI><a href="#[a3b]">RfMcu_MemoryGet</a>
 <LI><a href="#[1d7]">RfMcu_MemoryGetAhb</a>
 <LI><a href="#[a3c]">RfMcu_MemorySet</a>
 <LI><a href="#[1d1]">RfMcu_MemorySetAhb</a>
 <LI><a href="#[1d0]">RfMcu_PmPageSelect</a>
 <LI><a href="#[1d8]">RfMcu_PowerStateCheck</a>
 <LI><a href="#[1d9]">RfMcu_PowerStateGetAhb</a>
 <LI><a href="#[98e]">RfMcu_RxQueueRead</a>
 <LI><a href="#[1da]">RfMcu_RxQueueReadAhb</a>
 <LI><a href="#[1db]">RfMcu_SysInit</a>
 <LI><a href="#[1dc]">RfMcu_SysInitNotify</a>
 <LI><a href="#[1c9]">RfMcu_SysRdySignalWaitAhb</a>
 <LI><a href="#[1df]">RfMcu_TxQueueSendAhb</a>
 <LI><a href="#[1e0]">RfMcu_TxQueueSendById</a>
 <LI><a href="#[9]">UsageFault_Handler</a>
 <LI><a href="#[22]">commsubsystem_handler</a>
 <LI><a href="#[9d0]">crc32checksum</a>
 <LI><a href="#[992]">lmac15p4_TxDoneEvent</a>
 <LI><a href="#[a41]">lmac15p4_address_filter_set</a>
 <LI><a href="#[a42]">lmac15p4_auto_ack_set</a>
 <LI><a href="#[a43]">lmac15p4_auto_state_set</a>
 <LI><a href="#[b37]">lmac15p4_cb_set</a>
 <LI><a href="#[a44]">lmac15p4_channel_set</a>
 <LI><a href="#[9b3]">lmac15p4_init</a>
 <LI><a href="#[a46]">lmac15p4_key_set</a>
 <LI><a href="#[a47]">lmac15p4_mac_pib_set</a>
 <LI><a href="#[a48]">lmac15p4_phy_pib_set</a>
 <LI><a href="#[1f5]">lmac15p4_read_ack</a>
 <LI><a href="#[a49]">lmac15p4_read_rssi</a>
 <LI><a href="#[a4a]">lmac15p4_src_match_ctrl</a>
 <LI><a href="#[a4b]">lmac15p4_src_match_extended_entry</a>
 <LI><a href="#[a4c]">lmac15p4_src_match_short_entry</a>
 <LI><a href="#[a4d]">lmac15p4_tx_data_send</a>
 <LI><a href="#[d5]">otPlatAlarmMilliGetNow</a>
 <LI><a href="#[d3]">otPlatAlarmMilliStartAt</a>
 <LI><a href="#[d4]">otPlatAlarmMilliStop</a>
 <LI><a href="#[1fc]">otPlatAssertFail</a>
 <LI><a href="#[2]">otPlatCAlloc</a>
 <LI><a href="#[1fd]">otPlatEntropyGet</a>
 <LI><a href="#[3]">otPlatFree</a>
 <LI><a href="#[860]">otPlatLog</a>
 <LI><a href="#[4b1]">otPlatRadioAddSrcMatchExtEntry</a>
 <LI><a href="#[4b3]">otPlatRadioAddSrcMatchShortEntry</a>
 <LI><a href="#[4bb]">otPlatRadioClearSrcMatchExtEntries</a>
 <LI><a href="#[4b5]">otPlatRadioClearSrcMatchExtEntry</a>
 <LI><a href="#[4ba]">otPlatRadioClearSrcMatchShortEntries</a>
 <LI><a href="#[4b6]">otPlatRadioClearSrcMatchShortEntry</a>
 <LI><a href="#[6e0]">otPlatRadioEnable</a>
 <LI><a href="#[4b8]">otPlatRadioEnableSrcMatch</a>
 <LI><a href="#[6c6]">otPlatRadioEnergyScan</a>
 <LI><a href="#[40e]">otPlatRadioGetBusSpeed</a>
 <LI><a href="#[6e3]">otPlatRadioGetCaps</a>
 <LI><a href="#[51c]">otPlatRadioGetCcaEnergyDetectThreshold</a>
 <LI><a href="#[78b]">otPlatRadioGetCslAccuracy</a>
 <LI><a href="#[78c]">otPlatRadioGetCslUncertainty</a>
 <LI><a href="#[5a0]">otPlatRadioGetFemLnaGain</a>
 <LI><a href="#[6f1]">otPlatRadioGetIeeeEui64</a>
 <LI><a href="#[6d1]">otPlatRadioGetNow</a>
 <LI><a href="#[538]">otPlatRadioGetPromiscuous</a>
 <LI><a href="#[971]">otPlatRadioGetReceiveSensitivity</a>
 <LI><a href="#[6c8]">otPlatRadioGetRssi</a>
 <LI><a href="#[6e4]">otPlatRadioGetTransmitBuffer</a>
 <LI><a href="#[578]">otPlatRadioGetTransmitPower</a>
 <LI><a href="#[6c4]">otPlatRadioReceive</a>
 <LI><a href="#[51b]">otPlatRadioSetCcaEnergyDetectThreshold</a>
 <LI><a href="#[828]">otPlatRadioSetExtendedAddress</a>
 <LI><a href="#[59f]">otPlatRadioSetFemLnaGain</a>
 <LI><a href="#[6cf]">otPlatRadioSetMacFrameCounter</a>
 <LI><a href="#[6e2]">otPlatRadioSetMacKey</a>
 <LI><a href="#[6e1]">otPlatRadioSetPanId</a>
 <LI><a href="#[691]">otPlatRadioSetPromiscuous</a>
 <LI><a href="#[827]">otPlatRadioSetShortAddress</a>
 <LI><a href="#[577]">otPlatRadioSetTransmitPower</a>
 <LI><a href="#[6db]">otPlatRadioSleep</a>
 <LI><a href="#[829]">otPlatRadioTransmit</a>
 <LI><a href="#[91f]">otPlatReset</a>
 <LI><a href="#[937]">otPlatSettingsAdd</a>
 <LI><a href="#[93c]">otPlatSettingsDelete</a>
 <LI><a href="#[93a]">otPlatSettingsGet</a>
 <LI><a href="#[940]">otPlatSettingsInit</a>
 <LI><a href="#[93d]">otPlatSettingsSet</a>
 <LI><a href="#[941]">otPlatSettingsWipe</a>
 <LI><a href="#[b11]">otPlatTimeGet</a>
 <LI><a href="#[aef]">otPlatUartEnable</a>
 <LI><a href="#[1f9]">otPlatUartFlush</a>
 <LI><a href="#[1fe]">otPlatUartSend</a>
 <LI><a href="#[1f3]">otSysEventSignalPending</a>
 <LI><a href="#[b24]">otSysProcessDrivers</a>
 <LI><a href="#[915]">otTaskletsSignalPending</a>
 <LI><a href="#[b33]">ot_alarmInit</a>
 <LI><a href="#[b25]">ot_alarmTask</a>
 <LI><a href="#[b34]">ot_entropy_init</a>
 <LI><a href="#[b36]">ot_radioInit</a>
 <LI><a href="#[b27]">ot_radioTask</a>
 <LI><a href="#[b0e]">ot_radio_extend_addr_ctrl</a>
 <LI><a href="#[b0f]">ot_radio_short_addr_ctrl</a>
 <LI><a href="#[b26]">ot_uartTask</a>
 <LI><a href="#[b40]">ota_bitmap_get_bit</a>
 <LI><a href="#[b42]">ota_bitmap_get_remain</a>
 <LI><a href="#[b43]">ota_bitmap_init</a>
 <LI><a href="#[b45]">ota_bootinfo_reset</a>
 <LI><a href="#[b46]">ota_bootloader_info_check</a>
 <LI><a href="#[b4a]">ota_coap_request</a>
 <LI><a href="#[c1]">ota_event_handler</a>
 <LI><a href="#[b4b]">ota_init</a>
 <LI><a href="#[b28]">otrAppProcess</a>
 <LI><a href="#[9be]">otrGetInstance</a>
 <LI><a href="#[9b5]">otrStart</a>
 <LI><a href="#[b6d]">rf_common_cal_init</a>
 <LI><a href="#[b70]">rf_common_cal_set</a>
 <LI><a href="#[b73]">rf_common_event_get</a>
 <LI><a href="#[a35]">rf_common_init_by_fw</a>
 <LI><a href="#[b75]">rf_common_pmu_operation_mode</a>
 <LI><a href="#[b76]">rf_common_pta_default_set</a>
 <LI><a href="#[b78]">rf_common_rssi_offset_set</a>
 <LI><a href="#[b77]">rf_common_tx_pwr_set</a>
 <LI><a href="#[b74]">rf_common_update_band_info</a>
 <LI><a href="#[b3e]">subg_ctrl_filter_set</a>
 <LI><a href="#[b12]">subg_ctrl_frequency_set</a>
 <LI><a href="#[b39]">subg_ctrl_idle_set</a>
 <LI><a href="#[b3b]">subg_ctrl_mac_set</a>
 <LI><a href="#[b3a]">subg_ctrl_modem_config_set</a>
 <LI><a href="#[b3c]">subg_ctrl_preamble_set</a>
 <LI><a href="#[b3d]">subg_ctrl_sfd_set</a>
 <LI><a href="#[b38]">subg_ctrl_sleep_set</a>
 <LI><a href="#[1f0]">utilsSoftSrcMatchExtFindEntry</a>
 <LI><a href="#[b14]">utilsSoftSrcMatchSetPanId</a>
 <LI><a href="#[1f4]">utilsSoftSrcMatchShortFindEntry</a>
 <LI><a href="#[b6]">[Anonymous Symbol]</a>
 <LI><a href="#[c7]">[Anonymous Symbol]</a>
 <LI><a href="#[169]">[Anonymous Symbol]</a>
 <LI><a href="#[b44]">[Anonymous Symbol]</a>
 <LI><a href="#[b41]">[Anonymous Symbol]</a>
 <LI><a href="#[b47]">[Anonymous Symbol]</a>
 <LI><a href="#[ba]">[Anonymous Symbol]</a>
 <LI><a href="#[bb]">[Anonymous Symbol]</a>
 <LI><a href="#[be]">[Anonymous Symbol]</a>
 <LI><a href="#[bc]">[Anonymous Symbol]</a>
 <LI><a href="#[bd]">[Anonymous Symbol]</a>
 <LI><a href="#[b49]">[Anonymous Symbol]</a>
 <LI><a href="#[b48]">[Anonymous Symbol]</a>
 <LI><a href="#[c0]">[Anonymous Symbol]</a>
 <LI><a href="#[bf]">[Anonymous Symbol]</a>
 <LI><a href="#[b7]">[Anonymous Symbol]</a>
 <LI><a href="#[b8]">[Anonymous Symbol]</a>
 <LI><a href="#[b1a]">[Anonymous Symbol]</a>
 <LI><a href="#[16a]">[Anonymous Symbol]</a>
 <LI><a href="#[a7]">[Anonymous Symbol]</a>
 <LI><a href="#[a8]">[Anonymous Symbol]</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[1c]">I2s_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">I2s_Handler</a><BR>
 <LI><a href="#[273]">ot::MlrManager::SendMulticastListenerRegistration()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[271]">ot::MlrManager::ScheduleSend(unsigned short)</a><BR>
 <LI><a href="#[68e]">ot::Mac::Mac::EnergyScanDone(signed char)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[68f]">ot::Mac::Mac::PerformEnergyScan()</a><BR>
 <LI><a href="#[68f]">ot::Mac::Mac::PerformEnergyScan()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[683]">ot::Mac::Mac::PerformNextOperation()</a><BR>
 <LI><a href="#[682]">ot::Mac::Mac::PerformActiveScan()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[683]">ot::Mac::Mac::PerformNextOperation()</a><BR>
 <LI><a href="#[685]">ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[68a]">ot::Mac::Links::Send()</a><BR>
 <LI><a href="#[873]">ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b9]">ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&)</a><BR>
 <LI><a href="#[9c4]">mbedtls_cipher_update</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a69]">mbedtls_gcm_update</a><BR>
 <LI><a href="#[638]">ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37e]">ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool)</a><BR>
 <LI><a href="#[1b7]">fan_number</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b7]">fan_number</a><BR>
 <LI><a href="#[b1d]">otPlatUartSendDone</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f8]">Send()</a><BR>
 <LI><a href="#[37b]">ot::Lowpan::Lowpan::Decompress(ot::Message&, ot::Mac::Addresses const&, ot::FrameData&, unsigned short)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37b]">ot::Lowpan::Lowpan::Decompress(ot::Message&, ot::Mac::Addresses const&, ot::FrameData&, unsigned short)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[a7]">[Anonymous Symbol]</a> from lmac15p4_1.o(.text.__rxdone_cb) referenced 4 times from lmac15p4_1.o(.text.lmac15p4_init)
 <LI><a href="#[b6]">[Anonymous Symbol]</a> from ot_alarm.o(.text.otPlatALarm_msTimerCallback) referenced 2 times from ot_alarm.o(.text.ot_alarmInit)
 <LI><a href="#[b7]">[Anonymous Symbol]</a> from ot_radio.o(.text._RxDoneEvent) referenced 4 times from ot_radio.o(.text.ot_radioInit)
 <LI><a href="#[ba]">[Anonymous Symbol]</a> from ot_ota_handler.o(.text.ota_coap_ack_process) referenced 2 times from ot_ota_handler.o(.text.ota_coap_request)
 <LI><a href="#[bb]">[Anonymous Symbol]</a> from ot_ota_handler.o(.text.ota_coap_data_proccess) referenced 12 times from ot_ota_handler.o(.text.ota_init)
 <LI><a href="#[c7]">[Anonymous Symbol]</a> from ot_freertos.o(.text.otrStackTask) referenced 2 times from ot_freertos.o(.text.otrStart)
 <LI><a href="#[169]">[Anonymous Symbol]</a> from ot_ota_handler.o(.text._cli_cmd_ota) referenced 2 times from ot_ota_handler.o(cli_cmd_pool)
 <LI><a href="#[8]">BusFault_Handler</a> from rf_mcu.o(.text.BusFault_Handler) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[2e]">Comp_Handler</a> from comparator.o(.text.Comp_Handler) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_cm3_mcu.o(.text) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[38]">Delay_ms_32MHz</a> from sysctrl.o(.text.Delay_ms_32MHz) referenced from sysctrl.o(.text.Delay_Init)
 <LI><a href="#[39]">Delay_ms_48MHz</a> from sysctrl.o(.text.Delay_ms_48MHz) referenced from sysctrl.o(.text.Delay_Init)
 <LI><a href="#[0]">Delay_ms_64MHz</a> from sysctrl.o(.text.Delay_ms_64MHz) referenced 2 times from sysctrl.o(.data.Delay_ms)
 <LI><a href="#[0]">Delay_ms_64MHz</a> from sysctrl.o(.text.Delay_ms_64MHz) referenced from sysctrl.o(.text.Delay_Init)
 <LI><a href="#[36]">Delay_us_32MHz</a> from sysctrl.o(.text.Delay_us_32MHz) referenced from sysctrl.o(.text.Delay_Init)
 <LI><a href="#[37]">Delay_us_48MHz</a> from sysctrl.o(.text.Delay_us_48MHz) referenced from sysctrl.o(.text.Delay_Init)
 <LI><a href="#[1]">Delay_us_64MHz</a> from sysctrl.o(.text.Delay_us_64MHz) referenced 2 times from sysctrl.o(.data.Delay_us)
 <LI><a href="#[1]">Delay_us_64MHz</a> from sysctrl.o(.text.Delay_us_64MHz) referenced from sysctrl.o(.text.Delay_Init)
 <LI><a href="#[6]">HardFault_Handler</a> from uart_stdio.o(.text.HardFault_Handler) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[1c]">I2s_Handler</a> from startup_cm3_mcu.o(.text) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_cm3_mcu.o(.text) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup_cm3_mcu.o(.text) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[23]">Pwm0_Handler</a> from startup_cm3_mcu.o(.text) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[24]">Pwm1_Handler</a> from startup_cm3_mcu.o(.text) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[25]">Pwm2_Handler</a> from startup_cm3_mcu.o(.text) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[26]">Pwm3_Handler</a> from startup_cm3_mcu.o(.text) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[27]">Pwm4_Handler</a> from startup_cm3_mcu.o(.text) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_cm3_mcu.o(.text) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[28]">Sadc_Handler</a> from startup_cm3_mcu.o(.text) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[2c]">Sw_Handler</a> from startup_cm3_mcu.o(.text) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[30]">SystemInit</a> from system_cm3_mcu_1.o(.text.SystemInit) referenced from startup_cm3_mcu.o(.text)
 <LI><a href="#[f]">Timer0_Handler</a> from timer_1.o(.text.Timer0_Handler) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[10]">Timer1_Handler</a> from timer_1.o(.text.Timer1_Handler) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[2a]">Timer2_Handler</a> from timer_1.o(.text.Timer2_Handler) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[1d]">Timer3_Handler</a> from timer_1.o(.text.Timer3_Handler) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[1e]">Timer4_Handler</a> from timer_1.o(.text.Timer4_Handler) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from rf_mcu.o(.text.UsageFault_Handler) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[11]">Wdt_Handler</a> from wdt.o(.text.Wdt_Handler) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[b3]">CliUartOutput(void*, char const*, std::__va_list)</a> from cli_uart.o(.text._ZL13CliUartOutputPvPKcSt9__va_list) referenced 2 times from cli_uart.o(.text.otAppCliInit)
 <LI><a href="#[b4]">handleMbedtlsEntropyPoll(void*, unsigned char*, unsigned int, unsigned int*)</a> from crypto_platform.o(.text._ZL24handleMbedtlsEntropyPollPvPhjPj) referenced 2 times from crypto_platform.o(.text.otPlatCryptoRandomInit)
 <LI><a href="#[3a]">ot::DuaManager::HandleDuaResponse(void*, otMessage*, otMessageInfo const*, otError)</a> from dua_manager.o(.text._ZN2ot10DuaManager17HandleDuaResponseEPvP9otMessagePK13otMessageInfo7otError) referenced 2 times from dua_manager.o(.text._ZN2ot10DuaManager23PerformNextRegistrationEv)
 <LI><a href="#[3a]">ot::DuaManager::HandleDuaResponse(void*, otMessage*, otMessageInfo const*, otError)</a> from dua_manager.o(.text._ZN2ot10DuaManager17HandleDuaResponseEPvP9otMessagePK13otMessageInfo7otError) referenced 2 times from dua_manager.o(.text._ZN2ot10DuaManager24HandleDomainPrefixUpdateENS_14BackboneRouter6Leader17DomainPrefixStateE)
 <LI><a href="#[3a]">ot::DuaManager::HandleDuaResponse(void*, otMessage*, otMessageInfo const*, otError)</a> from dua_manager.o(.text._ZN2ot10DuaManager17HandleDuaResponseEPvP9otMessagePK13otMessageInfo7otError) referenced 2 times from dua_manager.o(.text._ZN2ot10DuaManager31UpdateChildDomainUnicastAddressERKNS_5ChildENS_3Mle13ChildDuaStateE)
 <LI><a href="#[3d]">ot::MlrManager::HandleMulticastListenerRegistrationResponse(void*, otMessage*, otMessageInfo const*, otError)</a> from mlr_manager.o(.text._ZN2ot10MlrManager43HandleMulticastListenerRegistrationResponseEPvP9otMessagePK13otMessageInfo7otError) referenced 2 times from mlr_manager.o(.text._ZN2ot10MlrManager33SendMulticastListenerRegistrationEv)
 <LI><a href="#[40]">ot::NetworkData::Notifier::HandleCoapResponse(void*, otMessage*, otMessageInfo const*, otError)</a> from network_data_notifier.o(.text._ZN2ot11NetworkData8Notifier18HandleCoapResponseEPvP9otMessagePK13otMessageInfo7otError) referenced 2 times from network_data_notifier.o(.text._ZN2ot11NetworkData8Notifier26SendServerDataNotificationEtPKNS0_11NetworkDataE)
 <LI><a href="#[44]">int ot::BinarySearch::Compare&lang;char const*, ot::UriList::Entry&rang;(void const*, void const*)</a> from uri_paths.o(.text._ZN2ot12BinarySearch7CompareIPKcNS_7UriList5EntryEEEiPKvS7_) referenced 2 times from uri_paths.o(.text._ZN2ot11UriFromPathEPKc)
 <LI><a href="#[51]">int ot::BinarySearch::Compare&lang;char*, ot::Cli::Output::CommandEntry&lang;ot::Cli::UdpExample&rang; &rang;(void const*, void const*)</a> from cli_udp.o(.text._ZN2ot12BinarySearch7CompareIPcNS_3Cli6Output12CommandEntryINS3_10UdpExampleEEEEEiPKvS9_) referenced 2 times from cli_udp.o(.text._ZN2ot3Cli10UdpExample7ProcessEPNS_5Utils13CmdLineParser3ArgE)
 <LI><a href="#[53]">int ot::BinarySearch::Compare&lang;char*, ot::Cli::Output::CommandEntry&lang;ot::Cli::Interpreter&rang; &rang;(void const*, void const*)</a> from cli.o(.text._ZN2ot12BinarySearch7CompareIPcNS_3Cli6Output12CommandEntryINS3_11InterpreterEEEEEiPKvS9_) referenced 2 times from cli.o(.text._ZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgE)
 <LI><a href="#[5d]">int ot::BinarySearch::Compare&lang;char*, ot::Cli::Output::CommandEntry&lang;ot::Cli::NetworkData&rang; &rang;(void const*, void const*)</a> from cli_network_data.o(.text._ZN2ot12BinarySearch7CompareIPcNS_3Cli6Output12CommandEntryINS3_11NetworkDataEEEEEiPKvS9_) referenced 2 times from cli_network_data.o(.text._ZN2ot3Cli11NetworkData7ProcessEPNS_5Utils13CmdLineParser3ArgE)
 <LI><a href="#[5f]">int ot::BinarySearch::Compare&lang;char*, ot::Cli::Output::CommandEntry&lang;ot::Cli::Coap&rang; &rang;(void const*, void const*)</a> from cli_coap.o(.text._ZN2ot12BinarySearch7CompareIPcNS_3Cli6Output12CommandEntryINS3_4CoapEEEEEiPKvS9_) referenced 2 times from cli_coap.o(.text._ZN2ot3Cli4Coap7ProcessEPNS_5Utils13CmdLineParser3ArgE)
 <LI><a href="#[61]">int ot::BinarySearch::Compare&lang;char*, ot::Cli::Output::CommandEntry&lang;ot::Cli::Joiner&rang; &rang;(void const*, void const*)</a> from cli_joiner.o(.text._ZN2ot12BinarySearch7CompareIPcNS_3Cli6Output12CommandEntryINS3_6JoinerEEEEEiPKvS9_) referenced 2 times from cli_joiner.o(.text._ZN2ot3Cli6Joiner7ProcessEPNS_5Utils13CmdLineParser3ArgE)
 <LI><a href="#[63]">int ot::BinarySearch::Compare&lang;char*, ot::Cli::Output::CommandEntry&lang;ot::Cli::Dataset&rang; &rang;(void const*, void const*)</a> from cli_dataset.o(.text._ZN2ot12BinarySearch7CompareIPcNS_3Cli6Output12CommandEntryINS3_7DatasetEEEEEiPKvS9_) referenced 2 times from cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgE)
 <LI><a href="#[64]">int ot::BinarySearch::Compare&lang;unsigned short, ot::Stringify::Entry&rang;(void const*, void const*)</a> from coap_message.o(.text._ZN2ot12BinarySearch7CompareItNS_9Stringify5EntryEEEiPKvS5_) referenced 2 times from ip6.o(.text._ZN2ot3Ip63Ip615IpProtoToStringEh)
 <LI><a href="#[3c]">ot::TimerMilliIn&lang;ot::KeyManager, &(ot::KeyManager::HandleKeyRotationTimer())&rang;::HandleTimer(ot::Timer&)</a> from key_manager.o(.text._ZN2ot12TimerMilliInINS_10KeyManagerEXadL_ZNS1_22HandleKeyRotationTimerEvEEE11HandleTimerERNS_5TimerE) referenced 2 times from key_manager.o(.text._ZN2ot10KeyManagerC2ERNS_8InstanceE)
 <LI><a href="#[3e]">ot::TimerMilliIn&lang;ot::TimeTicker, &(ot::TimeTicker::HandleTimer())&rang;::HandleTimer(ot::Timer&)</a> from time_ticker.o(.text._ZN2ot12TimerMilliInINS_10TimeTickerEXadL_ZNS1_11HandleTimerEvEEE11HandleTimerERNS_5TimerE) referenced 2 times from time_ticker.o(.text._ZN2ot10TimeTickerC2ERNS_8InstanceE)
 <LI><a href="#[3f]">ot::TimerMilliIn&lang;ot::NetworkData::Leader, &(ot::NetworkData::Leader::HandleTimer())&rang;::HandleTimer(ot::Timer&)</a> from network_data_leader_ftd.o(.text._ZN2ot12TimerMilliInINS_11NetworkData6LeaderEXadL_ZNS2_11HandleTimerEvEEE11HandleTimerERNS_5TimerE) referenced 2 times from network_data_leader_ftd.o(.text._ZN2ot11NetworkData6LeaderC2ERNS_8InstanceE)
 <LI><a href="#[41]">ot::TimerMilliIn&lang;ot::NetworkData::Notifier, &(ot::NetworkData::Notifier::HandleTimer())&rang;::HandleTimer(ot::Timer&)</a> from network_data_notifier.o(.text._ZN2ot12TimerMilliInINS_11NetworkData8NotifierEXadL_ZNS2_11HandleTimerEvEEE11HandleTimerERNS_5TimerE) referenced 2 times from network_data_notifier.o(.text._ZN2ot11NetworkData8NotifierC2ERNS_8InstanceE)
 <LI><a href="#[47]">ot::TimerMilliIn&lang;ot::MeshForwarder, &(ot::MeshForwarder::HandleTxDelayTimer())&rang;::HandleTimer(ot::Timer&)</a> from mesh_forwarder.o(.text._ZN2ot12TimerMilliInINS_13MeshForwarderEXadL_ZNS1_18HandleTxDelayTimerEvEEE11HandleTimerERNS_5TimerE) referenced 2 times from mesh_forwarder.o(.text._ZN2ot13MeshForwarderC2ERNS_8InstanceE)
 <LI><a href="#[49]">ot::TimerMilliIn&lang;ot::DataPollSender, &(ot::DataPollSender::HandlePollTimer())&rang;::HandleTimer(ot::Timer&)</a> from data_poll_sender.o(.text._ZN2ot12TimerMilliInINS_14DataPollSenderEXadL_ZNS1_15HandlePollTimerEvEEE11HandleTimerERNS_5TimerE) referenced 2 times from data_poll_sender.o(.text._ZN2ot14DataPollSenderC2ERNS_8InstanceE)
 <LI><a href="#[4c]">ot::TimerMilliIn&lang;ot::EnergyScanServer, &(ot::EnergyScanServer::HandleTimer())&rang;::HandleTimer(ot::Timer&)</a> from energy_scan_server.o(.text._ZN2ot12TimerMilliInINS_16EnergyScanServerEXadL_ZNS1_11HandleTimerEvEEE11HandleTimerERNS_5TimerE) referenced 2 times from energy_scan_server.o(.text._ZN2ot16EnergyScanServerC2ERNS_8InstanceE)
 <LI><a href="#[4d]">ot::TimerMilliIn&lang;ot::PanIdQueryServer, &(ot::PanIdQueryServer::HandleTimer())&rang;::HandleTimer(ot::Timer&)</a> from panid_query_server.o(.text._ZN2ot12TimerMilliInINS_16PanIdQueryServerEXadL_ZNS1_11HandleTimerEvEEE11HandleTimerERNS_5TimerE) referenced 2 times from panid_query_server.o(.text._ZN2ot16PanIdQueryServerC2ERNS_8InstanceE)
 <LI><a href="#[50]">ot::TimerMilliIn&lang;ot::SupervisionListener, &(ot::SupervisionListener::HandleTimer())&rang;::HandleTimer(ot::Timer&)</a> from child_supervision.o(.text._ZN2ot12TimerMilliInINS_19SupervisionListenerEXadL_ZNS1_11HandleTimerEvEEE11HandleTimerERNS_5TimerE) referenced 2 times from child_supervision.o(.text._ZN2ot19SupervisionListenerC2ERNS_8InstanceE)
 <LI><a href="#[66]">ot::TimerMilliIn&lang;ot::Ip6::Mpl, &(ot::Ip6::Mpl::HandleRetransmissionTimer())&rang;::HandleTimer(ot::Timer&)</a> from ip6_mpl.o(.text._ZN2ot12TimerMilliInINS_3Ip63MplEXadL_ZNS2_25HandleRetransmissionTimerEvEEE11HandleTimerERNS_5TimerE) referenced 2 times from ip6_mpl.o(.text._ZN2ot3Ip63MplC2ERNS_8InstanceE)
 <LI><a href="#[68]">ot::TimerMilliIn&lang;ot::Mac::Mac, &(ot::Mac::Mac::HandleTimer())&rang;::HandleTimer(ot::Timer&)</a> from mac.o(.text._ZN2ot12TimerMilliInINS_3Mac3MacEXadL_ZNS2_11HandleTimerEvEEE11HandleTimerERNS_5TimerE) referenced 2 times from mac.o(.text._ZN2ot3Mac3MacC2ERNS_8InstanceE)
 <LI><a href="#[69]">ot::TimerMilliIn&lang;ot::Mac::SubMac, &(ot::Mac::SubMac::HandleTimer())&rang;::HandleTimer(ot::Timer&)</a> from sub_mac.o(.text._ZN2ot12TimerMilliInINS_3Mac6SubMacEXadL_ZNS2_11HandleTimerEvEEE11HandleTimerERNS_5TimerE) referenced 2 times from sub_mac.o(.text._ZN2ot3Mac6SubMacC2ERNS_8InstanceE)
 <LI><a href="#[6b]">ot::TimerMilliIn&lang;ot::Mle::DiscoverScanner, &(ot::Mle::DiscoverScanner::HandleTimer())&rang;::HandleTimer(ot::Timer&)</a> from discover_scanner.o(.text._ZN2ot12TimerMilliInINS_3Mle15DiscoverScannerEXadL_ZNS2_11HandleTimerEvEEE11HandleTimerERNS_5TimerE) referenced 2 times from discover_scanner.o(.text._ZN2ot3Mle15DiscoverScannerC2ERNS_8InstanceE)
 <LI><a href="#[6d]">ot::TimerMilliIn&lang;ot::Mle::Mle, &(ot::Mle::Mle::HandleAttachTimer())&rang;::HandleTimer(ot::Timer&)</a> from mle.o(.text._ZN2ot12TimerMilliInINS_3Mle3MleEXadL_ZNS2_17HandleAttachTimerEvEEE11HandleTimerERNS_5TimerE) referenced 2 times from mle.o(.text._ZN2ot3Mle3MleC2ERNS_8InstanceE)
 <LI><a href="#[6e]">ot::TimerMilliIn&lang;ot::Mle::Mle, &(ot::Mle::Mle::HandleDelayedResponseTimer())&rang;::HandleTimer(ot::Timer&)</a> from mle.o(.text._ZN2ot12TimerMilliInINS_3Mle3MleEXadL_ZNS2_26HandleDelayedResponseTimerEvEEE11HandleTimerERNS_5TimerE) referenced 2 times from mle.o(.text._ZN2ot3Mle3MleC2ERNS_8InstanceE)
 <LI><a href="#[70]">ot::TimerMilliIn&lang;ot::Mle::Mle, &(ot::Mle::Mle::HandleDetachGracefullyTimer())&rang;::HandleTimer(ot::Timer&)</a> from mle.o(.text._ZN2ot12TimerMilliInINS_3Mle3MleEXadL_ZNS2_27HandleDetachGracefullyTimerEvEEE11HandleTimerERNS_5TimerE) referenced 2 times from mle.o(.text._ZN2ot3Mle3MleC2ERNS_8InstanceE)
 <LI><a href="#[6f]">ot::TimerMilliIn&lang;ot::Mle::Mle, &(ot::Mle::Mle::HandleMessageTransmissionTimer())&rang;::HandleTimer(ot::Timer&)</a> from mle.o(.text._ZN2ot12TimerMilliInINS_3Mle3MleEXadL_ZNS2_30HandleMessageTransmissionTimerEvEEE11HandleTimerERNS_5TimerE) referenced 2 times from mle.o(.text._ZN2ot3Mle3MleC2ERNS_8InstanceE)
 <LI><a href="#[7e]">ot::TimerMilliIn&lang;ot::Utils::PingSender, &(ot::Utils::PingSender::HandleTimer())&rang;::HandleTimer(ot::Timer&)</a> from ping_sender.o(.text._ZN2ot12TimerMilliInINS_5Utils10PingSenderEXadL_ZNS2_11HandleTimerEvEEE11HandleTimerERNS_5TimerE) referenced 2 times from ping_sender.o(.text._ZN2ot5Utils10PingSenderC2ERNS_8InstanceE)
 <LI><a href="#[84]">ot::TimerMilliIn&lang;ot::MeshCoP::JoinerRouter, &(ot::MeshCoP::JoinerRouter::HandleTimer())&rang;::HandleTimer(ot::Timer&)</a> from joiner_router.o(.text._ZN2ot12TimerMilliInINS_7MeshCoP12JoinerRouterEXadL_ZNS2_11HandleTimerEvEEE11HandleTimerERNS_5TimerE) referenced 2 times from joiner_router.o(.text._ZN2ot7MeshCoP12JoinerRouterC2ERNS_8InstanceE)
 <LI><a href="#[88]">ot::TimerMilliIn&lang;ot::MeshCoP::PendingDatasetManager, &(ot::MeshCoP::PendingDatasetManager::HandleDelayTimer())&rang;::HandleTimer(ot::Timer&)</a> from dataset_manager.o(.text._ZN2ot12TimerMilliInINS_7MeshCoP21PendingDatasetManagerEXadL_ZNS2_16HandleDelayTimerEvEEE11HandleTimerERNS_5TimerE) referenced 2 times from dataset_manager.o(.text._ZN2ot7MeshCoP21PendingDatasetManagerC2ERNS_8InstanceE)
 <LI><a href="#[95]">ot::TimerMilliIn&lang;ot::MeshCoP::Joiner, &(ot::MeshCoP::Joiner::HandleTimer())&rang;::HandleTimer(ot::Timer&)</a> from joiner.o(.text._ZN2ot12TimerMilliInINS_7MeshCoP6JoinerEXadL_ZNS2_11HandleTimerEvEEE11HandleTimerERNS_5TimerE) referenced 2 times from joiner.o(.text._ZN2ot7MeshCoP6JoinerC2ERNS_8InstanceE)
 <LI><a href="#[96]">ot::TimerMilliIn&lang;ot::MeshCoP::Leader, &(ot::MeshCoP::Leader::HandleTimer())&rang;::HandleTimer(ot::Timer&)</a> from meshcop_leader.o(.text._ZN2ot12TimerMilliInINS_7MeshCoP6LeaderEXadL_ZNS2_11HandleTimerEvEEE11HandleTimerERNS_5TimerE) referenced 2 times from meshcop_leader.o(.text._ZN2ot7MeshCoP6LeaderC2ERNS_8InstanceE)
 <LI><a href="#[46]">ot::TrickleTimer::HandleTimer(ot::Timer&)</a> from trickle_timer.o(.text._ZN2ot12TrickleTimer11HandleTimerERNS_5TimerE) referenced 2 times from trickle_timer.o(.text._ZN2ot12TrickleTimerC2ERNS_8InstanceERFvRS0_E)
 <LI><a href="#[4a]">ot::AddressResolver::HandleIcmpReceive(void*, otMessage*, otMessageInfo const*, otIcmp6Header const*)</a> from address_resolver.o(.text._ZN2ot15AddressResolver17HandleIcmpReceiveEPvP9otMessagePK13otMessageInfoPK13otIcmp6Header) referenced 2 times from address_resolver.o(.text._ZN2ot15AddressResolverC2ERNS_8InstanceE)
 <LI><a href="#[4b]">ot::EnergyScanServer::HandleScanResult(otEnergyScanResult*, void*)</a> from energy_scan_server.o(.text._ZN2ot16EnergyScanServer16HandleScanResultEP18otEnergyScanResultPv) referenced 2 times from energy_scan_server.o(.text._ZN2ot16EnergyScanServer11HandleTimerEv)
 <LI><a href="#[45]">ot::PanIdQueryServer::HandleScanResult(otActiveScanResult*, void*)</a> from panid_query_server.o(.text._ZN2ot16PanIdQueryServer16HandleScanResultEP18otActiveScanResultPv) referenced 2 times from panid_query_server.o(.text._ZN2ot12TimerMilliInINS_16PanIdQueryServerEXadL_ZNS1_11HandleTimerEvEEE11HandleTimerERNS_5TimerE)
 <LI><a href="#[4e]">ot::NetworkDiagnostic::Client::HandleGetResponse(void*, otMessage*, otMessageInfo const*, otError)</a> from network_diagnostic.o(.text._ZN2ot17NetworkDiagnostic6Client17HandleGetResponseEPvP9otMessagePK13otMessageInfo7otError) referenced 2 times from network_diagnostic.o(.text._ZN2ot17NetworkDiagnostic6Client17SendDiagnosticGetERKNS_3Ip67AddressEPKhhPFv7otErrorP9otMessagePK13otMessageInfoPvESE_)
 <LI><a href="#[4f]">ot::AnnounceBeginServer::HandleTimer(ot::Timer&)</a> from announce_begin_server.o(.text._ZN2ot19AnnounceBeginServer11HandleTimerERNS_5TimerE) referenced 2 times from announce_begin_server.o(.text._ZN2ot19AnnounceBeginServerC2ERNS_8InstanceE)
 <LI><a href="#[52]">ot::Cli::UdpExample::HandleUdpReceive(void*, otMessage*, otMessageInfo const*)</a> from cli_udp.o(.text._ZN2ot3Cli10UdpExample16HandleUdpReceiveEPvP9otMessagePK13otMessageInfo) referenced 2 times from cli_udp.o(.text._ZN2ot3Cli10UdpExample7ProcessILy1830547446EEE7otErrorPNS_5Utils13CmdLineParser3ArgE)
 <LI><a href="#[d9]">otError ot::Cli::UdpExample::Process&lang;12648424561679575046ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_udp.o(.text._ZN2ot3Cli10UdpExample7ProcessILy12648424561679575046EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_udp.o(.rodata._ZZN2ot3Cli10UdpExample7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[db]">otError ot::Cli::UdpExample::Process&lang;1665316120ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_udp.o(.text._ZN2ot3Cli10UdpExample7ProcessILy1665316120EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_udp.o(.rodata._ZZN2ot3Cli10UdpExample7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[d6]">otError ot::Cli::UdpExample::Process&lang;1665317123ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_udp.o(.text._ZN2ot3Cli10UdpExample7ProcessILy1665317123EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_udp.o(.rodata._ZZN2ot3Cli10UdpExample7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[da]">otError ot::Cli::UdpExample::Process&lang;1830547446ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_udp.o(.text._ZN2ot3Cli10UdpExample7ProcessILy1830547446EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_udp.o(.rodata._ZZN2ot3Cli10UdpExample7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[d8]">otError ot::Cli::UdpExample::Process&lang;32000442710786154ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_udp.o(.text._ZN2ot3Cli10UdpExample7ProcessILy32000442710786154EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_udp.o(.rodata._ZZN2ot3Cli10UdpExample7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[d7]">otError ot::Cli::UdpExample::Process&lang;428967416664ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_udp.o(.text._ZN2ot3Cli10UdpExample7ProcessILy428967416664EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_udp.o(.rodata._ZZN2ot3Cli10UdpExample7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[5c]">ot::Cli::Interpreter::HandleTimer(ot::Timer&)</a> from cli.o(.text._ZN2ot3Cli11Interpreter11HandleTimerERNS_5TimerE) referenced 2 times from cli.o(.text._ZN2ot3Cli11InterpreterC2EPNS_8InstanceEPFiPvPKcSt9__va_listES4_)
 <LI><a href="#[56]">ot::Cli::Interpreter::HandlePingReply(otPingSenderReply const*, void*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter15HandlePingReplyEPK17otPingSenderReplyPv) referenced 2 times from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1715061262EEE7otErrorPNS_5Utils13CmdLineParser3ArgE)
 <LI><a href="#[57]">ot::Cli::Interpreter::HandlePingStatistics(otPingSenderStatistics const*, void*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter20HandlePingStatisticsEPK22otPingSenderStatisticsPv) referenced 2 times from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1715061262EEE7otErrorPNS_5Utils13CmdLineParser3ArgE)
 <LI><a href="#[55]">ot::Cli::Interpreter::HandleLinkPcapReceive(otRadioFrame const*, bool, void*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter21HandleLinkPcapReceiveEPK12otRadioFramebPv) referenced 2 times from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy14555083096433720913EEE7otErrorPNS_5Utils13CmdLineParser3ArgE)
 <LI><a href="#[59]">ot::Cli::Interpreter::HandleActiveScanResult(otActiveScanResult*, void*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter22HandleActiveScanResultEP18otActiveScanResultPv) referenced 2 times from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1830284035EEE7otErrorPNS_5Utils13CmdLineParser3ArgE)
 <LI><a href="#[59]">ot::Cli::Interpreter::HandleActiveScanResult(otActiveScanResult*, void*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter22HandleActiveScanResultEP18otActiveScanResultPv) referenced 2 times from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy8020460690342608375EEE7otErrorPNS_5Utils13CmdLineParser3ArgE)
 <LI><a href="#[5b]">ot::Cli::Interpreter::HandleDiscoveryRequest(otThreadDiscoveryRequestInfo const*, void*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter22HandleDiscoveryRequestEPK28otThreadDiscoveryRequestInfoPv) referenced 2 times from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy8020460690342608375EEE7otErrorPNS_5Utils13CmdLineParser3ArgE)
 <LI><a href="#[58]">ot::Cli::Interpreter::HandleEnergyScanResult(otEnergyScanResult*, void*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter22HandleEnergyScanResultEP18otEnergyScanResultPv) referenced 2 times from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1830284035EEE7otErrorPNS_5Utils13CmdLineParser3ArgE)
 <LI><a href="#[5a]">ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage*, otMessageInfo const*, void*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter27HandleDiagnosticGetResponseE7otErrorP9otMessagePK13otMessageInfoPv) referenced 2 times from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy5255620471931187573EEE7otErrorPNS_5Utils13CmdLineParser3ArgE)
 <LI><a href="#[54]">ot::Cli::Interpreter::HandleDetachGracefullyResult(void*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter28HandleDetachGracefullyResultEPv) referenced 2 times from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy112553419349005EEE7otErrorPNS_5Utils13CmdLineParser3ArgE)
 <LI><a href="#[120]">otError ot::Cli::Interpreter::Process&lang;1030263388783878400ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1030263388783878400EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[122]">otError ot::Cli::Interpreter::Process&lang;10320315516056133487ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy10320315516056133487EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[127]">otError ot::Cli::Interpreter::Process&lang;108232213406486ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy108232213406486EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[10c]">otError ot::Cli::Interpreter::Process&lang;11015563977516890969ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy11015563977516890969EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[ec]">otError ot::Cli::Interpreter::Process&lang;112553419349005ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy112553419349005EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[105]">otError ot::Cli::Interpreter::Process&lang;11302599500980265950ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy11302599500980265950EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[de]">otError ot::Cli::Interpreter::Process&lang;11512677311266953430ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy11512677311266953430EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[11a]">otError ot::Cli::Interpreter::Process&lang;119073513618444ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy119073513618444EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[f9]">otError ot::Cli::Interpreter::Process&lang;123339735204840ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy123339735204840EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[fb]">otError ot::Cli::Interpreter::Process&lang;123344129789161ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy123344129789161EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[11e]">otError ot::Cli::Interpreter::Process&lang;123344230057719ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy123344230057719EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[10f]">otError ot::Cli::Interpreter::Process&lang;125538443212822ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy125538443212822EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[fc]">otError ot::Cli::Interpreter::Process&lang;1366262738558941672ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1366262738558941672EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[dd]">otError ot::Cli::Interpreter::Process&lang;13711823289570935762ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy13711823289570935762EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[11b]">otError ot::Cli::Interpreter::Process&lang;13738210911291060331ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy13738210911291060331EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[fd]">otError ot::Cli::Interpreter::Process&lang;14182804244553304960ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy14182804244553304960EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[116]">otError ot::Cli::Interpreter::Process&lang;14555083096433720913ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy14555083096433720913EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[ff]">otError ot::Cli::Interpreter::Process&lang;14765126478273032447ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy14765126478273032447EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[ed]">otError ot::Cli::Interpreter::Process&lang;1495474164342561146ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1495474164342561146EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[e4]">otError ot::Cli::Interpreter::Process&lang;15073379119283750636ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy15073379119283750636EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[118]">otError ot::Cli::Interpreter::Process&lang;15435009332132253075ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy15435009332132253075EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[f0]">otError ot::Cli::Interpreter::Process&lang;1562345116032201233ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1562345116032201233EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[123]">otError ot::Cli::Interpreter::Process&lang;15712178869698907848ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy15712178869698907848EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[102]">otError ot::Cli::Interpreter::Process&lang;16075074835862503559ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy16075074835862503559EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[110]">otError ot::Cli::Interpreter::Process&lang;16244709273642014994ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy16244709273642014994EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[117]">otError ot::Cli::Interpreter::Process&lang;1648543237ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1648543237EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[104]">otError ot::Cli::Interpreter::Process&lang;1681249789ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1681249789EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[f6]">otError ot::Cli::Interpreter::Process&lang;1681701387ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1681701387EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[114]">otError ot::Cli::Interpreter::Process&lang;16863212019509908256ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy16863212019509908256EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[112]">otError ot::Cli::Interpreter::Process&lang;1715061262ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1715061262EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[124]">otError ot::Cli::Interpreter::Process&lang;1830284035ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1830284035EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[e7]">otError ot::Cli::Interpreter::Process&lang;1863449829ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1863449829EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[111]">otError ot::Cli::Interpreter::Process&lang;1998604769390126437ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1998604769390126437EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[f2]">otError ot::Cli::Interpreter::Process&lang;220771284311ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy220771284311EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[107]">otError ot::Cli::Interpreter::Process&lang;26794857157895015ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy26794857157895015EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[10b]">otError ot::Cli::Interpreter::Process&lang;2882870027264844783ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy2882870027264844783EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[128]">otError ot::Cli::Interpreter::Process&lang;29525964638568806ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy29525964638568806EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[e0]">otError ot::Cli::Interpreter::Process&lang;29803101196888419ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy29803101196888419EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[e6]">otError ot::Cli::Interpreter::Process&lang;303229889220393947ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy303229889220393947EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[12c]">otError ot::Cli::Interpreter::Process&lang;30363746172521848ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy30363746172521848EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[e2]">otError ot::Cli::Interpreter::Process&lang;30907139684939619ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy30907139684939619EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[10d]">otError ot::Cli::Interpreter::Process&lang;30913625955023990ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy30913625955023990EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[fa]">otError ot::Cli::Interpreter::Process&lang;31451632477041015ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy31451632477041015EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[f3]">otError ot::Cli::Interpreter::Process&lang;31451632477498226ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy31451632477498226EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[129]">otError ot::Cli::Interpreter::Process&lang;31452791250048641ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy31452791250048641EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[108]">otError ot::Cli::Interpreter::Process&lang;31998349810021265ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy31998349810021265EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[121]">otError ot::Cli::Interpreter::Process&lang;3200263406431374201ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy3200263406431374201EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[ea]">otError ot::Cli::Interpreter::Process&lang;32002658098942360ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy32002658098942360EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[103]">otError ot::Cli::Interpreter::Process&lang;424572962149ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy424572962149EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[10e]">otError ot::Cli::Interpreter::Process&lang;424573284472ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy424573284472EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[e1]">otError ot::Cli::Interpreter::Process&lang;424622705244ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy424622705244EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[126]">otError ot::Cli::Interpreter::Process&lang;428983089745ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy428983089745EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[11c]">otError ot::Cli::Interpreter::Process&lang;492159295119ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy492159295119EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[11f]">otError ot::Cli::Interpreter::Process&lang;5021455550522604481ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy5021455550522604481EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[10a]">otError ot::Cli::Interpreter::Process&lang;5126223071761830632ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy5126223071761830632EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[109]">otError ot::Cli::Interpreter::Process&lang;5255620471931187573ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy5255620471931187573EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[eb]">otError ot::Cli::Interpreter::Process&lang;5345021259271145584ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy5345021259271145584EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[fe]">otError ot::Cli::Interpreter::Process&lang;5743589040336375053ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy5743589040336375053EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[11d]">otError ot::Cli::Interpreter::Process&lang;58431844188429ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy58431844188429EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[125]">otError ot::Cli::Interpreter::Process&lang;603988223085374603ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy603988223085374603EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[101]">otError ot::Cli::Interpreter::Process&lang;6462319ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy6462319EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[100]">otError ot::Cli::Interpreter::Process&lang;6725988ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy6725988EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[f4]">otError ot::Cli::Interpreter::Process&lang;7040008844819482601ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy7040008844819482601EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[f1]">otError ot::Cli::Interpreter::Process&lang;7109832251570096126ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy7109832251570096126EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[df]">otError ot::Cli::Interpreter::Process&lang;7113069ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy7113069EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[f7]">otError ot::Cli::Interpreter::Process&lang;7113582ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy7113582EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[f8]">otError ot::Cli::Interpreter::Process&lang;7250330901759102465ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy7250330901759102465EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[119]">otError ot::Cli::Interpreter::Process&lang;7308159ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy7308159EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[12a]">otError ot::Cli::Interpreter::Process&lang;7308417ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy7308417EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[dc]">otError ot::Cli::Interpreter::Process&lang;7437938ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy7437938EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[ef]">otError ot::Cli::Interpreter::Process&lang;7506025ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy7506025EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[113]">otError ot::Cli::Interpreter::Process&lang;7673476305065732077ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy7673476305065732077EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[f5]">otError ot::Cli::Interpreter::Process&lang;775738714908436955ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy775738714908436955EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[ee]">otError ot::Cli::Interpreter::Process&lang;8020460690342608375ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy8020460690342608375EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[106]">otError ot::Cli::Interpreter::Process&lang;8023188516701246990ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy8023188516701246990EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[e5]">otError ot::Cli::Interpreter::Process&lang;8059602322220575993ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy8059602322220575993EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[12b]">otError ot::Cli::Interpreter::Process&lang;807264858141456911ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy807264858141456911EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[e9]">otError ot::Cli::Interpreter::Process&lang;8094126837366616329ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy8094126837366616329EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[115]">otError ot::Cli::Interpreter::Process&lang;8228328825147909356ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy8228328825147909356EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[e3]">otError ot::Cli::Interpreter::Process&lang;8440012427400342744ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy8440012427400342744EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[e8]">otError ot::Cli::Interpreter::Process&lang;8846784157991210846ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy8846784157991210846EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[12d]">otError ot::Cli::NetworkData::Process&lang;112625398707738ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_network_data.o(.text._ZN2ot3Cli11NetworkData7ProcessILy112625398707738EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_network_data.o(.rodata._ZZN2ot3Cli11NetworkData7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[12f]">otError ot::Cli::NetworkData::Process&lang;1980428035ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_network_data.o(.text._ZN2ot3Cli11NetworkData7ProcessILy1980428035EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_network_data.o(.rodata._ZZN2ot3Cli11NetworkData7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[130]">otError ot::Cli::NetworkData::Process&lang;3328099188798998309ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_network_data.o(.text._ZN2ot3Cli11NetworkData7ProcessILy3328099188798998309EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_network_data.o(.rodata._ZZN2ot3Cli11NetworkData7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[12e]">otError ot::Cli::NetworkData::Process&lang;4362819052862294378ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_network_data.o(.text._ZN2ot3Cli11NetworkData7ProcessILy4362819052862294378EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_network_data.o(.rodata._ZZN2ot3Cli11NetworkData7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[60]">ot::Cli::Coap::HandleRequest(void*, otMessage*, otMessageInfo const*)</a> from cli_coap.o(.text._ZN2ot3Cli4Coap13HandleRequestEPvP9otMessagePK13otMessageInfo) referenced 2 times from cli_coap.o(.text._ZN2ot3Cli4Coap7ProcessILy7108473799409246994EEE7otErrorPNS_5Utils13CmdLineParser3ArgE)
 <LI><a href="#[5e]">ot::Cli::Coap::HandleResponse(void*, otMessage*, otMessageInfo const*, otError)</a> from cli_coap.o(.text._ZN2ot3Cli4Coap14HandleResponseEPvP9otMessagePK13otMessageInfo7otError) referenced 2 times from cli_coap.o(.text._ZN2ot3Cli4Coap14ProcessRequestEPNS_5Utils13CmdLineParser3ArgE10otCoapCode)
 <LI><a href="#[131]">otError ot::Cli::Coap::Process&lang;109390753686805ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_coap.o(.text._ZN2ot3Cli4Coap7ProcessILy109390753686805EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_coap.o(.rodata._ZZN2ot3Cli4Coap7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[133]">otError ot::Cli::Coap::Process&lang;16542423019117308726ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_coap.o(.text._ZN2ot3Cli4Coap7ProcessILy16542423019117308726EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_coap.o(.rodata._ZZN2ot3Cli4Coap7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[139]">otError ot::Cli::Coap::Process&lang;1864361470ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_coap.o(.text._ZN2ot3Cli4Coap7ProcessILy1864361470EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_coap.o(.rodata._ZZN2ot3Cli4Coap7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[134]">otError ot::Cli::Coap::Process&lang;1930945792ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_coap.o(.text._ZN2ot3Cli4Coap7ProcessILy1930945792EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_coap.o(.rodata._ZZN2ot3Cli4Coap7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[138]">otError ot::Cli::Coap::Process&lang;492373686370ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_coap.o(.text._ZN2ot3Cli4Coap7ProcessILy492373686370EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_coap.o(.rodata._ZZN2ot3Cli4Coap7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[136]">otError ot::Cli::Coap::Process&lang;7108473799409246994ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_coap.o(.text._ZN2ot3Cli4Coap7ProcessILy7108473799409246994EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_coap.o(.rodata._ZZN2ot3Cli4Coap7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[132]">otError ot::Cli::Coap::Process&lang;7568758ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_coap.o(.text._ZN2ot3Cli4Coap7ProcessILy7568758EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_coap.o(.rodata._ZZN2ot3Cli4Coap7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[137]">otError ot::Cli::Coap::Process&lang;7568770ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_coap.o(.text._ZN2ot3Cli4Coap7ProcessILy7568770EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_coap.o(.rodata._ZZN2ot3Cli4Coap7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[135]">otError ot::Cli::Coap::Process&lang;7572847ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_coap.o(.text._ZN2ot3Cli4Coap7ProcessILy7572847EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_coap.o(.rodata._ZZN2ot3Cli4Coap7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[62]">ot::Cli::Joiner::HandleCallback(otError, void*)</a> from cli_joiner.o(.text._ZN2ot3Cli6Joiner14HandleCallbackE7otErrorPv) referenced 2 times from cli_joiner.o(.text._ZN2ot3Cli6Joiner7ProcessILy492373686370EEE7otErrorPNS_5Utils13CmdLineParser3ArgE)
 <LI><a href="#[13a]">otError ot::Cli::Joiner::Process&lang;16073431636142911865ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_joiner.o(.text._ZN2ot3Cli6Joiner7ProcessILy16073431636142911865EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_joiner.o(.rodata._ZZN2ot3Cli6Joiner7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[13e]">otError ot::Cli::Joiner::Process&lang;1864361470ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_joiner.o(.text._ZN2ot3Cli6Joiner7ProcessILy1864361470EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_joiner.o(.rodata._ZZN2ot3Cli6Joiner7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[13b]">otError ot::Cli::Joiner::Process&lang;25605ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_joiner.o(.text._ZN2ot3Cli6Joiner7ProcessILy25605EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_joiner.o(.rodata._ZZN2ot3Cli6Joiner7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[13d]">otError ot::Cli::Joiner::Process&lang;428983089745ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_joiner.o(.text._ZN2ot3Cli6Joiner7ProcessILy428983089745EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_joiner.o(.rodata._ZZN2ot3Cli6Joiner7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[13c]">otError ot::Cli::Joiner::Process&lang;492373686370ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_joiner.o(.text._ZN2ot3Cli6Joiner7ProcessILy492373686370EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_joiner.o(.rodata._ZZN2ot3Cli6Joiner7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[13f]">otError ot::Cli::Dataset::Process&lang;109399277033242ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy109399277033242EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[14c]">otError ot::Cli::Dataset::Process&lang;11015563977516890969ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy11015563977516890969EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[142]">otError ot::Cli::Dataset::Process&lang;11734141454226389327ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy11734141454226389327EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[144]">otError ot::Cli::Dataset::Process&lang;125517434289129ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy125517434289129EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[149]">otError ot::Cli::Dataset::Process&lang;12771032453691045162ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy12771032453691045162EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[14a]">otError ot::Cli::Dataset::Process&lang;12771032504430052662ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy12771032504430052662EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[14f]">otError ot::Cli::Dataset::Process&lang;13154242556027051009ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy13154242556027051009EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[148]">otError ot::Cli::Dataset::Process&lang;13879157579010930576ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy13879157579010930576EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[151]">otError ot::Cli::Dataset::Process&lang;15490430763919346926ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy15490430763919346926EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[150]">otError ot::Cli::Dataset::Process&lang;1648543237ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy1648543237EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[140]">otError ot::Cli::Dataset::Process&lang;17991946006187835024ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy17991946006187835024EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[153]">otError ot::Cli::Dataset::Process&lang;1914558731ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy1914558731EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[147]">otError ot::Cli::Dataset::Process&lang;1930295280ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy1930295280EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[14e]">otError ot::Cli::Dataset::Process&lang;28438073741397367ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy28438073741397367EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[14b]">otError ot::Cli::Dataset::Process&lang;2882870027264844783ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy2882870027264844783EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[141]">otError ot::Cli::Dataset::Process&lang;29803101196888419ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy29803101196888419EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[14d]">otError ot::Cli::Dataset::Process&lang;424573284472ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy424573284472EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[143]">otError ot::Cli::Dataset::Process&lang;483635559789ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy483635559789EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[145]">otError ot::Cli::Dataset::Process&lang;513233767555ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy513233767555EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[146]">otError ot::Cli::Dataset::Process&lang;7040008844819482601ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy7040008844819482601EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[152]">otError ot::Cli::Dataset::Process&lang;7568770ull&rang;(ot::Utils::CmdLineParser::Arg*)</a> from cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy7568770EEE7otErrorPNS_5Utils13CmdLineParser3ArgE) referenced from cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
 <LI><a href="#[6c]">ot::Mle::Mle::HandleUdpReceive(void*, otMessage*, otMessageInfo const*)</a> from mle.o(.text._ZN2ot3Mle3Mle16HandleUdpReceiveEPvP9otMessagePK13otMessageInfo) referenced 2 times from mle.o(.text._ZN2ot3Mle3Mle6EnableEv)
 <LI><a href="#[72]">ot::Mle::MleRouter::HandleAdvertiseTrickleTimer(ot::TrickleTimer&)</a> from mle_router.o(.text._ZN2ot3Mle9MleRouter27HandleAdvertiseTrickleTimerERNS_12TrickleTimerE) referenced 2 times from mle_router.o(.text._ZN2ot3Mle9MleRouterC2ERNS_8InstanceE)
 <LI><a href="#[71]">ot::Mle::MleRouter::HandleAddressSolicitResponse(void*, otMessage*, otMessageInfo const*, otError)</a> from mle_router.o(.text._ZN2ot3Mle9MleRouter28HandleAddressSolicitResponseEPvP9otMessagePK13otMessageInfo7otError) referenced 2 times from mle_router.o(.text._ZN2ot3Mle9MleRouter18SendAddressSolicitENS_15ThreadStatusTlv6StatusE)
 <LI><a href="#[71]">ot::Mle::MleRouter::HandleAddressSolicitResponse(void*, otMessage*, otMessageInfo const*, otError)</a> from mle_router.o(.text._ZN2ot3Mle9MleRouter28HandleAddressSolicitResponseEPvP9otMessagePK13otMessageInfo7otError) referenced 2 times from mle_router.o(.text._ZN2ot3Mle9MleRouter21HandlePartitionChangeEv)
 <LI><a href="#[73]">ot::Tmf::SecureAgent::HandleResource(ot::Coap::CoapBase&, char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)</a> from tmf.o(.text._ZN2ot3Tmf11SecureAgent14HandleResourceERNS_4Coap8CoapBaseEPKcRNS2_7MessageERKNS_3Ip611MessageInfoE) referenced 2 times from tmf.o(.text._ZN2ot3Tmf11SecureAgentC2ERNS_8InstanceE)
 <LI><a href="#[75]">ot::Tmf::Agent::HandleResource(ot::Coap::CoapBase&, char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)</a> from tmf.o(.text._ZN2ot3Tmf5Agent14HandleResourceERNS_4Coap8CoapBaseEPKcRNS2_7MessageERKNS_3Ip611MessageInfoE) referenced 2 times from tmf.o(.text._ZN2ot3Tmf5AgentC2ERNS_8InstanceE)
 <LI><a href="#[74]">ot::Tmf::Agent::Filter(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, void*)</a> from tmf.o(.text._ZN2ot3Tmf5Agent6FilterERKNS_4Coap7MessageERKNS_3Ip611MessageInfoEPv) referenced 2 times from tmf.o(.text._ZN2ot3Tmf5AgentC2ERNS_8InstanceE)
 <LI><a href="#[79]">ot::Coap::CoapSecure::HandleTransmit(ot::Tasklet&)</a> from coap_secure.o(.text._ZN2ot4Coap10CoapSecure14HandleTransmitERNS_7TaskletE) referenced 2 times from coap_secure.o(.text._ZN2ot4Coap10CoapSecureC2ERNS_8InstanceEb)
 <LI><a href="#[76]">ot::Coap::CoapSecure::HandleDtlsReceive(void*, unsigned char*, unsigned short)</a> from coap_secure.o(.text._ZN2ot4Coap10CoapSecure17HandleDtlsReceiveEPvPht) referenced 2 times from coap_secure.o(.text._ZN2ot4Coap10CoapSecure5StartEt)
 <LI><a href="#[77]">ot::Coap::CoapSecure::HandleDtlsConnected(void*, bool)</a> from coap_secure.o(.text._ZN2ot4Coap10CoapSecure19HandleDtlsConnectedEPvb) referenced 2 times from coap_secure.o(.text._ZN2ot4Coap10CoapSecure5StartEt)
 <LI><a href="#[78]">ot::Coap::CoapSecure::Send(ot::Coap::CoapBase&, ot::Message&, ot::Ip6::MessageInfo const&)</a> from coap_secure.o(.text._ZN2ot4Coap10CoapSecure4SendERNS0_8CoapBaseERNS_7MessageERKNS_3Ip611MessageInfoE) referenced 2 times from coap_secure.o(.text._ZN2ot4Coap10CoapSecureC2ERNS_8InstanceEb)
 <LI><a href="#[7c]">ot::Coap::ResponsesQueue::HandleTimer(ot::Timer&)</a> from coap.o(.text._ZN2ot4Coap14ResponsesQueue11HandleTimerERNS_5TimerE) referenced 2 times from coap.o(.text._ZN2ot4Coap4CoapC2ERNS_8InstanceE)
 <LI><a href="#[7c]">ot::Coap::ResponsesQueue::HandleTimer(ot::Timer&)</a> from coap.o(.text._ZN2ot4Coap14ResponsesQueue11HandleTimerERNS_5TimerE) referenced 2 times from coap.o(.text._ZN2ot4Coap8CoapBaseC2ERNS_8InstanceEPF7otErrorRS1_RNS_7MessageERKNS_3Ip611MessageInfoEE)
 <LI><a href="#[7a]">ot::Coap::Coap::HandleUdpReceive(void*, otMessage*, otMessageInfo const*)</a> from coap.o(.text._ZN2ot4Coap4Coap16HandleUdpReceiveEPvP9otMessagePK13otMessageInfo) referenced 2 times from coap.o(.text._ZN2ot4Coap4Coap5StartEtNS_3Ip615NetifIdentifierE)
 <LI><a href="#[7d]">ot::Coap::Coap::Send(ot::Coap::CoapBase&, ot::Message&, ot::Ip6::MessageInfo const&)</a> from coap.o(.text._ZN2ot4Coap4Coap4SendERNS0_8CoapBaseERNS_7MessageERKNS_3Ip611MessageInfoE) referenced 2 times from coap.o(.text._ZN2ot4Coap4CoapC2ERNS_8InstanceE)
 <LI><a href="#[7b]">ot::Coap::CoapBase::HandleRetransmissionTimer(ot::Timer&)</a> from coap.o(.text._ZN2ot4Coap8CoapBase25HandleRetransmissionTimerERNS_5TimerE) referenced 2 times from coap.o(.text._ZN2ot4Coap4CoapC2ERNS_8InstanceE)
 <LI><a href="#[7b]">ot::Coap::CoapBase::HandleRetransmissionTimer(ot::Timer&)</a> from coap.o(.text._ZN2ot4Coap8CoapBase25HandleRetransmissionTimerERNS_5TimerE) referenced 2 times from coap.o(.text._ZN2ot4Coap8CoapBaseC2ERNS_8InstanceEPF7otErrorRS1_RNS_7MessageERKNS_3Ip611MessageInfoEE)
 <LI><a href="#[81]">ot::Heap::Free(void*)</a> from heap.o(.text._ZN2ot4Heap4FreeEPv) referenced 2 times from mbedtls.o(.text._ZN2ot6Crypto7MbedTlsC2Ev)
 <LI><a href="#[80]">ot::Heap::CAlloc(unsigned int, unsigned int)</a> from heap.o(.text._ZN2ot4Heap6CAllocEjj) referenced 2 times from mbedtls.o(.text._ZN2ot6Crypto7MbedTlsC2Ev)
 <LI><a href="#[7f]">ot::Utils::PingSender::HandleIcmpReceive(void*, otMessage*, otMessageInfo const*, otIcmp6Header const*)</a> from ping_sender.o(.text._ZN2ot5Utils10PingSender17HandleIcmpReceiveEPvP9otMessagePK13otMessageInfoPK13otIcmp6Header) referenced 2 times from ping_sender.o(.text._ZN2ot5Utils10PingSenderC2ERNS_8InstanceE)
 <LI><a href="#[8a]">ot::Crypto::MbedTls::CryptoSecurePrng(void*, unsigned char*, unsigned int)</a> from mbedtls.o(.text._ZN2ot6Crypto7MbedTls16CryptoSecurePrngEPvPhj) referenced 2 times from dtls.o(.text._ZN2ot7MeshCoP4Dtls5SetupEb)
 <LI><a href="#[83]">ot::MeshCoP::JoinerRouter::HandleUdpReceive(void*, otMessage*, otMessageInfo const*)</a> from joiner_router.o(.text._ZN2ot7MeshCoP12JoinerRouter16HandleUdpReceiveEPvP9otMessagePK13otMessageInfo) referenced 2 times from joiner_router.o(.text._ZN2ot7MeshCoP12JoinerRouter5StartEv)
 <LI><a href="#[82]">ot::MeshCoP::JoinerRouter::HandleJoinerEntrustResponse(void*, otMessage*, otMessageInfo const*, otError)</a> from joiner_router.o(.text._ZN2ot7MeshCoP12JoinerRouter27HandleJoinerEntrustResponseEPvP9otMessagePK13otMessageInfo7otError) referenced 2 times from joiner_router.o(.text._ZN2ot7MeshCoP12JoinerRouter17SendJoinerEntrustERKNS_3Ip611MessageInfoE)
 <LI><a href="#[85]">ot::MeshCoP::DatasetManager::HandleMgmtSetResponse(void*, otMessage*, otMessageInfo const*, otError)</a> from dataset_manager.o(.text._ZN2ot7MeshCoP14DatasetManager21HandleMgmtSetResponseEPvP9otMessagePK13otMessageInfo7otError) referenced 2 times from dataset_manager.o(.text._ZN2ot7MeshCoP14DatasetManager14SendSetRequestERKNS0_7Dataset4InfoEPKhhPFv7otErrorPvES9_)
 <LI><a href="#[85]">ot::MeshCoP::DatasetManager::HandleMgmtSetResponse(void*, otMessage*, otMessageInfo const*, otError)</a> from dataset_manager.o(.text._ZN2ot7MeshCoP14DatasetManager21HandleMgmtSetResponseEPvP9otMessagePK13otMessageInfo7otError) referenced 2 times from dataset_manager.o(.text._ZN2ot7MeshCoP14DatasetManager7SendSetEv)
 <LI><a href="#[86]">ot::MeshCoP::ActiveDatasetManager::HandleTimer(ot::Timer&)</a> from dataset_manager.o(.text._ZN2ot7MeshCoP20ActiveDatasetManager11HandleTimerERNS_5TimerE) referenced 2 times from dataset_manager.o(.text._ZN2ot7MeshCoP20ActiveDatasetManagerC2ERNS_8InstanceE)
 <LI><a href="#[87]">ot::MeshCoP::PendingDatasetManager::HandleTimer(ot::Timer&)</a> from dataset_manager.o(.text._ZN2ot7MeshCoP21PendingDatasetManager11HandleTimerERNS_5TimerE) referenced 2 times from dataset_manager.o(.text._ZN2ot7MeshCoP21PendingDatasetManagerC2ERNS_8InstanceE)
 <LI><a href="#[91]">ot::MeshCoP::Dtls::HandleTimer(ot::Timer&)</a> from dtls.o(.text._ZN2ot7MeshCoP4Dtls11HandleTimerERNS_5TimerE) referenced 2 times from dtls.o(.text._ZN2ot7MeshCoP4DtlsC2ERNS_8InstanceEb)
 <LI><a href="#[89]">ot::MeshCoP::Dtls::HandleUdpReceive(void*, otMessage*, otMessageInfo const*)</a> from dtls.o(.text._ZN2ot7MeshCoP4Dtls16HandleUdpReceiveEPvP9otMessagePK13otMessageInfo) referenced 2 times from dtls.o(.text._ZN2ot7MeshCoP4Dtls4OpenEPFvPvPhtEPFvS2_bES2_)
 <LI><a href="#[8c]">ot::MeshCoP::Dtls::HandleMbedtlsDebug(void*, int, char const*, int, char const*)</a> from dtls.o(.text._ZN2ot7MeshCoP4Dtls18HandleMbedtlsDebugEPviPKciS4_) referenced 2 times from dtls.o(.text._ZN2ot7MeshCoP4Dtls5SetupEb)
 <LI><a href="#[8e]">ot::MeshCoP::Dtls::HandleMbedtlsReceive(void*, unsigned char*, unsigned int)</a> from dtls.o(.text._ZN2ot7MeshCoP4Dtls20HandleMbedtlsReceiveEPvPhj) referenced 2 times from dtls.o(.text._ZN2ot7MeshCoP4Dtls5SetupEb)
 <LI><a href="#[90]">ot::MeshCoP::Dtls::HandleMbedtlsGetTimer(void*)</a> from dtls.o(.text._ZN2ot7MeshCoP4Dtls21HandleMbedtlsGetTimerEPv) referenced 2 times from dtls.o(.text._ZN2ot7MeshCoP4Dtls5SetupEb)
 <LI><a href="#[8f]">ot::MeshCoP::Dtls::HandleMbedtlsSetTimer(void*, unsigned int, unsigned int)</a> from dtls.o(.text._ZN2ot7MeshCoP4Dtls21HandleMbedtlsSetTimerEPvjj) referenced 2 times from dtls.o(.text._ZN2ot7MeshCoP4Dtls5SetupEb)
 <LI><a href="#[8d]">ot::MeshCoP::Dtls::HandleMbedtlsTransmit(void*, unsigned char const*, unsigned int)</a> from dtls.o(.text._ZN2ot7MeshCoP4Dtls21HandleMbedtlsTransmitEPvPKhj) referenced 2 times from dtls.o(.text._ZN2ot7MeshCoP4Dtls5SetupEb)
 <LI><a href="#[8b]">ot::MeshCoP::Dtls::HandleMbedtlsExportKeys(void*, unsigned char const*, unsigned char const*, unsigned int, unsigned int, unsigned int)</a> from dtls.o(.text._ZN2ot7MeshCoP4Dtls23HandleMbedtlsExportKeysEPvPKhS4_jjj) referenced 2 times from dtls.o(.text._ZN2ot7MeshCoP4Dtls5SetupEb)
 <LI><a href="#[93]">ot::MeshCoP::Joiner::HandleDiscoverResult(otActiveScanResult*, void*)</a> from joiner.o(.text._ZN2ot7MeshCoP6Joiner20HandleDiscoverResultEP18otActiveScanResultPv) referenced 2 times from joiner.o(.text._ZN2ot7MeshCoP6Joiner5StartEPKcS3_S3_S3_S3_S3_PFv7otErrorPvES5_)
 <LI><a href="#[92]">ot::MeshCoP::Joiner::HandleJoinerFinalizeResponse(void*, otMessage*, otMessageInfo const*, otError)</a> from joiner.o(.text._ZN2ot7MeshCoP6Joiner28HandleJoinerFinalizeResponseEPvP9otMessagePK13otMessageInfo7otError) referenced 2 times from joiner.o(.text._ZN2ot7MeshCoP6Joiner18SendJoinerFinalizeEv)
 <LI><a href="#[94]">ot::MeshCoP::Joiner::HandleSecureCoapClientConnect(bool, void*)</a> from joiner.o(.text._ZN2ot7MeshCoP6Joiner29HandleSecureCoapClientConnectEbPv) referenced 2 times from joiner.o(.text._ZN2ot7MeshCoP6Joiner7ConnectERNS1_12JoinerRouterE)
 <LI><a href="#[3b]">ot::TaskletIn&lang;ot::DuaManager, &(ot::DuaManager::PerformNextRegistration())&rang;::HandleTasklet(ot::Tasklet&)</a> from dua_manager.o(.text._ZN2ot9TaskletInINS_10DuaManagerEXadL_ZNS1_23PerformNextRegistrationEvEEE13HandleTaskletERNS_7TaskletE) referenced 2 times from dua_manager.o(.text._ZN2ot10DuaManagerC2ERNS_8InstanceE)
 <LI><a href="#[42]">ot::TaskletIn&lang;ot::NetworkData::Notifier, &(ot::NetworkData::Notifier::SynchronizeServerData())&rang;::HandleTasklet(ot::Tasklet&)</a> from network_data_notifier.o(.text._ZN2ot9TaskletInINS_11NetworkData8NotifierEXadL_ZNS2_21SynchronizeServerDataEvEEE13HandleTaskletERNS_7TaskletE) referenced 2 times from network_data_notifier.o(.text._ZN2ot11NetworkData8NotifierC2ERNS_8InstanceE)
 <LI><a href="#[43]">ot::TaskletIn&lang;ot::RouterTable, &(ot::RouterTable::HandleTableChanged())&rang;::HandleTasklet(ot::Tasklet&)</a> from router_table.o(.text._ZN2ot9TaskletInINS_11RouterTableEXadL_ZNS1_18HandleTableChangedEvEEE13HandleTaskletERNS_7TaskletE) referenced 2 times from router_table.o(.text._ZN2ot11RouterTableC2ERNS_8InstanceE)
 <LI><a href="#[48]">ot::TaskletIn&lang;ot::MeshForwarder, &(ot::MeshForwarder::ScheduleTransmissionTask())&rang;::HandleTasklet(ot::Tasklet&)</a> from mesh_forwarder.o(.text._ZN2ot9TaskletInINS_13MeshForwarderEXadL_ZNS1_24ScheduleTransmissionTaskEvEEE13HandleTaskletERNS_7TaskletE) referenced 2 times from mesh_forwarder.o(.text._ZN2ot13MeshForwarderC2ERNS_8InstanceE)
 <LI><a href="#[65]">ot::TaskletIn&lang;ot::Ip6::Ip6, &(ot::Ip6::Ip6::HandleSendQueue())&rang;::HandleTasklet(ot::Tasklet&)</a> from ip6.o(.text._ZN2ot9TaskletInINS_3Ip63Ip6EXadL_ZNS2_15HandleSendQueueEvEEE13HandleTaskletERNS_7TaskletE) referenced 2 times from ip6.o(.text._ZN2ot3Ip63Ip6C2ERNS_8InstanceE)
 <LI><a href="#[67]">ot::TaskletIn&lang;ot::Mac::Mac, &(ot::Mac::Mac::PerformNextOperation())&rang;::HandleTasklet(ot::Tasklet&)</a> from mac.o(.text._ZN2ot9TaskletInINS_3Mac3MacEXadL_ZNS2_20PerformNextOperationEvEEE13HandleTaskletERNS_7TaskletE) referenced 2 times from mac.o(.text._ZN2ot3Mac3MacC2ERNS_8InstanceE)
 <LI><a href="#[6a]">ot::TaskletIn&lang;ot::Mle::DiscoverScanner, &(ot::Mle::DiscoverScanner::HandleScanDoneTask())&rang;::HandleTasklet(ot::Tasklet&)</a> from discover_scanner.o(.text._ZN2ot9TaskletInINS_3Mle15DiscoverScannerEXadL_ZNS2_18HandleScanDoneTaskEvEEE13HandleTaskletERNS_7TaskletE) referenced 2 times from discover_scanner.o(.text._ZN2ot3Mle15DiscoverScannerC2ERNS_8InstanceE)
 <LI><a href="#[97]">ot::TaskletIn&lang;ot::Notifier, &(ot::Notifier::EmitEvents())&rang;::HandleTasklet(ot::Tasklet&)</a> from notifier.o(.text._ZN2ot9TaskletInINS_8NotifierEXadL_ZNS1_10EmitEventsEvEEE13HandleTaskletERNS_7TaskletE) referenced 2 times from notifier.o(.text._ZN2ot8NotifierC2ERNS_8InstanceE)
 <LI><a href="#[31]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_cm3_mcu.o(.text)
 <LI><a href="#[a5]">__rf_event_callback</a> from hosal_rf.o(.text.__rf_event_callback) referenced 2 times from hosal_rf.o(.text.hosal_rf_init)
 <LI><a href="#[a6]">__rf_proc</a> from hosal_rf.o(.text.__rf_proc) referenced 2 times from hosal_rf.o(.text.hosal_rf_init)
 <LI><a href="#[9c]">__uart1_rx_callback</a> from app_uart.o(.text.__uart1_rx_callback) referenced 2 times from app_uart.o(.text.app_uart_init)
 <LI><a href="#[9e]">__uart2_rx_callback</a> from app_uart.o(.text.__uart2_rx_callback) referenced 2 times from app_uart.o(.text.app_uart_init)
 <LI><a href="#[9d]">__uart_tx_callback</a> from app_uart.o(.text.__uart_tx_callback) referenced 2 times from app_uart.o(.text.app_uart_init)
 <LI><a href="#[cc]">__uartstdio_rx_callback</a> from uart_stdio.o(.text.__uartstdio_rx_callback) referenced 2 times from uart_stdio.o(.text.uart_stdio_init)
 <LI><a href="#[163]">_cli_cmd_debug</a> from cli_1.o(.text._cli_cmd_debug) referenced from cli_1.o(cli_cmd_pool)
 <LI><a href="#[166]">_cli_cmd_factory_id_set</a> from das_dlms_cmd.o(.text._cli_cmd_factory_id_set) referenced from das_dlms_cmd.o(cli_cmd_pool)
 <LI><a href="#[167]">_cli_cmd_get_fan_status</a> from das_dlms_cmd.o(.text._cli_cmd_get_fan_status) referenced from das_dlms_cmd.o(cli_cmd_pool)
 <LI><a href="#[168]">_cli_cmd_get_flash</a> from das_dlms_cmd.o(.text._cli_cmd_get_flash) referenced from das_dlms_cmd.o(cli_cmd_pool)
 <LI><a href="#[162]">_cli_cmd_ps</a> from cli_1.o(.text._cli_cmd_ps) referenced from cli_1.o(cli_cmd_pool)
 <LI><a href="#[165]">_cli_cmd_udpsend</a> from app_udp.o(.text._cli_cmd_udpsend) referenced from app_udp.o(cli_cmd_pool)
 <LI><a href="#[33]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[34]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[32]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[164]">_sh_cmd_help</a> from shell.o(.text._sh_cmd_help) referenced from shell.o(cli_cmd_pool)
 <LI><a href="#[15c]">_sh_io_read</a> from cli_1.o(.text._sh_io_read) referenced from cli_1.o(.rodata.g_sh_std_io)
 <LI><a href="#[15d]">_sh_io_write</a> from cli_1.o(.text._sh_io_write) referenced from cli_1.o(.rodata.g_sh_std_io)
 <LI><a href="#[ca]">_shell_log</a> from shell.o(.text._shell_log) referenced 2 times from shell.o(.text.shell_proc)
 <LI><a href="#[d1]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[d1]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[d2]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[154]">aes_crypt_ecb_wrap</a> from cipher_wrap.o(.text.aes_crypt_ecb_wrap) referenced from cipher_wrap.o(.rodata.aes_info)
 <LI><a href="#[157]">aes_ctx_alloc</a> from cipher_wrap.o(.text.aes_ctx_alloc) referenced from cipher_wrap.o(.rodata.aes_info)
 <LI><a href="#[158]">aes_ctx_free</a> from cipher_wrap.o(.text.aes_ctx_free) referenced from cipher_wrap.o(.rodata.aes_info)
 <LI><a href="#[156]">aes_setkey_dec_wrap</a> from cipher_wrap.o(.text.aes_setkey_dec_wrap) referenced from cipher_wrap.o(.rodata.aes_info)
 <LI><a href="#[155]">aes_setkey_enc_wrap</a> from cipher_wrap.o(.text.aes_setkey_enc_wrap) referenced from cipher_wrap.o(.rodata.aes_info)
 <LI><a href="#[99]">alloc_env_cb</a> from efd_kv.o(.text.alloc_env_cb) referenced 2 times from efd_kv.o(.text.alloc_env)
 <LI><a href="#[a9]">app_main_entry</a> from rt_main.o(.text.app_main_entry) referenced 2 times from rt_main.o(.text.main)
 <LI><a href="#[c3]">app_udp_cb</a> from app_task.o(.text.app_udp_cb) referenced 2 times from app_task.o(.text.otrInitUser)
 <LI><a href="#[20]">bod_handler</a> from startup_cm3_mcu.o(.text) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[159]">ccm_aes_setkey_wrap</a> from cipher_wrap.o(.text.ccm_aes_setkey_wrap) referenced 2 times from cipher_wrap.o(.rodata.ccm_aes_info)
 <LI><a href="#[15a]">ccm_ctx_alloc</a> from cipher_wrap.o(.text.ccm_ctx_alloc) referenced from cipher_wrap.o(.rodata.ccm_aes_info)
 <LI><a href="#[15b]">ccm_ctx_free</a> from cipher_wrap.o(.text.ccm_ctx_free) referenced from cipher_wrap.o(.rodata.ccm_aes_info)
 <LI><a href="#[a2]">check_and_recovery_env_cb</a> from efd_kv.o(.text.check_and_recovery_env_cb) referenced 4 times from efd_kv.o(.text.efd_load_env)
 <LI><a href="#[a1]">check_and_recovery_gc_cb</a> from efd_kv.o(.text.check_and_recovery_gc_cb) referenced 2 times from efd_kv.o(.text.efd_load_env)
 <LI><a href="#[a0]">check_sec_hdr_cb</a> from efd_kv.o(.text.check_sec_hdr_cb) referenced 2 times from efd_kv.o(.text.efd_load_env)
 <LI><a href="#[9f]">cli_task</a> from cli_1.o(.text.cli_task) referenced 2 times from cli_1.o(.text.cli_init)
 <LI><a href="#[22]">commsubsystem_handler</a> from rf_mcu.o(.text.commsubsystem_handler) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[29]">crypto_handler</a> from startup_cm3_mcu.o(.text) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[17]">dma0_c0_handler</a> from dma.o(.text.dma0_c0_handler) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[18]">dma0_c1_handler</a> from dma.o(.text.dma0_c1_handler) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[19]">dma0_c2_handler</a> from dma.o(.text.dma0_c2_handler) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[1a]">dma0_c3_handler</a> from dma.o(.text.dma0_c3_handler) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[1f]">dma1_c2_handler</a> from startup_cm3_mcu.o(.text) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[a4]">do_gc</a> from efd_kv.o(.text.do_gc) referenced 2 times from efd_kv.o(.text.gc_collect)
 <LI><a href="#[ab]">ecp_drbg_random</a> from ecp.o(.text.ecp_drbg_random) referenced 2 times from ecp.o(.text.mbedtls_ecp_mul_restartable)
 <LI><a href="#[aa]">ecp_mod_p256</a> from ecp_curves.o(.text.ecp_mod_p256) referenced 2 times from ecp_curves.o(.text.mbedtls_ecp_group_load)
 <LI><a href="#[a3]">find_env_cb</a> from efd_kv.o(.text.find_env_cb) referenced 2 times from efd_kv.o(.text.find_env)
 <LI><a href="#[a3]">find_env_cb</a> from efd_kv.o(.text.find_env_cb) referenced 2 times from efd_kv.o(.text.move_env)
 <LI><a href="#[14]">flashctl_handler</a> from startup_cm3_mcu.o(.text) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[d0]">fputc</a> from debug_1.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[d0]">fputc</a> from debug_1.o(.text.fputc) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[15e]">gcm_aes_setkey_wrap</a> from cipher_wrap.o(.text.gcm_aes_setkey_wrap) referenced 2 times from cipher_wrap.o(.rodata.gcm_aes_info)
 <LI><a href="#[15f]">gcm_ctx_alloc</a> from cipher_wrap.o(.text.gcm_ctx_alloc) referenced from cipher_wrap.o(.rodata.gcm_aes_info)
 <LI><a href="#[160]">gcm_ctx_free</a> from cipher_wrap.o(.text.gcm_ctx_free) referenced from cipher_wrap.o(.rodata.gcm_aes_info)
 <LI><a href="#[e]">gpio_handler</a> from gpio.o(.text.gpio_handler) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[13]">i2cm_handler</a> from startup_cm3_mcu.o(.text) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[35]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[2f]">main</a> from rt_main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[b5]">mbedtls_entropy_func</a> from entropy.o(.text.mbedtls_entropy_func) referenced 2 times from crypto_platform.o(.text.otPlatCryptoRandomInit)
 <LI><a href="#[161]">memset</a> from memseta.o(.text) referenced from platform_util.o(.rodata.memset_func)
 <LI><a href="#[b0]">nwk_mgm_ack_process</a> from network_management.o(.text.nwk_mgm_ack_process) referenced 2 times from network_management.o(.text.nwk_mgm_coap_request)
 <LI><a href="#[c4]">nwk_mgm_neighbor_Change_Callback</a> from network_management.o(.text.nwk_mgm_neighbor_Change_Callback) referenced 2 times from app_task.o(.text.otrInitUser)
 <LI><a href="#[b1]">nwk_mgm_request_proccess</a> from network_management.o(.text.nwk_mgm_request_proccess) referenced 2 times from network_management.o(.text.nwk_mgm_init)
 <LI><a href="#[b2]">nwk_mgm_timer_handler</a> from network_management.o(.text.nwk_mgm_timer_handler) referenced 2 times from network_management.o(.text.nwk_mgm_init)
 <LI><a href="#[d5]">otPlatAlarmMilliGetNow</a> from ot_alarm.o(.text.otPlatAlarmMilliGetNow) referenced from timer.o(.rodata._ZN2ot10TimerMilli9Scheduler14sAlarmMilliApiE)
 <LI><a href="#[d3]">otPlatAlarmMilliStartAt</a> from ot_alarm.o(.text.otPlatAlarmMilliStartAt) referenced from timer.o(.rodata._ZN2ot10TimerMilli9Scheduler14sAlarmMilliApiE)
 <LI><a href="#[d4]">otPlatAlarmMilliStop</a> from ot_alarm.o(.text.otPlatAlarmMilliStop) referenced from timer.o(.rodata._ZN2ot10TimerMilli9Scheduler14sAlarmMilliApiE)
 <LI><a href="#[2]">otPlatCAlloc</a> from ot_memory.o(.text.otPlatCAlloc) referenced 2 times from platform.o(.data.mbedtls_calloc_func)
 <LI><a href="#[3]">otPlatFree</a> from ot_memory.o(.text.otPlatFree) referenced 2 times from platform.o(.data.mbedtls_free_func)
 <LI><a href="#[9b]">otUdpReceive_handler</a> from app_udp.o(.text.otUdpReceive_handler) referenced 2 times from app_udp.o(.text.app_sockInit)
 <LI><a href="#[c2]">ot_stateChangeCallback</a> from app_task.o(.text.ot_stateChangeCallback) referenced 2 times from app_task.o(.text.otrInitUser)
 <LI><a href="#[c1]">ota_event_handler</a> from ot_ota_handler.o(.text.ota_event_handler) referenced 2 times from ot_ota_handler.o(.text.ota_init)
 <LI><a href="#[ce]">prvIdleTask</a> from tasks.o(.text.prvIdleTask) referenced 2 times from tasks.o(.text.vTaskStartScheduler)
 <LI><a href="#[c8]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced 2 times from port.o(.text.pxPortInitialiseStack)
 <LI><a href="#[cf]">prvTimerTask</a> from timers.o(.text.prvTimerTask) referenced 2 times from timers.o(.text.xTimerCreateTimerTask)
 <LI><a href="#[c5]">pvPortCalloc</a> from heap_5.o(.text.pvPortCalloc) referenced 2 times from ot_freertos.o(.text.otrStackTask)
 <LI><a href="#[1b]">qspi0_handler</a> from startup_cm3_mcu.o(.text) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[2b]">qspi1_handler</a> from startup_cm3_mcu.o(.text) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[16]">rtc_handler</a> from startup_cm3_mcu.o(.text) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[98]">sector_statistics_cb</a> from efd_kv.o(.text.sector_statistics_cb) referenced 2 times from efd_kv.o(.text.alloc_env)
 <LI><a href="#[ae]">ssl_calc_finished_tls_sha256</a> from ssl_tls.o(.text.ssl_calc_finished_tls_sha256) referenced 2 times from ssl_tls.o(.text.mbedtls_ssl_derive_keys)
 <LI><a href="#[ac]">ssl_calc_verify_tls_sha256</a> from ssl_tls.o(.text.ssl_calc_verify_tls_sha256) referenced 2 times from ssl_tls.o(.text.mbedtls_ssl_derive_keys)
 <LI><a href="#[af]">ssl_update_checksum_sha256</a> from ssl_tls.o(.text.ssl_update_checksum_sha256) referenced 2 times from ssl_tls.o(.text.mbedtls_ssl_optimize_checksum)
 <LI><a href="#[cb]">ssl_update_checksum_start</a> from ssl_tls.o(.text.ssl_update_checksum_start) referenced 2 times from ssl_tls.o(.text.ssl_handshake_init)
 <LI><a href="#[ad]">tls_prf_sha256</a> from ssl_tls.o(.text.tls_prf_sha256) referenced 4 times from ssl_tls.o(.text.mbedtls_ssl_derive_keys)
 <LI><a href="#[2d]">trng_handler</a> from startup_cm3_mcu.o(.text) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[12]">uart0_handler</a> from hosal_uart.o(.text.uart0_handler) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[15]">uart1_handler</a> from hosal_uart.o(.text.uart1_handler) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[21]">uart2_handler</a> from hosal_uart.o(.text.uart2_handler) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[c9]">user_gpio29_isr_handler</a> from das_dlms_cmd.o(.text.user_gpio29_isr_handler) referenced 2 times from das_dlms_cmd.o(.text.setup_gpio29)
 <LI><a href="#[b9]">vLightTimerCallback</a> from app_task.o(.text.vLightTimerCallback) referenced 2 times from app_task.o(.text.ot_stateChangeCallback)
 <LI><a href="#[c6]">vPortFree</a> from heap_5.o(.text.vPortFree) referenced 2 times from ot_freertos.o(.text.otrStackTask)
 <LI><a href="#[a]">vPortSVCHandler</a> from port.o(.text.vPortSVCHandler) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[cd]">vTimerCallback</a> from das_dlms_cmd.o(.text.vTimerCallback) referenced 2 times from das_dlms_cmd.o(.text.udf_Meter_init)
 <LI><a href="#[9a]">wdt_isr</a> from main.o(.text.wdt_isr) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[c]">xPortPendSVHandler</a> from port.o(.text.xPortPendSVHandler) referenced from startup_cm3_mcu.o(RESET)
 <LI><a href="#[d]">xPortSysTickHandler</a> from port.o(.text.xPortSysTickHandler) referenced from startup_cm3_mcu.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[31]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(.text)
</UL>
<P><STRONG><a name="[ba3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[16b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[18c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ba4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[ba5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[ba6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[ba7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[ba8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cm3_mcu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cm3_mcu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cm3_mcu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[16d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cm3_mcu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cm3_mcu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[16e]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cm3_mcu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[16f]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cm3_mcu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1c]"></a>I2s_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3_mcu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2s_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2s_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Pwm0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3_mcu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>Pwm1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3_mcu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Pwm2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3_mcu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>Pwm3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3_mcu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>Pwm4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3_mcu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>Sadc_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3_mcu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>Sw_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3_mcu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>bod_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3_mcu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>crypto_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3_mcu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>dma1_c2_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3_mcu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>flashctl_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3_mcu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>i2cm_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3_mcu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>qspi0_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3_mcu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>qspi1_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3_mcu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>rtc_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3_mcu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>trng_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cm3_mcu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[170]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::GetNextCslTransmissionDelay(ot::Child const&, unsigned int&, unsigned int) const
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputUint64(unsigned long long)
<LI><a href="#[b99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[173]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::DumpLine(char const*, ot::LogLevel, unsigned char const*, unsigned short)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IsValidUtf8String(char const*, unsigned int)
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerPskd::IsPskdValid(char const*)
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[35]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[174]"></a>mktime</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_commandAM1
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrInitUser
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCommand_Queue_processing
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
</UL>

<P><STRONG><a name="[ba9]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::CopyNetworkData(ot::NetworkData::Type, unsigned char*, unsigned char&) const
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ReadBytes(unsigned short, void*, unsigned short) const
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::Set(unsigned char const*, unsigned char)
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::SubscribeExternalMulticast(ot::Ip6::Address const&)
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ConvertTo(otOperationalDatasetTlvs&) const
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendGetRequest(ot::MeshCoP::Dataset::Components const&, unsigned char const*, unsigned char, otIp6Address const*) const
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetFrom(otOperationalDatasetTlvs const&)
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::GeneratePskc(char const*, ot::MeshCoP::NetworkName const&, ot::MeshCoP::ExtendedPanId const&, ot::Pskc&)
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Init(unsigned int, unsigned int, unsigned char, void const*, unsigned char)
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::SetToken(unsigned char const*, unsigned char)
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::PrependBytes(void const*, unsigned short)
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameData::ReadBytes(void*, unsigned short)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::InsertBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::WriteBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::AppendBytes(void const*, unsigned short)
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Connect(ot::Ip6::SockAddr const&)
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::SetPsk(unsigned char const*, unsigned char)
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Clone(unsigned short) const
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Connect(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&)
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Bind(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&, ot::Ip6::NetifIdentifier)
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetChildNextIp6Address
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::GetNextCacheEntry(ot::AddressResolver::EntryInfo&, ot::AddressResolver::Iterator&) const
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::GetPskc(ot::Pskc&) const
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::GetNetworkKey(ot::NetworkKey&) const
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::Discover(ot::Mac::ChannelMask const&, unsigned short, bool, bool, ot::MeshCoP::SteeringData::HashBitIndexes const*, void (*)(otActiveScanResult*, void*), void*)
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetKeySource(unsigned char const*)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::KeyMaterial::SetFrom(ot::Mac::Key const&, bool)
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoPbkdf2GenerateKey
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_cmac_prf_128
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NameData::CopyTo(char*, unsigned char) const
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SteeringDataTlv::CopyTo(ot::MeshCoP::SteeringData&) const
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo(ot::Ip6::Address const&)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SetCommissioningData(unsigned char const*, unsigned char)
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::DelaySendingJoinerEntrust(ot::Ip6::MessageInfo const&, ot::Mac::Key const&)
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerPskd::SetFrom(char const*)
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::GetLocatorAddress(ot::Ip6::Address&, unsigned short) const
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetTlv(ot::MeshCoP::Tlv::Type, void const*, unsigned char)
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkName::Set(ot::MeshCoP::NameData const&)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::PerformNextRegistration()
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&)
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Service::Manager::GetNextDnsSrpUnicastInfo(ot::NetworkData::Service::Manager::Iterator&, ot::NetworkData::Service::DnsSrpUnicast::Info&) const
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::Resolve(ot::Ip6::Address const&, unsigned short&, bool)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::UpdateSnoopedCacheEntry(ot::Ip6::Address const&, unsigned short, unsigned short)
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetPrefix(ot::Ip6::Prefix const&)
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToRealmLocalAllRoutersMulticast()
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLinkLocalAllRoutersMulticast()
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLinkLocalAllNodesMulticast()
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetMulticastNetworkPrefix(unsigned char const*, unsigned char)
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::ApplyPrefix(ot::Ip6::Prefix const&)
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToRealmLocalAllMplForwarders()
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::AddTunneledMplOption(ot::Message&, ot::Ip6::Header&)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddIp6Address(ot::Ip6::Address const&)
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendAfterDelay(ot::Ip6::Address const&, unsigned short)
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::InformPreviousParent()
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;ot::Pskc&rang;(ot::Pskc&, ot::Pskc const&, ot::Event)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;ot::NetworkKey&rang;(ot::NetworkKey&, ot::NetworkKey const&, ot::Event)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareEmptyFrame(ot::Mac::TxFrame&, ot::Mac::Address const&, bool)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool)
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::PingSender::SendPing()
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::PrepareMessageInfoForDest(ot::Ip6::Address const&, ot::Tmf::MessageInfo&) const
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)16&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddServer(ot::NetworkData::ServerTlv const&, ot::NetworkData::ServiceTlv&, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddPrefix(ot::NetworkData::PrefixTlv const&, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::ServiceTlv::Init(unsigned char, unsigned int, ot::NetworkData::ServiceData const&)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::ServiceConfig::SetFrom(ot::NetworkData::ServiceTlv const&, ot::NetworkData::ServerTlv const&)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::AppendToUniqueAddressList(ot::Ip6::Address (&) [15], unsigned char&, ot::Ip6::Address const&)
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::Coap(otInstance*, ot::Cli::OutputImplementer&)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_encrypt_buf
<LI><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_decrypt_buf
<LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flight_transmit
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_drbg_reseed_core
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_hash
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed_internal
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_update
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_finish
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtpToMpCalibration
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_read_event
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rf_proc
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_commandAM1
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_data_send
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart2_data_parse
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart1_data_parse
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_init
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_register_post
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udp_received_queue_push
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_task
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_stdio_read
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_write
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_read
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_request_proccess
<LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_data_parse
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerCallback
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_command
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCommand_Queue_processing
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AAFIRST
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_get_noEn
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Set_Transmit
<LI><a href="#[b7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Send_AARQ
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Rafael_data
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Get_New_Number_of_pens
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_GetData_Request
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Action_Transmit
<LI><a href="#[b79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_queue
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_queue
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_Demand_Task_Assembly
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_factory_id_set
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashData
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_Command
</UL>

<P><STRONG><a name="[195]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Leader::HandleTmf&lang;(ot::Uri)23&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtpToMpCalibration
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_commandAM1
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_init
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrInitUser
<LI><a href="#[b46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bootloader_info_check
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bootinfo_reset
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Set_Transmit
<LI><a href="#[b7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Send_AARQ
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Get_New_Number_of_pens
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_GetData_Request
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Action_Transmit
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_Information
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_Command
</UL>

<P><STRONG><a name="[2b6]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::FromString(char const*)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::InsertBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SaveDiscoveredJoinerRouter(otActiveScanResult const&)
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::RemoveTlv(ot::MeshCoP::Tlv::Type)
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetTlv(ot::MeshCoP::Tlv::Type, void const*, unsigned char)
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::UpdateSeedSet(unsigned short, unsigned char)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseCmd(char*, ot::Utils::CmdLineParser::Arg*, unsigned char)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::Insert(void*, unsigned char)
<LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[baa]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[bab]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_udpsend
<LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[9d2]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bootinfo_reset
<LI><a href="#[b44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_write
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>

<P><STRONG><a name="[bac]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::FromString(char const*)
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Info::GenerateRandom(ot::Instance&)
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(otOperationalDatasetTlvs&) const
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Payload(void*, void*, unsigned int, ot::Crypto::AesCcm::Mode)
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Init(unsigned int, unsigned int, unsigned char, void const*, unsigned char)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::MeshForwarder(ot::Instance&)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::KeyManager(ot::Instance&)
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Init()
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::ParseHeader()
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::Socket(ot::Instance&)
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NameData::CopyTo(char*, unsigned char) const
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SecurityPolicy::GetFlags(unsigned char*, unsigned char) const
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerPskd::SetFrom(char const*)
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Disconnect()
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::Clear()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::Info::SetFrom(ot::Child const&)
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::UnicastAddress::InitAsThreadOriginRealmLocalScope()
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::UnicastAddress::InitAsThreadOrigin(bool)
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::UnicastAddress::InitAsSlaacOrigin(unsigned char, bool)
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressBaseHeader(ot::Ip6::Header&, bool&, ot::Mac::Addresses const&, ot::FrameData&)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Headers::ParseFrom(ot::Message const&)
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::ClearIp6Addresses()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::RouterTable(ot::Instance&)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Clear()
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Parent::Clear()
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::RouteTlv::Init()
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Mle(ot::Instance&)
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Attach(ot::Mle::Mle::AttachMode)
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildIdResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAttachTimer()
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ParentCandidate::Clear()
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ThreadLinkInfo::SetFrom(ot::Mac::RxFrame const&)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::Stop()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Router::Clear()
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Router::Info::SetFrom(ot::Router const&)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&)
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::OnMeshPrefixConfig::SetFrom(ot::NetworkData::PrefixTlv const&, ot::NetworkData::BorderRouterTlv const&, ot::NetworkData::BorderRouterEntry const&)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::ServiceConfig::SetFrom(ot::NetworkData::ServiceTlv const&, ot::NetworkData::ServerTlv const&)
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::Info::SetFrom(ot::Neighbor const&)
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_fill_random_internal
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_encrypt_buf
<LI><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_decrypt_buf
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_reset_int
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_neighbor_Change_Callback
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udp_cb
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_proc
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortCalloc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_timer_handler
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCommand_Queue_processing
</UL>

<P><STRONG><a name="[1a4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::GetBufferInfo(ot::Instance::BufferInfo&)
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkResetCounters
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendGetRequest(ot::MeshCoP::Dataset::Components const&, unsigned char const*, unsigned char, otIp6Address const*) const
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Dataset()
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSetRequest(ot::MeshCoP::Dataset::Info const&, unsigned char const*, unsigned char, void (*)(otError, void*), void*)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&)
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Joiner(ot::Instance&)
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::Slaac(ot::Instance&)
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Restore()
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::Mac(ot::Instance&)
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::Ip6(ot::Instance&)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::MeshForwarder(ot::Instance&)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::Leader(ot::Instance&)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::KeyManager(ot::Instance&)
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Dtls(ot::Instance&, bool)
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::FindMatchedResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) const
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::HandleRetransmissionTimer()
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::UpdateQueue()
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::HandleTimer()
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::Close()
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Close(ot::Ip6::Udp::SocketHandle&)
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Open(ot::Ip6::Udp::SocketHandle&, void (*)(void*, otMessage*, otMessageInfo const*), void*)
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::GetNextCacheEntry(ot::AddressResolver::EntryInfo&, ot::AddressResolver::Iterator&) const
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressQueryResponse(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, unsigned int const*, ot::Ip6::Address const&)
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ConvertBeaconToActiveScanResult(ot::Mac::RxFrame const*, otActiveScanResult&)
<LI><a href="#[a8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_init
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TrickleTimer::TrickleTimer(ot::Instance&, void (&)(ot::TrickleTimer&))
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsSet
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsAdd
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::JoinerRouter::HandleTmf&lang;(ot::Uri)29&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::DelaySendingJoinerEntrust(ot::Ip6::MessageInfo const&, ot::Mac::Key const&)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::SendDelayedJoinerEntrust()
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendDatasetChanged(ot::Ip6::Address const&)
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSet()
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SubMac(ot::Instance&)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::SendAddressNotification(ot::Ip6::Address&, ot::ThreadStatusTlv::DuaStatus, ot::Child const&)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::PerformNextRegistration()
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoveryResponse(ot::Mle::Mle::RxInfo&) const
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::ResolveUsingNetDataServices(ot::Ip6::Address const&, unsigned short&)
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressError(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, ot::Ip6::Address const*)
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressBaseHeader(ot::Ip6::Header&, bool&, ot::Mac::Addresses const&, ot::FrameData&)
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::Mpl(ot::Instance&)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool)
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendIcmpError(ot::Message&, ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Ip6::Headers const&)
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::HandleEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressSolicit(ot::ThreadStatusTlv::Status)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::RouterTable(ot::Instance&)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::Reset()
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressRelease()
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::InformPreviousParent()
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::CheckReachability(ot::FrameData const&, ot::Mac::Addresses const&)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendIcmpErrorIfDstUnreach(ot::Message const&, ot::Mac::Addresses const&)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&)
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressMulticast(ot::Ip6::Address const&, unsigned short&, ot::FrameBuilder&)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Store()
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::EnergyScanServer::SendReport()
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseCmd(char*, ot::Utils::CmdLineParser::Arg*, unsigned char)
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioClearSrcMatchShortEntries
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioClearSrcMatchExtEntries
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PanIdQueryServer::SendConflict()
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)34&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::SendCommand(ot::Uri, ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::SendServerDataNotification(unsigned short, ot::NetworkData::NetworkData const*)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistrationMessage(otIp6Address const*, unsigned char, unsigned int const*, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_init
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_fill_random_internal
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_resize_clear
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatUartEnable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;1665316120ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;483635559789ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::ProcessRequest(ot::Utils::CmdLineParser::Arg*, otCoapCode)
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::Coap(otInstance*, ot::Cli::OutputImplementer&)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1715061262ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::UdpExample::UdpExample(otInstance*, ot::Cli::OutputImplementer&)
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_drbg_reseed_core
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_init
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed_internal
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpSectorInit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpecValidMpId
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_init
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_commandAM1
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_received_task
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_register_post
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udpSend
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sockInit
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_init
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_exp_log_out
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_proc
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_task
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_coap_request
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bitmap_init
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_coap_request
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_request_proccess
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_Demand_Task_Assembly
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[49e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset::Info&) const
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Joiner(ot::Instance&)
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Dtls(ot::Instance&, bool)
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadResetMleCounters
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Joiner::HandleTmf&lang;(ot::Uri)20&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressBaseHeader(ot::Ip6::Header&, bool&, ot::Mac::Addresses const&, ot::FrameData&)
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Mle(ot::Instance&)
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Reattach()
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)35&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;7040008844819482601ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;513233767555ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;424573284472ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;29803101196888419ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;2882870027264844783ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;17991946006187835024ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;1648543237ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;15490430763919346926ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;13879157579010930576ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;13154242556027051009ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;12771032504430052662ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;11734141454226389327ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;11015563977516890969ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_reset_int
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrInitUser
<LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioInit
<LI><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_reset
</UL>

<P><STRONG><a name="[161]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_util.o(.rodata.memset_func)
</UL>
<P><STRONG><a name="[9a0]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[5ea]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Coap::Process&lang;7568770ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Coap::Process&lang;7108473799409246994ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_proc
</UL>

<P><STRONG><a name="[502]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ParseJoinerDiscerner(ot::Utils::CmdLineParser::Arg&, otJoinerDiscerner&)
</UL>

<P><STRONG><a name="[47a]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::AppendUriPathOptions(char const*)
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IsValidUtf8String(char const*)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::GetLength() const
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseCmd(char*, ot::Utils::CmdLineParser::Arg*, unsigned char)
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseHexString(char const*&, unsigned short&, unsigned char*, ot::Utils::CmdLineParser::HexStringParseMode)
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::HandleRequest(otMessage*, otMessageInfo const*)
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputTableHeader(unsigned char, char const* const*, unsigned char const*)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_hash
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrInitUser
<LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_exp_log_out
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_shell_log
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_proc
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_uartTask
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_set_env_blob
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_env_set_default
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env_cb
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Rafael_data
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_number
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[326]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ProcessReceivedRequest(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int ot::BinarySearch::Compare&lang;char const*, ot::UriList::Entry&rang;(void const*, void const*)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int ot::BinarySearch::Compare&lang;char*, ot::Cli::Output::CommandEntry&lang;ot::Cli::UdpExample&rang; &rang;(void const*, void const*)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int ot::BinarySearch::Compare&lang;char*, ot::Cli::Output::CommandEntry&lang;ot::Cli::NetworkData&rang; &rang;(void const*, void const*)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int ot::BinarySearch::Compare&lang;char*, ot::Cli::Output::CommandEntry&lang;ot::Cli::Joiner&rang; &rang;(void const*, void const*)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int ot::BinarySearch::Compare&lang;char*, ot::Cli::Output::CommandEntry&lang;ot::Cli::Dataset&rang; &rang;(void const*, void const*)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int ot::BinarySearch::Compare&lang;char*, ot::Cli::Output::CommandEntry&lang;ot::Cli::Coap&rang; &rang;(void const*, void const*)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int ot::BinarySearch::Compare&lang;char*, ot::Cli::Output::CommandEntry&lang;ot::Cli::Interpreter&rang; &rang;(void const*, void const*)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sh_cmd_help
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[27d]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::UnsubscribeExternalMulticast(ot::Ip6::Address const&)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::RemoveExternalUnicastAddress(ot::Ip6::Address const&)
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::SubscribeExternalMulticast(ot::Ip6::Address const&)
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::AddExternalUnicastAddress(ot::Ip6::Netif::UnicastAddress const&)
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataUtils::MatchBytes(unsigned char const*, unsigned char const*, unsigned short, bool (*)(unsigned char, unsigned char))
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::IsTokenEqual(ot::Coap::Message const&) const
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::FindMatchedResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) const
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::FindRelatedRequest(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::Coap::CoapBase::Metadata&)
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ClearRequests(ot::Ip6::Address const*)
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetMeshLocalPrefix(ot::Ip6::NetworkPrefix const&)
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Filter::FindEntry(ot::Mac::ExtAddress const&) const
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::RxFrame::ProcessReceiveAesCcm(ot::Mac::ExtAddress const&, ot::Mac::KeyMaterial const&)
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::SaveEntry(ot::SettingsBase::Key, void const*, void*, unsigned short)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsRoutingLocator(ot::Ip6::Address const&) const
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;ot::MeshCoP::ExtendedPanId&rang;(ot::MeshCoP::ExtendedPanId&, ot::MeshCoP::ExtendedPanId const&, ot::Event)
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ApplyConfiguration(ot::Instance&, bool*) const
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkName::Set(ot::MeshCoP::NameData const&)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::HasIp6Address(ot::Ip6::Address const&) const
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::CacheEntry const* ot::LinkedList&lang;ot::AddressResolver::CacheEntry&rang;::FindMatching&lang;ot::Ip6::Address&rang;(ot::AddressResolver::CacheEntry const*, ot::AddressResolver::CacheEntry const*, ot::Ip6::Address const&, ot::AddressResolver::CacheEntry const*&) const
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::RemoveIp6Address(ot::Ip6::Address const&)
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)1&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)0&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::ResolveUsingNetDataServices(ot::Ip6::Address const&, unsigned short&)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError)
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::SocketHandle::Matches(ot::Ip6::MessageInfo const&) const
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ot::LinkedList&lang;ot::Ip6::Netif::MulticastAddress&rang;::ContainsMatching&lang;ot::Ip6::Address&rang;(ot::Ip6::Address const&) const
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ot::LinkedList&lang;ot::Ip6::Netif::UnicastAddress&rang;::ContainsMatching&lang;ot::Ip6::Address&rang;(ot::Ip6::Address const&) const
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsMeshLocalAddress(ot::Ip6::Address const&) const
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsAnycastLocator(ot::Ip6::Address const&) const
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SelectSourceAddress(ot::Ip6::Address const&) const
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::InitOption(ot::Ip6::MplOption&, ot::Ip6::Address const&)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMessage(ot::Message&)
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatFindNwkMgmChildRegTable
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddIp6Address(ot::Ip6::Address const&)
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)3&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::UpdateProxiedSubscriptions(ot::Child&, ot::Ip6::Address const*, unsigned short)
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Challenge::Matches(unsigned char const*, unsigned char) const
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleDiscoveryRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Mle::Mle::AddressRegistrationMode)
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HasUnregisteredAddress()
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RemoveDelayedMessage(ot::Message::SubType, ot::Mle::Mle::MessageType, ot::Ip6::Address const*)
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleParentResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildIdRequest()
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressDestinationIid(ot::Mac::Address const&, ot::Ip6::Address const&, ot::Lowpan::Context const&, unsigned short&, ot::FrameBuilder&)
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressSourceIid(ot::Mac::Address const&, ot::Ip6::Address const&, ot::Lowpan::Context const&, unsigned short&, ot::FrameBuilder&)
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressMulticast(ot::Ip6::Address const&, unsigned short&, ot::FrameBuilder&)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;ot::Pskc&rang;(ot::Pskc&, ot::Pskc const&, ot::Event)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;ot::NetworkKey&rang;(ot::NetworkKey&, ot::NetworkKey const&, ot::Event)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::GetMacSourceAddress(ot::Ip6::Address const&, ot::Mac::Address&)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::ContainsMatchingServer(ot::NetworkData::ServiceTlv const*, ot::NetworkData::ServerTlv const&)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::ContainsMatchingEntry(ot::NetworkData::HasRouteTlv const*, ot::NetworkData::HasRouteEntry const&)
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetServiceId(unsigned int, ot::NetworkData::ServiceData const&, bool, unsigned char&) const
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::MatchService(ot::NetworkData::ServiceTlv const&, unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode)
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::HasMlrRegisteredAddress(ot::Ip6::Address const&) const
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::FinishMulticastListenerRegistration(bool, ot::Ip6::Address const*, unsigned char)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::AppendToUniqueAddressList(ot::Ip6::Address (&) [15], unsigned char&, ot::Ip6::Address const&)
<LI><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_hs_is_proper_fragment
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udp_cb
<LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env_cb
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_request_proccess
<LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_reg_table_remove
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_reg_table_add
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_ack_process
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
</UL>

<P><STRONG><a name="[5e2]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::ProcessRequest(ot::Utils::CmdLineParser::Arg*, otCoapCode)
<LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer
</UL>

<P><STRONG><a name="[90a]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Leader::HandleTmf&lang;(ot::Uri)23&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_proc
</UL>

<P><STRONG><a name="[178]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCAlloc
</UL>

<P><STRONG><a name="[17a]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
</UL>

<P><STRONG><a name="[17c]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[17e]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[182]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_get_fan_status
</UL>

<P><STRONG><a name="[183]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_get_fan_status
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[99e]"></a>__aeabi_dcmplt</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmplt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_get_fan_status
</UL>

<P><STRONG><a name="[186]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_get_fan_status
</UL>

<P><STRONG><a name="[187]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_get_fan_status
</UL>

<P><STRONG><a name="[188]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_get_fan_status
</UL>

<P><STRONG><a name="[bad]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[ba2]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[172]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[bae]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[baf]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[bb0]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_get_fan_status
</UL>

<P><STRONG><a name="[175]"></a>_localtime</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[17d]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[17b]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[32]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[33]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[bb1]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[180]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[18b]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b9f]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[16c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[bb2]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[bb3]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[bb4]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>AAFIRST</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, das_dlms_cmd.o(.text.AAFIRST))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AAFIRST &rArr; udf_Send_DISC &rArr; app_uart_data_send &rArr; __app_task_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Send_DISC
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__das_dlms_task
</UL>

<P><STRONG><a name="[199]"></a>Broadcast_function_timeout_handlr</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, das_dlms_cmd.o(.text.Broadcast_function_timeout_handlr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = Broadcast_function_timeout_handlr &rArr; app_udpSend &rArr; otUdpSend &rArr; ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udpSend
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerCallback
</UL>

<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, rf_mcu.o(.text.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = BusFault_Handler &rArr; puts
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[19b]"></a>Change_Ahb_System_Clk</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, sysctrl.o(.text.Change_Ahb_System_Clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Change_Ahb_System_Clk &rArr; flash_timing_init
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemFrequencyUpdate
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pll_Status_Check
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_timing_init
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2e]"></a>Comp_Handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, comparator.o(.text.Comp_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[a2c]"></a>Comp_Int_Disable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, comparator.o(.text.Comp_Int_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
</UL>

<P><STRONG><a name="[a2d]"></a>Comp_Int_Enable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, comparator.o(.text.Comp_Int_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
</UL>

<P><STRONG><a name="[19f]"></a>Delay_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sysctrl.o(.text.Delay_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Ahb_System_Clk
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Ahb_System_Clk
</UL>

<P><STRONG><a name="[1a1]"></a>GetMpSectorInfo</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, mp_sector.o(.text.GetMpSectorInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetMpSectorInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_deviceinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpSectorInit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpecValidMpId
</UL>

<P><STRONG><a name="[1a5]"></a>GetNextValidMpId</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, mp_sector.o(.text.GetNextValidMpId))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpCalibrationInit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpecValidMpId
</UL>

<P><STRONG><a name="[b6e]"></a>GetPmuMode</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sysfun.o(.text.GetPmuMode))
<BR><BR>[Called By]<UL><LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_init_by_fw
<LI><a href="#[b6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_cal_init
</UL>

<P><STRONG><a name="[1a3]"></a>GetSpecValidMpId</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, mp_sector.o(.text.GetSpecValidMpId))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetSpecValidMpId &rArr; GetMpSectorInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextValidMpId
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMpSectorInfo
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpCalRftrimRead
</UL>

<P><STRONG><a name="[1a0]"></a>Get_Ahb_System_Clk</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, sysctrl.o(.text.Get_Ahb_System_Clk))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemFrequencyUpdate
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_timing_init
</UL>

<P><STRONG><a name="[1a6]"></a>HandleBusyFlagAndCount</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, das_dlms_cmd.o(.text.HandleBusyFlagAndCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HandleBusyFlagAndCount &rArr; puts
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerCallback
</UL>

<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart_stdio.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HardFault_Handler &rArr; my_fault_handler_c &rArr; _exp_log_out
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_fault_handler_c
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[b15]"></a>Lpm_Low_Power_Mask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpm.o(.text.Lpm_Low_Power_Mask))
<BR><BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioTransmit
</UL>

<P><STRONG><a name="[1f6]"></a>Lpm_Low_Power_Unmask</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpm.o(.text.Lpm_Low_Power_Unmask))
<BR><BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioTransmit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[1aa]"></a>MpCalDcdcInit</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, mp_sector.o(.text.MpCalDcdcInit))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpCalibrationInit
</UL>

<P><STRONG><a name="[1ad]"></a>MpCalIoldoInit</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, mp_sector.o(.text.MpCalIoldoInit))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpCalibrationInit
</UL>

<P><STRONG><a name="[1ab]"></a>MpCalLldoInit</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, mp_sector.o(.text.MpCalLldoInit))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpCalibrationInit
</UL>

<P><STRONG><a name="[1ac]"></a>MpCalPowerfailInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, mp_sector.o(.text.MpCalPowerfailInit))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpCalibrationInit
</UL>

<P><STRONG><a name="[1a8]"></a>MpCalRftrimRead</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mp_sector.o(.text.MpCalRftrimRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MpCalRftrimRead &rArr; GetSpecValidMpId &rArr; GetMpSectorInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpecValidMpId
</UL>
<BR>[Called By]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
<LI><a href="#[b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_update_band_info
<LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_tx_pwr_set
<LI><a href="#[b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_rssi_offset_set
<LI><a href="#[b6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_cal_init
</UL>

<P><STRONG><a name="[1af]"></a>MpCalSioldoInit</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, mp_sector.o(.text.MpCalSioldoInit))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpCalibrationInit
</UL>

<P><STRONG><a name="[1ae]"></a>MpCalSldoInit</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, mp_sector.o(.text.MpCalSldoInit))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpCalibrationInit
</UL>

<P><STRONG><a name="[1a9]"></a>MpCalibrationInit</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, mp_sector.o(.text.MpCalibrationInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MpCalibrationInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpCalSldoInit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpCalSioldoInit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpCalPowerfailInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpCalLldoInit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpCalIoldoInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpCalDcdcInit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextValidMpId
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpSectorInit
</UL>

<P><STRONG><a name="[1b0]"></a>MpSectorInit</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, mp_sector.o(.text.MpSectorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MpSectorInit &rArr; OtpToMpCalibration &rArr; OtpToMpVoselCal
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtpToMpCalibration
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpCalibrationInit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMpSectorInfo
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1b5]"></a>OtpAdcRangeCheck</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, mp_sector.o(.text.OtpAdcRangeCheck))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtpToMpCalibration
</UL>

<P><STRONG><a name="[1b4]"></a>OtpPmuRangeCheck</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, mp_sector.o(.text.OtpPmuRangeCheck))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtpToMpCalibration
</UL>

<P><STRONG><a name="[1b1]"></a>OtpToMpCalibration</STRONG> (Thumb, 1534 bytes, Stack size 104 bytes, mp_sector.o(.text.OtpToMpCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = OtpToMpCalibration &rArr; OtpToMpVoselCal
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtpToMpVoselCal
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtpPmuRangeCheck
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtpAdcRangeCheck
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_otp_sec_page
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpSectorInit
</UL>

<P><STRONG><a name="[1b3]"></a>OtpToMpVoselCal</STRONG> (Thumb, 218 bytes, Stack size 52 bytes, mp_sector.o(.text.OtpToMpVoselCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OtpToMpVoselCal
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtpToMpCalibration
</UL>

<P><STRONG><a name="[19c]"></a>Pll_Status_Check</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, sysctrl.o(.text.Pll_Status_Check))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Ahb_System_Clk
</UL>

<P><STRONG><a name="[1b6]"></a>Rafael_Register</STRONG> (Thumb, 452 bytes, Stack size 32 bytes, das_dlms_cmd.o(.text.Rafael_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456 + Unknown Stack Size
<LI>Call Chain = Rafael_Register &rArr; register_command &rArr; udf_Rafael_data &rArr; app_udpSend &rArr; otUdpSend &rArr; ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Send_DISC
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_command
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Rafael_data
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Get_New_Number_of_pens
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_number
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerCallback
</UL>

<P><STRONG><a name="[1e6]"></a>Rco40k_Analog_Calibration</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, system_cm3_mcu_1.o(.text.Rco40k_Analog_Calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Rco40k_Analog_Calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1ba]"></a>ReceiveCommand_Queue_processing</STRONG> (Thumb, 1552 bytes, Stack size 64 bytes, das_dlms_cmd.o(.text.ReceiveCommand_Queue_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 2308 + Unknown Stack Size
<LI>Call Chain = ReceiveCommand_Queue_processing &rArr; udf_Set_Transmit &rArr; udf_AES_GCM_Encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Send_SNRM
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Send_DISC
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Set_Transmit
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Rafael_data
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Action_Transmit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashData
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_Command
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__das_dlms_task
</UL>

<P><STRONG><a name="[1c2]"></a>RfMcu_AhbIsrHandler</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, rf_mcu_ahb.o(.text.RfMcu_AhbIsrHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = RfMcu_AhbIsrHandler &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commsubsystem_handler
</UL>

<P><STRONG><a name="[a3e]"></a>RfMcu_CmdQueueSend</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, rf_mcu.o(.text.RfMcu_CmdQueueSend))
<BR><BR>[Called By]<UL><LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_wrire_command
<LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_tx_pwr_set
<LI><a href="#[b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_rssi_offset_set
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_pta_default_set
<LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_pmu_operation_mode
<LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_cal_set
</UL>

<P><STRONG><a name="[1c5]"></a>RfMcu_CmdQueueSendAhb</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, rf_mcu_ahb.o(.text.RfMcu_CmdQueueSendAhb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_IoSetAhb
</UL>

<P><STRONG><a name="[1d6]"></a>RfMcu_DmaBusyCheck</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, rf_mcu_ahb.o(.text.RfMcu_DmaBusyCheck))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_MemorySetAhb
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_MemoryGetAhb
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_IoSetAhb
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_IoGetAhb
</UL>

<P><STRONG><a name="[1c7]"></a>RfMcu_DmaInit</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, rf_mcu.o(.text.RfMcu_DmaInit))
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_SysRdySignalWaitAhb
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptEnSetAhb
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_HostCtrlAhb
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_SysInit
</UL>

<P><STRONG><a name="[98d]"></a>RfMcu_EvtQueueRead</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, rf_mcu.o(.text.RfMcu_EvtQueueRead))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rf_proc
<LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_event_get
</UL>

<P><STRONG><a name="[1cb]"></a>RfMcu_EvtQueueReadAhb</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, rf_mcu_ahb.o(.text.RfMcu_EvtQueueReadAhb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_IoGetAhb
</UL>

<P><STRONG><a name="[990]"></a>RfMcu_HostCmdSet</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, rf_mcu.o(.text.RfMcu_HostCmdSet))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rf_proc
<LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_event_get
</UL>

<P><STRONG><a name="[1de]"></a>RfMcu_HostCmdSetAhb</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, rf_mcu_ahb.o(.text.RfMcu_HostCmdSetAhb))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_SysInitNotify
</UL>

<P><STRONG><a name="[1c8]"></a>RfMcu_HostCtrlAhb</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, rf_mcu_ahb.o(.text.RfMcu_HostCtrlAhb))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_DmaInit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_SysInit
</UL>

<P><STRONG><a name="[1cd]"></a>RfMcu_HostWakeUpMcu</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, rf_mcu.o(.text.RfMcu_HostWakeUpMcu))
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_HostWakeUpMcuAhb
</UL>
<BR>[Called By]<UL><LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_write_tx_data
<LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_wrire_command
</UL>

<P><STRONG><a name="[1ce]"></a>RfMcu_HostWakeUpMcuAhb</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, rf_mcu_ahb.o(.text.RfMcu_HostWakeUpMcuAhb))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_HostWakeUpMcu
</UL>

<P><STRONG><a name="[1cf]"></a>RfMcu_ImageLoad</STRONG> (Thumb, 138 bytes, Stack size unknown bytes, rf_mcu.o(.text.RfMcu_ImageLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = RfMcu_ImageLoad &rArr; RfMcu_MemorySetAhb &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_MemorySetAhb
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_PmPageSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_SysInit
</UL>

<P><STRONG><a name="[98a]"></a>RfMcu_InterruptClear</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, rf_mcu.o(.text.RfMcu_InterruptClear))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rf_event_callback
<LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_tx_pwr_set
<LI><a href="#[b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_rssi_offset_set
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_pta_default_set
<LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_pmu_operation_mode
<LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_cal_set
</UL>

<P><STRONG><a name="[bb5]"></a>RfMcu_InterruptClearAhb</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, rf_mcu_ahb.o(.text.RfMcu_InterruptClearAhb), UNUSED)

<P><STRONG><a name="[1d3]"></a>RfMcu_InterruptDisableAhb</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, rf_mcu_ahb.o(.text.RfMcu_InterruptDisableAhb))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptDisableAll
</UL>

<P><STRONG><a name="[1d2]"></a>RfMcu_InterruptDisableAll</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, rf_mcu.o(.text.RfMcu_InterruptDisableAll))
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptDisableAhb
</UL>
<BR>[Called By]<UL><LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rf_push_state
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rf_proc
</UL>

<P><STRONG><a name="[b71]"></a>RfMcu_InterruptEnGet</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, rf_mcu.o(.text.RfMcu_InterruptEnGet))
<BR><BR>[Called By]<UL><LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_tx_pwr_set
<LI><a href="#[b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_rssi_offset_set
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_pta_default_set
<LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_pmu_operation_mode
<LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_cal_set
</UL>

<P><STRONG><a name="[bb6]"></a>RfMcu_InterruptEnGetAhb</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, rf_mcu_ahb.o(.text.RfMcu_InterruptEnGetAhb), UNUSED)

<P><STRONG><a name="[b72]"></a>RfMcu_InterruptEnSet</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, rf_mcu.o(.text.RfMcu_InterruptEnSet))
<BR><BR>[Called By]<UL><LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_tx_pwr_set
<LI><a href="#[b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_rssi_offset_set
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_pta_default_set
<LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_pmu_operation_mode
<LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_cal_set
</UL>

<P><STRONG><a name="[1ca]"></a>RfMcu_InterruptEnSetAhb</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, rf_mcu_ahb.o(.text.RfMcu_InterruptEnSetAhb))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_DmaInit
</UL>

<P><STRONG><a name="[1d5]"></a>RfMcu_InterruptEnableAhb</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, rf_mcu_ahb.o(.text.RfMcu_InterruptEnableAhb))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptEnableAll
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_SysInit
</UL>

<P><STRONG><a name="[1d4]"></a>RfMcu_InterruptEnableAll</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, rf_mcu.o(.text.RfMcu_InterruptEnableAll))
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptEnableAhb
</UL>
<BR>[Called By]<UL><LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rf_push_state
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rf_proc
</UL>

<P><STRONG><a name="[1cc]"></a>RfMcu_IoGetAhb</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, rf_mcu_ahb.o(.text.RfMcu_IoGetAhb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_DmaBusyCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_RxQueueReadAhb
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_EvtQueueReadAhb
</UL>

<P><STRONG><a name="[1c6]"></a>RfMcu_IoSetAhb</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, rf_mcu_ahb.o(.text.RfMcu_IoSetAhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = RfMcu_IoSetAhb &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_DmaBusyCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_TxQueueSendAhb
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_CmdQueueSendAhb
</UL>

<P><STRONG><a name="[98f]"></a>RfMcu_McuStateRead</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, rf_mcu.o(.text.RfMcu_McuStateRead))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rf_proc
<LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_event_get
</UL>

<P><STRONG><a name="[1dd]"></a>RfMcu_McuStateReadAhb</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, rf_mcu_ahb.o(.text.RfMcu_McuStateReadAhb))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_SysInitNotify
</UL>

<P><STRONG><a name="[a3b]"></a>RfMcu_MemoryGet</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, rf_mcu.o(.text.RfMcu_MemoryGet))
<BR><BR>[Called By]<UL><LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_write_tx_data
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>

<P><STRONG><a name="[1d7]"></a>RfMcu_MemoryGetAhb</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, rf_mcu_ahb.o(.text.RfMcu_MemoryGetAhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = RfMcu_MemoryGetAhb &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_DmaBusyCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_PmPageSelect
</UL>

<P><STRONG><a name="[a3c]"></a>RfMcu_MemorySet</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, rf_mcu.o(.text.RfMcu_MemorySet))
<BR><BR>[Called By]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>

<P><STRONG><a name="[1d1]"></a>RfMcu_MemorySetAhb</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, rf_mcu_ahb.o(.text.RfMcu_MemorySetAhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = RfMcu_MemorySetAhb &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_DmaBusyCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_PmPageSelect
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_ImageLoad
</UL>

<P><STRONG><a name="[1d0]"></a>RfMcu_PmPageSelect</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, rf_mcu.o(.text.RfMcu_PmPageSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = RfMcu_PmPageSelect &rArr; RfMcu_MemorySetAhb &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_MemorySetAhb
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_MemoryGetAhb
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_ImageLoad
</UL>

<P><STRONG><a name="[1d8]"></a>RfMcu_PowerStateCheck</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, rf_mcu.o(.text.RfMcu_PowerStateCheck))
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_PowerStateGetAhb
</UL>
<BR>[Called By]<UL><LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_write_tx_data
<LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_wrire_command
</UL>

<P><STRONG><a name="[1d9]"></a>RfMcu_PowerStateGetAhb</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, rf_mcu_ahb.o(.text.RfMcu_PowerStateGetAhb))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_PowerStateCheck
</UL>

<P><STRONG><a name="[98e]"></a>RfMcu_RxQueueRead</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, rf_mcu.o(.text.RfMcu_RxQueueRead))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rf_proc
</UL>

<P><STRONG><a name="[1da]"></a>RfMcu_RxQueueReadAhb</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, rf_mcu_ahb.o(.text.RfMcu_RxQueueReadAhb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_IoGetAhb
</UL>

<P><STRONG><a name="[1db]"></a>RfMcu_SysInit</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, rf_mcu.o(.text.RfMcu_SysInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = RfMcu_SysInit &rArr; RfMcu_ImageLoad &rArr; RfMcu_MemorySetAhb &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_DmaInit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_SysRdySignalWaitAhb
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptEnableAhb
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_HostCtrlAhb
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_SysInitNotify
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_ImageLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_init_by_fw
</UL>

<P><STRONG><a name="[1dc]"></a>RfMcu_SysInitNotify</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, rf_mcu.o(.text.RfMcu_SysInitNotify))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_McuStateReadAhb
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_HostCmdSetAhb
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_SysInit
</UL>

<P><STRONG><a name="[1c9]"></a>RfMcu_SysRdySignalWaitAhb</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, rf_mcu_ahb.o(.text.RfMcu_SysRdySignalWaitAhb))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_DmaInit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_SysInit
</UL>

<P><STRONG><a name="[1df]"></a>RfMcu_TxQueueSendAhb</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, rf_mcu_ahb.o(.text.RfMcu_TxQueueSendAhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = RfMcu_TxQueueSendAhb &rArr; RfMcu_IoSetAhb &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_IoSetAhb
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_TxQueueSendById
</UL>

<P><STRONG><a name="[1e0]"></a>RfMcu_TxQueueSendById</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, rf_mcu.o(.text.RfMcu_TxQueueSendById))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = RfMcu_TxQueueSendById &rArr; RfMcu_TxQueueSendAhb &rArr; RfMcu_IoSetAhb &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_TxQueueSendAhb
</UL>
<BR>[Called By]<UL><LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_write_tx_data
</UL>

<P><STRONG><a name="[1e1]"></a>Send_Queue_processing</STRONG> (Thumb, 268 bytes, Stack size 80 bytes, das_dlms_cmd.o(.text.Send_Queue_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = Send_Queue_processing &rArr; app_udpSend &rArr; otUdpSend &rArr; ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udpSend
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__das_dlms_task
</UL>

<P><STRONG><a name="[19e]"></a>SystemFrequencyUpdate</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, system_cm3_mcu_1.o(.text.SystemFrequencyUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemFrequencyUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Ahb_System_Clk
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Ahb_System_Clk
</UL>

<P><STRONG><a name="[30]"></a>SystemInit</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, system_cm3_mcu_1.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = SystemInit &rArr; MpSectorInit &rArr; OtpToMpCalibration &rArr; OtpToMpVoselCal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPmuUpdateDig
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPmuUpdateDcdc
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rco40k_Analog_Calibration
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Ahb_System_Clk
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpSectorInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(.text)
</UL>
<P><STRONG><a name="[b6f]"></a>SystemPmuSetMode</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, system_cm3_mcu_1.o(.text.SystemPmuSetMode))
<BR><BR>[Called By]<UL><LI><a href="#[b6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_cal_init
</UL>

<P><STRONG><a name="[1e5]"></a>SystemPmuUpdateDcdc</STRONG> (Thumb, 654 bytes, Stack size 40 bytes, system_cm3_mcu_1.o(.text.SystemPmuUpdateDcdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemPmuUpdateDcdc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_deviceinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1e4]"></a>SystemPmuUpdateDig</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_cm3_mcu_1.o(.text.SystemPmuUpdateDig))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[f]"></a>Timer0_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer_1.o(.text.Timer0_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>Timer1_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer_1.o(.text.Timer1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>Timer2_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer_1.o(.text.Timer2_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Timer3_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer_1.o(.text.Timer3_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>Timer4_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer_1.o(.text.Timer4_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, rf_mcu.o(.text.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = UsageFault_Handler &rArr; puts
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>Wdt_Handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wdt.o(.text.Wdt_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Wdt_Handler &rArr; puts
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[9b1]"></a>Wdt_Start</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, wdt.o(.text.Wdt_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Wdt_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatReset
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[200]"></a>ot::ChildTable::StoreChild(ot::Child const&)</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, child_table.o(.text._ZN2ot10ChildTable10StoreChildERKNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = ot::ChildTable::StoreChild(ot::Child const&) &rArr; ot::ChildTable::RemoveStoredChild(ot::Child const&) &rArr; ot::Settings::ChildInfoIterator::ChildInfoIterator(ot::Instance&) &rArr; ot::Settings::ChildInfoIterator::Read() &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::AddChildInfo(ot::SettingsBase::ChildInfo const&)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::RemoveStoredChild(ot::Child const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::RefreshStoredChildren()
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetChildStateToValid(ot::Child&)
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[203]"></a>ot::ChildTable::GetNewChild()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, child_table.o(.text._ZN2ot10ChildTable11GetNewChildEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ot::ChildTable::GetNewChild() &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Restore()
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleParentRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[234]"></a>ot::ChildTable::GetChildAtIndex(unsigned short)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, child_table.o(.text._ZN2ot10ChildTable15GetChildAtIndexEt))
<BR><BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetChildNextIp6Address
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::GetNextNeighborInfo(short&, ot::Neighbor::Info&)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::PerformNextRegistration()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildSupervisor::GetDestination(ot::Message const&) const
</UL>

<P><STRONG><a name="[206]"></a>ot::ChildTable::GetChildInfoById(unsigned short, ot::Child::Info&)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, child_table.o(.text._ZN2ot10ChildTable16GetChildInfoByIdEtRNS_5Child4InfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = ot::ChildTable::GetChildInfoById(unsigned short, ot::Child::Info&) &rArr; ot::ChildTable::FindChild(unsigned short, ot::Neighbor::StateFilter) &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::Info::SetFrom(ot::Child const&)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::FindChild(unsigned short, ot::Neighbor::StateFilter)
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetChildInfoById
</UL>

<P><STRONG><a name="[201]"></a>ot::ChildTable::RemoveStoredChild(ot::Child const&)</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, child_table.o(.text._ZN2ot10ChildTable17RemoveStoredChildERKNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = ot::ChildTable::RemoveStoredChild(ot::Child const&) &rArr; ot::Settings::ChildInfoIterator::ChildInfoIterator(ot::Instance&) &rArr; ot::Settings::ChildInfoIterator::Read() &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::ChildInfoIterator::ChildInfoIterator(ot::Instance&)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::ChildInfoIterator::Advance()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::ChildInfoIterator::Delete()
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::StoreChild(ot::Child const&)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&)
</UL>

<P><STRONG><a name="[20c]"></a>ot::ChildTable::GetChildInfoByIndex(unsigned short, ot::Child::Info&)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, child_table.o(.text._ZN2ot10ChildTable19GetChildInfoByIndexEtRNS_5Child4InfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = ot::ChildTable::GetChildInfoByIndex(unsigned short, ot::Child::Info&) &rArr; ot::Child::Info::SetFrom(ot::Child const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::Info::SetFrom(ot::Child const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetChildInfoByIndex
</UL>

<P><STRONG><a name="[20d]"></a>ot::ChildTable::RefreshStoredChildren()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, child_table.o(.text._ZN2ot10ChildTable21RefreshStoredChildrenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = ot::ChildTable::RefreshStoredChildren() &rArr; ot::ChildTable::StoreChild(ot::Child const&) &rArr; ot::ChildTable::RemoveStoredChild(ot::Child const&) &rArr; ot::Settings::ChildInfoIterator::ChildInfoIterator(ot::Instance&) &rArr; ot::Settings::ChildInfoIterator::Read() &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::DeleteAllChildInfo()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::StoreChild(ot::Child const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Restore()
</UL>

<P><STRONG><a name="[20f]"></a>ot::ChildTable::SetMaxChildrenAllowed(unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, child_table.o(.text._ZN2ot10ChildTable21SetMaxChildrenAllowedEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ot::ChildTable::SetMaxChildrenAllowed(unsigned short) &rArr; ot::ChildTable::HasChildren(ot::Neighbor::StateFilter) const &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::HasChildren(ot::Neighbor::StateFilter) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetMaxAllowedChildren
</UL>

<P><STRONG><a name="[211]"></a>ot::ChildTable::Restore()</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, child_table.o(.text._ZN2ot10ChildTable7RestoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = ot::ChildTable::Restore() &rArr; ot::ChildTable::RefreshStoredChildren() &rArr; ot::ChildTable::StoreChild(ot::Child const&) &rArr; ot::ChildTable::RemoveStoredChild(ot::Child const&) &rArr; ot::Settings::ChildInfoIterator::ChildInfoIterator(ot::Instance&) &rArr; ot::Settings::ChildInfoIterator::Read() &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::ChildInfoIterator::ChildInfoIterator(ot::Instance&)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::ChildInfoIterator::Advance()
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::Clear()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::SetDeviceMode(ot::Mle::DeviceMode)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::LinkQualityInfo::Clear()
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::SetChildUseShortAddress(ot::Child&, bool)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::Signal(ot::NeighborTable::Event, ot::Neighbor const&)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::FindChild(ot::Mac::ExtAddress const&, ot::Neighbor::StateFilter)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::RefreshStoredChildren()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::GetNewChild()
</UL>
<BR>[Called By]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Restore()
</UL>

<P><STRONG><a name="[217]"></a>ot::ChildTable::Iterator::Reset()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, child_table.o(.text._ZN2ot10ChildTable8Iterator5ResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ot::ChildTable::Iterator::Reset() &rArr; ot::ChildTable::Iterator::Advance()
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::MatchesFilter(ot::Neighbor::StateFilter) const
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
</UL>

<P><STRONG><a name="[219]"></a>ot::ChildTable::Iterator::Advance()</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, child_table.o(.text._ZN2ot10ChildTable8Iterator7AdvanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::ChildTable::Iterator::Advance()
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::MatchesFilter(ot::Neighbor::StateFilter) const
</UL>
<BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveChildrenRloc16(unsigned short)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::Clear()
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::ProcessPendingPolls()
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildSupervisor::HandleTimeTick()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::PerformNextRegistration()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::ProcessDuaResponse(ot::Coap::Message&)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::Clear()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::RescheduleCslTx()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Reset()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)2&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)0&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMessage(ot::Message&)
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::GetMaxChildTimeout(unsigned int&) const
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SynchronizeChildNetworkData()
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode)
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveChildren()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Ip6::Address const&, ot::Neighbor::StateFilter)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveDataResponseMessages()
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessage(ot::Message&)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::ResetFrameCounters()
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::Stop()
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::ClearMessagesForRemovedChildren()
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::AddPendingEntries()
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendChildTable(ot::Message&)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::IsAddressMlrRegisteredByAnyChildExcept(ot::Ip6::Address const&, ot::Child const*) const
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::FinishMulticastListenerRegistration(bool, ot::Ip6::Address const*, unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistration()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SetMulticastAddressMlrState(ot::MlrState, ot::MlrState)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::LogMulticastAddresses()
</UL>

<P><STRONG><a name="[21a]"></a>ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, child_table.o(.text._ZN2ot10ChildTable8IteratorC2ERNS_8InstanceENS_8Neighbor11StateFilterE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter) &rArr; ot::ChildTable::Iterator::Reset() &rArr; ot::ChildTable::Iterator::Advance()
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveChildrenRloc16(unsigned short)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::Clear()
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::ProcessPendingPolls()
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildSupervisor::HandleTimeTick()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::PerformNextRegistration()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::ProcessDuaResponse(ot::Coap::Message&)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::Clear()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::RescheduleCslTx()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)2&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)0&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMessage(ot::Message&)
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::GetMaxChildTimeout(unsigned int&) const
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SynchronizeChildNetworkData()
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode)
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveChildren()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Ip6::Address const&, ot::Neighbor::StateFilter)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveDataResponseMessages()
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessage(ot::Message&)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::ResetFrameCounters()
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::Stop()
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::ClearMessagesForRemovedChildren()
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::AddPendingEntries()
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendChildTable(ot::Message&)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::IsAddressMlrRegisteredByAnyChildExcept(ot::Ip6::Address const&, ot::Child const*) const
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::FinishMulticastListenerRegistration(bool, ot::Ip6::Address const*, unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistration()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SetMulticastAddressMlrState(ot::MlrState, ot::MlrState)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::LogMulticastAddresses()
</UL>

<P><STRONG><a name="[bb7]"></a>ot::ChildTable::Iterator::Iterator__sub_object(ot::Instance&, ot::Neighbor::StateFilter)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, child_table.o(.text._ZN2ot10ChildTable8IteratorC2ERNS_8InstanceENS_8Neighbor11StateFilterE), UNUSED)

<P><STRONG><a name="[212]"></a>ot::ChildTable::FindChild(ot::Mac::ExtAddress const&, ot::Neighbor::StateFilter)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, child_table.o(.text._ZN2ot10ChildTable9FindChildERKNS_3Mac10ExtAddressENS_8Neighbor11StateFilterE))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ot::ChildTable::FindChild(ot::Mac::ExtAddress const&, ot::Neighbor::StateFilter) &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Restore()
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleParentRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[21b]"></a>ot::ChildTable::FindChild(ot::Mac::Address const&, ot::Neighbor::StateFilter)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, child_table.o(.text._ZN2ot10ChildTable9FindChildERKNS_3Mac7AddressENS_8Neighbor11StateFilterE))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ot::ChildTable::FindChild(ot::Mac::Address const&, ot::Neighbor::StateFilter) &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessCsl(ot::Mac::RxFrame const&, ot::Mac::Address const&)
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::HandleDataPoll(ot::Mac::RxFrame&)
</UL>

<P><STRONG><a name="[207]"></a>ot::ChildTable::FindChild(unsigned short, ot::Neighbor::StateFilter)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, child_table.o(.text._ZN2ot10ChildTable9FindChildEtNS_8Neighbor11StateFilterE))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ot::ChildTable::FindChild(unsigned short, ot::Neighbor::StateFilter) &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetNextHopAndPathCost(unsigned short, unsigned short&, unsigned char&) const
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::GetChildInfoById(unsigned short, ot::Child::Info&)
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildIdResponse(ot::Child&)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::CheckReachability(unsigned short, ot::Ip6::Header const&)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendIcmpErrorIfDstUnreach(ot::Message const&, ot::Mac::Addresses const&)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::RemoveStaleChildEntries()
</UL>

<P><STRONG><a name="[21c]"></a>ot::ChildTable::ChildTable(ot::Instance&)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, child_table.o(.text._ZN2ot10ChildTableC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::Init(ot::Instance&)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::MleRouter(ot::Instance&)
</UL>

<P><STRONG><a name="[bb8]"></a>ot::ChildTable::ChildTable__sub_object(ot::Instance&)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, child_table.o(.text._ZN2ot10ChildTableC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[21e]"></a>ot::DuaManager::HandleTimeTick()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, dua_manager.o(.text._ZN2ot10DuaManager14HandleTimeTickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ot::DuaManager::HandleTimeTick() &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::UpdateTimeTickerRegistration()
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::HandleTimer()
</UL>

<P><STRONG><a name="[222]"></a>ot::DuaManager::UpdateCheckDelay(unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dua_manager.o(.text._ZN2ot10DuaManager16UpdateCheckDelayEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ot::DuaManager::UpdateCheckDelay(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::UpdateTimeTickerRegistration()
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::UpdateChildDomainUnicastAddress(ot::Child const&, ot::Mle::ChildDuaState)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::PerformNextRegistration()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::HandleDuaResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
</UL>

<P><STRONG><a name="[223]"></a>ot::DuaManager::HandleDuaResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, dua_manager.o(.text._ZN2ot10DuaManager17HandleDuaResponseEPNS_4Coap7MessageEPKNS_3Ip611MessageInfoE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736 + Unknown Stack Size
<LI>Call Chain = ot::DuaManager::HandleDuaResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError) &rArr; ot::DuaManager::ProcessDuaResponse(ot::Coap::Message&) &rArr; ot::DuaManager::SendAddressNotification(ot::Ip6::Address&, ot::ThreadStatusTlv::DuaStatus, ot::Child const&) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)37&rang;()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::ProcessDuaResponse(ot::Coap::Message&)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::UpdateCheckDelay(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::HandleDuaResponse(void*, otMessage*, otMessageInfo const*, otError)
</UL>

<P><STRONG><a name="[3a]"></a>ot::DuaManager::HandleDuaResponse(void*, otMessage*, otMessageInfo const*, otError)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dua_manager.o(.text._ZN2ot10DuaManager17HandleDuaResponseEPvP9otMessagePK13otMessageInfo7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736 + Unknown Stack Size
<LI>Call Chain = ot::DuaManager::HandleDuaResponse(void*, otMessage*, otMessageInfo const*, otError) &rArr; ot::DuaManager::HandleDuaResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError) &rArr; ot::DuaManager::ProcessDuaResponse(ot::Coap::Message&) &rArr; ot::DuaManager::SendAddressNotification(ot::Ip6::Address&, ot::ThreadStatusTlv::DuaStatus, ot::Child const&) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::HandleDuaResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> dua_manager.o(.text._ZN2ot10DuaManager31UpdateChildDomainUnicastAddressERKNS_5ChildENS_3Mle13ChildDuaStateE)
<LI> dua_manager.o(.text._ZN2ot10DuaManager23PerformNextRegistrationEv)
<LI> dua_manager.o(.text._ZN2ot10DuaManager24HandleDomainPrefixUpdateENS_14BackboneRouter6Leader17DomainPrefixStateE)
</UL>
<P><STRONG><a name="[227]"></a>ot::DuaManager::ProcessDuaResponse(ot::Coap::Message&)</STRONG> (Thumb, 390 bytes, Stack size 56 bytes, dua_manager.o(.text._ZN2ot10DuaManager18ProcessDuaResponseERNS_4Coap7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720 + Unknown Stack Size
<LI>Call Chain = ot::DuaManager::ProcessDuaResponse(ot::Coap::Message&) &rArr; ot::DuaManager::SendAddressNotification(ot::Ip6::Address&, ot::ThreadStatusTlv::DuaStatus, ot::Child const&) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::IsDomainUnicast(ot::Ip6::Address const&) const
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, void*, unsigned char)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned char&rang;(ot::Message const&, unsigned char, unsigned char&)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::UpdateTimeTickerRegistration()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::UpdateReregistrationDelay()
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::SendAddressNotification(ot::Ip6::Address&, ot::ThreadStatusTlv::DuaStatus, ot::Child const&)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::HasIp6Address(ot::Ip6::Address const&) const
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::RemoveIp6Address(ot::Ip6::Address const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::DuaManager::HandleTmf&lang;(ot::Uri)36&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::HandleDuaResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
</UL>

<P><STRONG><a name="[22f]"></a>ot::DuaManager::HandleNotifierEvents(ot::Events)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dua_manager.o(.text._ZN2ot10DuaManager20HandleNotifierEventsENS_6EventsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ot::DuaManager::HandleNotifierEvents(ot::Events) &rArr; ot::DuaManager::UpdateReregistrationDelay() &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsAttached() const
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::UpdateReregistrationDelay()
</UL>
<BR>[Called By]<UL><LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::EmitEvents()
</UL>

<P><STRONG><a name="[231]"></a>ot::DuaManager::PerformNextRegistration()</STRONG> (Thumb, 696 bytes, Stack size 152 bytes, dua_manager.o(.text._ZN2ot10DuaManager23PerformNextRegistrationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688 + Unknown Stack Size
<LI>Call Chain = ot::DuaManager::PerformNextRegistration() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::GetServiceId(unsigned char&) const
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::GetChildAtIndex(unsigned short)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::GetServiceAloc(unsigned char, ot::Ip6::Address&) const
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsAttached() const
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::SendFastPolls(unsigned char)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned int&rang;(ot::Message&, unsigned char, unsigned int)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString() const
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::MessageInfo::SetSockAddrToRloc()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)37&rang;()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::UpdateCheckDelay(unsigned char)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLocator(ot::Ip6::NetworkPrefix const&, unsigned short)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::GetDomainUnicastAddress() const
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TaskletIn&lang;ot::DuaManager, &(ot::DuaManager::PerformNextRegistration())&rang;::HandleTasklet(ot::Tasklet&)
</UL>

<P><STRONG><a name="[22e]"></a>ot::DuaManager::SendAddressNotification(ot::Ip6::Address&, ot::ThreadStatusTlv::DuaStatus, ot::Child const&)</STRONG> (Thumb, 216 bytes, Stack size 128 bytes, dua_manager.o(.text._ZN2ot10DuaManager23SendAddressNotificationERNS_3Ip67AddressENS_15ThreadStatusTlv9DuaStatusERKNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664 + Unknown Stack Size
<LI>Call Chain = ot::DuaManager::SendAddressNotification(ot::Ip6::Address&, ot::ThreadStatusTlv::DuaStatus, ot::Child const&) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned char&rang;(ot::Message&, unsigned char, unsigned char)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo(unsigned short)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString() const
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)36&rang;()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::ProcessDuaResponse(ot::Coap::Message&)
</UL>

<P><STRONG><a name="[244]"></a>ot::DuaManager::HandleDomainPrefixUpdate(ot::BackboneRouter::Leader::DomainPrefixState)</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, dua_manager.o(.text._ZN2ot10DuaManager24HandleDomainPrefixUpdateENS_14BackboneRouter6Leader17DomainPrefixStateE))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ot::DuaManager::HandleDomainPrefixUpdate(ot::BackboneRouter::Leader::DomainPrefixState) &rArr; ot::Coap::CoapBase::AbortTransaction(void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::CoapBase::Metadata::ReadFrom(ot::Coap::Message const&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::AbortTransaction(void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::UpdateDomainPrefixConfig()
</UL>

<P><STRONG><a name="[22c]"></a>ot::DuaManager::UpdateReregistrationDelay()</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dua_manager.o(.text._ZN2ot10DuaManager25UpdateReregistrationDelayEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ot::DuaManager::UpdateReregistrationDelay() &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint16InRange(unsigned short, unsigned short)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::GetConfig(otBackboneRouterConfig&) const
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::UpdateTimeTickerRegistration()
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::HandleBackboneRouterPrimaryUpdate(ot::BackboneRouter::Leader::State, otBackboneRouterConfig const&)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::HandleNotifierEvents(ot::Events)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::ProcessDuaResponse(ot::Coap::Message&)
</UL>

<P><STRONG><a name="[221]"></a>ot::DuaManager::UpdateTimeTickerRegistration()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, dua_manager.o(.text._ZN2ot10DuaManager28UpdateTimeTickerRegistrationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::DuaManager::UpdateTimeTickerRegistration() &rArr; ot::TimeTicker::RegisterReceiver(ot::TimeTicker::Receiver) &rArr; ot::TimerMilli::Start(unsigned int) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::UnregisterReceiver(ot::TimeTicker::Receiver)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::RegisterReceiver(ot::TimeTicker::Receiver)
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::HandleTimeTick()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::UpdateReregistrationDelay()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::ProcessDuaResponse(ot::Coap::Message&)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::UpdateCheckDelay(unsigned char)
</UL>

<P><STRONG><a name="[24a]"></a>ot::DuaManager::UpdateChildDomainUnicastAddress(ot::Child const&, ot::Mle::ChildDuaState)</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, dua_manager.o(.text._ZN2ot10DuaManager31UpdateChildDomainUnicastAddressERKNS_5ChildENS_3Mle13ChildDuaStateE))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ot::DuaManager::UpdateChildDomainUnicastAddress(ot::Child const&, ot::Mle::ChildDuaState) &rArr; ot::DuaManager::UpdateCheckDelay(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint8InRange(unsigned char, unsigned char)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::AbortTransaction(void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::UpdateCheckDelay(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::Signal(ot::NeighborTable::Event, ot::Neighbor const&)
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
</UL>

<P><STRONG><a name="[24c]"></a>ot::DuaManager::HandleBackboneRouterPrimaryUpdate(ot::BackboneRouter::Leader::State, otBackboneRouterConfig const&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dua_manager.o(.text._ZN2ot10DuaManager33HandleBackboneRouterPrimaryUpdateENS_14BackboneRouter6Leader5StateERK22otBackboneRouterConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ot::DuaManager::HandleBackboneRouterPrimaryUpdate(ot::BackboneRouter::Leader::State, otBackboneRouterConfig const&) &rArr; ot::DuaManager::UpdateReregistrationDelay() &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::UpdateReregistrationDelay()
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::UpdateBackboneRouterPrimary()
</UL>

<P><STRONG><a name="[24d]"></a>void ot::DuaManager::HandleTmf&lang;(ot::Uri)36&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, dua_manager.o(.text._ZN2ot10DuaManager9HandleTmfILNS_3UriE36EEEvRNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736 + Unknown Stack Size
<LI>Call Chain = void ot::DuaManager::HandleTmf&lang;(ot::Uri)36&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::DuaManager::ProcessDuaResponse(ot::Coap::Message&) &rArr; ot::DuaManager::SendAddressNotification(ot::Ip6::Address&, ot::ThreadStatusTlv::DuaStatus, ot::Child const&) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendEmptyAck(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)36&rang;()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::ProcessDuaResponse(ot::Coap::Message&)
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[931]"></a>ot::DuaManager::DuaManager(ot::Instance&)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dua_manager.o(.text._ZN2ot10DuaManagerC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bb9]"></a>ot::DuaManager::DuaManager__sub_object(ot::Instance&)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dua_manager.o(.text._ZN2ot10DuaManagerC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[24f]"></a>ot::KeyManager::SetNetworkKey(ot::NetworkKey const&)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, key_manager.o(.text._ZN2ot10KeyManager13SetNetworkKeyERKNS_10NetworkKeyE))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = ot::KeyManager::SetNetworkKey(ot::NetworkKey const&) &rArr; ot::KeyManager::UpdateKeyMaterial() &rArr; ot::KeyManager::ComputeKeys(unsigned int, ot::KeyManager::HashKeys&) const &rArr; ot::Crypto::HmacSha256::Start(ot::Crypto::Key const&) &rArr; otPlatCryptoHmacSha256Start &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::UpdateKeyMaterial()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;ot::NetworkKey&rang;(ot::NetworkKey&, ot::NetworkKey const&, ot::Event)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::ResetFrameCounters()
</UL>
<BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetNetworkKey
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ApplyConfiguration(ot::Instance&, bool*) const
</UL>

<P><STRONG><a name="[254]"></a>ot::KeyManager::SetSecurityPolicy(ot::SecurityPolicy const&)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, key_manager.o(.text._ZN2ot10KeyManager17SetSecurityPolicyERKNS_14SecurityPolicyE))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ot::KeyManager::SetSecurityPolicy(ot::SecurityPolicy const&) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;ot::SecurityPolicy&rang;(ot::SecurityPolicy&, ot::SecurityPolicy const&, ot::Event)
</UL>
<BR>[Called By]<UL><LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ApplyConfiguration(ot::Instance&, bool*) const
</UL>

<P><STRONG><a name="[252]"></a>ot::KeyManager::UpdateKeyMaterial()</STRONG> (Thumb, 164 bytes, Stack size 112 bytes, key_manager.o(.text._ZN2ot10KeyManager17UpdateKeyMaterialEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = ot::KeyManager::UpdateKeyMaterial() &rArr; ot::KeyManager::ComputeKeys(unsigned int, ot::KeyManager::HashKeys&) const &rArr; ot::Crypto::HmacSha256::Start(ot::Crypto::Key const&) &rArr; otPlatCryptoHmacSha256Start &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::KeyMaterial::SetFrom(ot::Mac::Key const&, bool)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetMacKey(unsigned char, unsigned char, ot::Mac::KeyMaterial const&, ot::Mac::KeyMaterial const&, ot::Mac::KeyMaterial const&)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::ComputeKeys(unsigned int, ot::KeyManager::HashKeys&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::Mac(ot::Instance&)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetCurrentKeySequence(unsigned int)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetNetworkKey(ot::NetworkKey const&)
</UL>

<P><STRONG><a name="[25a]"></a>ot::KeyManager::GetTemporaryMleKey(unsigned int)</STRONG> (Thumb, 32 bytes, Stack size 48 bytes, key_manager.o(.text._ZN2ot10KeyManager18GetTemporaryMleKeyEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = ot::KeyManager::GetTemporaryMleKey(unsigned int) &rArr; ot::KeyManager::ComputeKeys(unsigned int, ot::KeyManager::HashKeys&) const &rArr; ot::Crypto::HmacSha256::Start(ot::Crypto::Key const&) &rArr; otPlatCryptoHmacSha256Start &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::KeyMaterial::SetFrom(ot::Mac::Key const&, bool)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::ComputeKeys(unsigned int, ot::KeyManager::HashKeys&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&)
</UL>

<P><STRONG><a name="[253]"></a>ot::KeyManager::ResetFrameCounters()</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, key_manager.o(.text._ZN2ot10KeyManager18ResetFrameCountersEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ot::KeyManager::ResetFrameCounters() &rArr; ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter) &rArr; ot::ChildTable::Iterator::Reset() &rArr; ot::ChildTable::Iterator::Advance()
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::LinkFrameCounters::SetAll(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetNetworkKey(ot::NetworkKey const&)
</UL>

<P><STRONG><a name="[25c]"></a>ot::KeyManager::MacFrameCounterUsed(unsigned int)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, key_manager.o(.text._ZN2ot10KeyManager19MacFrameCounterUsedEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = ot::KeyManager::MacFrameCounterUsed(unsigned int) &rArr; ot::Mle::Mle::Store() &rArr; ot::Settings::SaveEntry(ot::SettingsBase::Key, void const*, void*, unsigned short) &rArr; otPlatSettingsSet &rArr; [Anonymous Symbol] &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Store()
</UL>
<BR>[Called By]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Callbacks::FrameCounterUsed(unsigned int)
</UL>

<P><STRONG><a name="[25e]"></a>ot::KeyManager::SetCurrentKeySequence(unsigned int)</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, key_manager.o(.text._ZN2ot10KeyManager21SetCurrentKeySequenceEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = ot::KeyManager::SetCurrentKeySequence(unsigned int) &rArr; ot::KeyManager::UpdateKeyMaterial() &rArr; ot::KeyManager::ComputeKeys(unsigned int, ot::KeyManager::HashKeys&) const &rArr; ot::Crypto::HmacSha256::Start(ot::Crypto::Key const&) &rArr; otPlatCryptoHmacSha256Start &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::UpdateKeyMaterial()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::SignalIfFirst(ot::Event)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetFrameCounter(unsigned int, bool)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::LinkFrameCounters::SetAll(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Restore()
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetKeySequenceCounter
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessReceiveSecurity(ot::Mac::RxFrame&, ot::Mac::Address const&, ot::Neighbor*)
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::HandleKeyRotationTimer()
</UL>

<P><STRONG><a name="[262]"></a>ot::KeyManager::HandleKeyRotationTimer()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, key_manager.o(.text._ZN2ot10KeyManager22HandleKeyRotationTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = ot::KeyManager::HandleKeyRotationTimer() &rArr; ot::KeyManager::SetCurrentKeySequence(unsigned int) &rArr; ot::KeyManager::UpdateKeyMaterial() &rArr; ot::KeyManager::ComputeKeys(unsigned int, ot::KeyManager::HashKeys&) const &rArr; ot::Crypto::HmacSha256::Start(ot::Crypto::Key const&) &rArr; otPlatCryptoHmacSha256Start &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetCurrentKeySequence(unsigned int)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::StartAt(ot::Time, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilliIn&lang;ot::KeyManager, &(ot::KeyManager::HandleKeyRotationTimer())&rang;::HandleTimer(ot::Timer&)
</UL>

<P><STRONG><a name="[264]"></a>ot::KeyManager::SetAllMacFrameCounters(unsigned int, bool)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, key_manager.o(.text._ZN2ot10KeyManager22SetAllMacFrameCountersEjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ot::KeyManager::SetAllMacFrameCounters(unsigned int, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetFrameCounter(unsigned int, bool)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::LinkFrameCounters::SetAll(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Restore()
</UL>

<P><STRONG><a name="[265]"></a>ot::KeyManager::IncrementMleFrameCounter()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, key_manager.o(.text._ZN2ot10KeyManager24IncrementMleFrameCounterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = ot::KeyManager::IncrementMleFrameCounter() &rArr; ot::Mle::Mle::Store() &rArr; ot::Settings::SaveEntry(ot::SettingsBase::Key, void const*, void*, unsigned short) &rArr; otPlatSettingsSet &rArr; [Anonymous Symbol] &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Store()
</UL>
<BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&)
</UL>

<P><STRONG><a name="[266]"></a>ot::KeyManager::Stop()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, key_manager.o(.text._ZN2ot10KeyManager4StopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::KeyManager::Stop() &rArr; ot::TimerMilli::Stop() &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Stop(ot::Mle::Mle::StopMode)
</UL>

<P><STRONG><a name="[268]"></a>ot::KeyManager::Start()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, key_manager.o(.text._ZN2ot10KeyManager5StartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::KeyManager::Start() &rArr; ot::TimerMilli::Start(unsigned int) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Start(ot::Mle::Mle::StartMode)
</UL>

<P><STRONG><a name="[269]"></a>ot::KeyManager::SetKek(ot::Mac::Key const&)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, key_manager.o(.text._ZN2ot10KeyManager6SetKekERKNS_3Mac3KeyE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::KeyManager::SetKek(ot::Mac::Key const&) &rArr; ot::Mac::KeyMaterial::SetFrom(ot::Mac::Key const&, bool) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::KeyMaterial::SetFrom(ot::Mac::Key const&, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::SendDelayedJoinerEntrust()
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsExportKeys(unsigned char const*, unsigned char const*, unsigned int, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[26a]"></a>ot::KeyManager::SetPskc(ot::Pskc const&)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, key_manager.o(.text._ZN2ot10KeyManager7SetPskcERKNS_4PskcE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ot::KeyManager::SetPskc(ot::Pskc const&) &rArr; otError ot::Notifier::Update&lang;ot::Pskc&rang;(ot::Pskc&, ot::Pskc const&, ot::Event) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;ot::Pskc&rang;(ot::Pskc&, ot::Pskc const&, ot::Event)
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetPskc
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ApplyConfiguration(ot::Instance&, bool*) const
</UL>

<P><STRONG><a name="[26c]"></a>ot::KeyManager::KeyManager(ot::Instance&)</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, key_manager.o(.text._ZN2ot10KeyManagerC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoRandomGet
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoInit
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::LinkFrameCounters::SetAll(unsigned int)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bba]"></a>ot::KeyManager::KeyManager__sub_object(ot::Instance&)</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, key_manager.o(.text._ZN2ot10KeyManagerC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[43a]"></a>ot::LinkedList&lang;ot::AddressResolver::CacheEntry&rang;::PopAfter(ot::AddressResolver::CacheEntry*)</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, address_resolver.o(.text._ZN2ot10LinkedListINS_15AddressResolver10CacheEntryEE8PopAfterEPS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::LinkedList&lang;ot::AddressResolver::CacheEntry&rang;::PopAfter(ot::AddressResolver::CacheEntry*)
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::HandleTimeTick()
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)1&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::Resolve(ot::Ip6::Address const&, unsigned short&, bool)
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::UpdateCacheEntry(ot::Ip6::Address const&, unsigned short)
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::RemoveCacheEntry(ot::AddressResolver::CacheEntry&, ot::AddressResolver::CacheEntryList&, ot::AddressResolver::CacheEntry*, ot::AddressResolver::Reason)
</UL>

<P><STRONG><a name="[26f]"></a>ot::MlrManager::Reregister()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mlr_manager.o(.text._ZN2ot10MlrManager10ReregisterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952 + Unknown Stack Size
<LI>Call Chain = ot::MlrManager::Reregister() &rArr; ot::MlrManager::ScheduleSend(unsigned short) &rArr; ot::MlrManager::SendMulticastListenerRegistration() &rArr;  ot::MlrManager::ScheduleSend(unsigned short) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SetMulticastAddressMlrState(ot::MlrState, ot::MlrState)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::UpdateReregistrationDelay(bool)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::ScheduleSend(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::HandleTimeTick()
</UL>

<P><STRONG><a name="[271]"></a>ot::MlrManager::ScheduleSend(unsigned short)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, mlr_manager.o(.text._ZN2ot10MlrManager12ScheduleSendEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944 + Unknown Stack Size
<LI>Call Chain = ot::MlrManager::ScheduleSend(unsigned short) &rArr; ot::MlrManager::SendMulticastListenerRegistration() &rArr;  ot::MlrManager::ScheduleSend(unsigned short) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistration()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::UpdateTimeTickerRegistration()
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::UpdateProxiedSubscriptions(ot::Child&, ot::Ip6::Address const*, unsigned short)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::HandleMulticastListenerRegistrationResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistration()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::Reregister()
</UL>

<P><STRONG><a name="[275]"></a>ot::MlrManager::HandleTimeTick()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mlr_manager.o(.text._ZN2ot10MlrManager14HandleTimeTickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960 + Unknown Stack Size
<LI>Call Chain = ot::MlrManager::HandleTimeTick() &rArr; ot::MlrManager::Reregister() &rArr; ot::MlrManager::ScheduleSend(unsigned short) &rArr; ot::MlrManager::SendMulticastListenerRegistration() &rArr;  ot::MlrManager::ScheduleSend(unsigned short) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistration()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::UpdateTimeTickerRegistration()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::Reregister()
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::HandleTimer()
</UL>

<P><STRONG><a name="[276]"></a>ot::MlrManager::LogMlrResponse(otError, otError, unsigned char, ot::Ip6::Address const*, unsigned char)</STRONG> (Thumb, 136 bytes, Stack size 88 bytes, mlr_manager.o(.text._ZN2ot10MlrManager14LogMlrResponseE7otErrorS1_hPKNS_3Ip67AddressEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = ot::MlrManager::LogMlrResponse(otError, otError, unsigned char, ot::Ip6::Address const*, unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString() const
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::ParseMulticastListenerRegistrationResponse(otError, ot::Coap::Message*, unsigned char&, ot::Ip6::Address*, unsigned char&)
</UL>

<P><STRONG><a name="[277]"></a>ot::MlrManager::HandleNotifierEvents(ot::Events)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mlr_manager.o(.text._ZN2ot10MlrManager20HandleNotifierEventsENS_6EventsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ot::MlrManager::HandleNotifierEvents(ot::Events) &rArr; ot::MlrManager::UpdateReregistrationDelay(bool) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::UpdateReregistrationDelay(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::EmitEvents()
</UL>

<P><STRONG><a name="[278]"></a>ot::MlrManager::LogMulticastAddresses()</STRONG> (Thumb, 168 bytes, Stack size 120 bytes, mlr_manager.o(.text._ZN2ot10MlrManager21LogMulticastAddressesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = ot::MlrManager::LogMulticastAddresses() &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddressIterator::GetAddress() const
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddressIterator::Update()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString() const
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::GetAddressMlrState(ot::Ip6::Address const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::UpdateProxiedSubscriptions(ot::Child&, ot::Ip6::Address const*, unsigned short)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::FinishMulticastListenerRegistration(bool, ot::Ip6::Address const*, unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistration()
</UL>

<P><STRONG><a name="[27c]"></a>ot::MlrManager::AppendToUniqueAddressList(ot::Ip6::Address (&) [15], unsigned char&, ot::Ip6::Address const&)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, mlr_manager.o(.text._ZN2ot10MlrManager25AppendToUniqueAddressListERA15_NS_3Ip67AddressERhRKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ot::MlrManager::AppendToUniqueAddressList(ot::Ip6::Address (&) [15], unsigned char&, ot::Ip6::Address const&) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistration()
</UL>

<P><STRONG><a name="[272]"></a>ot::MlrManager::UpdateReregistrationDelay(bool)</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, mlr_manager.o(.text._ZN2ot10MlrManager25UpdateReregistrationDelayEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ot::MlrManager::UpdateReregistrationDelay(bool) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint32InRange(unsigned int, unsigned int)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint16InRange(unsigned short, unsigned short)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::GetConfig(otBackboneRouterConfig&) const
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::UpdateTimeTickerRegistration()
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::HandleBackboneRouterPrimaryUpdate(ot::BackboneRouter::Leader::State, otBackboneRouterConfig const&)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::HandleNotifierEvents(ot::Events)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::Reregister()
</UL>

<P><STRONG><a name="[27f]"></a>ot::MlrManager::UpdateProxiedSubscriptions(ot::Child&, ot::Ip6::Address const*, unsigned short)</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, mlr_manager.o(.text._ZN2ot10MlrManager26UpdateProxiedSubscriptionsERNS_5ChildEPKNS_3Ip67AddressEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008 + Unknown Stack Size
<LI>Call Chain = ot::MlrManager::UpdateProxiedSubscriptions(ot::Child&, ot::Ip6::Address const*, unsigned short) &rArr; ot::MlrManager::ScheduleSend(unsigned short) &rArr; ot::MlrManager::SendMulticastListenerRegistration() &rArr;  ot::MlrManager::ScheduleSend(unsigned short) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint16InRange(unsigned short, unsigned short)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddressIterator::GetAddress() const
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddressIterator::Update()
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::IsAddressMlrRegisteredByAnyChildExcept(ot::Ip6::Address const&, ot::Child const*) const
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::SetAddressMlrState(ot::Ip6::Address const&, ot::MlrState)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::LogMulticastAddresses()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::ScheduleSend(unsigned short)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetChildStateToValid(ot::Child&)
</UL>

<P><STRONG><a name="[270]"></a>ot::MlrManager::SetMulticastAddressMlrState(ot::MlrState, ot::MlrState)</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, mlr_manager.o(.text._ZN2ot10MlrManager27SetMulticastAddressMlrStateENS_8MlrStateES1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ot::MlrManager::SetMulticastAddressMlrState(ot::MlrState, ot::MlrState) &rArr; ot::Child::SetAddressMlrState(ot::Ip6::Address const&, ot::MlrState) &rArr; ot::BitVector&lang;(unsigned short)3&rang;::Set(unsigned short, bool) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddressIterator::GetAddress() const
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddressIterator::Update()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::GetAddressMlrState(ot::Ip6::Address const&) const
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::SetAddressMlrState(ot::Ip6::Address const&, ot::MlrState)
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistration()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::Reregister()
</UL>

<P><STRONG><a name="[274]"></a>ot::MlrManager::UpdateTimeTickerRegistration()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, mlr_manager.o(.text._ZN2ot10MlrManager28UpdateTimeTickerRegistrationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::MlrManager::UpdateTimeTickerRegistration() &rArr; ot::TimeTicker::RegisterReceiver(ot::TimeTicker::Receiver) &rArr; ot::TimerMilli::Start(unsigned int) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::UnregisterReceiver(ot::TimeTicker::Receiver)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::RegisterReceiver(ot::TimeTicker::Receiver)
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::HandleTimeTick()
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::UpdateReregistrationDelay(bool)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::ScheduleSend(unsigned short)
</UL>

<P><STRONG><a name="[282]"></a>ot::MlrManager::HandleBackboneRouterPrimaryUpdate(ot::BackboneRouter::Leader::State, otBackboneRouterConfig const&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mlr_manager.o(.text._ZN2ot10MlrManager33HandleBackboneRouterPrimaryUpdateENS_14BackboneRouter6Leader5StateERK22otBackboneRouterConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ot::MlrManager::HandleBackboneRouterPrimaryUpdate(ot::BackboneRouter::Leader::State, otBackboneRouterConfig const&) &rArr; ot::MlrManager::UpdateReregistrationDelay(bool) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::UpdateReregistrationDelay(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::UpdateBackboneRouterPrimary()
</UL>

<P><STRONG><a name="[273]"></a>ot::MlrManager::SendMulticastListenerRegistration()</STRONG> (Thumb, 392 bytes, Stack size 320 bytes, mlr_manager.o(.text._ZN2ot10MlrManager33SendMulticastListenerRegistrationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = ot::MlrManager::SendMulticastListenerRegistration() &rArr;  ot::MlrManager::ScheduleSend(unsigned short) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddressIterator::GetAddress() const
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddressIterator::Update()
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsAttached() const
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::SendFastPolls(unsigned char)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::GetAddressMlrState(ot::Ip6::Address const&) const
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::SetAddressMlrState(ot::Ip6::Address const&, ot::MlrState)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistrationMessage(otIp6Address const*, unsigned char, unsigned int const*, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SetMulticastAddressMlrState(ot::MlrState, ot::MlrState)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::AppendToUniqueAddressList(ot::Ip6::Address (&) [15], unsigned char&, ot::Ip6::Address const&)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::LogMulticastAddresses()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::ScheduleSend(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::HandleTimeTick()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::ScheduleSend(unsigned short)
</UL>

<P><STRONG><a name="[284]"></a>ot::MlrManager::FinishMulticastListenerRegistration(bool, ot::Ip6::Address const*, unsigned char)</STRONG> (Thumb, 224 bytes, Stack size 80 bytes, mlr_manager.o(.text._ZN2ot10MlrManager35FinishMulticastListenerRegistrationEbPKNS_3Ip67AddressEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = ot::MlrManager::FinishMulticastListenerRegistration(bool, ot::Ip6::Address const*, unsigned char) &rArr; ot::MlrManager::LogMulticastAddresses() &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddressIterator::GetAddress() const
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddressIterator::Update()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::GetAddressMlrState(ot::Ip6::Address const&) const
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::SetAddressMlrState(ot::Ip6::Address const&, ot::MlrState)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::LogMulticastAddresses()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::HandleMulticastListenerRegistrationResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
</UL>

<P><STRONG><a name="[283]"></a>ot::MlrManager::SendMulticastListenerRegistrationMessage(otIp6Address const*, unsigned char, unsigned int const*, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)</STRONG> (Thumb, 344 bytes, Stack size 96 bytes, mlr_manager.o(.text._ZN2ot10MlrManager40SendMulticastListenerRegistrationMessageEPK12otIp6AddresshPKjPFvPvP9otMessagePK13otMessageInfo7otErrorES6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616 + Unknown Stack Size
<LI>Call Chain = ot::MlrManager::SendMulticastListenerRegistrationMessage(otIp6Address const*, unsigned char, unsigned int const*, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::CoapBase::NewConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewConfirmablePostMessage(ot::Uri)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::GetServiceId(unsigned char&) const
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::GetServiceAloc(unsigned char, ot::Ip6::Address&) const
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::MessageInfo::SetSockAddrToRloc()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLocator(ot::Ip6::NetworkPrefix const&, unsigned short)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistration()
</UL>

<P><STRONG><a name="[287]"></a>ot::MlrManager::ParseMulticastListenerRegistrationResponse(otError, ot::Coap::Message*, unsigned char&, ot::Ip6::Address*, unsigned char&)</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, mlr_manager.o(.text._ZN2ot10MlrManager42ParseMulticastListenerRegistrationResponseE7otErrorPNS_4Coap7MessageERhPNS_3Ip67AddressES5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = ot::MlrManager::ParseMulticastListenerRegistrationResponse(otError, ot::Coap::Message*, unsigned char&, ot::Ip6::Address*, unsigned char&) &rArr; ot::MlrManager::LogMlrResponse(otError, otError, unsigned char, ot::Ip6::Address const*, unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlvValueOffset(ot::Message const&, unsigned char, unsigned short&, unsigned short&)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned char&rang;(ot::Message const&, unsigned char, unsigned char&)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::LogMlrResponse(otError, otError, unsigned char, ot::Ip6::Address const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::HandleMulticastListenerRegistrationResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
</UL>

<P><STRONG><a name="[28a]"></a>ot::MlrManager::HandleMulticastListenerRegistrationResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)</STRONG> (Thumb, 124 bytes, Stack size 280 bytes, mlr_manager.o(.text._ZN2ot10MlrManager43HandleMulticastListenerRegistrationResponseEPNS_4Coap7MessageEPKNS_3Ip611MessageInfoE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 2224 + Unknown Stack Size
<LI>Call Chain = ot::MlrManager::HandleMulticastListenerRegistrationResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError) &rArr; ot::MlrManager::ScheduleSend(unsigned short) &rArr; ot::MlrManager::SendMulticastListenerRegistration() &rArr;  ot::MlrManager::ScheduleSend(unsigned short) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint16InRange(unsigned short, unsigned short)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::GetConfig(otBackboneRouterConfig&) const
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::ParseMulticastListenerRegistrationResponse(otError, ot::Coap::Message*, unsigned char&, ot::Ip6::Address*, unsigned char&)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::FinishMulticastListenerRegistration(bool, ot::Ip6::Address const*, unsigned char)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::ScheduleSend(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::HandleMulticastListenerRegistrationResponse(void*, otMessage*, otMessageInfo const*, otError)
</UL>

<P><STRONG><a name="[3d]"></a>ot::MlrManager::HandleMulticastListenerRegistrationResponse(void*, otMessage*, otMessageInfo const*, otError)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mlr_manager.o(.text._ZN2ot10MlrManager43HandleMulticastListenerRegistrationResponseEPvP9otMessagePK13otMessageInfo7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 2224 + Unknown Stack Size
<LI>Call Chain = ot::MlrManager::HandleMulticastListenerRegistrationResponse(void*, otMessage*, otMessageInfo const*, otError) &rArr; ot::MlrManager::HandleMulticastListenerRegistrationResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError) &rArr; ot::MlrManager::ScheduleSend(unsigned short) &rArr; ot::MlrManager::SendMulticastListenerRegistration() &rArr;  ot::MlrManager::ScheduleSend(unsigned short) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::HandleMulticastListenerRegistrationResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlr_manager.o(.text._ZN2ot10MlrManager33SendMulticastListenerRegistrationEv)
</UL>
<P><STRONG><a name="[930]"></a>ot::MlrManager::MlrManager(ot::Instance&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mlr_manager.o(.text._ZN2ot10MlrManagerC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bbb]"></a>ot::MlrManager::MlrManager__sub_object(ot::Instance&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mlr_manager.o(.text._ZN2ot10MlrManagerC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[28b]"></a>ot::PathForUri(ot::Uri)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uri_paths.o(.text._ZN2ot10PathForUriENS_3UriE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::PathForUri(ot::Uri) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressError(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, ot::Ip6::Address const*)
</UL>

<P><STRONG><a name="[6ef]"></a>ot::Preference::To2BitUint(signed char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, preference.o(.text._ZN2ot10Preference10To2BitUintEa))
<BR><BR>[Called By]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::ConnectivityTlv::SetParentPriority(signed char)
</UL>

<P><STRONG><a name="[2b8]"></a>ot::Preference::From2BitUint(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, preference.o(.text._ZN2ot10Preference12From2BitUintEh))
<BR><BR>[Called By]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::ConnectivityTlv::GetParentPriority() const
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::OnMeshPrefixConfig::SetFromTlvFlags(unsigned short)
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int ot::NetworkData::LeaderBase::CompareRouteEntries&lang;ot::NetworkData::BorderRouterEntry&rang;(ot::NetworkData::BorderRouterEntry const&, ot::NetworkData::BorderRouterEntry const&) const
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int ot::NetworkData::LeaderBase::CompareRouteEntries&lang;ot::NetworkData::HasRouteEntry&rang;(ot::NetworkData::HasRouteEntry const&, ot::NetworkData::HasRouteEntry const&) const
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&)
</UL>

<P><STRONG><a name="[80c]"></a>ot::StringFind(char const*, char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, string.o(.text._ZN2ot10StringFindEPKcc))
<BR><BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::AppendUriPathOptions(char const*)
</UL>

<P><STRONG><a name="[28c]"></a>ot::TimeTicker::HandleTimer()</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, time_ticker.o(.text._ZN2ot10TimeTicker11HandleTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976 + Unknown Stack Size
<LI>Call Chain = ot::TimeTicker::HandleTimer() &rArr; ot::MlrManager::HandleTimeTick() &rArr; ot::MlrManager::Reregister() &rArr; ot::MlrManager::ScheduleSend(unsigned short) &rArr; ot::MlrManager::SendMulticastListenerRegistration() &rArr;  ot::MlrManager::ScheduleSend(unsigned short) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::AddJitter(unsigned int, unsigned short)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::FireAt(ot::Time)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleTimeTick()
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::HandleTimeTick()
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleTimeTick()
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildSupervisor::HandleTimeTick()
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::HandleTimeTick()
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleTimeTick()
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::HandleTimeTick()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::HandleTimeTick()
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilliIn&lang;ot::TimeTicker, &(ot::TimeTicker::HandleTimer())&rang;::HandleTimer(ot::Timer&)
</UL>

<P><STRONG><a name="[248]"></a>ot::TimeTicker::RegisterReceiver(ot::TimeTicker::Receiver)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, time_ticker.o(.text._ZN2ot10TimeTicker16RegisterReceiverENS0_8ReceiverE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::TimeTicker::RegisterReceiver(ot::TimeTicker::Receiver) &rArr; ot::TimerMilli::Start(unsigned int) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint32InRange(unsigned int, unsigned int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeRouter(ot::ThreadStatusTlv::Status)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::UpdateTimeTickerRegistration()
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildSupervisor::CheckState()
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::UpdateSnoopedCacheEntry(ot::Ip6::Address const&, unsigned short, unsigned short)
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&)
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::UpdateSeedSet(unsigned short, unsigned char)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&)
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode)
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildStart(ot::Mle::Mle::AttachMode)
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Mle(ot::Instance&)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateFragmentPriority(ot::Lowpan::FragmentHeader&, unsigned short, unsigned short, ot::Message::Priority)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::UpdateTimeTickerRegistration()
</UL>

<P><STRONG><a name="[249]"></a>ot::TimeTicker::UnregisterReceiver(ot::TimeTicker::Receiver)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, time_ticker.o(.text._ZN2ot10TimeTicker18UnregisterReceiverENS0_8ReceiverE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::TimeTicker::UnregisterReceiver(ot::TimeTicker::Receiver) &rArr; ot::TimerMilli::Stop() &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::HandleTimeTick()
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleTimeTick()
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::HandleTimeTick()
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleTimeTick()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::UpdateTimeTickerRegistration()
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildSupervisor::CheckState()
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleDetachStart()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::Stop()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::UpdateTimeTickerRegistration()
</UL>

<P><STRONG><a name="[928]"></a>ot::TimeTicker::TimeTicker(ot::Instance&)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, time_ticker.o(.text._ZN2ot10TimeTickerC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bbc]"></a>ot::TimeTicker::TimeTicker__sub_object(ot::Instance&)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, time_ticker.o(.text._ZN2ot10TimeTickerC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[296]"></a>ot::TimerMilli::FireAtIfEarlier(ot::Time)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, timer.o(.text._ZN2ot10TimerMilli15FireAtIfEarlierENS_4TimeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ot::TimerMilli::FireAtIfEarlier(ot::Time) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::CopyAndEnqueueMessage(ot::Coap::Message const&, unsigned short, ot::Coap::CoapBase::Metadata const&)
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&)
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::AddBufferedMessage(ot::Message&, unsigned short, unsigned char, bool)
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendAfterDelay(ot::Ip6::Address const&, unsigned short)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::ContextIds::ScheduleToRemove(unsigned char)
</UL>

<P><STRONG><a name="[267]"></a>ot::TimerMilli::Stop()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer.o(.text._ZN2ot10TimerMilli4StopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::TimerMilli::Stop() &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::PingSender::Stop()
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::Clear()
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Clear()
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::SendDataPoll()
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Close()
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::DequeueMessage(ot::Coap::Message&)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Stop(ot::Mle::Mle::StopMode)
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformNextOperation()
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetRxOnWhenIdle(bool)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::HandlePollSent(ot::Mac::TxFrame&, otError)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::StopPolling()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::UnregisterReceiver(ot::TimeTicker::Receiver)
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::EnergyScanServer::HandleNotifierEvents(ot::Events)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::ResignCommissioner()
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Finish(otError)
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsSetTimer(unsigned int, unsigned int)
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleTimer()
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::HandleDelayTimer()
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::StartDelayTimer()
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Restore()
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Init()
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoverComplete()
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::Stop()
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::RestartTimer()
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AnnounceSenderBase::SetChannelMask(ot::Mac::ChannelMask)
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertiseTrickleTimer()
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode)
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::StopAdvertiseTrickleTimer()
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleDetachStart()
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildStart(ot::Mle::Mle::AttachMode)
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ScheduleMessageTransmissionTimer()
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetStateDetached()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::Stop()
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::Stop()
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::PingSender::HandleIcmpReceive(ot::Message const&, ot::Ip6::MessageInfo const&, ot::Ip6::Icmp::Header const&)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputResult(otError)
</UL>

<P><STRONG><a name="[260]"></a>ot::TimerMilli::Start(unsigned int)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, timer.o(.text._ZN2ot10TimerMilli5StartEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::TimerMilli::Start(unsigned int) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::StartAt(ot::Time, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::DetachGracefully(void (*)(void*), void*)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetCurrentKeySequence(unsigned int)
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::EnergyScan(unsigned char, unsigned short)
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformNextOperation()
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleSentFrame(ot::Mac::TxFrame&, otError)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TrickleTimer::StartNewInterval()
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TrickleTimer::HandleTimer()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::RegisterReceiver(ot::TimeTicker::Receiver)
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Leader::HandleTmf&lang;(ot::Uri)23&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Leader::HandleTmf&lang;(ot::Uri)22&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::SendDelayedJoinerEntrust()
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Joiner::HandleTmf&lang;(ot::Uri)20&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleSecureCoapClientConnect(bool)
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleJoinerFinalizeResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsSetTimer(unsigned int, unsigned int)
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Disconnect()
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSet()
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset const&)
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleMgmtSetResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleTransmitStarted(ot::Mac::TxFrame&)
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::StartTimerForBackoff(unsigned char)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoveryRequestFrameTxDone(ot::Message&)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::RestartTimer()
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AnnounceSenderBase::SendAnnounce(unsigned char)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AnnounceSenderBase::HandleTimer()
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::Start(ot::Mle::LeaderStartMode)
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Attach(ot::Mle::Mle::AttachMode)
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ScheduleMessageTransmissionTimer()
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAttachTimer()
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetStateChild(unsigned short)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::Start()
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::EnergyScanServer::HandleTmf&lang;(ot::Uri)19&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::EnergyScanServer::HandleScanResult(otEnergyScanResult*)
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::PingSender::SendPing()
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::PanIdQueryServer::HandleTmf&lang;(ot::Uri)26&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::SynchronizeServerData()
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::HandleCoapResponse(otError)
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::SetCommandTimeout(unsigned int)
</UL>

<P><STRONG><a name="[28e]"></a>ot::TimerMilli::FireAt(ot::Time)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer.o(.text._ZN2ot10TimerMilli6FireAtENS_4TimeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ot::TimerMilli::FireAt(ot::Time) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::HandleRetransmissionTimer()
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::HandleTimer()
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::UpdateIdleMode()
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::HandleTimer()
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::DelaySendingJoinerEntrust(ot::Ip6::MessageInfo const&, ot::Mac::Key const&)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::SendDelayedJoinerEntrust()
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::HandleRetransmissionTimer()
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleDelayedResponseTimer()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::ContextIds::HandleTimer()
</UL>

<P><STRONG><a name="[263]"></a>ot::TimerMilli::StartAt(ot::Time, unsigned int)</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, timer.o(.text._ZN2ot10TimerMilli7StartAtENS_4TimeEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::ResetKeepAliveTimer()
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::ScheduleNextPoll(ot::DataPollSender::PollPeriodSelector)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::HandleDelayTimer()
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::StartDelayTimer()
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::StartCsmaBackoff()
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SampleRssi()
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::HandleKeyRotationTimer()
</UL>

<P><STRONG><a name="[299]"></a>ot::MessagePool::Free(ot::Message*)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, message.o(.text._ZN2ot11MessagePool4FreeEPNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::MessagePool::Free(ot::Message*) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::DequeueAndFreeAll()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::DequeueAndFree(ot::Message&)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&)
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Clone(unsigned short) const
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::DequeueAndFreeAll()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::DequeueAndFree(ot::Message&)
</UL>

<P><STRONG><a name="[29a]"></a>ot::MessagePool::Allocate(ot::Message::Type)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, message.o(.text._ZN2ot11MessagePool8AllocateENS_7Message4TypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = ot::MessagePool::Allocate(ot::Message::Type) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendEmptyMessage()
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::DelaySendingJoinerEntrust(ot::Ip6::MessageInfo const&, ot::Mac::Key const&)
</UL>

<P><STRONG><a name="[460]"></a>ot::MessagePool::Allocate(ot::Message::Type, unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, message.o(.text._ZN2ot11MessagePool8AllocateENS_7Message4TypeEt))
<BR><BR>[Called By]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::HandleDtlsReceive(unsigned char*, unsigned short)
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildSupervisor::SendMessage(ot::Child&)
</UL>

<P><STRONG><a name="[29b]"></a>ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, message.o(.text._ZN2ot11MessagePool8AllocateENS_7Message4TypeEtRKNS1_8SettingsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetLength(unsigned short)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetPriority(ot::Message::Priority)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::NewBuffer(ot::Message::Priority)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::Free(ot::Message*)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::NewMessage(unsigned short, ot::Message::Settings const&)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::Allocate(ot::Message::Type)
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Clone(unsigned short) const
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::FrameToMessage(ot::FrameData const&, unsigned short, ot::Mac::Addresses const&, ot::Message*&)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[29c]"></a>ot::MessagePool::NewBuffer(ot::Message::Priority)</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, message.o(.text._ZN2ot11MessagePool9NewBufferENS_7Message8PriorityE))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::EvictMessage(ot::Message::Priority)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::PrependBytes(void const*, unsigned short)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&)
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ResizeMessage(unsigned short)
</UL>

<P><STRONG><a name="[929]"></a>ot::MessagePool::MessagePool(ot::Instance&)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, message.o(.text._ZN2ot11MessagePoolC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bbd]"></a>ot::MessagePool::MessagePool__sub_object(ot::Instance&)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, message.o(.text._ZN2ot11MessagePoolC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[2a0]"></a>ot::NetworkData::LeaderBase::SetNetworkData(unsigned char, unsigned char, ot::NetworkData::Type, ot::Message const&, unsigned short, unsigned short)</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, network_data_leader.o(.text._ZN2ot11NetworkData10LeaderBase14SetNetworkDataEhhNS0_4TypeERKNS_7MessageEtt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::DumpAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, void const*, unsigned short)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::HandleNetworkDataRestoredAfterReset()
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::RemoveTemporaryData()
</UL>
<BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildIdResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleLeaderData(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[2a4]"></a>ot::NetworkData::LeaderBase::SetCommissioningData(unsigned char const*, unsigned char)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, network_data_leader.o(.text._ZN2ot11NetworkData10LeaderBase20SetCommissioningDataEPKhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::LeaderBase::SetCommissioningData(unsigned char const*, unsigned char) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::RemoveCommissioningData()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::AppendTlv(unsigned short)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Leader::HandleTmf&lang;(ot::Uri)23&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SetEmptyCommissionerData()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::ResignCommissioner()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)16&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[2a7]"></a>ot::NetworkData::LeaderBase::SignalNetDataChanged()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, network_data_leader.o(.text._ZN2ot11NetworkData10LeaderBase20SignalNetDataChangedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::LeaderBase::SignalNetDataChanged() &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::IncrementVersion()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::IncrementVersionAndStableVersion()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RegisterNetworkData(unsigned short, ot::NetworkData::NetworkData const&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveBorderRouter(unsigned short, ot::NetworkData::Leader::MatchMode)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveContext(unsigned char)
</UL>

<P><STRONG><a name="[2a5]"></a>ot::NetworkData::LeaderBase::RemoveCommissioningData()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, network_data_leader.o(.text._ZN2ot11NetworkData10LeaderBase23RemoveCommissioningDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::LeaderBase::RemoveCommissioningData() &rArr; ot::NetworkData::MutableNetworkData::RemoveTlv(ot::NetworkData::NetworkDataTlv*) &rArr; ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkDataTlv::Find(ot::NetworkData::NetworkDataTlv const*, ot::NetworkData::NetworkDataTlv const*, ot::NetworkData::NetworkDataTlv::Type)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::RemoveTlv(ot::NetworkData::NetworkDataTlv*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SetCommissioningData(unsigned char const*, unsigned char)
</UL>

<P><STRONG><a name="[2aa]"></a>ot::NetworkData::LeaderBase::Reset()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, network_data_leader.o(.text._ZN2ot11NetworkData10LeaderBase5ResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::LeaderBase::Reset() &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::Manager::NonCryptoGetUint32()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::Leader(ot::Instance&)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::Reset()
</UL>

<P><STRONG><a name="[2ac]"></a>ot::NetworkData::ServiceTlv::Init(unsigned char, unsigned int, ot::NetworkData::ServiceData const&)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, network_data_tlvs.o(.text._ZN2ot11NetworkData10ServiceTlv4InitEhjRKNS0_11ServiceDataE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ot::NetworkData::ServiceTlv::Init(unsigned char, unsigned int, ot::NetworkData::ServiceData const&) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddService(ot::NetworkData::ServiceTlv const&, ot::NetworkData::Leader::ChangedFlags&)
</UL>

<P><STRONG><a name="[2ad]"></a>ot::NetworkData::NetworkData::MatchService(ot::NetworkData::ServiceTlv const&, unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, network_data.o(.text._ZN2ot11NetworkData11NetworkData12MatchServiceERKNS0_10ServiceTlvEjRKNS0_11ServiceDataENS1_16ServiceMatchModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ot::NetworkData::NetworkData::MatchService(ot::NetworkData::ServiceTlv const&, unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::FindService(unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const
</UL>

<P><STRONG><a name="[2e3]"></a>ot::NetworkData::TlvIterator::Iterate(ot::NetworkData::NetworkDataTlv::Type)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, network_data_tlvs.o(.text._ZN2ot11NetworkData11TlvIterator7IterateENS0_14NetworkDataTlv4TypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::NetworkData::TlvIterator::Iterate(ot::NetworkData::NetworkDataTlv::Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::IsOnMesh(ot::Ip6::Address const&) const
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetContext(unsigned char, ot::Lowpan::Context&) const
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::FindServiceById(unsigned char) const
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::FindNextMatchingPrefixTlv(ot::Ip6::Address const&, ot::NetworkData::PrefixTlv const*) const
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::ExternalRouteLookup(unsigned char, ot::Ip6::Address const&, unsigned short&) const
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::DefaultRouteLookup(ot::NetworkData::PrefixTlv const&, unsigned short&) const
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::HandleNetworkDataRestoredAfterReset()
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::FindService(unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::FindPrefix(unsigned char const*, unsigned char) const
</UL>

<P><STRONG><a name="[2d9]"></a>ot::NetworkData::TlvIterator::Iterate(ot::NetworkData::NetworkDataTlv::Type, bool)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, network_data_tlvs.o(.text._ZN2ot11NetworkData11TlvIterator7IterateENS0_14NetworkDataTlv4TypeEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::NetworkData::TlvIterator::Iterate(ot::NetworkData::NetworkDataTlv::Type, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::ContainsMatchingServer(ot::NetworkData::ServiceTlv const*, ot::NetworkData::ServerTlv const&)
</UL>

<P><STRONG><a name="[2ae]"></a>ot::NetworkData::ServiceConfig::SetFrom(ot::NetworkData::ServiceTlv const&, ot::NetworkData::ServerTlv const&)</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, network_data_types.o(.text._ZN2ot11NetworkData13ServiceConfig7SetFromERKNS0_10ServiceTlvERKNS0_9ServerTlvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::NetworkData::ServiceConfig::SetFrom(ot::NetworkData::ServiceTlv const&, ot::NetworkData::ServerTlv const&) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const
</UL>

<P><STRONG><a name="[2a8]"></a>ot::NetworkData::NetworkDataTlv::Find(ot::NetworkData::NetworkDataTlv const*, ot::NetworkData::NetworkDataTlv const*, ot::NetworkData::NetworkDataTlv::Type)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, network_data_tlvs.o(.text._ZN2ot11NetworkData14NetworkDataTlv4FindEPKS1_S3_NS1_4TypeE))
<BR><BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(ot::MeshCoP::Tlv::Type) const
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetCommissioningData() const
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Service::Manager::IterateToNextServer(ot::NetworkData::Service::Manager::Iterator&) const
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveRlocInService(ot::NetworkData::ServiceTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::ServiceTlv const*, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveContext(unsigned char)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveContext(ot::NetworkData::PrefixTlv&, unsigned char)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddService(ot::NetworkData::ServiceTlv const&, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::RemoveCommissioningData()
</UL>

<P><STRONG><a name="[2af]"></a>ot::NetworkData::LowpanContextInfo::SetFrom(ot::NetworkData::PrefixTlv const&, ot::NetworkData::ContextTlv const&)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, network_data_types.o(.text._ZN2ot11NetworkData17LowpanContextInfo7SetFromERKNS0_9PrefixTlvERKNS0_10ContextTlvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ot::NetworkData::LowpanContextInfo::SetFrom(ot::NetworkData::PrefixTlv const&, ot::NetworkData::ContextTlv const&) &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::Set(unsigned char const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const
</UL>

<P><STRONG><a name="[2a1]"></a>ot::NetworkData::MutableNetworkData::RemoveTemporaryData()</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, network_data.o(.text._ZN2ot11NetworkData18MutableNetworkData19RemoveTemporaryDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::MutableNetworkData::RemoveTemporaryData() &rArr; ot::NetworkData::MutableNetworkData::RemoveTemporaryDataIn(ot::NetworkData::PrefixTlv&) &rArr; ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::RemoveTemporaryDataIn(ot::NetworkData::PrefixTlv&)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::RemoveTemporaryDataIn(ot::NetworkData::ServiceTlv&)
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::CopyNetworkData(ot::NetworkData::Type, unsigned char*, unsigned char&) const
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SetNetworkData(unsigned char, unsigned char, ot::NetworkData::Type, ot::Message const&, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[2b2]"></a>ot::NetworkData::MutableNetworkData::RemoveTemporaryDataIn(ot::NetworkData::ServiceTlv&)</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, network_data.o(.text._ZN2ot11NetworkData18MutableNetworkData21RemoveTemporaryDataInERNS0_10ServiceTlvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::MutableNetworkData::RemoveTemporaryDataIn(ot::NetworkData::ServiceTlv&) &rArr; ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::RemoveTemporaryData()
</UL>

<P><STRONG><a name="[2b1]"></a>ot::NetworkData::MutableNetworkData::RemoveTemporaryDataIn(ot::NetworkData::PrefixTlv&)</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, network_data.o(.text._ZN2ot11NetworkData18MutableNetworkData21RemoveTemporaryDataInERNS0_9PrefixTlvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::MutableNetworkData::RemoveTemporaryDataIn(ot::NetworkData::PrefixTlv&) &rArr; ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::PrefixTlv::FindSubTlv(ot::NetworkData::NetworkDataTlv::Type) const
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::RemoveTemporaryData()
</UL>

<P><STRONG><a name="[2b5]"></a>ot::NetworkData::MutableNetworkData::Insert(void*, unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, network_data.o(.text._ZN2ot11NetworkData18MutableNetworkData6InsertEPvh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::MutableNetworkData::Insert(void*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddServer(ot::NetworkData::ServerTlv const&, ot::NetworkData::ServiceTlv&, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddBorderRouter(ot::NetworkData::BorderRouterTlv const&, ot::NetworkData::PrefixTlv&, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddHasRoute(ot::NetworkData::HasRouteTlv const&, ot::NetworkData::PrefixTlv&, ot::NetworkData::Leader::ChangedFlags&)
</UL>

<P><STRONG><a name="[2b3]"></a>ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, network_data.o(.text._ZN2ot11NetworkData18MutableNetworkData6RemoveEPvh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveRlocInBorderRouter(ot::NetworkData::PrefixTlv&, ot::NetworkData::BorderRouterTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::PrefixTlv const*, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveRlocInHasRoute(ot::NetworkData::PrefixTlv&, ot::NetworkData::HasRouteTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::PrefixTlv const*, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::RemoveTlv(ot::NetworkData::NetworkDataTlv*)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::RemoveTemporaryDataIn(ot::NetworkData::PrefixTlv&)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::RemoveTemporaryDataIn(ot::NetworkData::ServiceTlv&)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::RemoveTemporaryData()
</UL>

<P><STRONG><a name="[2a6]"></a>ot::NetworkData::MutableNetworkData::AppendTlv(unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, network_data.o(.text._ZN2ot11NetworkData18MutableNetworkData9AppendTlvEt))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SetCommissioningData(unsigned char const*, unsigned char)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddPrefix(ot::NetworkData::PrefixTlv const&, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddService(ot::NetworkData::ServiceTlv const&, ot::NetworkData::Leader::ChangedFlags&)
</UL>

<P><STRONG><a name="[2a9]"></a>ot::NetworkData::MutableNetworkData::RemoveTlv(ot::NetworkData::NetworkDataTlv*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, network_data.o(.text._ZN2ot11NetworkData18MutableNetworkData9RemoveTlvEPNS0_14NetworkDataTlvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::MutableNetworkData::RemoveTlv(ot::NetworkData::NetworkDataTlv*) &rArr; ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::UpdateTlv(ot::NetworkData::NetworkDataTlv&, ot::NetworkData::NetworkDataTlv const*)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveRlocInService(ot::NetworkData::ServiceTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::ServiceTlv const*, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveRlocInPrefix(ot::NetworkData::PrefixTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::PrefixTlv const*, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveContext(ot::NetworkData::PrefixTlv&, unsigned char)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::RemoveCommissioningData()
</UL>

<P><STRONG><a name="[2b7]"></a>ot::NetworkData::OnMeshPrefixConfig::SetFromTlvFlags(unsigned short)</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, network_data_types.o(.text._ZN2ot11NetworkData18OnMeshPrefixConfig15SetFromTlvFlagsEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::NetworkData::OnMeshPrefixConfig::SetFromTlvFlags(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Preference::From2BitUint(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::OnMeshPrefixConfig::SetFrom(ot::NetworkData::PrefixTlv const&, ot::NetworkData::BorderRouterTlv const&, ot::NetworkData::BorderRouterEntry const&)
</UL>

<P><STRONG><a name="[2b9]"></a>ot::NetworkData::OnMeshPrefixConfig::SetFrom(ot::NetworkData::PrefixTlv const&, ot::NetworkData::BorderRouterTlv const&, ot::NetworkData::BorderRouterEntry const&)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, network_data_types.o(.text._ZN2ot11NetworkData18OnMeshPrefixConfig7SetFromERKNS0_9PrefixTlvERKNS0_15BorderRouterTlvERKNS0_17BorderRouterEntryE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ot::NetworkData::OnMeshPrefixConfig::SetFrom(ot::NetworkData::PrefixTlv const&, ot::NetworkData::BorderRouterTlv const&, ot::NetworkData::BorderRouterEntry const&) &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::Set(unsigned char const*, unsigned char)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::OnMeshPrefixConfig::SetFromTlvFlags(unsigned short)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const
</UL>

<P><STRONG><a name="[2ba]"></a>ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&)</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, network_data_types.o(.text._ZN2ot11NetworkData19ExternalRouteConfig7SetFromERNS_8InstanceERKNS0_9PrefixTlvERKNS0_11HasRouteTlvERKNS0_13HasRouteEntryE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&) &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::Set(unsigned char const*, unsigned char)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Preference::From2BitUint(unsigned char)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const
</UL>

<P><STRONG><a name="[2bb]"></a>ot::NetworkData::Leader::AddService(ot::NetworkData::ServiceTlv const&, ot::NetworkData::Leader::ChangedFlags&)</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader10AddServiceERKNS0_10ServiceTlvERNS1_12ChangedFlagsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::AddService(ot::NetworkData::ServiceTlv const&, ot::NetworkData::Leader::ChangedFlags&) &rArr; ot::NetworkData::Leader::AllocateServiceId(unsigned char&) const &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AllocateServiceId(unsigned char&) const
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::UpdateTlv(ot::NetworkData::NetworkDataTlv&, ot::NetworkData::NetworkDataTlv const*)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddServer(ot::NetworkData::ServerTlv const&, ot::NetworkData::ServiceTlv&, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::ServiceTlv::Init(unsigned char, unsigned int, ot::NetworkData::ServiceData const&)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkDataTlv::Find(ot::NetworkData::NetworkDataTlv const*, ot::NetworkData::NetworkDataTlv const*, ot::NetworkData::NetworkDataTlv::Type)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::FindService(unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::AppendTlv(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RegisterNetworkData(unsigned short, ot::NetworkData::NetworkData const&)
</UL>

<P><STRONG><a name="[2c0]"></a>ot::NetworkData::Leader::ContextIds::HandleTimer()</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader10ContextIds11HandleTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::ContextIds::HandleTimer() &rArr; ot::NetworkData::Leader::RemoveContext(unsigned char) &rArr; ot::NetworkData::Leader::RemoveContext(ot::NetworkData::PrefixTlv&, unsigned char) &rArr; ot::NetworkData::MutableNetworkData::RemoveTlv(ot::NetworkData::NetworkDataTlv*) &rArr; ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::FireAt(ot::Time)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveContext(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::HandleTimer()
</UL>

<P><STRONG><a name="[2c2]"></a>ot::NetworkData::Leader::ContextIds::ScheduleToRemove(unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader10ContextIds16ScheduleToRemoveEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::ContextIds::ScheduleToRemove(unsigned char) &rArr; ot::TimerMilli::FireAtIfEarlier(ot::Time) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::FireAtIfEarlier(ot::Time)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveRlocInPrefix(ot::NetworkData::PrefixTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::PrefixTlv const*, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::HandleNetworkDataRestoredAfterReset()
</UL>

<P><STRONG><a name="[2c3]"></a>ot::NetworkData::Leader::RemoveRloc(unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::NetworkData const&, ot::NetworkData::Leader::ChangedFlags&)</STRONG> (Thumb, 234 bytes, Stack size 64 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader10RemoveRlocEtNS1_9MatchModeERKNS0_11NetworkDataERNS1_12ChangedFlagsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::RemoveRloc(unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::NetworkData const&, ot::NetworkData::Leader::ChangedFlags&) &rArr; ot::NetworkData::Leader::RemoveRlocInPrefix(ot::NetworkData::PrefixTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::PrefixTlv const*, ot::NetworkData::Leader::ChangedFlags&) &rArr; ot::NetworkData::Leader::RemoveRlocInBorderRouter(ot::NetworkData::PrefixTlv&, ot::NetworkData::BorderRouterTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::PrefixTlv const*, ot::NetworkData::Leader::ChangedFlags&) &rArr; ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::UpdateTlv(ot::NetworkData::NetworkDataTlv&, ot::NetworkData::NetworkDataTlv const*)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveRlocInService(ot::NetworkData::ServiceTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::ServiceTlv const*, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveRlocInPrefix(ot::NetworkData::PrefixTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::PrefixTlv const*, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::FindService(unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::FindPrefix(unsigned char const*, unsigned char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RegisterNetworkData(unsigned short, ot::NetworkData::NetworkData const&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveBorderRouter(unsigned short, ot::NetworkData::Leader::MatchMode)
</UL>

<P><STRONG><a name="[2c7]"></a>ot::NetworkData::Leader::AddHasRoute(ot::NetworkData::HasRouteTlv const&, ot::NetworkData::PrefixTlv&, ot::NetworkData::Leader::ChangedFlags&)</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader11AddHasRouteERKNS0_11HasRouteTlvERNS0_9PrefixTlvERNS1_12ChangedFlagsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::AddHasRoute(ot::NetworkData::HasRouteTlv const&, ot::NetworkData::PrefixTlv&, ot::NetworkData::Leader::ChangedFlags&) &rArr; ot::NetworkData::MutableNetworkData::Insert(void*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::PrefixTlv::FindSubTlv(ot::NetworkData::NetworkDataTlv::Type, bool) const
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::ContainsMatchingEntry(ot::NetworkData::HasRouteTlv const*, ot::NetworkData::HasRouteEntry const&)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::Insert(void*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddPrefix(ot::NetworkData::PrefixTlv const&, ot::NetworkData::Leader::ChangedFlags&)
</UL>

<P><STRONG><a name="[2ca]"></a>ot::NetworkData::Leader::HandleTimer()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader11HandleTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::HandleTimer() &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::BecomeDetached()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::ContextIds::HandleTimer()
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilliIn&lang;ot::NetworkData::Leader, &(ot::NetworkData::Leader::HandleTimer())&rang;::HandleTimer(ot::Timer&)
</UL>

<P><STRONG><a name="[2cc]"></a>ot::NetworkData::Leader::RemoveContext(ot::NetworkData::PrefixTlv&, unsigned char)</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader13RemoveContextERNS0_9PrefixTlvEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::RemoveContext(ot::NetworkData::PrefixTlv&, unsigned char) &rArr; ot::NetworkData::MutableNetworkData::RemoveTlv(ot::NetworkData::NetworkDataTlv*) &rArr; ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkDataTlv::Find(ot::NetworkData::NetworkDataTlv const*, ot::NetworkData::NetworkDataTlv const*, ot::NetworkData::NetworkDataTlv::Type)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::RemoveTlv(ot::NetworkData::NetworkDataTlv*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveContext(unsigned char)
</UL>

<P><STRONG><a name="[2c1]"></a>ot::NetworkData::Leader::RemoveContext(unsigned char)</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader13RemoveContextEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::RemoveContext(unsigned char) &rArr; ot::NetworkData::Leader::RemoveContext(ot::NetworkData::PrefixTlv&, unsigned char) &rArr; ot::NetworkData::MutableNetworkData::RemoveTlv(ot::NetworkData::NetworkDataTlv*) &rArr; ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::UpdateTlv(ot::NetworkData::NetworkDataTlv&, ot::NetworkData::NetworkDataTlv const*)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveContext(ot::NetworkData::PrefixTlv&, unsigned char)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkDataTlv::Find(ot::NetworkData::NetworkDataTlv const*, ot::NetworkData::NetworkDataTlv const*, ot::NetworkData::NetworkDataTlv::Type)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SignalNetDataChanged()
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::ContextIds::HandleTimer()
</UL>

<P><STRONG><a name="[2e6]"></a>ot::NetworkData::Leader::ValidatePrefix(ot::NetworkData::PrefixTlv const&, unsigned short)</STRONG> (Thumb, 206 bytes, Stack size 28 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader14ValidatePrefixERKNS0_9PrefixTlvEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ot::NetworkData::Leader::ValidatePrefix(ot::NetworkData::PrefixTlv const&, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::Validate(ot::NetworkData::NetworkData const&, unsigned short)
</UL>

<P><STRONG><a name="[2cd]"></a>ot::NetworkData::Leader::AddBorderRouter(ot::NetworkData::BorderRouterTlv const&, ot::NetworkData::PrefixTlv&, ot::NetworkData::Leader::ChangedFlags&)</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader15AddBorderRouterERKNS0_15BorderRouterTlvERNS0_9PrefixTlvERNS1_12ChangedFlagsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::AddBorderRouter(ot::NetworkData::BorderRouterTlv const&, ot::NetworkData::PrefixTlv&, ot::NetworkData::Leader::ChangedFlags&) &rArr; ot::NetworkData::MutableNetworkData::Insert(void*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::PrefixTlv::FindSubTlv(ot::NetworkData::NetworkDataTlv::Type, bool) const
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::ContainsMatchingEntry(ot::NetworkData::BorderRouterTlv const*, ot::NetworkData::BorderRouterEntry const&)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::PrefixTlv::FindSubTlv(ot::NetworkData::NetworkDataTlv::Type) const
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::Insert(void*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddPrefix(ot::NetworkData::PrefixTlv const&, ot::NetworkData::Leader::ChangedFlags&)
</UL>

<P><STRONG><a name="[2e8]"></a>ot::NetworkData::Leader::ValidateService(ot::NetworkData::ServiceTlv const&, unsigned short)</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader15ValidateServiceERKNS0_10ServiceTlvEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::NetworkData::Leader::ValidateService(ot::NetworkData::ServiceTlv const&, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::Validate(ot::NetworkData::NetworkData const&, unsigned short)
</UL>

<P><STRONG><a name="[2cf]"></a>ot::NetworkData::Leader::IncrementVersion()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader16IncrementVersionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::IncrementVersion() &rArr; ot::NetworkData::LeaderBase::SignalNetDataChanged() &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SignalNetDataChanged()
</UL>
<BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Leader::HandleTmf&lang;(ot::Uri)22&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[2d0]"></a>ot::NetworkData::Leader::RemoveBorderRouter(unsigned short, ot::NetworkData::Leader::MatchMode)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader18RemoveBorderRouterEtNS1_9MatchModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::RemoveBorderRouter(unsigned short, ot::NetworkData::Leader::MatchMode) &rArr; ot::NetworkData::Leader::RemoveRloc(unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::NetworkData const&, ot::NetworkData::Leader::ChangedFlags&) &rArr; ot::NetworkData::Leader::RemoveRlocInPrefix(ot::NetworkData::PrefixTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::PrefixTlv const*, ot::NetworkData::Leader::ChangedFlags&) &rArr; ot::NetworkData::Leader::RemoveRlocInBorderRouter(ot::NetworkData::PrefixTlv&, ot::NetworkData::BorderRouterTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::PrefixTlv const*, ot::NetworkData::Leader::ChangedFlags&) &rArr; ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveRloc(unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::NetworkData const&, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SignalNetDataChanged()
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Release(unsigned char)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)5&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[2c5]"></a>ot::NetworkData::Leader::RemoveRlocInPrefix(ot::NetworkData::PrefixTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::PrefixTlv const*, ot::NetworkData::Leader::ChangedFlags&)</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader18RemoveRlocInPrefixERNS0_9PrefixTlvEtNS1_9MatchModeEPKS2_RNS1_12ChangedFlagsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::RemoveRlocInPrefix(ot::NetworkData::PrefixTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::PrefixTlv const*, ot::NetworkData::Leader::ChangedFlags&) &rArr; ot::NetworkData::Leader::RemoveRlocInBorderRouter(ot::NetworkData::PrefixTlv&, ot::NetworkData::BorderRouterTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::PrefixTlv const*, ot::NetworkData::Leader::ChangedFlags&) &rArr; ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveRlocInBorderRouter(ot::NetworkData::PrefixTlv&, ot::NetworkData::BorderRouterTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::PrefixTlv const*, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveRlocInHasRoute(ot::NetworkData::PrefixTlv&, ot::NetworkData::HasRouteTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::PrefixTlv const*, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::ContextIds::ScheduleToRemove(unsigned char)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::PrefixTlv::FindSubTlv(ot::NetworkData::NetworkDataTlv::Type) const
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::RemoveTlv(ot::NetworkData::NetworkDataTlv*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveRloc(unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::NetworkData const&, ot::NetworkData::Leader::ChangedFlags&)
</UL>

<P><STRONG><a name="[2d3]"></a>ot::NetworkData::Leader::RegisterNetworkData(unsigned short, ot::NetworkData::NetworkData const&)</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader19RegisterNetworkDataEtRKNS0_11NetworkDataE))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::RegisterNetworkData(unsigned short, ot::NetworkData::NetworkData const&) &rArr; void ot::Logger::DumpAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, void const*, unsigned short) &rArr; ot::Logger::DumpInModule(char const*, ot::LogLevel, char const*, void const*, unsigned short) &rArr; ot::Logger::DumpLine(char const*, ot::LogLevel, unsigned char const*, unsigned short) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::DumpAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, void const*, unsigned short)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddPrefix(ot::NetworkData::PrefixTlv const&, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::Validate(ot::NetworkData::NetworkData const&, unsigned short)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveRloc(unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::NetworkData const&, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddService(ot::NetworkData::ServiceTlv const&, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SignalNetDataChanged()
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)5&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[2c6]"></a>ot::NetworkData::Leader::RemoveRlocInService(ot::NetworkData::ServiceTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::ServiceTlv const*, ot::NetworkData::Leader::ChangedFlags&)</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader19RemoveRlocInServiceERNS0_10ServiceTlvEtNS1_9MatchModeEPKS2_RNS1_12ChangedFlagsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::RemoveRlocInService(ot::NetworkData::ServiceTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::ServiceTlv const*, ot::NetworkData::Leader::ChangedFlags&) &rArr; ot::NetworkData::MutableNetworkData::RemoveTlv(ot::NetworkData::NetworkDataTlv*) &rArr; ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::ContainsMatchingServer(ot::NetworkData::ServiceTlv const*, ot::NetworkData::ServerTlv const&)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkDataTlv::Find(ot::NetworkData::NetworkDataTlv const*, ot::NetworkData::NetworkDataTlv const*, ot::NetworkData::NetworkDataTlv::Type)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::RemoveTlv(ot::NetworkData::NetworkDataTlv*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveRloc(unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::NetworkData const&, ot::NetworkData::Leader::ChangedFlags&)
</UL>

<P><STRONG><a name="[2d2]"></a>ot::NetworkData::Leader::RemoveRlocInHasRoute(ot::NetworkData::PrefixTlv&, ot::NetworkData::HasRouteTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::PrefixTlv const*, ot::NetworkData::Leader::ChangedFlags&)</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader20RemoveRlocInHasRouteERNS0_9PrefixTlvERNS0_11HasRouteTlvEtNS1_9MatchModeEPKS2_RNS1_12ChangedFlagsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::RemoveRlocInHasRoute(ot::NetworkData::PrefixTlv&, ot::NetworkData::HasRouteTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::PrefixTlv const*, ot::NetworkData::Leader::ChangedFlags&) &rArr; ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::ContainsMatchingEntry(ot::NetworkData::PrefixTlv const*, bool, ot::NetworkData::HasRouteEntry const&)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveRlocInPrefix(ot::NetworkData::PrefixTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::PrefixTlv const*, ot::NetworkData::Leader::ChangedFlags&)
</UL>

<P><STRONG><a name="[2c9]"></a>ot::NetworkData::Leader::ContainsMatchingEntry(ot::NetworkData::HasRouteTlv const*, ot::NetworkData::HasRouteEntry const&)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader21ContainsMatchingEntryEPKNS0_11HasRouteTlvERKNS0_13HasRouteEntryE))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ot::NetworkData::Leader::ContainsMatchingEntry(ot::NetworkData::HasRouteTlv const*, ot::NetworkData::HasRouteEntry const&) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::ContainsMatchingEntry(ot::NetworkData::PrefixTlv const*, bool, ot::NetworkData::HasRouteEntry const&)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddHasRoute(ot::NetworkData::HasRouteTlv const&, ot::NetworkData::PrefixTlv&, ot::NetworkData::Leader::ChangedFlags&)
</UL>

<P><STRONG><a name="[2ce]"></a>ot::NetworkData::Leader::ContainsMatchingEntry(ot::NetworkData::BorderRouterTlv const*, ot::NetworkData::BorderRouterEntry const&)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader21ContainsMatchingEntryEPKNS0_15BorderRouterTlvERKNS0_17BorderRouterEntryE))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::ContainsMatchingEntry(ot::NetworkData::PrefixTlv const*, bool, ot::NetworkData::BorderRouterEntry const&)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddBorderRouter(ot::NetworkData::BorderRouterTlv const&, ot::NetworkData::PrefixTlv&, ot::NetworkData::Leader::ChangedFlags&)
</UL>

<P><STRONG><a name="[2d7]"></a>ot::NetworkData::Leader::ContainsMatchingEntry(ot::NetworkData::PrefixTlv const*, bool, ot::NetworkData::HasRouteEntry const&)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader21ContainsMatchingEntryEPKNS0_9PrefixTlvEbRKNS0_13HasRouteEntryE))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ot::NetworkData::Leader::ContainsMatchingEntry(ot::NetworkData::PrefixTlv const*, bool, ot::NetworkData::HasRouteEntry const&) &rArr; ot::NetworkData::Leader::ContainsMatchingEntry(ot::NetworkData::HasRouteTlv const*, ot::NetworkData::HasRouteEntry const&) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::PrefixTlv::FindSubTlv(ot::NetworkData::NetworkDataTlv::Type, bool) const
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::ContainsMatchingEntry(ot::NetworkData::HasRouteTlv const*, ot::NetworkData::HasRouteEntry const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveRlocInHasRoute(ot::NetworkData::PrefixTlv&, ot::NetworkData::HasRouteTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::PrefixTlv const*, ot::NetworkData::Leader::ChangedFlags&)
</UL>

<P><STRONG><a name="[2d8]"></a>ot::NetworkData::Leader::ContainsMatchingEntry(ot::NetworkData::PrefixTlv const*, bool, ot::NetworkData::BorderRouterEntry const&)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader21ContainsMatchingEntryEPKNS0_9PrefixTlvEbRKNS0_17BorderRouterEntryE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::NetworkData::Leader::ContainsMatchingEntry(ot::NetworkData::PrefixTlv const*, bool, ot::NetworkData::BorderRouterEntry const&) &rArr; ot::NetworkData::PrefixTlv::FindSubTlv(ot::NetworkData::NetworkDataTlv::Type, bool) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::PrefixTlv::FindSubTlv(ot::NetworkData::NetworkDataTlv::Type, bool) const
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::ContainsMatchingEntry(ot::NetworkData::BorderRouterTlv const*, ot::NetworkData::BorderRouterEntry const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveRlocInBorderRouter(ot::NetworkData::PrefixTlv&, ot::NetworkData::BorderRouterTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::PrefixTlv const*, ot::NetworkData::Leader::ChangedFlags&)
</UL>

<P><STRONG><a name="[2d6]"></a>ot::NetworkData::Leader::ContainsMatchingServer(ot::NetworkData::ServiceTlv const*, ot::NetworkData::ServerTlv const&)</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader22ContainsMatchingServerEPKNS0_10ServiceTlvERKNS0_9ServerTlvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ot::NetworkData::Leader::ContainsMatchingServer(ot::NetworkData::ServiceTlv const*, ot::NetworkData::ServerTlv const&) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::TlvIterator::Iterate(ot::NetworkData::NetworkDataTlv::Type, bool)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddServer(ot::NetworkData::ServerTlv const&, ot::NetworkData::ServiceTlv&, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveRlocInService(ot::NetworkData::ServiceTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::ServiceTlv const*, ot::NetworkData::Leader::ChangedFlags&)
</UL>

<P><STRONG><a name="[2d1]"></a>ot::NetworkData::Leader::RemoveRlocInBorderRouter(ot::NetworkData::PrefixTlv&, ot::NetworkData::BorderRouterTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::PrefixTlv const*, ot::NetworkData::Leader::ChangedFlags&)</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader24RemoveRlocInBorderRouterERNS0_9PrefixTlvERNS0_15BorderRouterTlvEtNS1_9MatchModeEPKS2_RNS1_12ChangedFlagsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::RemoveRlocInBorderRouter(ot::NetworkData::PrefixTlv&, ot::NetworkData::BorderRouterTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::PrefixTlv const*, ot::NetworkData::Leader::ChangedFlags&) &rArr; ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::ContainsMatchingEntry(ot::NetworkData::PrefixTlv const*, bool, ot::NetworkData::BorderRouterEntry const&)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveRlocInPrefix(ot::NetworkData::PrefixTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::PrefixTlv const*, ot::NetworkData::Leader::ChangedFlags&)
</UL>

<P><STRONG><a name="[2da]"></a>ot::NetworkData::Leader::SendCommissioningGetResponse(ot::Coap::Message const&, unsigned short, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader28SendCommissioningGetResponseERKNS_4Coap7MessageEtRKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::SendCommissioningGetResponse(ot::Coap::Message const&, unsigned short, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityResponseMessage(ot::Coap::Message const&)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTo(ot::Message&) const
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::GetSize() const
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetCommissioningData() const
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)14&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)14&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[2e0]"></a>ot::NetworkData::Leader::SendCommissioningSetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader28SendCommissioningSetResponseERKNS_4Coap7MessageERKNS_3Ip611MessageInfoENS_7MeshCoP8StateTlv5StateE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::SendCommissioningSetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityResponseMessage(ot::Coap::Message const&)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned char&rang;(ot::Message&, unsigned char, unsigned char)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)16&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)16&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[2e2]"></a>ot::NetworkData::Leader::IncrementVersionAndStableVersion()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader32IncrementVersionAndStableVersionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::IncrementVersionAndStableVersion() &rArr; ot::NetworkData::LeaderBase::SignalNetDataChanged() &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SignalNetDataChanged()
</UL>
<BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset const&)
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleDatasetUpdated()
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleLeaderData(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[2a2]"></a>ot::NetworkData::Leader::HandleNetworkDataRestoredAfterReset()</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader35HandleNetworkDataRestoredAfterResetEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::ContextIds::ScheduleToRemove(unsigned char)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::PrefixTlv::FindSubTlv(ot::NetworkData::NetworkDataTlv::Type) const
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::TlvIterator::Iterate(ot::NetworkData::NetworkDataTlv::Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SetNetworkData(unsigned char, unsigned char, ot::NetworkData::Type, ot::Message const&, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[2e4]"></a>ot::NetworkData::Leader::Reset()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader5ResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::Reset() &rArr; ot::NetworkData::LeaderBase::Reset() &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::Reset()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeLeader()
</UL>

<P><STRONG><a name="[2e5]"></a>ot::NetworkData::Leader::Start(ot::Mle::LeaderStartMode)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader5StartENS_3Mle15LeaderStartModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::Start(ot::Mle::LeaderStartMode) &rArr; ot::TimerMilli::Start(unsigned int) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode)
</UL>

<P><STRONG><a name="[2d4]"></a>ot::NetworkData::Leader::Validate(ot::NetworkData::NetworkData const&, unsigned short)</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader8ValidateERKNS0_11NetworkDataEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::Validate(ot::NetworkData::NetworkData const&, unsigned short) &rArr; ot::NetworkData::NetworkData::FindPrefix(unsigned char const*, unsigned char) const &rArr; ot::Ip6::Prefix::MatchLength(unsigned char const*, unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::ServiceTlv::IsValid() const
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::ValidateService(ot::NetworkData::ServiceTlv const&, unsigned short)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::ValidatePrefix(ot::NetworkData::PrefixTlv const&, unsigned short)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::FindService(unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::FindPrefix(unsigned char const*, unsigned char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RegisterNetworkData(unsigned short, ot::NetworkData::NetworkData const&)
</UL>

<P><STRONG><a name="[2d5]"></a>ot::NetworkData::Leader::AddPrefix(ot::NetworkData::PrefixTlv const&, ot::NetworkData::Leader::ChangedFlags&)</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader9AddPrefixERKNS0_9PrefixTlvERNS1_12ChangedFlagsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::AddPrefix(ot::NetworkData::PrefixTlv const&, ot::NetworkData::Leader::ChangedFlags&) &rArr; ot::NetworkData::Leader::AddBorderRouter(ot::NetworkData::BorderRouterTlv const&, ot::NetworkData::PrefixTlv&, ot::NetworkData::Leader::ChangedFlags&) &rArr; ot::NetworkData::MutableNetworkData::Insert(void*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::UpdateTlv(ot::NetworkData::NetworkDataTlv&, ot::NetworkData::NetworkDataTlv const*)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddBorderRouter(ot::NetworkData::BorderRouterTlv const&, ot::NetworkData::PrefixTlv&, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddHasRoute(ot::NetworkData::HasRouteTlv const&, ot::NetworkData::PrefixTlv&, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::FindPrefix(unsigned char const*, unsigned char) const
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::AppendTlv(unsigned short)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RegisterNetworkData(unsigned short, ot::NetworkData::NetworkData const&)
</UL>

<P><STRONG><a name="[2bd]"></a>ot::NetworkData::Leader::AddServer(ot::NetworkData::ServerTlv const&, ot::NetworkData::ServiceTlv&, ot::NetworkData::Leader::ChangedFlags&)</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader9AddServerERKNS0_9ServerTlvERNS0_10ServiceTlvERNS1_12ChangedFlagsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::AddServer(ot::NetworkData::ServerTlv const&, ot::NetworkData::ServiceTlv&, ot::NetworkData::Leader::ChangedFlags&) &rArr; ot::NetworkData::MutableNetworkData::Insert(void*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::ContainsMatchingServer(ot::NetworkData::ServiceTlv const*, ot::NetworkData::ServerTlv const&)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::Insert(void*, unsigned char)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddService(ot::NetworkData::ServiceTlv const&, ot::NetworkData::Leader::ChangedFlags&)
</UL>

<P><STRONG><a name="[2e9]"></a>void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)14&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader9HandleTmfILNS_3UriE14EEEvRNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)14&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::NetworkData::Leader::SendCommissioningGetResponse(ot::Coap::Message const&, unsigned short, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetOffset(unsigned short)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlvValueOffset(ot::Message const&, unsigned char, unsigned short&, unsigned short&)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::SendCommissioningGetResponse(ot::Coap::Message const&, unsigned short, ot::Ip6::MessageInfo const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[2eb]"></a>void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)16&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 386 bytes, Stack size 296 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader9HandleTmfILNS_3UriE16EEEvRNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400 + Unknown Stack Size
<LI>Call Chain = void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)16&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::NetworkData::Leader::SendCommissioningSetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ReadBytes(unsigned short, void*, unsigned short) const
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::GetSize() const
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SetCommissioningData(unsigned char const*, unsigned char)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetCommissioningData() const
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::SendCommissioningSetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[2ed]"></a>void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)5&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 192 bytes, Stack size 304 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader9HandleTmfILNS_3UriE5EEEvRNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400 + Unknown Stack Size
<LI>Call Chain = void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)5&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendEmptyAck(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendHeaderResponse(ot::Coap::Code, ot::Coap::Message const&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendEmptyAck(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, unsigned short, ot::Tlv&)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::IsRoutingLocator() const
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)5&rang;()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RegisterNetworkData(unsigned short, ot::NetworkData::NetworkData const&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveBorderRouter(unsigned short, ot::NetworkData::Leader::MatchMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[2be]"></a>ot::NetworkData::Leader::UpdateTlv(ot::NetworkData::NetworkDataTlv&, ot::NetworkData::NetworkDataTlv const*)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6Leader9UpdateTlvERNS0_14NetworkDataTlvEPKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::UpdateTlv(ot::NetworkData::NetworkDataTlv&, ot::NetworkData::NetworkDataTlv const*) &rArr; ot::NetworkData::MutableNetworkData::RemoveTlv(ot::NetworkData::NetworkDataTlv*) &rArr; ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::RemoveTlv(ot::NetworkData::NetworkDataTlv*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddPrefix(ot::NetworkData::PrefixTlv const&, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveContext(unsigned char)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveRloc(unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::NetworkData const&, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddService(ot::NetworkData::ServiceTlv const&, ot::NetworkData::Leader::ChangedFlags&)
</UL>

<P><STRONG><a name="[2f2]"></a>ot::NetworkData::Leader::Leader(ot::Instance&)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6LeaderC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::Reset()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bbe]"></a>ot::NetworkData::Leader::Leader__sub_object(ot::Instance&)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, network_data_leader_ftd.o(.text._ZN2ot11NetworkData6LeaderC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[2f3]"></a>ot::NetworkData::Notifier::HandleCoapResponse(otError)</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, network_data_notifier.o(.text._ZN2ot11NetworkData8Notifier18HandleCoapResponseE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Notifier::HandleCoapResponse(otError) &rArr; ot::NetworkData::Notifier::SynchronizeServerData() &rArr; ot::NetworkData::Notifier::RemoveStaleChildEntries() &rArr; ot::NetworkData::Notifier::SendServerDataNotification(unsigned short, ot::NetworkData::NetworkData const*) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::SynchronizeServerData()
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::HandleCoapResponse(void*, otMessage*, otMessageInfo const*, otError)
</UL>

<P><STRONG><a name="[40]"></a>ot::NetworkData::Notifier::HandleCoapResponse(void*, otMessage*, otMessageInfo const*, otError)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, network_data_notifier.o(.text._ZN2ot11NetworkData8Notifier18HandleCoapResponseEPvP9otMessagePK13otMessageInfo7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Notifier::HandleCoapResponse(void*, otMessage*, otMessageInfo const*, otError) &rArr; ot::NetworkData::Notifier::HandleCoapResponse(otError) &rArr; ot::NetworkData::Notifier::SynchronizeServerData() &rArr; ot::NetworkData::Notifier::RemoveStaleChildEntries() &rArr; ot::NetworkData::Notifier::SendServerDataNotification(unsigned short, ot::NetworkData::NetworkData const*) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::HandleCoapResponse(otError)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_data_notifier.o(.text._ZN2ot11NetworkData8Notifier26SendServerDataNotificationEtPKNS0_11NetworkDataE)
</UL>
<P><STRONG><a name="[2f5]"></a>ot::NetworkData::Notifier::HandleNotifierEvents(ot::Events)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, network_data_notifier.o(.text._ZN2ot11NetworkData8Notifier20HandleNotifierEventsENS_6EventsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Notifier::HandleNotifierEvents(ot::Events) &rArr; ot::NetworkData::Notifier::SynchronizeServerData() &rArr; ot::NetworkData::Notifier::RemoveStaleChildEntries() &rArr; ot::NetworkData::Notifier::SendServerDataNotification(unsigned short, ot::NetworkData::NetworkData const*) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::SynchronizeServerData()
</UL>
<BR>[Called By]<UL><LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::EmitEvents()
</UL>

<P><STRONG><a name="[2f4]"></a>ot::NetworkData::Notifier::SynchronizeServerData()</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, network_data_notifier.o(.text._ZN2ot11NetworkData8Notifier21SynchronizeServerDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Notifier::SynchronizeServerData() &rArr; ot::NetworkData::Notifier::RemoveStaleChildEntries() &rArr; ot::NetworkData::Notifier::SendServerDataNotification(unsigned short, ot::NetworkData::NetworkData const*) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsAttached() const
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::RemoveStaleChildEntries()
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::HandleNotifierEvents(ot::Events)
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TaskletIn&lang;ot::NetworkData::Notifier, &(ot::NetworkData::Notifier::SynchronizeServerData())&rang;::HandleTasklet(ot::Tasklet&)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilliIn&lang;ot::NetworkData::Notifier, &(ot::NetworkData::Notifier::HandleTimer())&rang;::HandleTimer(ot::Timer&)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::HandleCoapResponse(otError)
</UL>

<P><STRONG><a name="[2f6]"></a>ot::NetworkData::Notifier::RemoveStaleChildEntries()</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, network_data_notifier.o(.text._ZN2ot11NetworkData8Notifier23RemoveStaleChildEntriesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Notifier::RemoveStaleChildEntries() &rArr; ot::NetworkData::Notifier::SendServerDataNotification(unsigned short, ot::NetworkData::NetworkData const*) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::FindChild(unsigned short, ot::Neighbor::StateFilter)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsRouterOrLeader() const
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::SendServerDataNotification(unsigned short, ot::NetworkData::NetworkData const*)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::GetNextServer(unsigned int&, unsigned short&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::SynchronizeServerData()
</UL>

<P><STRONG><a name="[2f9]"></a>ot::NetworkData::Notifier::SendServerDataNotification(unsigned short, ot::NetworkData::NetworkData const*)</STRONG> (Thumb, 196 bytes, Stack size 80 bytes, network_data_notifier.o(.text._ZN2ot11NetworkData8Notifier26SendServerDataNotificationEtPKNS0_11NetworkDataE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Notifier::SendServerDataNotification(unsigned short, ot::NetworkData::NetworkData const*) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned short&rang;(ot::Message&, unsigned char, unsigned short)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)5&rang;()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::RemoveStaleChildEntries()
</UL>

<P><STRONG><a name="[92c]"></a>ot::NetworkData::Notifier::Notifier(ot::Instance&)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, network_data_notifier.o(.text._ZN2ot11NetworkData8NotifierC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bbf]"></a>ot::NetworkData::Notifier::Notifier__sub_object(ot::Instance&)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, network_data_notifier.o(.text._ZN2ot11NetworkData8NotifierC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[2fc]"></a>ot::RouterTable::FindRouter(ot::Mac::ExtAddress const&)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, router_table.o(.text._ZN2ot11RouterTable10FindRouterERKNS_3Mac10ExtAddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ot::RouterTable::FindRouter(ot::Mac::ExtAddress const&) &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)4&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[2fd]"></a>ot::RouterTable::FindNeighbor(ot::Mac::Address const&)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, router_table.o(.text._ZN2ot11RouterTable12FindNeighborERKNS_3Mac7AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ot::RouterTable::FindNeighbor(ot::Mac::Address const&) &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindRxOnlyNeighborRouter(ot::Mac::Address const&)
</UL>

<P><STRONG><a name="[2fe]"></a>ot::RouterTable::RemoveRouter(ot::Router&)</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, router_table.o(.text._ZN2ot11RouterTable12RemoveRouterERNS_6RouterE))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = ot::RouterTable::RemoveRouter(ot::Router&) &rArr; ot::NeighborTable::Signal(ot::NeighborTable::Event, ot::Neighbor const&) &rArr; ot::DuaManager::UpdateChildDomainUnicastAddress(ot::Child const&, ot::Mle::ChildDuaState) &rArr; ot::DuaManager::UpdateCheckDelay(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::Signal(ot::NeighborTable::Event, ot::Neighbor const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Release(unsigned char)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::UpdateRouterIdSet(unsigned char, ot::Mle::RouterIdSet const&)
</UL>

<P><STRONG><a name="[2ff]"></a>ot::RouterTable::UpdateRoutes(ot::Mle::RouteTlv const&, unsigned char)</STRONG> (Thumb, 640 bytes, Stack size 80 bytes, router_table.o(.text._ZN2ot11RouterTable12UpdateRoutesERKNS_3Mle8RouteTlvEh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetNextHopAndPathCost(unsigned short, unsigned short&, unsigned char&) const
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetLinkCost(ot::Router const&) const
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Router::SetNextHopToInvalid()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Router::SetNextHopAndCost(unsigned char, unsigned char)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ResetAdvertiseInterval()
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::Mle::RxInfo&, unsigned short, ot::Mle::LeaderData const&)
</UL>

<P><STRONG><a name="[305]"></a>ot::RouterTable::GetRouterInfo(unsigned short, ot::Router::Info&)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, router_table.o(.text._ZN2ot11RouterTable13GetRouterInfoEtRNS_6Router4InfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = ot::RouterTable::GetRouterInfo(unsigned short, ot::Router::Info&) &rArr; ot::Router::Info::SetFrom(ot::Router const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Router::Info::SetFrom(ot::Router const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetRouterInfo
</UL>

<P><STRONG><a name="[307]"></a>ot::RouterTable::ClearNeighbors()</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, router_table.o(.text._ZN2ot11RouterTable14ClearNeighborsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = ot::RouterTable::ClearNeighbors() &rArr; ot::NeighborTable::Signal(ot::NeighborTable::Event, ot::Neighbor const&) &rArr; ot::DuaManager::UpdateChildDomainUnicastAddress(ot::Child const&, ot::Mle::ChildDuaState) &rArr; ot::DuaManager::UpdateCheckDelay(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::Signal(ot::NeighborTable::Event, ot::Neighbor const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::RouterTable(ot::Instance&)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Clear()
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleDetachStart()
</UL>

<P><STRONG><a name="[308]"></a>ot::RouterTable::HandleTimeTick()</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, router_table.o(.text._ZN2ot11RouterTable14HandleTimeTickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ot::RouterTable::HandleTimeTick()
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
</UL>

<P><STRONG><a name="[309]"></a>ot::RouterTable::RemoveRouterLink(ot::Router&)</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, router_table.o(.text._ZN2ot11RouterTable16RemoveRouterLinkERNS_6RouterE))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = ot::RouterTable::RemoveRouterLink(ot::Router&) &rArr; ot::AddressResolver::RemoveEntriesForRouterId(unsigned char) &rArr; ot::AddressResolver::Remove(unsigned short, bool) &rArr; ot::AddressResolver::RemoveCacheEntry(ot::AddressResolver::CacheEntry&, ot::AddressResolver::CacheEntryList&, ot::AddressResolver::CacheEntry*, ot::AddressResolver::Reason) &rArr; ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::RemoveEntriesForRouterId(unsigned char)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetLinkCost(ot::Router const&) const
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Router::SetNextHopToInvalid()
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ResetAdvertiseInterval()
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::UpdateRouterIdSet(unsigned char, ot::Mle::RouterIdSet const&)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveRouterLink(ot::Router&)
</UL>

<P><STRONG><a name="[b31]"></a>ot::RouterTable::SetRouterIdRange(unsigned char, unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, router_table.o(.text._ZN2ot11RouterTable16SetRouterIdRangeEhh))
<BR><BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetRouterIdRange
</UL>

<P><STRONG><a name="[30b]"></a>ot::RouterTable::UpdateRouterIdSet(unsigned char, ot::Mle::RouterIdSet const&)</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, router_table.o(.text._ZN2ot11RouterTable17UpdateRouterIdSetEhRKNS_3Mle11RouterIdSetE))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = ot::RouterTable::UpdateRouterIdSet(unsigned char, ot::Mle::RouterIdSet const&) &rArr; ot::RouterTable::RemoveRouterLink(ot::Router&) &rArr; ot::AddressResolver::RemoveEntriesForRouterId(unsigned char) &rArr; ot::AddressResolver::Remove(unsigned short, bool) &rArr; ot::AddressResolver::RemoveCacheEntry(ot::AddressResolver::CacheEntry&, ot::AddressResolver::CacheEntryList&, ot::AddressResolver::CacheEntry*, ot::AddressResolver::Reason) &rArr; ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Router::SetNextHopToInvalid()
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ResetAdvertiseInterval()
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::RemoveRouterLink(ot::Router&)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::AddRouter(unsigned char)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::RemoveRouter(ot::Router&)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessRouteTlv(ot::Mle::RouteTlv const&, ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[30d]"></a>ot::RouterTable::UpdateRoutesOnFed(ot::Mle::RouteTlv const&, unsigned char)</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, router_table.o(.text._ZN2ot11RouterTable17UpdateRoutesOnFedERKNS_3Mle8RouteTlvEh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Router::SetNextHopAndCost(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ReadAndProcessRouteTlvOnFed(ot::Mle::Mle::RxInfo&, unsigned char)
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::Mle::RxInfo&, unsigned short, ot::Mle::LeaderData const&)
</UL>

<P><STRONG><a name="[30e]"></a>ot::RouterTable::Clear()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, router_table.o(.text._ZN2ot11RouterTable5ClearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = ot::RouterTable::Clear() &rArr; ot::RouterTable::ClearNeighbors() &rArr; ot::NeighborTable::Signal(ot::NeighborTable::Event, ot::Neighbor const&) &rArr; ot::DuaManager::UpdateChildDomainUnicastAddress(ot::Child const&, ot::Mle::ChildDuaState) &rArr; ot::DuaManager::UpdateCheckDelay(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::ClearNeighbors()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeLeader()
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandlePartitionChange()
</UL>

<P><STRONG><a name="[30f]"></a>ot::RouterTable::Release(unsigned char)</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, router_table.o(.text._ZN2ot11RouterTable7ReleaseEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = ot::RouterTable::Release(unsigned char) &rArr; ot::AddressResolver::RemoveEntriesForRouterId(unsigned char) &rArr; ot::AddressResolver::Remove(unsigned short, bool) &rArr; ot::AddressResolver::RemoveCacheEntry(ot::AddressResolver::CacheEntry&, ot::AddressResolver::CacheEntryList&, ot::AddressResolver::CacheEntry*, ot::AddressResolver::Reason) &rArr; ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::RemoveEntriesForRouterId(unsigned char)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Router::SetNextHopToInvalid()
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ResetAdvertiseInterval()
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::RemoveRouter(ot::Router&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveBorderRouter(unsigned short, ot::NetworkData::Leader::MatchMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadReleaseRouterId
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)3&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[310]"></a>ot::RouterTable::Allocate(unsigned char)</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, router_table.o(.text._ZN2ot11RouterTable8AllocateEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ot::RouterTable::Allocate(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ResetAdvertiseInterval()
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::AddRouter(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeLeader()
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)4&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Allocate()
</UL>

<P><STRONG><a name="[311]"></a>ot::RouterTable::Allocate()</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, router_table.o(.text._ZN2ot11RouterTable8AllocateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ot::RouterTable::Allocate() &rArr; ot::RouterTable::Allocate(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint8InRange(unsigned char, unsigned char)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Allocate(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)4&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[30c]"></a>ot::RouterTable::AddRouter(unsigned char)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, router_table.o(.text._ZN2ot11RouterTable9AddRouterEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::RouterTable::AddRouter(unsigned char) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Router::SetNextHopToInvalid()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Router::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Allocate(unsigned char)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::UpdateRouterIdSet(unsigned char, ot::Mle::RouterIdSet const&)
</UL>

<P><STRONG><a name="[313]"></a>ot::RouterTable::RouterTable(ot::Instance&)</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, router_table.o(.text._ZN2ot11RouterTableC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::Manager::NonCryptoGetUint32()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::Init(ot::Instance&)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::ClearNeighbors()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::MleRouter(ot::Instance&)
</UL>

<P><STRONG><a name="[bc0]"></a>ot::RouterTable::RouterTable__sub_object(ot::Instance&)</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, router_table.o(.text._ZN2ot11RouterTableC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[383]"></a>ot::RssAverager::Add(signed char)</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, link_quality.o(.text._ZN2ot11RssAverager3AddEa))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::RssAverager::Add(signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetLinkInfo(ot::ThreadLinkInfo const&)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::LinkQualityInfo::AddRss(signed char)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[314]"></a>ot::ThreadNetif::Up()</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, thread_netif.o(.text._ZN2ot11ThreadNetif2UpEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ot::ThreadNetif::Up() &rArr; ot::MeshForwarder::Start() &rArr; ot::Mac::Mac::SetRxOnWhenIdle(bool) &rArr; ot::Mac::Mac::UpdateIdleMode() &rArr; ot::Mac::SubMac::Receive(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::SubscribeAllNodesMulticast()
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Enable()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::Start()
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::Start()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6SetEnabled
</UL>

<P><STRONG><a name="[319]"></a>ot::ThreadNetif::Down()</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, thread_netif.o(.text._ZN2ot11ThreadNetif4DownEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = ot::ThreadNetif::Down() &rArr; ot::Mle::Mle::Disable() &rArr; ot::Mle::Mle::Stop(ot::Mle::Mle::StopMode) &rArr; ot::MeshCoP::DatasetManager::HandleDetach() &rArr; ot::MeshCoP::DatasetManager::Restore() &rArr; ot::MeshCoP::DatasetLocal::Restore(ot::MeshCoP::Dataset&) &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Coap::Stop()
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::Stop()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::UnsubscribeAllExternalMulticastAddresses()
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::RemoveAllExternalUnicastAddresses()
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::UnsubscribeAllRoutersMulticast()
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::UnsubscribeAllNodesMulticast()
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Disable()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6SetEnabled
</UL>

<P><STRONG><a name="[322]"></a>ot::ThreadNetif::ThreadNetif(ot::Instance&)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, thread_netif.o(.text._ZN2ot11ThreadNetifC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::Netif__sub_object(ot::Instance&)
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bc1]"></a>ot::ThreadNetif::ThreadNetif__sub_object(ot::Instance&)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, thread_netif.o(.text._ZN2ot11ThreadNetifC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[324]"></a>ot::UriFromPath(char const*)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, uri_paths.o(.text._ZN2ot11UriFromPathEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ot::UriFromPath(char const*) &rArr; ot::BinarySearch::Find(void const*, void const*, unsigned short, unsigned short, int (&)(void const*, void const*))
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BinarySearch::Find(void const*, void const*, unsigned short, unsigned short, int (&)(void const*, void const*))
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::SecureAgent::HandleResource(ot::Coap::CoapBase&, char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[444]"></a>char const* ot::UriToString&lang;(ot::Uri)0&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uri_paths.o(.text._ZN2ot11UriToStringILNS_3UriE0EEEPKcv))
<BR><BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)0&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressError(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, ot::Ip6::Address const*)
</UL>

<P><STRONG><a name="[4a7]"></a>char const* ot::UriToString&lang;(ot::Uri)10&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uri_paths.o(.text._ZN2ot11UriToStringILNS_3UriE10EEEPKcv))
<BR><BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AnnounceBeginServer::HandleTmf&lang;(ot::Uri)10&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[2df]"></a>char const* ot::UriToString&lang;(ot::Uri)14&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uri_paths.o(.text._ZN2ot11UriToStringILNS_3UriE14EEEPKcv))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::SendCommissioningGetResponse(ot::Coap::Message const&, unsigned short, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[2e1]"></a>char const* ot::UriToString&lang;(ot::Uri)16&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uri_paths.o(.text._ZN2ot11UriToStringILNS_3UriE16EEEPKcv))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::SendCommissioningSetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
</UL>

<P><STRONG><a name="[905]"></a>char const* ot::UriToString&lang;(ot::Uri)17&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uri_paths.o(.text._ZN2ot11UriToStringILNS_3UriE17EEEPKcv))
<BR><BR>[Called By]<UL><LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendDatasetChanged(ot::Ip6::Address const&)
</UL>

<P><STRONG><a name="[46b]"></a>char const* ot::UriToString&lang;(ot::Uri)18&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uri_paths.o(.text._ZN2ot11UriToStringILNS_3UriE18EEEPKcv))
<BR><BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::EnergyScanServer::SendReport()
</UL>

<P><STRONG><a name="[473]"></a>char const* ot::UriToString&lang;(ot::Uri)19&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uri_paths.o(.text._ZN2ot11UriToStringILNS_3UriE19EEEPKcv))
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::EnergyScanServer::HandleTmf&lang;(ot::Uri)19&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[43b]"></a>char const* ot::UriToString&lang;(ot::Uri)1&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uri_paths.o(.text._ZN2ot11UriToStringILNS_3UriE1EEEPKcv))
<BR><BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressQueryResponse(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, unsigned int const*, ot::Ip6::Address const&)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::HandleTimeTick()
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)1&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[88f]"></a>char const* ot::UriToString&lang;(ot::Uri)20&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uri_paths.o(.text._ZN2ot11UriToStringILNS_3UriE20EEEPKcv))
<BR><BR>[Called By]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::HandleJoinerEntrustResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::SendJoinerEntrust(ot::Ip6::MessageInfo const&)
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Joiner::HandleTmf&lang;(ot::Uri)20&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SendJoinerEntrustResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[8f6]"></a>char const* ot::UriToString&lang;(ot::Uri)21&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uri_paths.o(.text._ZN2ot11UriToStringILNS_3UriE21EEEPKcv))
<BR><BR>[Called By]<UL><LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleJoinerFinalizeResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SendJoinerFinalize()
</UL>

<P><STRONG><a name="[909]"></a>char const* ot::UriToString&lang;(ot::Uri)22&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uri_paths.o(.text._ZN2ot11UriToStringILNS_3UriE22EEEPKcv))
<BR><BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Leader::HandleTmf&lang;(ot::Uri)22&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendKeepAliveResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
</UL>

<P><STRONG><a name="[907]"></a>char const* ot::UriToString&lang;(ot::Uri)23&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uri_paths.o(.text._ZN2ot11UriToStringILNS_3UriE23EEEPKcv))
<BR><BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Leader::HandleTmf&lang;(ot::Uri)23&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendPetitionResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
</UL>

<P><STRONG><a name="[475]"></a>char const* ot::UriToString&lang;(ot::Uri)24&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uri_paths.o(.text._ZN2ot11UriToStringILNS_3UriE24EEEPKcv))
<BR><BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PanIdQueryServer::SendConflict()
</UL>

<P><STRONG><a name="[478]"></a>char const* ot::UriToString&lang;(ot::Uri)26&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uri_paths.o(.text._ZN2ot11UriToStringILNS_3UriE26EEEPKcv))
<BR><BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::PanIdQueryServer::HandleTmf&lang;(ot::Uri)26&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[88a]"></a>char const* ot::UriToString&lang;(ot::Uri)28&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uri_paths.o(.text._ZN2ot11UriToStringILNS_3UriE28EEEPKcv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[896]"></a>char const* ot::UriToString&lang;(ot::Uri)29&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uri_paths.o(.text._ZN2ot11UriToStringILNS_3UriE29EEEPKcv))
<BR><BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::JoinerRouter::HandleTmf&lang;(ot::Uri)29&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[447]"></a>char const* ot::UriToString&lang;(ot::Uri)2&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uri_paths.o(.text._ZN2ot11UriToStringILNS_3UriE2EEEPKcv))
<BR><BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)2&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&)
</UL>

<P><STRONG><a name="[48e]"></a>char const* ot::UriToString&lang;(ot::Uri)32&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uri_paths.o(.text._ZN2ot11UriToStringILNS_3UriE32EEEPKcv))
<BR><BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Client::HandleTmf&lang;(ot::Uri)32&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[480]"></a>char const* ot::UriToString&lang;(ot::Uri)33&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uri_paths.o(.text._ZN2ot11UriToStringILNS_3UriE33EEEPKcv))
<BR><BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)33&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::UriToString(ot::Uri)
</UL>

<P><STRONG><a name="[481]"></a>char const* ot::UriToString&lang;(ot::Uri)34&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uri_paths.o(.text._ZN2ot11UriToStringILNS_3UriE34EEEPKcv))
<BR><BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)34&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::UriToString(ot::Uri)
</UL>

<P><STRONG><a name="[482]"></a>char const* ot::UriToString&lang;(ot::Uri)35&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uri_paths.o(.text._ZN2ot11UriToStringILNS_3UriE35EEEPKcv))
<BR><BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)35&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::UriToString(ot::Uri)
</UL>

<P><STRONG><a name="[242]"></a>char const* ot::UriToString&lang;(ot::Uri)36&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uri_paths.o(.text._ZN2ot11UriToStringILNS_3UriE36EEEPKcv))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::DuaManager::HandleTmf&lang;(ot::Uri)36&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::SendAddressNotification(ot::Ip6::Address&, ot::ThreadStatusTlv::DuaStatus, ot::Child const&)
</UL>

<P><STRONG><a name="[224]"></a>char const* ot::UriToString&lang;(ot::Uri)37&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uri_paths.o(.text._ZN2ot11UriToStringILNS_3UriE37EEEPKcv))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::PerformNextRegistration()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::HandleDuaResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
</UL>

<P><STRONG><a name="[2ee]"></a>char const* ot::UriToString&lang;(ot::Uri)5&rang;()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uri_paths.o(.text._ZN2ot11UriToStringILNS_3UriE5EEEPKcv))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::SendServerDataNotification(unsigned short, ot::NetworkData::NetworkData const*)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)5&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[325]"></a>ot::BinarySearch::Find(void const*, void const*, unsigned short, unsigned short, int (&)(void const*, void const*))</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, binary_search.o(.text._ZN2ot12BinarySearch4FindEPKvS2_ttRFiS2_S2_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ot::BinarySearch::Find(void const*, void const*, unsigned short, unsigned short, int (&)(void const*, void const*))
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::IpProtoToString(unsigned char)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::UriFromPath(char const*)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Dataset::Process(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Joiner::Process(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::Process(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::Process(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessCommand(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::UdpExample::Process(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[44]"></a>int ot::BinarySearch::Compare&lang;char const*, ot::UriList::Entry&rang;(void const*, void const*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uri_paths.o(.text._ZN2ot12BinarySearch7CompareIPKcNS_7UriList5EntryEEEiPKvS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = int ot::BinarySearch::Compare&lang;char const*, ot::UriList::Entry&rang;(void const*, void const*) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uri_paths.o(.text._ZN2ot11UriFromPathEPKc)
</UL>
<P><STRONG><a name="[51]"></a>int ot::BinarySearch::Compare&lang;char*, ot::Cli::Output::CommandEntry&lang;ot::Cli::UdpExample&rang; &rang;(void const*, void const*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cli_udp.o(.text._ZN2ot12BinarySearch7CompareIPcNS_3Cli6Output12CommandEntryINS3_10UdpExampleEEEEEiPKvS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = int ot::BinarySearch::Compare&lang;char*, ot::Cli::Output::CommandEntry&lang;ot::Cli::UdpExample&rang; &rang;(void const*, void const*) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_udp.o(.text._ZN2ot3Cli10UdpExample7ProcessEPNS_5Utils13CmdLineParser3ArgE)
</UL>
<P><STRONG><a name="[53]"></a>int ot::BinarySearch::Compare&lang;char*, ot::Cli::Output::CommandEntry&lang;ot::Cli::Interpreter&rang; &rang;(void const*, void const*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cli.o(.text._ZN2ot12BinarySearch7CompareIPcNS_3Cli6Output12CommandEntryINS3_11InterpreterEEEEEiPKvS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = int ot::BinarySearch::Compare&lang;char*, ot::Cli::Output::CommandEntry&lang;ot::Cli::Interpreter&rang; &rang;(void const*, void const*) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.text._ZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgE)
</UL>
<P><STRONG><a name="[5d]"></a>int ot::BinarySearch::Compare&lang;char*, ot::Cli::Output::CommandEntry&lang;ot::Cli::NetworkData&rang; &rang;(void const*, void const*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cli_network_data.o(.text._ZN2ot12BinarySearch7CompareIPcNS_3Cli6Output12CommandEntryINS3_11NetworkDataEEEEEiPKvS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = int ot::BinarySearch::Compare&lang;char*, ot::Cli::Output::CommandEntry&lang;ot::Cli::NetworkData&rang; &rang;(void const*, void const*) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_network_data.o(.text._ZN2ot3Cli11NetworkData7ProcessEPNS_5Utils13CmdLineParser3ArgE)
</UL>
<P><STRONG><a name="[5f]"></a>int ot::BinarySearch::Compare&lang;char*, ot::Cli::Output::CommandEntry&lang;ot::Cli::Coap&rang; &rang;(void const*, void const*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cli_coap.o(.text._ZN2ot12BinarySearch7CompareIPcNS_3Cli6Output12CommandEntryINS3_4CoapEEEEEiPKvS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = int ot::BinarySearch::Compare&lang;char*, ot::Cli::Output::CommandEntry&lang;ot::Cli::Coap&rang; &rang;(void const*, void const*) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_coap.o(.text._ZN2ot3Cli4Coap7ProcessEPNS_5Utils13CmdLineParser3ArgE)
</UL>
<P><STRONG><a name="[61]"></a>int ot::BinarySearch::Compare&lang;char*, ot::Cli::Output::CommandEntry&lang;ot::Cli::Joiner&rang; &rang;(void const*, void const*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cli_joiner.o(.text._ZN2ot12BinarySearch7CompareIPcNS_3Cli6Output12CommandEntryINS3_6JoinerEEEEEiPKvS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = int ot::BinarySearch::Compare&lang;char*, ot::Cli::Output::CommandEntry&lang;ot::Cli::Joiner&rang; &rang;(void const*, void const*) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_joiner.o(.text._ZN2ot3Cli6Joiner7ProcessEPNS_5Utils13CmdLineParser3ArgE)
</UL>
<P><STRONG><a name="[63]"></a>int ot::BinarySearch::Compare&lang;char*, ot::Cli::Output::CommandEntry&lang;ot::Cli::Dataset&rang; &rang;(void const*, void const*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cli_dataset.o(.text._ZN2ot12BinarySearch7CompareIPcNS_3Cli6Output12CommandEntryINS3_7DatasetEEEEEiPKvS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = int ot::BinarySearch::Compare&lang;char*, ot::Cli::Output::CommandEntry&lang;ot::Cli::Dataset&rang; &rang;(void const*, void const*) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgE)
</UL>
<P><STRONG><a name="[64]"></a>int ot::BinarySearch::Compare&lang;unsigned short, ot::Stringify::Entry&rang;(void const*, void const*)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, coap_message.o(.text._ZN2ot12BinarySearch7CompareItNS_9Stringify5EntryEEEiPKvS5_))
<BR>[Address Reference Count : 1]<UL><LI> ip6.o(.text._ZN2ot3Ip63Ip615IpProtoToStringEh)
</UL>
<P><STRONG><a name="[327]"></a>ot::FrameBuilder::WriteBytes(unsigned short, void const*, unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, frame_builder.o(.text._ZN2ot12FrameBuilder10WriteBytesEtPKvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::FrameBuilder::WriteBytes(unsigned short, void const*, unsigned short) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&)
</UL>

<P><STRONG><a name="[328]"></a>ot::FrameBuilder::AppendBytes(void const*, unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, frame_builder.o(.text._ZN2ot12FrameBuilder11AppendBytesEPKvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::FrameBuilder::AppendBytes(void const*, unsigned short) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&)
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressDestinationIid(ot::Mac::Address const&, ot::Ip6::Address const&, ot::Lowpan::Context const&, unsigned short&, ot::FrameBuilder&)
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressSourceIid(ot::Mac::Address const&, ot::Ip6::Address const&, ot::Lowpan::Context const&, unsigned short&, ot::FrameBuilder&)
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressMulticast(ot::Ip6::Address const&, unsigned short&, ot::FrameBuilder&)
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressUdp(ot::Message&, ot::FrameBuilder&)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool)
</UL>

<P><STRONG><a name="[6ba]"></a>ot::FrameBuilder::AppendUint8(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, frame_builder.o(.text._ZN2ot12FrameBuilder11AppendUint8Eh))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::InitMacHeader(ot::Mac::Frame::Type, ot::Mac::Frame::Version, ot::Mac::Addresses const&, ot::Mac::PanIds const&, ot::Mac::Frame::SecurityLevel, ot::Mac::Frame::KeyIdMode)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::MeshHeader::AppendTo(ot::FrameBuilder&) const
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&)
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressExtensionHeader(ot::Message&, ot::FrameBuilder&, unsigned char&)
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressMulticast(ot::Ip6::Address const&, unsigned short&, ot::FrameBuilder&)
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressUdp(ot::Message&, ot::FrameBuilder&)
</UL>

<P><STRONG><a name="[329]"></a>ot::FrameBuilder::InsertBytes(unsigned short, void const*, unsigned short)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, frame_builder.o(.text._ZN2ot12FrameBuilder11InsertBytesEtPKvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ot::FrameBuilder::InsertBytes(unsigned short, void const*, unsigned short) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool)
</UL>

<P><STRONG><a name="[32a]"></a>ot::FrameBuilder::AppendMacAddress(ot::Mac::Address const&)</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, frame_builder.o(.text._ZN2ot12FrameBuilder16AppendMacAddressERKNS_3Mac7AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::FrameBuilder::AppendMacAddress(ot::Mac::Address const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::CopyAddress(unsigned char*, unsigned char const*, ot::Mac::ExtAddress::CopyByteOrder)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::InitMacHeader(ot::Mac::Frame::Type, ot::Mac::Frame::Version, ot::Mac::Addresses const&, ot::Mac::PanIds const&, ot::Mac::Frame::SecurityLevel, ot::Mac::Frame::KeyIdMode)
</UL>

<P><STRONG><a name="[86b]"></a>ot::FrameBuilder::AppendBigEndianUint16(unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, frame_builder.o(.text._ZN2ot12FrameBuilder21AppendBigEndianUint16Et))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::MeshHeader::AppendTo(ot::FrameBuilder&) const
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&)
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressDestinationIid(ot::Mac::Address const&, ot::Ip6::Address const&, ot::Lowpan::Context const&, unsigned short&, ot::FrameBuilder&)
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressSourceIid(ot::Mac::Address const&, ot::Ip6::Address const&, ot::Lowpan::Context const&, unsigned short&, ot::FrameBuilder&)
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressUdp(ot::Message&, ot::FrameBuilder&)
</UL>

<P><STRONG><a name="[32c]"></a>ot::FrameBuilder::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, frame_builder.o(.text._ZN2ot12FrameBuilder22AppendBytesFromMessageERKNS_7MessageEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ot::FrameBuilder::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressExtensionHeader(ot::Message&, ot::FrameBuilder&, unsigned char&)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool)
</UL>

<P><STRONG><a name="[6b9]"></a>ot::FrameBuilder::AppendLittleEndianUint16(unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, frame_builder.o(.text._ZN2ot12FrameBuilder24AppendLittleEndianUint16Et))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::InitMacHeader(ot::Mac::Frame::Type, ot::Mac::Frame::Version, ot::Mac::Addresses const&, ot::Mac::PanIds const&, ot::Mac::Frame::SecurityLevel, ot::Mac::Frame::KeyIdMode)
</UL>

<P><STRONG><a name="[3b4]"></a>ot::FrameBuilder::Init(void*, unsigned short)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, frame_builder.o(.text._ZN2ot12FrameBuilder4InitEPvt))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::InitMacHeader(ot::Mac::Frame::Type, ot::Mac::Frame::Version, ot::Mac::Addresses const&, ot::Mac::PanIds const&, ot::Mac::Frame::SecurityLevel, ot::Mac::Frame::KeyIdMode)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::MeshHeader::AppendTo(ot::Message&) const
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool)
</UL>

<P><STRONG><a name="[32d]"></a>ot::MessageQueue::DequeueAndFree(ot::Message&)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, message.o(.text._ZN2ot12MessageQueue14DequeueAndFreeERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ot::MessageQueue::DequeueAndFree(ot::Message&) &rArr; ot::MessageQueue::Dequeue(ot::Message&) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::Dequeue(ot::Message&)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::Free(ot::Message*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::UpdateQueue()
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::HandleTimer()
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::SendDelayedJoinerEntrust()
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::UpdateReassemblyList()
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&)
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RemoveDelayedMessage(ot::Message::SubType, ot::Mle::Mle::MessageType, ot::Ip6::Address const*)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateReassemblyList()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::ClearReassemblyList()
</UL>

<P><STRONG><a name="[32f]"></a>ot::MessageQueue::DequeueAndFreeAll()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, message.o(.text._ZN2ot12MessageQueue17DequeueAndFreeAllEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ot::MessageQueue::DequeueAndFreeAll() &rArr; ot::MessageQueue::Dequeue(ot::Message&) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::Dequeue(ot::Message&)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::Free(ot::Message*)
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Coap::Stop()
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::Stop()
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ClearRequestsAndResponses()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::Stop()
</UL>

<P><STRONG><a name="[330]"></a>ot::MessageQueue::begin()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, message.o(.text._ZN2ot12MessageQueue5beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::MessageQueue::begin()
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetNext() const
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::HandleRetransmissionTimer()
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::UpdateReassemblyList()
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleDelayedResponseTimer()
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RemoveDelayedMessage(ot::Message::SubType, ot::Mle::Mle::MessageType, ot::Ip6::Address const*)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateReassemblyList()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::ClearReassemblyList()
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[32e]"></a>ot::MessageQueue::Dequeue(ot::Message&)</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, message.o(.text._ZN2ot12MessageQueue7DequeueERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::MessageQueue::Dequeue(ot::Message&) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::HandleTransmit()
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::DequeueMessage(ot::Coap::Message&)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::DequeueAndFreeAll()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::DequeueAndFree(ot::Message&)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::HandleRetransmissionTimer()
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleDelayedResponseTimer()
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[332]"></a>ot::MessageQueue::Enqueue(ot::Message&, ot::MessageQueue::QueuePosition)</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, message.o(.text._ZN2ot12MessageQueue7EnqueueERNS_7MessageENS0_13QueuePositionE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::MessageQueue::Enqueue(ot::Message&, ot::MessageQueue::QueuePosition) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::Send(ot::Coap::CoapBase&, ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::CopyAndEnqueueMessage(ot::Coap::Message const&, unsigned short, ot::Coap::CoapBase::Metadata const&)
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&)
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::DelaySendingJoinerEntrust(ot::Ip6::MessageInfo const&, ot::Mac::Key const&)
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::AddBufferedMessage(ot::Message&, unsigned short, unsigned char, bool)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&)
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendAfterDelay(ot::Ip6::Address const&, unsigned short)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[4e1]"></a>ot::StringLength(char const*, unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, string.o(.text._ZN2ot12StringLengthEPKct))
<BR><BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::DumpInModule(char const*, ot::LogLevel, char const*, void const*, unsigned short)
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list)
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::GeneratePskc(char const*, ot::MeshCoP::NetworkName const&, ot::MeshCoP::ExtendedPanId const&, ot::Pskc&)
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::SetPsk(ot::MeshCoP::JoinerPskd const&)
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendStringTlv(ot::Message&, unsigned char, unsigned char, char const*)
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerPskd::IsPskdValid(char const*)
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerPskd::SetFrom(char const*)
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkName::GetAsData() const
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkName::Set(ot::MeshCoP::NameData const&)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessLine(char*)
</UL>

<P><STRONG><a name="[333]"></a>ot::StringWriter::AppendVarArgs(char const*, std::__va_list)</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, string.o(.text._ZN2ot12StringWriter13AppendVarArgsEPKcSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::Append(char const*, ...)
</UL>

<P><STRONG><a name="[334]"></a>ot::StringWriter::AppendHexBytes(unsigned char const*, unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, string.o(.text._ZN2ot12StringWriter14AppendHexBytesEPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ot::StringWriter::AppendHexBytes(unsigned char const*, unsigned short) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::Append(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::ToString() const
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::ToString() const
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Address::ToString() const
</UL>

<P><STRONG><a name="[863]"></a>ot::StringWriter::Clear()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, string.o(.text._ZN2ot12StringWriter5ClearEv))
<BR><BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::DumpInModule(char const*, ot::LogLevel, char const*, void const*, unsigned short)
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::LogEvents(ot::Events) const
</UL>

<P><STRONG><a name="[335]"></a>ot::StringWriter::Append(char const*, ...)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, string.o(.text._ZN2ot12StringWriter6AppendEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::AppendVarArgs(char const*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::DumpInModule(char const*, ot::LogLevel, char const*, void const*, unsigned short)
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list)
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::SockAddr::ToString(char*, unsigned short) const
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::DumpLine(char const*, ot::LogLevel, unsigned char const*, unsigned short)
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::ToInfoString() const
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::AppendHexBytes(unsigned char const*, unsigned short)
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::LogEvents(ot::Events) const
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Address::ToString() const
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::ToString(ot::StringWriter&) const
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DeviceMode::ToString() const
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RssAverager::ToString() const
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::LogRouteTable() const
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::PercentageToString(unsigned short, ot::Cli::Output::PercentageStringBuffer&)
</UL>

<P><STRONG><a name="[5fa]"></a>ot::StringWriter::StringWriter(char*, unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, string.o(.text._ZN2ot12StringWriterC2EPct))
<BR><BR>[Called By]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::SockAddr::ToString(char*, unsigned short) const
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString(char*, unsigned short) const
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::ToString(char*, unsigned short) const
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::PercentageToString(unsigned short, ot::Cli::Output::PercentageStringBuffer&)
</UL>

<P><STRONG><a name="[762]"></a>ot::StringWriter::StringWriter__sub_object(char*, unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, string.o(.text._ZN2ot12StringWriterC2EPct))
<BR><BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::DumpInModule(char const*, ot::LogLevel, char const*, void const*, unsigned short)
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list)
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::DumpLine(char const*, ot::LogLevel, unsigned char const*, unsigned short)
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::ToString() const
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::ToInfoString() const
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::ToString() const
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::ToString() const
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::LogEvents(ot::Events) const
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString() const
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Address::ToString() const
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DeviceMode::ToString() const
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RssAverager::ToString() const
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::LogRouteTable() const
</UL>

<P><STRONG><a name="[3c]"></a>ot::TimerMilliIn&lang;ot::KeyManager, &(ot::KeyManager::HandleKeyRotationTimer())&rang;::HandleTimer(ot::Timer&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, key_manager.o(.text._ZN2ot12TimerMilliInINS_10KeyManagerEXadL_ZNS1_22HandleKeyRotationTimerEvEEE11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = ot::TimerMilliIn&lang;ot::KeyManager, &(ot::KeyManager::HandleKeyRotationTimer())&rang;::HandleTimer(ot::Timer&) &rArr; ot::KeyManager::HandleKeyRotationTimer() &rArr; ot::KeyManager::SetCurrentKeySequence(unsigned int) &rArr; ot::KeyManager::UpdateKeyMaterial() &rArr; ot::KeyManager::ComputeKeys(unsigned int, ot::KeyManager::HashKeys&) const &rArr; ot::Crypto::HmacSha256::Start(ot::Crypto::Key const&) &rArr; otPlatCryptoHmacSha256Start &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::HandleKeyRotationTimer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_manager.o(.text._ZN2ot10KeyManagerC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[3e]"></a>ot::TimerMilliIn&lang;ot::TimeTicker, &(ot::TimeTicker::HandleTimer())&rang;::HandleTimer(ot::Timer&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, time_ticker.o(.text._ZN2ot12TimerMilliInINS_10TimeTickerEXadL_ZNS1_11HandleTimerEvEEE11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976 + Unknown Stack Size
<LI>Call Chain = ot::TimerMilliIn&lang;ot::TimeTicker, &(ot::TimeTicker::HandleTimer())&rang;::HandleTimer(ot::Timer&) &rArr; ot::TimeTicker::HandleTimer() &rArr; ot::MlrManager::HandleTimeTick() &rArr; ot::MlrManager::Reregister() &rArr; ot::MlrManager::ScheduleSend(unsigned short) &rArr; ot::MlrManager::SendMulticastListenerRegistration() &rArr;  ot::MlrManager::ScheduleSend(unsigned short) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::HandleTimer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> time_ticker.o(.text._ZN2ot10TimeTickerC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[3f]"></a>ot::TimerMilliIn&lang;ot::NetworkData::Leader, &(ot::NetworkData::Leader::HandleTimer())&rang;::HandleTimer(ot::Timer&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, network_data_leader_ftd.o(.text._ZN2ot12TimerMilliInINS_11NetworkData6LeaderEXadL_ZNS2_11HandleTimerEvEEE11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720 + Unknown Stack Size
<LI>Call Chain = ot::TimerMilliIn&lang;ot::NetworkData::Leader, &(ot::NetworkData::Leader::HandleTimer())&rang;::HandleTimer(ot::Timer&) &rArr; ot::NetworkData::Leader::HandleTimer() &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::HandleTimer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_data_leader_ftd.o(.text._ZN2ot11NetworkData6LeaderC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[41]"></a>ot::TimerMilliIn&lang;ot::NetworkData::Notifier, &(ot::NetworkData::Notifier::HandleTimer())&rang;::HandleTimer(ot::Timer&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, network_data_notifier.o(.text._ZN2ot12TimerMilliInINS_11NetworkData8NotifierEXadL_ZNS2_11HandleTimerEvEEE11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = ot::TimerMilliIn&lang;ot::NetworkData::Notifier, &(ot::NetworkData::Notifier::HandleTimer())&rang;::HandleTimer(ot::Timer&) &rArr; ot::NetworkData::Notifier::SynchronizeServerData() &rArr; ot::NetworkData::Notifier::RemoveStaleChildEntries() &rArr; ot::NetworkData::Notifier::SendServerDataNotification(unsigned short, ot::NetworkData::NetworkData const*) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::SynchronizeServerData()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_data_notifier.o(.text._ZN2ot11NetworkData8NotifierC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[47]"></a>ot::TimerMilliIn&lang;ot::MeshForwarder, &(ot::MeshForwarder::HandleTxDelayTimer())&rang;::HandleTimer(ot::Timer&)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mesh_forwarder.o(.text._ZN2ot12TimerMilliInINS_13MeshForwarderEXadL_ZNS1_18HandleTxDelayTimerEvEEE11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ot::TimerMilliIn&lang;ot::MeshForwarder, &(ot::MeshForwarder::HandleTxDelayTimer())&rang;::HandleTimer(ot::Timer&) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_forwarder.o(.text._ZN2ot13MeshForwarderC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[49]"></a>ot::TimerMilliIn&lang;ot::DataPollSender, &(ot::DataPollSender::HandlePollTimer())&rang;::HandleTimer(ot::Timer&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, data_poll_sender.o(.text._ZN2ot12TimerMilliInINS_14DataPollSenderEXadL_ZNS1_15HandlePollTimerEvEEE11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ot::TimerMilliIn&lang;ot::DataPollSender, &(ot::DataPollSender::HandlePollTimer())&rang;::HandleTimer(ot::Timer&) &rArr; ot::DataPollSender::SendDataPoll() &rArr; ot::Mac::Mac::RequestDataPollTransmission() &rArr; ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::SendDataPoll()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_poll_sender.o(.text._ZN2ot14DataPollSenderC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[4c]"></a>ot::TimerMilliIn&lang;ot::EnergyScanServer, &(ot::EnergyScanServer::HandleTimer())&rang;::HandleTimer(ot::Timer&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, energy_scan_server.o(.text._ZN2ot12TimerMilliInINS_16EnergyScanServerEXadL_ZNS1_11HandleTimerEvEEE11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = ot::TimerMilliIn&lang;ot::EnergyScanServer, &(ot::EnergyScanServer::HandleTimer())&rang;::HandleTimer(ot::Timer&) &rArr; ot::EnergyScanServer::HandleTimer() &rArr; ot::EnergyScanServer::SendReport() &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::EnergyScanServer::HandleTimer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> energy_scan_server.o(.text._ZN2ot16EnergyScanServerC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[4d]"></a>ot::TimerMilliIn&lang;ot::PanIdQueryServer, &(ot::PanIdQueryServer::HandleTimer())&rang;::HandleTimer(ot::Timer&)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, panid_query_server.o(.text._ZN2ot12TimerMilliInINS_16PanIdQueryServerEXadL_ZNS1_11HandleTimerEvEEE11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ot::TimerMilliIn&lang;ot::PanIdQueryServer, &(ot::PanIdQueryServer::HandleTimer())&rang;::HandleTimer(ot::Timer&) &rArr; ot::Mac::Mac::ActiveScan(unsigned int, unsigned short, void (*)(otActiveScanResult*, void*), void*) &rArr; ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ActiveScan(unsigned int, unsigned short, void (*)(otActiveScanResult*, void*), void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> panid_query_server.o(.text._ZN2ot16PanIdQueryServerC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[50]"></a>ot::TimerMilliIn&lang;ot::SupervisionListener, &(ot::SupervisionListener::HandleTimer())&rang;::HandleTimer(ot::Timer&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, child_supervision.o(.text._ZN2ot12TimerMilliInINS_19SupervisionListenerEXadL_ZNS1_11HandleTimerEvEEE11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768 + Unknown Stack Size
<LI>Call Chain = ot::TimerMilliIn&lang;ot::SupervisionListener, &(ot::SupervisionListener::HandleTimer())&rang;::HandleTimer(ot::Timer&) &rArr; ot::SupervisionListener::HandleTimer() &rArr; ot::Mle::Mle::SendChildUpdateRequest() &rArr; ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::HandleTimer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> child_supervision.o(.text._ZN2ot19SupervisionListenerC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[66]"></a>ot::TimerMilliIn&lang;ot::Ip6::Mpl, &(ot::Ip6::Mpl::HandleRetransmissionTimer())&rang;::HandleTimer(ot::Timer&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ip6_mpl.o(.text._ZN2ot12TimerMilliInINS_3Ip63MplEXadL_ZNS2_25HandleRetransmissionTimerEvEEE11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = ot::TimerMilliIn&lang;ot::Ip6::Mpl, &(ot::Ip6::Mpl::HandleRetransmissionTimer())&rang;::HandleTimer(ot::Timer&) &rArr; ot::Ip6::Mpl::HandleRetransmissionTimer() &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::HandleRetransmissionTimer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip6_mpl.o(.text._ZN2ot3Ip63MplC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[68]"></a>ot::TimerMilliIn&lang;ot::Mac::Mac, &(ot::Mac::Mac::HandleTimer())&rang;::HandleTimer(ot::Timer&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mac.o(.text._ZN2ot12TimerMilliInINS_3Mac3MacEXadL_ZNS2_11HandleTimerEvEEE11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896 + Unknown Stack Size
<LI>Call Chain = ot::TimerMilliIn&lang;ot::Mac::Mac, &(ot::Mac::Mac::HandleTimer())&rang;::HandleTimer(ot::Timer&) &rArr; ot::Mac::Mac::HandleTimer() &rArr; ot::Mac::Mac::PerformNextOperation() &rArr; ot::Mac::Mac::PerformActiveScan() &rArr;  ot::Mac::Mac::PerformNextOperation() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleTimer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mac.o(.text._ZN2ot3Mac3MacC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[69]"></a>ot::TimerMilliIn&lang;ot::Mac::SubMac, &(ot::Mac::SubMac::HandleTimer())&rang;::HandleTimer(ot::Timer&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sub_mac.o(.text._ZN2ot12TimerMilliInINS_3Mac6SubMacEXadL_ZNS2_11HandleTimerEvEEE11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864 + Unknown Stack Size
<LI>Call Chain = ot::TimerMilliIn&lang;ot::Mac::SubMac, &(ot::Mac::SubMac::HandleTimer())&rang;::HandleTimer(ot::Timer&) &rArr; ot::Mac::SubMac::HandleTimer() &rArr; ot::Mac::SubMac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr; ot::Mac::SubMac::Callbacks::TransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr; ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr;  ot::Mac::Links::Send() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleTimer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sub_mac.o(.text._ZN2ot3Mac6SubMacC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[6b]"></a>ot::TimerMilliIn&lang;ot::Mle::DiscoverScanner, &(ot::Mle::DiscoverScanner::HandleTimer())&rang;::HandleTimer(ot::Timer&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, discover_scanner.o(.text._ZN2ot12TimerMilliInINS_3Mle15DiscoverScannerEXadL_ZNS2_11HandleTimerEvEEE11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ot::TimerMilliIn&lang;ot::Mle::DiscoverScanner, &(ot::Mle::DiscoverScanner::HandleTimer())&rang;::HandleTimer(ot::Timer&) &rArr; ot::Mle::DiscoverScanner::HandleTimer() &rArr; ot::MeshForwarder::ResumeMessageTransmissions() &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleTimer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> discover_scanner.o(.text._ZN2ot3Mle15DiscoverScannerC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[6d]"></a>ot::TimerMilliIn&lang;ot::Mle::Mle, &(ot::Mle::Mle::HandleAttachTimer())&rang;::HandleTimer(ot::Timer&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot12TimerMilliInINS_3Mle3MleEXadL_ZNS2_17HandleAttachTimerEvEEE11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 2624 + Unknown Stack Size
<LI>Call Chain = ot::TimerMilliIn&lang;ot::Mle::Mle, &(ot::Mle::Mle::HandleAttachTimer())&rang;::HandleTimer(ot::Timer&) &rArr; ot::Mle::Mle::HandleAttachTimer() &rArr; ot::Mle::Mle::Reattach() &rArr; otDatasetSetActiveTlvs &rArr; ot::MeshCoP::DatasetManager::Save(otOperationalDatasetTlvs const&) &rArr; ot::MeshCoP::DatasetManager::HandleDatasetUpdated() &rArr; ot::MeshCoP::DatasetManager::SendSet() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAttachTimer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mle.o(.text._ZN2ot3Mle3MleC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[6e]"></a>ot::TimerMilliIn&lang;ot::Mle::Mle, &(ot::Mle::Mle::HandleDelayedResponseTimer())&rang;::HandleTimer(ot::Timer&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot12TimerMilliInINS_3Mle3MleEXadL_ZNS2_26HandleDelayedResponseTimerEvEEE11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440 + Unknown Stack Size
<LI>Call Chain = ot::TimerMilliIn&lang;ot::Mle::Mle, &(ot::Mle::Mle::HandleDelayedResponseTimer())&rang;::HandleTimer(ot::Timer&) &rArr; ot::Mle::Mle::HandleDelayedResponseTimer() &rArr; ot::Mle::Mle::SendDelayedResponse(ot::Mle::Mle::TxMessage&, ot::Mle::Mle::DelayedResponseMetadata const&) &rArr; ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&) &rArr; ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleDelayedResponseTimer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mle.o(.text._ZN2ot3Mle3MleC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[70]"></a>ot::TimerMilliIn&lang;ot::Mle::Mle, &(ot::Mle::Mle::HandleDetachGracefullyTimer())&rang;::HandleTimer(ot::Timer&)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot12TimerMilliInINS_3Mle3MleEXadL_ZNS2_27HandleDetachGracefullyTimerEvEEE11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = ot::TimerMilliIn&lang;ot::Mle::Mle, &(ot::Mle::Mle::HandleDetachGracefullyTimer())&rang;::HandleTimer(ot::Timer&) &rArr; ot::Mle::Mle::Stop(ot::Mle::Mle::StopMode) &rArr; ot::MeshCoP::DatasetManager::HandleDetach() &rArr; ot::MeshCoP::DatasetManager::Restore() &rArr; ot::MeshCoP::DatasetLocal::Restore(ot::MeshCoP::Dataset&) &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Stop(ot::Mle::Mle::StopMode)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mle.o(.text._ZN2ot3Mle3MleC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[6f]"></a>ot::TimerMilliIn&lang;ot::Mle::Mle, &(ot::Mle::Mle::HandleMessageTransmissionTimer())&rang;::HandleTimer(ot::Timer&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot12TimerMilliInINS_3Mle3MleEXadL_ZNS2_30HandleMessageTransmissionTimerEvEEE11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792 + Unknown Stack Size
<LI>Call Chain = ot::TimerMilliIn&lang;ot::Mle::Mle, &(ot::Mle::Mle::HandleMessageTransmissionTimer())&rang;::HandleTimer(ot::Timer&) &rArr; ot::Mle::Mle::HandleMessageTransmissionTimer() &rArr; ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleMessageTransmissionTimer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mle.o(.text._ZN2ot3Mle3MleC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[7e]"></a>ot::TimerMilliIn&lang;ot::Utils::PingSender, &(ot::Utils::PingSender::HandleTimer())&rang;::HandleTimer(ot::Timer&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ping_sender.o(.text._ZN2ot12TimerMilliInINS_5Utils10PingSenderEXadL_ZNS2_11HandleTimerEvEEE11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = ot::TimerMilliIn&lang;ot::Utils::PingSender, &(ot::Utils::PingSender::HandleTimer())&rang;::HandleTimer(ot::Timer&) &rArr; ot::Utils::PingSender::HandleTimer() &rArr; ot::Utils::PingSender::SendPing() &rArr; ot::Ip6::Icmp::SendEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&, unsigned short) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::PingSender::HandleTimer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ping_sender.o(.text._ZN2ot5Utils10PingSenderC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[84]"></a>ot::TimerMilliIn&lang;ot::MeshCoP::JoinerRouter, &(ot::MeshCoP::JoinerRouter::HandleTimer())&rang;::HandleTimer(ot::Timer&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, joiner_router.o(.text._ZN2ot12TimerMilliInINS_7MeshCoP12JoinerRouterEXadL_ZNS2_11HandleTimerEvEEE11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000 + Unknown Stack Size
<LI>Call Chain = ot::TimerMilliIn&lang;ot::MeshCoP::JoinerRouter, &(ot::MeshCoP::JoinerRouter::HandleTimer())&rang;::HandleTimer(ot::Timer&) &rArr; ot::MeshCoP::JoinerRouter::SendDelayedJoinerEntrust() &rArr; ot::MeshCoP::JoinerRouter::SendJoinerEntrust(ot::Ip6::MessageInfo const&) &rArr; ot::MeshCoP::JoinerRouter::PrepareJoinerEntrustMessage() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::SendDelayedJoinerEntrust()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> joiner_router.o(.text._ZN2ot7MeshCoP12JoinerRouterC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[88]"></a>ot::TimerMilliIn&lang;ot::MeshCoP::PendingDatasetManager, &(ot::MeshCoP::PendingDatasetManager::HandleDelayTimer())&rang;::HandleTimer(ot::Timer&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dataset_manager.o(.text._ZN2ot12TimerMilliInINS_7MeshCoP21PendingDatasetManagerEXadL_ZNS2_16HandleDelayTimerEvEEE11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = ot::TimerMilliIn&lang;ot::MeshCoP::PendingDatasetManager, &(ot::MeshCoP::PendingDatasetManager::HandleDelayTimer())&rang;::HandleTimer(ot::Timer&) &rArr; ot::MeshCoP::PendingDatasetManager::HandleDelayTimer() &rArr; ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset const&) &rArr; ot::MeshCoP::Dataset::ApplyConfiguration(ot::Instance&, bool*) const &rArr; ot::KeyManager::SetNetworkKey(ot::NetworkKey const&) &rArr; ot::KeyManager::UpdateKeyMaterial() &rArr; ot::KeyManager::ComputeKeys(unsigned int, ot::KeyManager::HashKeys&) const &rArr; ot::Crypto::HmacSha256::Start(ot::Crypto::Key const&) &rArr; otPlatCryptoHmacSha256Start &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::HandleDelayTimer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dataset_manager.o(.text._ZN2ot7MeshCoP21PendingDatasetManagerC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[95]"></a>ot::TimerMilliIn&lang;ot::MeshCoP::Joiner, &(ot::MeshCoP::Joiner::HandleTimer())&rang;::HandleTimer(ot::Timer&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, joiner.o(.text._ZN2ot12TimerMilliInINS_7MeshCoP6JoinerEXadL_ZNS2_11HandleTimerEvEEE11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504 + Unknown Stack Size
<LI>Call Chain = ot::TimerMilliIn&lang;ot::MeshCoP::Joiner, &(ot::MeshCoP::Joiner::HandleTimer())&rang;::HandleTimer(ot::Timer&) &rArr; ot::MeshCoP::Joiner::HandleTimer() &rArr; ot::Mac::ExtAddress::GenerateRandom() &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleTimer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> joiner.o(.text._ZN2ot7MeshCoP6JoinerC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[96]"></a>ot::TimerMilliIn&lang;ot::MeshCoP::Leader, &(ot::MeshCoP::Leader::HandleTimer())&rang;::HandleTimer(ot::Timer&)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, meshcop_leader.o(.text._ZN2ot12TimerMilliInINS_7MeshCoP6LeaderEXadL_ZNS2_11HandleTimerEvEEE11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ot::TimerMilliIn&lang;ot::MeshCoP::Leader, &(ot::MeshCoP::Leader::HandleTimer())&rang;::HandleTimer(ot::Timer&) &rArr; ot::MeshCoP::Leader::ResignCommissioner() &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::ResignCommissioner()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> meshcop_leader.o(.text._ZN2ot7MeshCoP6LeaderC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[46]"></a>ot::TrickleTimer::HandleTimer(ot::Timer&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, trickle_timer.o(.text._ZN2ot12TrickleTimer11HandleTimerERNS_5TimerE))
<BR>[Address Reference Count : 1]<UL><LI> trickle_timer.o(.text._ZN2ot12TrickleTimerC2ERNS_8InstanceERFvRS0_E)
</UL>
<P><STRONG><a name="[347]"></a>ot::TrickleTimer::HandleTimer()</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, trickle_timer.o(.text._ZN2ot12TrickleTimer11HandleTimerEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint32InRange(unsigned int, unsigned int)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TrickleTimer::StartNewInterval()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
</UL>

<P><STRONG><a name="[348]"></a>ot::TrickleTimer::StartNewInterval()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, trickle_timer.o(.text._ZN2ot12TrickleTimer16StartNewIntervalEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::TrickleTimer::StartNewInterval() &rArr; ot::TimerMilli::Start(unsigned int) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint32InRange(unsigned int, unsigned int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TrickleTimer::Start(ot::TrickleTimer::Mode, unsigned int, unsigned int, unsigned short)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TrickleTimer::IndicateInconsistent()
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TrickleTimer::HandleTimer()
</UL>

<P><STRONG><a name="[349]"></a>ot::TrickleTimer::IndicateInconsistent()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, trickle_timer.o(.text._ZN2ot12TrickleTimer20IndicateInconsistentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::TrickleTimer::IndicateInconsistent() &rArr; ot::TrickleTimer::StartNewInterval() &rArr; ot::TimerMilli::Start(unsigned int) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TrickleTimer::StartNewInterval()
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ResetAdvertiseInterval()
</UL>

<P><STRONG><a name="[34a]"></a>ot::TrickleTimer::Start(ot::TrickleTimer::Mode, unsigned int, unsigned int, unsigned short)</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, trickle_timer.o(.text._ZN2ot12TrickleTimer5StartENS0_4ModeEjjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ot::TrickleTimer::Start(ot::TrickleTimer::Mode, unsigned int, unsigned int, unsigned short) &rArr; ot::TrickleTimer::StartNewInterval() &rArr; ot::TimerMilli::Start(unsigned int) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint32InRange(unsigned int, unsigned int)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TrickleTimer::StartNewInterval()
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ResetAdvertiseInterval()
</UL>

<P><STRONG><a name="[34b]"></a>ot::TrickleTimer::TrickleTimer(ot::Instance&, void (&)(ot::TrickleTimer&))</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, trickle_timer.o(.text._ZN2ot12TrickleTimerC2ERNS_8InstanceERFvRS0_E), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::MleRouter(ot::Instance&)
</UL>

<P><STRONG><a name="[bc2]"></a>ot::TrickleTimer::TrickleTimer__sub_object(ot::Instance&, void (&)(ot::TrickleTimer&))</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, trickle_timer.o(.text._ZN2ot12TrickleTimerC2ERNS_8InstanceERFvRS0_E), UNUSED)

<P><STRONG><a name="[225]"></a>ot::ErrorToString(otError)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, error.o(.text._ZN2ot13ErrorToStringE7otError))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::SendDataPoll()
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendEmptyMessage()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadErrorToString
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::HandleTransmit()
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendCopy(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ProcessReceivedRequest(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::LogFrameTxFailure(ot::Mac::TxFrame const&, otError, unsigned char, bool) const
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::LogFrameRxFailure(ot::Mac::RxFrame const*, otError) const
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Receive(unsigned char)
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Sleep()
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::HandlePollSent(ot::Mac::TxFrame&, otError)
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::Log(ot::SettingsBase::Action, otError, ot::SettingsBase::Key, void const*)
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsTransmit(unsigned char const*, unsigned int)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::LogError(char const*, otError)
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleMgmtSetResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ApplyConfiguration(ot::Instance&, bool*) const
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::DuaManager::HandleTmf&lang;(ot::Uri)36&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::SendAddressNotification(ot::Ip6::Address&, ot::ThreadStatusTlv::DuaStatus, ot::Child const&)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::PerformNextRegistration()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::HandleDuaResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)0&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressError(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, ot::Ip6::Address const*)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&)
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendIcmpError(ot::Message&, ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code)
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandlePayload(ot::Ip6::Header&, ot::Message&, ot::Ip6::MessageInfo&, unsigned char, ot::Message::Ownership)
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogError(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, otError)
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::InformPreviousParent()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::GetForwardFramePriority(ot::FrameData const&, ot::Mac::Addresses const&, ot::Message::Priority&)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogFrame(char const*, ot::Mac::Frame const&, otError)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogLowpanHcFrameDrop(otError, unsigned short, ot::Mac::Addresses const&, bool)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogFragmentFrameDrop(otError, unsigned short, ot::Mac::Addresses const&, ot::Lowpan::FragmentHeader const&, bool)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogIp6Message(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::ClearEntry(ot::Child&)
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::AddAddress(ot::Child const&)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RegisterNetworkData(unsigned short, ot::NetworkData::NetworkData const&)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistrationMessage(otIp6Address const*, unsigned char, unsigned int const*, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::LogMlrResponse(otError, otError, unsigned char, ot::Ip6::Address const*, unsigned char)
</UL>

<P><STRONG><a name="[34c]"></a>ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&)</STRONG> (Thumb, 420 bytes, Stack size 104 bytes, mesh_forwarder_ftd.o(.text._ZN2ot13MeshForwarder10HandleMeshERNS_9FrameDataERKNS_3Mac7AddressERKNS_14ThreadLinkInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&) &rArr; ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&) &rArr; ot::MeshForwarder::UpdateRoutes(ot::FrameData const&, ot::Mac::Addresses const&) &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetLinkInfo(ot::ThreadLinkInfo const&)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ToYesNo(bool)
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Settings::Settings__sub_object(ot::Message::LinkSecurityMode, ot::Message::Priority)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Address::ToString() const
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::IsMinimalChild(unsigned short)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMessage(ot::Message&)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ResolveRoutingLoops(unsigned short, unsigned short)
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::GetForwardFramePriority(ot::FrameData const&, ot::Mac::Addresses const&, ot::Message::Priority&)
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::CheckReachability(ot::FrameData const&, ot::Mac::Addresses const&)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleLowpanHC(ot::FrameData const&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateRoutes(ot::FrameData const&, ot::Mac::Addresses const&)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::MeshHeader::AppendTo(ot::Message&) const
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::FragmentHeader::IsFragmentHeader(ot::FrameData const&)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::MeshHeader::ParseFrom(ot::FrameData&)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::MeshHeader::DecrementHopsLeft()
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleReceivedFrame(ot::Mac::RxFrame&)
</UL>

<P><STRONG><a name="[35c]"></a>ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*)</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder10LogMessageENS0_13MessageActionERKNS_7MessageE7otErrorPKNS_3Mac7AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogIp6Message(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel)
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleSentFrameToChild(ot::Mac::TxFrame const&, ot::IndirectSenderBase::FrameContext const&, otError, ot::Child&)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveDataResponseMessages()
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareNextDirectTransmission()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::ApplyDirectTxQueueLimit(ot::Message&)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateReassemblyList()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::ClearReassemblyList()
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateSendMessage(otError, ot::Mac::Address&, ot::Neighbor*)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateEcnOrDrop(ot::Message&, bool)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleDatagram(ot::Message&, ot::ThreadLinkInfo const&, ot::Mac::Address const&)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessage(ot::Message&)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&)
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::UpdateIndirectMessage(ot::Child&)
</UL>

<P><STRONG><a name="[35d]"></a>ot::MeshForwarder::SendMessage(ot::Message&)</STRONG> (Thumb, 442 bytes, Stack size 80 bytes, mesh_forwarder_ftd.o(.text._ZN2ot13MeshForwarder11SendMessageERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::SendMessage(ot::Message&) &rArr; ot::MeshForwarder::ApplyDirectTxQueueLimit(ot::Message&) &rArr; ot::MeshForwarder::RemoveAgedMessages() &rArr; ot::MeshForwarder::UpdateEcnOrDrop(ot::Message&, bool) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetOffset(unsigned short)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::Enqueue(ot::Message&)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildSupervisor::GetDestination(ot::Message const&) const
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::HasIp6Address(ot::Ip6::Address const&) const
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsMulticastLargerThanRealmLocal() const
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Ip6::Address const&, ot::Neighbor::StateFilter)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::ApplyDirectTxQueueLimit(ot::Message&)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::AddMessageForSleepyChild(ot::Message&, ot::Child&)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendEmptyMessage()
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildSupervisor::SendMessage(ot::Child&)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[29f]"></a>ot::MeshForwarder::EvictMessage(ot::Message::Priority)</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, mesh_forwarder_ftd.o(.text._ZN2ot13MeshForwarder12EvictMessageENS_7Message8PriorityE))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetNext() const
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::IsChildPending() const
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::GetHeadForPriority(ot::Message::Priority) const
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveAgedMessages()
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessage(ot::Message&)
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::NewBuffer(ot::Message::Priority)
</UL>

<P><STRONG><a name="[350]"></a>ot::MeshForwarder::UpdateRoutes(ot::FrameData const&, ot::Mac::Addresses const&)</STRONG> (Thumb, 152 bytes, Stack size 80 bytes, mesh_forwarder_ftd.o(.text._ZN2ot13MeshForwarder12UpdateRoutesERKNS_9FrameDataERKNS_3Mac9AddressesE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::UpdateRoutes(ot::FrameData const&, ot::Mac::Addresses const&) &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::UpdateSnoopedCacheEntry(ot::Ip6::Address const&, unsigned short, unsigned short)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::IsOnMesh(ot::Ip6::Address const&) const
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Headers::DecompressFrom(ot::FrameData const&, ot::Mac::Addresses const&, ot::Instance&)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::IsLocator() const
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Ip6::Address const&, ot::Neighbor::StateFilter)
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleLowpanHC(ot::FrameData const&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[35e]"></a>ot::MeshForwarder::LogIp6Message(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel)</STRONG> (Thumb, 332 bytes, Stack size 232 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder13LogIp6MessageENS0_13MessageActionERKNS_7MessageEPKNS_3Mac7AddressE7otErrorNS_8LogLevelE))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::LogIp6Message(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogIp6SourceDestAddresses(ot::Ip6::Headers const&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::IpProtoToString(unsigned char)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ToYesNo(bool)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::PriorityToString(ot::Message::Priority)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Address::ToString() const
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Headers::GetChecksum() const
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::EcnToString(ot::Ip6::Ecn)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Headers::ParseFrom(ot::Message const&)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogIp6SourceDestAddresses(ot::Ip6::Headers const&, ot::LogLevel)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RssAverager::ToString() const
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*)
</UL>

<P><STRONG><a name="[369]"></a>ot::MeshForwarder::RemoveMessage(ot::Message&)</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder13RemoveMessageERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::DequeueAndFree(ot::Message&)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&)
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::EvictMessage(ot::Message::Priority)
</UL>

<P><STRONG><a name="[379]"></a>ot::MeshForwarder::FrameToMessage(ot::FrameData const&, unsigned short, ot::Mac::Addresses const&, ot::Message*&)</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder14FrameToMessageERKNS_9FrameDataEtRKNS_3Mac9AddressesERPNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::FrameToMessage(ot::FrameData const&, unsigned short, ot::Mac::Addresses const&, ot::Message*&) &rArr; ot::Lowpan::Lowpan::Decompress(ot::Message&, ot::Mac::Addresses const&, ot::FrameData&, unsigned short) &rArr;  ot::Lowpan::Lowpan::Decompress(ot::Message&, ot::Mac::Addresses const&, ot::FrameData&, unsigned short) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::MoveOffset(int)
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Settings::Settings__sub_object(ot::Message::LinkSecurityMode, ot::Message::Priority)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::GetFramePriority(ot::FrameData const&, ot::Mac::Addresses const&, ot::Message::Priority&)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Decompress(ot::Message&, ot::Mac::Addresses const&, ot::FrameData&, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleLowpanHC(ot::FrameData const&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[37d]"></a>ot::MeshForwarder::HandleDatagram(ot::Message&, ot::ThreadLinkInfo const&, ot::Mac::Address const&)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder14HandleDatagramERNS_7MessageERKNS_14ThreadLinkInfoERKNS_3Mac7AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::HandleDatagram(ot::Message&, ot::ThreadLinkInfo const&, ot::Mac::Address const&) &rArr; ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool) &rArr; ot::Ip6::Ip6::HandlePayload(ot::Ip6::Header&, ot::Message&, ot::Ip6::MessageInfo&, unsigned char, ot::Message::Ownership) &rArr; ot::Ip6::Icmp::HandleMessage(ot::Message&, ot::Ip6::MessageInfo&) &rArr; ot::Ip6::Icmp::HandleEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleLowpanHC(ot::FrameData const&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[353]"></a>ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)</STRONG> (Thumb, 432 bytes, Stack size 64 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder14HandleFragmentERNS_9FrameDataERKNS_3Mac9AddressesERKNS_14ThreadLinkInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&) &rArr; ot::MeshForwarder::UpdateRoutes(ot::FrameData const&, ot::Mac::Addresses const&) &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetLength(unsigned short)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::Enqueue(ot::Message&, ot::MessageQueue::QueuePosition)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::Dequeue(ot::Message&)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetLinkInfo(ot::ThreadLinkInfo const&)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::begin()
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RssAverager::Add(signed char)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::MoveOffset(int)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Iterator::Advance()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::RegisterReceiver(ot::TimeTicker::Receiver)
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Filter::Accept(ot::Message&) const
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::FragmentHeader::ParseFrom(ot::FrameData&)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendIcmpErrorIfDstUnreach(ot::Message const&, ot::Mac::Addresses const&)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogFragmentFrameDrop(otError, unsigned short, ot::Mac::Addresses const&, ot::Lowpan::FragmentHeader const&, bool)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::ClearReassemblyList()
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleDatagram(ot::Message&, ot::ThreadLinkInfo const&, ot::Mac::Address const&)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::FrameToMessage(ot::FrameData const&, unsigned short, ot::Mac::Addresses const&, ot::Message*&)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateRoutes(ot::FrameData const&, ot::Mac::Addresses const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleReceivedFrame(ot::Mac::RxFrame&)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[354]"></a>ot::MeshForwarder::HandleLowpanHC(ot::FrameData const&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder14HandleLowpanHCERKNS_9FrameDataERKNS_3Mac9AddressesERKNS_14ThreadLinkInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::HandleLowpanHC(ot::FrameData const&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&) &rArr; ot::MeshForwarder::UpdateRoutes(ot::FrameData const&, ot::Mac::Addresses const&) &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetLinkInfo(ot::ThreadLinkInfo const&)
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Filter::Accept(ot::Message&) const
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendIcmpErrorIfDstUnreach(ot::Message const&, ot::Mac::Addresses const&)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogLowpanHcFrameDrop(otError, unsigned short, ot::Mac::Addresses const&, bool)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleDatagram(ot::Message&, ot::ThreadLinkInfo const&, ot::Mac::Address const&)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::FrameToMessage(ot::FrameData const&, unsigned short, ot::Mac::Addresses const&, ot::Message*&)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateRoutes(ot::FrameData const&, ot::Mac::Addresses const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleReceivedFrame(ot::Mac::RxFrame&)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[388]"></a>ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError)</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, mesh_forwarder_ftd.o(.text._ZN2ot13MeshForwarder14HandleResolvedERKNS_3Ip67AddressE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::begin()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::DequeueAndFree(ot::Message&)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Iterator::Advance()
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::HandleTimeTick()
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)1&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::Clear()
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::UpdateCacheEntry(ot::Ip6::Address const&, unsigned short)
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::RemoveCacheEntry(ot::AddressResolver::CacheEntry&, ot::AddressResolver::CacheEntryList&, ot::AddressResolver::CacheEntry*, ot::AddressResolver::Reason)
</UL>

<P><STRONG><a name="[28f]"></a>ot::MeshForwarder::HandleTimeTick()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder14HandleTimeTickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::HandleTimeTick() &rArr; ot::MeshForwarder::UpdateReassemblyList() &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::UnregisterReceiver(ot::TimeTicker::Receiver)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateReassemblyList()
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::FragmentPriorityList::UpdateOnTimeTick()
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::HandleTimer()
</UL>

<P><STRONG><a name="[35f]"></a>ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel)</STRONG> (Thumb, 74 bytes, Stack size 64 bytes, mesh_forwarder_ftd.o(.text._ZN2ot13MeshForwarder14LogMeshMessageENS0_13MessageActionERKNS_7MessageEPKNS_3Mac7AddressE7otErrorNS_8LogLevelE))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMeshIpHeader(ot::Message const&, unsigned short, ot::Mac::Addresses const&, ot::LogLevel)
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*)
</UL>

<P><STRONG><a name="[38e]"></a>ot::MeshForwarder::RemoveMessages(ot::Child&, ot::Message::SubType)</STRONG> (Thumb, 182 bytes, Stack size 88 bytes, mesh_forwarder_ftd.o(.text._ZN2ot13MeshForwarder14RemoveMessagesERNS_5ChildENS_7Message7SubTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::RemoveMessages(ot::Child&, ot::Message::SubType) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::begin()
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Iterator::Advance()
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(unsigned short, ot::Neighbor::StateFilter)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Ip6::Address const&, ot::Neighbor::StateFilter)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::MeshHeader::ParseFrom(ot::Message const&)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessageIfNoPendingTx(ot::Message&)
</UL>
<BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child&)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[392]"></a>ot::MeshForwarder::UpdateIp6Route(ot::Message&)</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder14UpdateIp6RouteERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::UpdateIp6Route(ot::Message&) &rArr; ot::MeshForwarder::UpdateIp6RouteFtd(ot::Ip6::Header&, ot::Message&) &rArr; ot::AddressResolver::Resolve(ot::Ip6::Address const&, unsigned short&, bool) &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::IsSubTypeMle() const
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsLinkLocalMulticast() const
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsLinkLocal() const
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetNextHop(unsigned short) const
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateIp6RouteFtd(ot::Ip6::Header&, ot::Message&)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::GetMacDestinationAddress(ot::Ip6::Address const&, ot::Mac::Address&)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::GetMacSourceAddress(ot::Ip6::Address const&, ot::Mac::Address&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareNextDirectTransmission()
</UL>

<P><STRONG><a name="[39a]"></a>ot::MeshForwarder::HandleSentFrame(ot::Mac::TxFrame&, otError)</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder15HandleSentFrameERNS_3Mac7TxFrameE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::HandleSentFrame(ot::Mac::TxFrame&, otError) &rArr; ot::MeshForwarder::UpdateNeighborOnSentFrame(ot::Mac::TxFrame&, otError, ot::Mac::Address const&, bool) &rArr; ot::MeshForwarder::UpdateNeighborLinkFailures(ot::Neighbor&, otError, bool, unsigned char) &rArr; ot::Mle::MleRouter::RemoveRouterLink(ot::Router&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetDstAddr(ot::Mac::Address&) const
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateNeighborOnSentFrame(ot::Mac::TxFrame&, otError, ot::Mac::Address const&, bool)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateSendMessage(otError, ot::Mac::Address&, ot::Neighbor*)
</UL>
<BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[38d]"></a>ot::MeshForwarder::LogMeshIpHeader(ot::Message const&, unsigned short, ot::Mac::Addresses const&, ot::LogLevel)</STRONG> (Thumb, 108 bytes, Stack size 104 bytes, mesh_forwarder_ftd.o(.text._ZN2ot13MeshForwarder15LogMeshIpHeaderERKNS_7MessageEtRKNS_3Mac9AddressesENS_8LogLevelE))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::LogMeshIpHeader(ot::Message const&, unsigned short, ot::Mac::Addresses const&, ot::LogLevel) &rArr; ot::MeshForwarder::LogIp6SourceDestAddresses(ot::Ip6::Headers const&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::IpProtoToString(unsigned char)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...)
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Headers::GetChecksum() const
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Headers::DecompressFrom(ot::Message const&, unsigned short, ot::Mac::Addresses const&)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::EcnToString(ot::Ip6::Ecn)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogIp6SourceDestAddresses(ot::Ip6::Headers const&, ot::LogLevel)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::MessagePriorityToString(ot::Message const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel)
</UL>

<P><STRONG><a name="[3a0]"></a>ot::MeshForwarder::SetRxOnWhenIdle(bool)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder15SetRxOnWhenIdleEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::SetRxOnWhenIdle(bool) &rArr; ot::Mac::Mac::SetRxOnWhenIdle(bool) &rArr; ot::Mac::Mac::UpdateIdleMode() &rArr; ot::Mac::SubMac::Receive(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetRxOnWhenIdle(bool)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::StartPolling()
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::StopPolling()
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::Start()
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeRouter(ot::ThreadStatusTlv::Status)
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::Discover(ot::Mac::ChannelMask const&, unsigned short, bool, bool, ot::MeshCoP::SteeringData::HashBitIndexes const*, void (*)(otActiveScanResult*, void*), void*)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoverComplete()
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Reattach()
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildIdResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildIdRequest()
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAttachTimer()
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetStateDetached()
</UL>

<P><STRONG><a name="[3a6]"></a>ot::MeshForwarder::UpdateEcnOrDrop(ot::Message&, bool)</STRONG> (Thumb, 344 bytes, Stack size 80 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder15UpdateEcnOrDropERNS_7MessageEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::UpdateEcnOrDrop(ot::Message&, bool) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Address const&) const
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::FragmentPriorityList::FindEntry(unsigned short, unsigned short)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressEcn(ot::Message const&, unsigned short) const
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::FragmentHeader::ParseFrom(ot::Message const&, unsigned short, unsigned short&)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::MeshHeader::ParseFrom(ot::Message const&, unsigned short&)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessageIfNoPendingTx(ot::Message&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareNextDirectTransmission()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveAgedMessages()
</UL>

<P><STRONG><a name="[3ac]"></a>ot::MeshForwarder::UpdateMeshRoute(ot::Message&)</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, mesh_forwarder_ftd.o(.text._ZN2ot13MeshForwarder15UpdateMeshRouteERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::UpdateMeshRoute(ot::Message&) &rArr; ot::RouterTable::GetNextHop(unsigned short) const &rArr; ot::RouterTable::GetNextHopAndPathCost(unsigned short, unsigned short&, unsigned char&) const &rArr; ot::ChildTable::FindChild(unsigned short, ot::Neighbor::StateFilter) &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(unsigned short, ot::Neighbor::StateFilter)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetNextHop(unsigned short) const
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::MeshHeader::ParseFrom(ot::Message const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareNextDirectTransmission()
</UL>

<P><STRONG><a name="[37a]"></a>ot::MeshForwarder::GetFramePriority(ot::FrameData const&, ot::Mac::Addresses const&, ot::Message::Priority&)</STRONG> (Thumb, 128 bytes, Stack size 80 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder16GetFramePriorityERKNS_9FrameDataERKNS_3Mac9AddressesERNS_7Message8PriorityE))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ot::MeshForwarder::GetFramePriority(ot::FrameData const&, ot::Mac::Addresses const&, ot::Message::Priority&) &rArr; ot::Ip6::Headers::DecompressFrom(ot::FrameData const&, ot::Mac::Addresses const&, ot::Instance&) &rArr; ot::Lowpan::Lowpan::DecompressBaseHeader(ot::Ip6::Header&, bool&, ot::Mac::Addresses const&, ot::FrameData&) &rArr; ot::NetworkData::LeaderBase::GetContext(unsigned char, ot::Lowpan::Context&) const &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::IsTmfMessage(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned short) const
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Headers::DecompressFrom(ot::FrameData const&, ot::Mac::Addresses const&, ot::Instance&)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::DscpToPriority(unsigned char)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::DscpToPriority(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::GetForwardFramePriority(ot::FrameData const&, ot::Mac::Addresses const&, ot::Message::Priority&)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::FrameToMessage(ot::FrameData const&, unsigned short, ot::Mac::Addresses const&, ot::Message*&)
</UL>

<P><STRONG><a name="[3b0]"></a>ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool)</STRONG> (Thumb, 688 bytes, Stack size 96 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder16PrepareDataFrameERNS_3Mac7TxFrameERNS_7MessageERKNS1_9AddressesEbttb))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool) &rArr; ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&) &rArr; ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&) &rArr;  ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetOffset(unsigned short)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::InsertBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::Init(void*, unsigned short)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::AppendBytes(void const*, unsigned short)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetPayload() const
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareMacHeaders(ot::Mac::TxFrame&, ot::Mac::Frame::Type, ot::Mac::Addresses const&, ot::Mac::PanIds const&, ot::Mac::Frame::SecurityLevel, ot::Mac::Frame::KeyIdMode, ot::Message const*)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::IsSubTypeMle() const
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetMaxPayloadLength() const
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetHeaderLength() const
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetFooterLength() const
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetPayloadLength(unsigned short)
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetFramePending(bool)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::MeshHeader::AppendTo(ot::FrameBuilder&) const
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::MeshHeader::Init(unsigned short, unsigned short, unsigned char)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFrameRequest(ot::Mac::TxFrames&)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::PrepareDataFrame(ot::Mac::TxFrame&, ot::Child&, ot::Message&)
</UL>

<P><STRONG><a name="[3bc]"></a>ot::MeshForwarder::SendEmptyMessage()</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder16SendEmptyMessageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::SendEmptyMessage() &rArr; ot::MessagePool::Allocate(ot::Message::Type) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::Allocate(ot::Message::Type)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMessage(ot::Message&)
</UL>
<BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkSendEmptyData
</UL>

<P><STRONG><a name="[356]"></a>ot::MeshForwarder::CheckReachability(ot::FrameData const&, ot::Mac::Addresses const&)</STRONG> (Thumb, 114 bytes, Stack size 128 bytes, mesh_forwarder_ftd.o(.text._ZN2ot13MeshForwarder17CheckReachabilityERKNS_9FrameDataERKNS_3Mac9AddressesE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::CheckReachability(ot::FrameData const&, ot::Mac::Addresses const&) &rArr; ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Ip6::Headers const&) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Headers::DecompressFrom(ot::FrameData const&, ot::Mac::Addresses const&, ot::Instance&)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Ip6::Headers const&)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::CheckReachability(unsigned short, ot::Ip6::Header const&)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[3bf]"></a>ot::MeshForwarder::PrepareEmptyFrame(ot::Mac::TxFrame&, ot::Mac::Address const&, bool)</STRONG> (Thumb, 150 bytes, Stack size 72 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder17PrepareEmptyFrameERNS_3Mac7TxFrameERKNS1_7AddressEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = ot::MeshForwarder::PrepareEmptyFrame(ot::Mac::TxFrame&, ot::Mac::Address const&, bool) &rArr; ot::MeshForwarder::PrepareMacHeaders(ot::Mac::TxFrame&, ot::Mac::Frame::Type, ot::Mac::Addresses const&, ot::Mac::PanIds const&, ot::Mac::Frame::SecurityLevel, ot::Mac::Frame::KeyIdMode, ot::Message const*) &rArr; ot::NeighborTable::FindNeighbor(ot::Mac::Address const&, ot::Neighbor::StateFilter) &rArr; ot::NeighborTable::FindNeighbor(ot::Neighbor::AddressMatcher const&) &rArr; ot::NeighborTable::FindChildOrRouter(ot::Neighbor::AddressMatcher const&) &rArr; ot::ChildTable::FindChild(ot::Neighbor::AddressMatcher const&) const &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetAckRequest(bool)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareMacHeaders(ot::Mac::TxFrame&, ot::Mac::Frame::Type, ot::Mac::Addresses const&, ot::Mac::PanIds const&, ot::Mac::Frame::SecurityLevel, ot::Mac::Frame::KeyIdMode, ot::Message const*)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetPayloadLength(unsigned short)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFrameRequest(ot::Mac::TxFrames&)
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::PrepareEmptyFrame(ot::Mac::TxFrame&, ot::Child&, bool)
</UL>

<P><STRONG><a name="[3b1]"></a>ot::MeshForwarder::PrepareMacHeaders(ot::Mac::TxFrame&, ot::Mac::Frame::Type, ot::Mac::Addresses const&, ot::Mac::PanIds const&, ot::Mac::Frame::SecurityLevel, ot::Mac::Frame::KeyIdMode, ot::Message const*)</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder17PrepareMacHeadersERNS_3Mac7TxFrameENS1_5Frame4TypeERKNS1_9AddressesERKNS1_6PanIdsENS4_13SecurityLevelENS4_9KeyIdModeEPKNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ot::MeshForwarder::PrepareMacHeaders(ot::Mac::TxFrame&, ot::Mac::Frame::Type, ot::Mac::Addresses const&, ot::Mac::PanIds const&, ot::Mac::Frame::SecurityLevel, ot::Mac::Frame::KeyIdMode, ot::Message const*) &rArr; ot::NeighborTable::FindNeighbor(ot::Mac::Address const&, ot::Neighbor::StateFilter) &rArr; ot::NeighborTable::FindNeighbor(ot::Neighbor::AddressMatcher const&) &rArr; ot::NeighborTable::FindChildOrRouter(ot::Neighbor::AddressMatcher const&) &rArr; ot::ChildTable::FindChild(ot::Neighbor::AddressMatcher const&) const &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::InitMacHeader(ot::Mac::Frame::Type, ot::Mac::Frame::Version, ot::Mac::Addresses const&, ot::Mac::PanIds const&, ot::Mac::Frame::SecurityLevel, ot::Mac::Frame::KeyIdMode)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Mac::Address const&, ot::Neighbor::StateFilter)
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::PrepareDataRequest(ot::Mac::TxFrames&)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMesh(ot::Message&, ot::Mac::TxFrame&)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareEmptyFrame(ot::Mac::TxFrame&, ot::Mac::Address const&, bool)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool)
</UL>

<P><STRONG><a name="[398]"></a>ot::MeshForwarder::UpdateIp6RouteFtd(ot::Ip6::Header&, ot::Message&)</STRONG> (Thumb, 414 bytes, Stack size 32 bytes, mesh_forwarder_ftd.o(.text._ZN2ot13MeshForwarder17UpdateIp6RouteFtdERNS_3Ip66HeaderERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::UpdateIp6RouteFtd(ot::Ip6::Header&, ot::Message&) &rArr; ot::AddressResolver::Resolve(ot::Ip6::Address const&, unsigned short&, bool) &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsRoutingLocator(ot::Ip6::Address const&) const
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::GetBorderAgentRloc(ot::ThreadNetif&, unsigned short&)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::Resolve(ot::Ip6::Address const&, unsigned short&, bool)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsAnycastLocator(ot::Ip6::Address const&) const
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::IsOnMesh(ot::Ip6::Address const&) const
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::RouteLookup(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned short&) const
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::AnycastRouteLookup(unsigned char, ot::MeshForwarder::AnycastType, unsigned short&) const
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::CheckReachability(unsigned short, ot::Ip6::Header const&)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Ip6::Address const&, ot::Neighbor::StateFilter)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetNextHop(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateIp6Route(ot::Message&)
</UL>

<P><STRONG><a name="[39d]"></a>ot::MeshForwarder::UpdateSendMessage(otError, ot::Mac::Address&, ot::Neighbor*)</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder17UpdateSendMessageE7otErrorRNS_3Mac7AddressEPNS_8NeighborE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::UpdateSendMessage(otError, ot::Mac::Address&, ot::Neighbor*) &rArr; ot::Mle::Mle::RequestShorterChildIdRequest() &rArr; ot::Mle::Mle::SendChildIdRequest() &rArr; ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&) &rArr; ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetOffset(unsigned short)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SuccessRateTracker::AddSample(bool, unsigned short)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoveryRequestFrameTxDone(ot::Message&)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RequestShorterChildIdRequest()
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessageIfNoPendingTx(ot::Message&)
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleSentFrame(ot::Mac::TxFrame&, otError)
</UL>

<P><STRONG><a name="[3cc]"></a>ot::MeshForwarder::HandleFrameRequest(ot::Mac::TxFrames&)</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder18HandleFrameRequestERNS_3Mac8TxFramesE))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::HandleFrameRequest(ot::Mac::TxFrames&) &rArr; ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool) &rArr; ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&) &rArr; ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&) &rArr;  ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::PrepareDiscoveryRequestFrame(ot::Mac::TxFrame&)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMesh(ot::Message&, ot::Mac::TxFrame&)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareEmptyFrame(ot::Mac::TxFrame&, ot::Mac::Address const&, bool)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::BeginTransmit()
</UL>

<P><STRONG><a name="[366]"></a>ot::MeshForwarder::RemoveAgedMessages()</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder18RemoveAgedMessagesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::RemoveAgedMessages() &rArr; ot::MeshForwarder::UpdateEcnOrDrop(ot::Message&, bool) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetNext() const
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::GetHead() const
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateEcnOrDrop(ot::Message&, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::EvictMessage(ot::Message::Priority)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::ApplyDirectTxQueueLimit(ot::Message&)
</UL>

<P><STRONG><a name="[381]"></a>ot::MeshForwarder::ClearReassemblyList()</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder19ClearReassemblyListEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::ClearReassemblyList() &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::begin()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Iterator::Advance()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::DequeueAndFree(ot::Message&)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[393]"></a>ot::MeshForwarder::GetMacSourceAddress(ot::Ip6::Address const&, ot::Mac::Address&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder19GetMacSourceAddressERKNS_3Ip67AddressERNS_3Mac7AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ot::MeshForwarder::GetMacSourceAddress(ot::Ip6::Address const&, ot::Mac::Address&) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::ConvertToMacAddress(ot::Mac::Address&) const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateIp6Route(ot::Message&)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::PrepareDataFrame(ot::Mac::TxFrame&, ot::Child&, ot::Message&)
</UL>

<P><STRONG><a name="[3d1]"></a>ot::MeshForwarder::HandleReceivedFrame(ot::Mac::RxFrame&)</STRONG> (Thumb, 264 bytes, Stack size 208 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder19HandleReceivedFrameERNS_3Mac7RxFrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 2184 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::HandleReceivedFrame(ot::Mac::RxFrame&) &rArr; ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&) &rArr; ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&) &rArr; ot::MeshForwarder::UpdateRoutes(ot::FrameData const&, ot::Mac::Addresses const&) &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::ToInfoString() const
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetPayload() const
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetDstAddr(ot::Mac::Address&) const
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetSrcAddr(ot::Mac::Address&) const
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetPayloadLength() const
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::UpdateOnReceive(ot::Mac::Address const&, bool)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ThreadLinkInfo::SetFrom(ot::Mac::RxFrame const&)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogFrame(char const*, ot::Mac::Frame const&, otError)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleLowpanHC(ot::FrameData const&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&)
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::FragmentHeader::IsFragmentHeader(ot::FrameData const&)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::MeshHeader::IsMeshHeader(ot::FrameData const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[38a]"></a>ot::MeshForwarder::FragmentPriorityList::UpdateOnTimeTick()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, mesh_forwarder_ftd.o(.text._ZN2ot13MeshForwarder20FragmentPriorityList16UpdateOnTimeTickEv))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleTimeTick()
</UL>

<P><STRONG><a name="[3ab]"></a>ot::MeshForwarder::FragmentPriorityList::FindEntry(unsigned short, unsigned short)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mesh_forwarder_ftd.o(.text._ZN2ot13MeshForwarder20FragmentPriorityList9FindEntryEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::MeshForwarder::FragmentPriorityList::FindEntry(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateEcnOrDrop(ot::Message&, bool)
</UL>

<P><STRONG><a name="[384]"></a>ot::MeshForwarder::LogFragmentFrameDrop(otError, unsigned short, ot::Mac::Addresses const&, ot::Lowpan::FragmentHeader const&, bool)</STRONG> (Thumb, 114 bytes, Stack size 120 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder20LogFragmentFrameDropE7otErrortRKNS_3Mac9AddressesERKNS_6Lowpan14FragmentHeaderEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::LogFragmentFrameDrop(otError, unsigned short, ot::Mac::Addresses const&, ot::Lowpan::FragmentHeader const&, bool) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ToYesNo(bool)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Address::ToString() const
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[387]"></a>ot::MeshForwarder::LogLowpanHcFrameDrop(otError, unsigned short, ot::Mac::Addresses const&, bool)</STRONG> (Thumb, 94 bytes, Stack size 96 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder20LogLowpanHcFrameDropE7otErrortRKNS_3Mac9AddressesEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::LogLowpanHcFrameDrop(otError, unsigned short, ot::Mac::Addresses const&, bool) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ToYesNo(bool)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Address::ToString() const
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleLowpanHC(ot::FrameData const&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[38b]"></a>ot::MeshForwarder::UpdateReassemblyList()</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder20UpdateReassemblyListEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::UpdateReassemblyList() &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::begin()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Iterator::Advance()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::DequeueAndFree(ot::Message&)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleTimeTick()
</UL>

<P><STRONG><a name="[38c]"></a>ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel)</STRONG> (Thumb, 432 bytes, Stack size 248 bytes, mesh_forwarder_ftd.o(.text._ZN2ot13MeshForwarder21LogMeshFragmentHeaderENS0_13MessageActionERKNS_7MessageEPKNS_3Mac7AddressE7otErrorRtRNS5_9AddressesENS_8LogLevelE))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ToYesNo(bool)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Address::ToString() const
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::MessageActionToString(ot::MeshForwarder::MessageAction, otError)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::FragmentHeader::ParseFrom(ot::Message const&, unsigned short, unsigned short&)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::MeshHeader::ParseFrom(ot::Message const&, unsigned short&)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RssAverager::ToString() const
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel)
</UL>

<P><STRONG><a name="[3d9]"></a>ot::MeshForwarder::MessageActionToString(ot::MeshForwarder::MessageAction, otError)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder21MessageActionToStringENS0_13MessageActionE7otError))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel)
</UL>

<P><STRONG><a name="[3da]"></a>ot::MeshForwarder::UpdateFragmentPriority(ot::Lowpan::FragmentHeader&, unsigned short, unsigned short, ot::Message::Priority)</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, mesh_forwarder_ftd.o(.text._ZN2ot13MeshForwarder22UpdateFragmentPriorityERNS_6Lowpan14FragmentHeaderEttNS_7Message8PriorityE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::UpdateFragmentPriority(ot::Lowpan::FragmentHeader&, unsigned short, unsigned short, ot::Message::Priority) &rArr; ot::TimeTicker::RegisterReceiver(ot::TimeTicker::Receiver) &rArr; ot::TimerMilli::Start(unsigned int) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::RegisterReceiver(ot::TimeTicker::Receiver)
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::GetForwardFramePriority(ot::FrameData const&, ot::Mac::Addresses const&, ot::Message::Priority&)
</UL>

<P><STRONG><a name="[365]"></a>ot::MeshForwarder::ApplyDirectTxQueueLimit(ot::Message&)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder23ApplyDirectTxQueueLimitERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::ApplyDirectTxQueueLimit(ot::Message&) &rArr; ot::MeshForwarder::RemoveAgedMessages() &rArr; ot::MeshForwarder::UpdateEcnOrDrop(ot::Message&, bool) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::IsDirectTxQueueOverMaxFrameThreshold() const
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveAgedMessages()
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessageIfNoPendingTx(ot::Message&)
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMessage(ot::Message&)
</UL>

<P><STRONG><a name="[358]"></a>ot::MeshForwarder::GetForwardFramePriority(ot::FrameData const&, ot::Mac::Addresses const&, ot::Message::Priority&)</STRONG> (Thumb, 206 bytes, Stack size 104 bytes, mesh_forwarder_ftd.o(.text._ZN2ot13MeshForwarder23GetForwardFramePriorityERKNS_9FrameDataERKNS_3Mac9AddressesERNS_7Message8PriorityE))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::GetForwardFramePriority(ot::FrameData const&, ot::Mac::Addresses const&, ot::Message::Priority&) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Address::ToString() const
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::FragmentHeader::ParseFrom(ot::FrameData&)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateFragmentPriority(ot::Lowpan::FragmentHeader&, unsigned short, unsigned short, ot::Message::Priority)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::GetFramePriority(ot::FrameData const&, ot::Mac::Addresses const&, ot::Message::Priority&)
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[39f]"></a>ot::MeshForwarder::MessagePriorityToString(ot::Message const&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder23MessagePriorityToStringERKNS_7MessageE))
<BR><BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::PriorityToString(ot::Message::Priority)
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMeshIpHeader(ot::Message const&, unsigned short, ot::Mac::Addresses const&, ot::LogLevel)
</UL>

<P><STRONG><a name="[396]"></a>ot::MeshForwarder::GetMacDestinationAddress(ot::Ip6::Address const&, ot::Mac::Address&)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder24GetMacDestinationAddressERKNS_3Ip67AddressERNS_3Mac7AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ot::MeshForwarder::GetMacDestinationAddress(ot::Ip6::Address const&, ot::Mac::Address&) &rArr; ot::Mle::Mle::IsRoutingLocator(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsRoutingLocator(ot::Ip6::Address const&) const
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::ConvertToMacAddress(ot::Mac::Address&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateIp6Route(ot::Message&)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::PrepareDataFrame(ot::Mac::TxFrame&, ot::Child&, ot::Message&)
</UL>

<P><STRONG><a name="[3dc]"></a>ot::MeshForwarder::ScheduleTransmissionTask()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder24ScheduleTransmissionTaskEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::ScheduleTransmissionTask() &rArr; ot::MeshForwarder::PrepareNextDirectTransmission() &rArr; ot::MeshForwarder::UpdateIp6Route(ot::Message&) &rArr; ot::MeshForwarder::UpdateIp6RouteFtd(ot::Ip6::Header&, ot::Message&) &rArr; ot::AddressResolver::Resolve(ot::Ip6::Address const&, unsigned short&, bool) &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::RequestDirectFrameTransmission()
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareNextDirectTransmission()
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TaskletIn&lang;ot::MeshForwarder, &(ot::MeshForwarder::ScheduleTransmissionTask())&rang;::HandleTasklet(ot::Tasklet&)
</UL>

<P><STRONG><a name="[376]"></a>ot::MeshForwarder::LogIp6SourceDestAddresses(ot::Ip6::Headers const&, ot::LogLevel)</STRONG> (Thumb, 148 bytes, Stack size 80 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder25LogIp6SourceDestAddressesERKNS_3Ip67HeadersENS_8LogLevelE))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::LogIp6SourceDestAddresses(ot::Ip6::Headers const&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString() const
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Headers::GetDestinationPort() const
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Headers::GetSourcePort() const
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMeshIpHeader(ot::Message const&, unsigned short, ot::Mac::Addresses const&, ot::LogLevel)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogIp6Message(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel)
</UL>

<P><STRONG><a name="[386]"></a>ot::MeshForwarder::SendIcmpErrorIfDstUnreach(ot::Message const&, ot::Mac::Addresses const&)</STRONG> (Thumb, 172 bytes, Stack size 128 bytes, mesh_forwarder_ftd.o(.text._ZN2ot13MeshForwarder25SendIcmpErrorIfDstUnreachERKNS_7MessageERKNS_3Mac9AddressesE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::SendIcmpErrorIfDstUnreach(ot::Message const&, ot::Mac::Addresses const&) &rArr; ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Ip6::Headers const&) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::FindChild(unsigned short, ot::Neighbor::StateFilter)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::IsOnMesh(ot::Ip6::Address const&) const
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Headers::ParseFrom(ot::Message const&)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Ip6::Headers const&)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::CheckReachability(unsigned short, ot::Ip6::Header const&)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleLowpanHC(ot::FrameData const&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[39c]"></a>ot::MeshForwarder::UpdateNeighborOnSentFrame(ot::Mac::TxFrame&, otError, ot::Mac::Address const&, bool)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder25UpdateNeighborOnSentFrameERNS_3Mac7TxFrameE7otErrorRKNS1_7AddressEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::UpdateNeighborOnSentFrame(ot::Mac::TxFrame&, otError, ot::Mac::Address const&, bool) &rArr; ot::MeshForwarder::UpdateNeighborLinkFailures(ot::Neighbor&, otError, bool, unsigned char) &rArr; ot::Mle::MleRouter::RemoveRouterLink(ot::Router&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Mac::Address const&, ot::Neighbor::StateFilter)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateNeighborLinkFailures(ot::Neighbor&, otError, bool, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleSentFrame(ot::Mac::TxFrame&, otError)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::HandlePollSent(ot::Mac::TxFrame&, otError)
</UL>

<P><STRONG><a name="[3e2]"></a>ot::MeshForwarder::RemoveDataResponseMessages()</STRONG> (Thumb, 166 bytes, Stack size 96 bytes, mesh_forwarder_ftd.o(.text._ZN2ot13MeshForwarder26RemoveDataResponseMessagesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::RemoveDataResponseMessages() &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::begin()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::DequeueAndFree(ot::Message&)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Iterator::Advance()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDataResponse(ot::Ip6::Address const&, ot::Mle::Mle::TlvList const&, unsigned short, ot::Message const*)
</UL>

<P><STRONG><a name="[391]"></a>ot::MeshForwarder::RemoveMessageIfNoPendingTx(ot::Message&)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder26RemoveMessageIfNoPendingTxERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::RemoveMessageIfNoPendingTx(ot::Message&) &rArr; ot::PriorityQueue::DequeueAndFree(ot::Message&) &rArr; ot::PriorityQueue::Dequeue(ot::Message&) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::DequeueAndFree(ot::Message&)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::IsChildPending() const
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleSentFrameToChild(ot::Mac::TxFrame const&, ot::IndirectSenderBase::FrameContext const&, otError, ot::Child&)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessages(ot::Child&, ot::Message::SubType)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::ApplyDirectTxQueueLimit(ot::Message&)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateSendMessage(otError, ot::Mac::Address&, ot::Neighbor*)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateEcnOrDrop(ot::Message&, bool)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::ClearAllMessagesForSleepyChild(ot::Child&)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::AddMessageForSleepyChild(ot::Message&, ot::Child&)
</UL>

<P><STRONG><a name="[3e3]"></a>ot::MeshForwarder::ResumeMessageTransmissions()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder26ResumeMessageTransmissionsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::ResumeMessageTransmissions() &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoverComplete()
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleTimer()
</UL>

<P><STRONG><a name="[3e1]"></a>ot::MeshForwarder::UpdateNeighborLinkFailures(ot::Neighbor&, otError, bool, unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder26UpdateNeighborLinkFailuresERNS_8NeighborE7otErrorbh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::UpdateNeighborLinkFailures(ot::Neighbor&, otError, bool, unsigned char) &rArr; ot::Mle::MleRouter::RemoveRouterLink(ot::Router&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveRouterLink(ot::Router&)
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateNeighborOnSentFrame(ot::Mac::TxFrame&, otError, ot::Mac::Address const&, bool)
</UL>

<P><STRONG><a name="[3dd]"></a>ot::MeshForwarder::PrepareNextDirectTransmission()</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder29PrepareNextDirectTransmissionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::PrepareNextDirectTransmission() &rArr; ot::MeshForwarder::UpdateIp6Route(ot::Message&) &rArr; ot::MeshForwarder::UpdateIp6RouteFtd(ot::Ip6::Header&, ot::Message&) &rArr; ot::AddressResolver::Resolve(ot::Ip6::Address const&, unsigned short&, bool) &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetNext() const
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::DequeueAndFree(ot::Message&)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::GetHead() const
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateMeshRoute(ot::Message&)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateEcnOrDrop(ot::Message&, bool)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateIp6Route(ot::Message&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::ScheduleTransmissionTask()
</UL>

<P><STRONG><a name="[321]"></a>ot::MeshForwarder::Stop()</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder4StopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::Stop() &rArr; ot::IndirectSender::Stop() &rArr; ot::SourceMatchController::ResetMessageCount(ot::Child&) &rArr; ot::SourceMatchController::ClearEntry(ot::Child&) &rArr; ot::SourceMatchController::AddPendingEntries() &rArr; ot::SourceMatchController::AddAddress(ot::Child const&) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::DequeueAndFreeAll()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::DequeueAndFreeAll()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetRxOnWhenIdle(bool)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::StopPolling()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::UnregisterReceiver(ot::TimeTicker::Receiver)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoverComplete()
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::Stop()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ThreadNetif::Down()
</UL>

<P><STRONG><a name="[315]"></a>ot::MeshForwarder::Start()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder5StartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::Start() &rArr; ot::Mac::Mac::SetRxOnWhenIdle(bool) &rArr; ot::Mac::Mac::UpdateIdleMode() &rArr; ot::Mac::SubMac::Receive(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetRxOnWhenIdle(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ThreadNetif::Up()
</UL>

<P><STRONG><a name="[3d3]"></a>ot::MeshForwarder::LogFrame(char const*, ot::Mac::Frame const&, otError)</STRONG> (Thumb, 92 bytes, Stack size 160 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarder8LogFrameEPKcRKNS_3Mac5FrameE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::LogFrame(char const*, ot::Mac::Frame const&, otError) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::ToInfoString() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleReceivedFrame(ot::Mac::RxFrame&)
</UL>

<P><STRONG><a name="[3ce]"></a>ot::MeshForwarder::SendMesh(ot::Message&, ot::Mac::TxFrame&)</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, mesh_forwarder_ftd.o(.text._ZN2ot13MeshForwarder8SendMeshERNS_7MessageERNS_3Mac7TxFrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::SendMesh(ot::Message&, ot::Mac::TxFrame&) &rArr; ot::MeshForwarder::PrepareMacHeaders(ot::Mac::TxFrame&, ot::Mac::Frame::Type, ot::Mac::Addresses const&, ot::Mac::PanIds const&, ot::Mac::Frame::SecurityLevel, ot::Mac::Frame::KeyIdMode, ot::Message const*) &rArr; ot::NeighborTable::FindNeighbor(ot::Mac::Address const&, ot::Neighbor::StateFilter) &rArr; ot::NeighborTable::FindNeighbor(ot::Neighbor::AddressMatcher const&) &rArr; ot::NeighborTable::FindChildOrRouter(ot::Neighbor::AddressMatcher const&) &rArr; ot::ChildTable::FindChild(ot::Neighbor::AddressMatcher const&) const &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ReadBytes(unsigned short, void*, unsigned short) const
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetPayload() const
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareMacHeaders(ot::Mac::TxFrame&, ot::Mac::Frame::Type, ot::Mac::Addresses const&, ot::Mac::PanIds const&, ot::Mac::Frame::SecurityLevel, ot::Mac::Frame::KeyIdMode, ot::Message const*)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetMaxPayloadLength() const
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetPayloadLength(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFrameRequest(ot::Mac::TxFrames&)
</UL>

<P><STRONG><a name="[3e8]"></a>ot::MeshForwarder::MeshForwarder(ot::Instance&)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarderC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::Manager::NonCryptoGetUint32()
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::DataPollSender(ot::Instance&)
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::IndirectSender(ot::Instance&)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bc3]"></a>ot::MeshForwarder::MeshForwarder__sub_object(ot::Instance&)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, mesh_forwarder.o(.text._ZN2ot13MeshForwarderC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[3eb]"></a>ot::NeighborTable::FindParent(ot::Mac::ExtAddress const&, ot::Neighbor::StateFilter)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, neighbor_table.o(.text._ZN2ot13NeighborTable10FindParentERKNS_3Mac10ExtAddressENS_8Neighbor11StateFilterE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindParent(ot::Neighbor::AddressMatcher const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[3ec]"></a>ot::NeighborTable::FindParent(ot::Neighbor::AddressMatcher const&)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, neighbor_table.o(.text._ZN2ot13NeighborTable10FindParentERKNS_8Neighbor14AddressMatcherE))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ot::NeighborTable::FindParent(ot::Neighbor::AddressMatcher const&) &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindParent(ot::Mac::ExtAddress const&, ot::Neighbor::StateFilter)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Neighbor::AddressMatcher const&)
</UL>

<P><STRONG><a name="[361]"></a>ot::NeighborTable::FindNeighbor(ot::Ip6::Address const&, ot::Neighbor::StateFilter)</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, neighbor_table.o(.text._ZN2ot13NeighborTable12FindNeighborERKNS_3Ip67AddressENS_8Neighbor11StateFilterE))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ot::NeighborTable::FindNeighbor(ot::Ip6::Address const&, ot::Neighbor::StateFilter) &rArr; ot::NeighborTable::FindNeighbor(ot::Neighbor::AddressMatcher const&) &rArr; ot::NeighborTable::FindChildOrRouter(ot::Neighbor::AddressMatcher const&) &rArr; ot::ChildTable::FindChild(ot::Neighbor::AddressMatcher const&) const &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsRoutingLocator(ot::Ip6::Address const&) const
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::HasIp6Address(ot::Ip6::Address const&) const
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::ConvertToMacAddress(ot::Mac::Address&) const
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsLinkLocal() const
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Neighbor::AddressMatcher const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMessage(ot::Message&)
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDataResponse(ot::Ip6::Address const&, ot::Mle::Mle::TlvList const&, unsigned short, ot::Message const*)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::CheckReachability(unsigned short, ot::Ip6::Header const&)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessages(ot::Child&, ot::Message::SubType)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateIp6RouteFtd(ot::Ip6::Header&, ot::Message&)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateRoutes(ot::FrameData const&, ot::Mac::Addresses const&)
</UL>

<P><STRONG><a name="[3ee]"></a>ot::NeighborTable::FindNeighbor(ot::Mac::ExtAddress const&, ot::Neighbor::StateFilter)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, neighbor_table.o(.text._ZN2ot13NeighborTable12FindNeighborERKNS_3Mac10ExtAddressENS_8Neighbor11StateFilterE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Neighbor::AddressMatcher const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[3c1]"></a>ot::NeighborTable::FindNeighbor(ot::Mac::Address const&, ot::Neighbor::StateFilter)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, neighbor_table.o(.text._ZN2ot13NeighborTable12FindNeighborERKNS_3Mac7AddressENS_8Neighbor11StateFilterE))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ot::NeighborTable::FindNeighbor(ot::Mac::Address const&, ot::Neighbor::StateFilter) &rArr; ot::NeighborTable::FindNeighbor(ot::Neighbor::AddressMatcher const&) &rArr; ot::NeighborTable::FindChildOrRouter(ot::Neighbor::AddressMatcher const&) &rArr; ot::ChildTable::FindChild(ot::Neighbor::AddressMatcher const&) const &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Neighbor::AddressMatcher const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::RecordFrameTransmitStatus(ot::Mac::TxFrame const&, ot::Mac::RxFrame*, otError, unsigned char, bool)
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessEnhAckSecurity(ot::Mac::TxFrame&, ot::Mac::RxFrame&)
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateNeighborOnSentFrame(ot::Mac::TxFrame&, otError, ot::Mac::Address const&, bool)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareMacHeaders(ot::Mac::TxFrame&, ot::Mac::Frame::Type, ot::Mac::Addresses const&, ot::Mac::PanIds const&, ot::Mac::Frame::SecurityLevel, ot::Mac::Frame::KeyIdMode, ot::Message const*)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::UpdateOnReceive(ot::Mac::Address const&, bool)
</UL>

<P><STRONG><a name="[3ed]"></a>ot::NeighborTable::FindNeighbor(ot::Neighbor::AddressMatcher const&)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, neighbor_table.o(.text._ZN2ot13NeighborTable12FindNeighborERKNS_8Neighbor14AddressMatcherE))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ot::NeighborTable::FindNeighbor(ot::Neighbor::AddressMatcher const&) &rArr; ot::NeighborTable::FindChildOrRouter(ot::Neighbor::AddressMatcher const&) &rArr; ot::ChildTable::FindChild(ot::Neighbor::AddressMatcher const&) const &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsRouterOrLeader() const
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindChildOrRouter(ot::Neighbor::AddressMatcher const&)
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindParent(ot::Neighbor::AddressMatcher const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Mac::Address const&, ot::Neighbor::StateFilter)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Mac::ExtAddress const&, ot::Neighbor::StateFilter)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(unsigned short, ot::Neighbor::StateFilter)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Ip6::Address const&, ot::Neighbor::StateFilter)
</UL>

<P><STRONG><a name="[390]"></a>ot::NeighborTable::FindNeighbor(unsigned short, ot::Neighbor::StateFilter)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, neighbor_table.o(.text._ZN2ot13NeighborTable12FindNeighborEtNS_8Neighbor11StateFilterE))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ot::NeighborTable::FindNeighbor(unsigned short, ot::Neighbor::StateFilter) &rArr; ot::NeighborTable::FindNeighbor(ot::Neighbor::AddressMatcher const&) &rArr; ot::NeighborTable::FindChildOrRouter(ot::Neighbor::AddressMatcher const&) &rArr; ot::ChildTable::FindChild(ot::Neighbor::AddressMatcher const&) const &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Neighbor::AddressMatcher const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::IsMinimalChild(unsigned short)
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessRouteTlv(ot::Mle::RouteTlv const&, ot::Mle::Mle::RxInfo&)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessages(ot::Child&, ot::Message::SubType)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateMeshRoute(ot::Message&)
</UL>

<P><STRONG><a name="[3ef]"></a>ot::NeighborTable::FindChildOrRouter(ot::Neighbor::AddressMatcher const&)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, neighbor_table.o(.text._ZN2ot13NeighborTable17FindChildOrRouterERKNS_8Neighbor14AddressMatcherE))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ot::NeighborTable::FindChildOrRouter(ot::Neighbor::AddressMatcher const&) &rArr; ot::ChildTable::FindChild(ot::Neighbor::AddressMatcher const&) const &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::FindChild(ot::Neighbor::AddressMatcher const&) const
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::FindRouter(ot::Neighbor::AddressMatcher const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Neighbor::AddressMatcher const&)
</UL>

<P><STRONG><a name="[3f2]"></a>ot::NeighborTable::GetNextNeighborInfo(short&, ot::Neighbor::Info&)</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, neighbor_table.o(.text._ZN2ot13NeighborTable19GetNextNeighborInfoERsRNS_8Neighbor4InfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ot::NeighborTable::GetNextNeighborInfo(short&, ot::Neighbor::Info&) &rArr; ot::Neighbor::Info::SetFrom(ot::Neighbor const&) &rArr; ot::LinkQualityInfo::GetLinkMargin() const
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::GetChildAtIndex(unsigned short)
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::FindRouterById(unsigned char) const
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::Info::SetFrom(ot::Neighbor const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetNextNeighborInfo
</UL>

<P><STRONG><a name="[3f5]"></a>ot::NeighborTable::FindRxOnlyNeighborRouter(ot::Mac::Address const&)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, neighbor_table.o(.text._ZN2ot13NeighborTable24FindRxOnlyNeighborRouterERKNS_3Mac7AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ot::NeighborTable::FindRxOnlyNeighborRouter(ot::Mac::Address const&) &rArr; ot::RouterTable::FindNeighbor(ot::Mac::Address const&) &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::FindNeighbor(ot::Mac::Address const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[216]"></a>ot::NeighborTable::Signal(ot::NeighborTable::Event, ot::Neighbor const&)</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, neighbor_table.o(.text._ZN2ot13NeighborTable6SignalENS0_5EventERKNS_8NeighborE))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = ot::NeighborTable::Signal(ot::NeighborTable::Event, ot::Neighbor const&) &rArr; ot::DuaManager::UpdateChildDomainUnicastAddress(ot::Child const&, ot::Mle::ChildDuaState) &rArr; ot::DuaManager::UpdateCheckDelay(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::UpdateChildDomainUnicastAddress(ot::Child const&, ot::Mle::ChildDuaState)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::Info::SetFrom(ot::Child const&)
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::Info::SetFrom(ot::Neighbor const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::SetDeviceMode(ot::Mle::DeviceMode)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Restore()
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetChildStateToValid(ot::Child&)
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::ClearNeighbors()
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::Mle::RxInfo&, unsigned short, ot::Mle::LeaderData const&)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::RemoveRouter(ot::Router&)
</UL>

<P><STRONG><a name="[793]"></a>ot::NeighborTable::NeighborTable(ot::Instance&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, neighbor_table.o(.text._ZN2ot13NeighborTableC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Mle(ot::Instance&)
</UL>

<P><STRONG><a name="[bc4]"></a>ot::NeighborTable::NeighborTable__sub_object(ot::Instance&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, neighbor_table.o(.text._ZN2ot13NeighborTableC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[378]"></a>ot::PriorityQueue::DequeueAndFree(ot::Message&)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, message.o(.text._ZN2ot13PriorityQueue14DequeueAndFreeERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ot::PriorityQueue::DequeueAndFree(ot::Message&) &rArr; ot::PriorityQueue::Dequeue(ot::Message&) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::Dequeue(ot::Message&)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::Free(ot::Message*)
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveDataResponseMessages()
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareNextDirectTransmission()
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessage(ot::Message&)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessageIfNoPendingTx(ot::Message&)
</UL>

<P><STRONG><a name="[3e6]"></a>ot::PriorityQueue::DequeueAndFreeAll()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, message.o(.text._ZN2ot13PriorityQueue17DequeueAndFreeAllEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ot::PriorityQueue::DequeueAndFreeAll() &rArr; ot::PriorityQueue::Dequeue(ot::Message&) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::Dequeue(ot::Message&)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::Free(ot::Message*)
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::Stop()
</UL>

<P><STRONG><a name="[389]"></a>ot::PriorityQueue::begin()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, message.o(.text._ZN2ot13PriorityQueue5beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::PriorityQueue::begin()
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetNext() const
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveDataResponseMessages()
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessages(ot::Child&, ot::Message::SubType)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::ClearAllMessagesForSleepyChild(ot::Child&)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleChildModeChange(ot::Child&, ot::Mle::DeviceMode)
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::FindIndirectMessage(ot::Child&, bool)
</UL>

<P><STRONG><a name="[3f6]"></a>ot::PriorityQueue::Dequeue(ot::Message&)</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, message.o(.text._ZN2ot13PriorityQueue7DequeueERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::PriorityQueue::Dequeue(ot::Message&) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetPriority(ot::Message::Priority)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::DequeueAndFreeAll()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::DequeueAndFree(ot::Message&)
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleSendQueue()
</UL>

<P><STRONG><a name="[360]"></a>ot::PriorityQueue::Enqueue(ot::Message&)</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, message.o(.text._ZN2ot13PriorityQueue7EnqueueERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::PriorityQueue::Enqueue(ot::Message&) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetPriority(ot::Message::Priority)
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char)
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::EnqueueDatagram(ot::Message&)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMessage(ot::Message&)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
</UL>

<P><STRONG><a name="[3f7]"></a>ot::BackboneRouter::Leader::UpdateDomainPrefixConfig()</STRONG> (Thumb, 174 bytes, Stack size 112 bytes, bbr_leader.o(.text._ZN2ot14BackboneRouter6Leader24UpdateDomainPrefixConfigEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = ot::BackboneRouter::Leader::UpdateDomainPrefixConfig() &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::GetNextOnMeshPrefix(unsigned int&, ot::NetworkData::OnMeshPrefixConfig&) const
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::operator==(ot::Ip6::Prefix const&) const
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::ToString() const
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::HandleDomainPrefixUpdate(ot::BackboneRouter::Leader::DomainPrefixState)
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::Update()
</UL>

<P><STRONG><a name="[3fb]"></a>ot::BackboneRouter::Leader::UpdateBackboneRouterPrimary()</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, bbr_leader.o(.text._ZN2ot14BackboneRouter6Leader27UpdateBackboneRouterPrimaryEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = ot::BackboneRouter::Leader::UpdateBackboneRouterPrimary() &rArr; ot::MlrManager::HandleBackboneRouterPrimaryUpdate(ot::BackboneRouter::Leader::State, otBackboneRouterConfig const&) &rArr; ot::MlrManager::UpdateReregistrationDelay(bool) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::LogBackboneRouterPrimary(ot::BackboneRouter::Leader::State, otBackboneRouterConfig const&) const
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Service::Manager::GetBackboneRouterPrimary(otBackboneRouterConfig&) const
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::HandleBackboneRouterPrimaryUpdate(ot::BackboneRouter::Leader::State, otBackboneRouterConfig const&)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::HandleBackboneRouterPrimaryUpdate(ot::BackboneRouter::Leader::State, otBackboneRouterConfig const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::Update()
</UL>

<P><STRONG><a name="[736]"></a>ot::BackboneRouter::Leader::Reset()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bbr_leader.o(.text._ZN2ot14BackboneRouter6Leader5ResetEv))
<BR><BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetStateDetached()
</UL>

<P><STRONG><a name="[3fe]"></a>ot::BackboneRouter::Leader::Update()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bbr_leader.o(.text._ZN2ot14BackboneRouter6Leader6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = ot::BackboneRouter::Leader::Update() &rArr; ot::BackboneRouter::Leader::UpdateDomainPrefixConfig() &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::UpdateBackboneRouterPrimary()
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::UpdateDomainPrefixConfig()
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleNotifierEvents(ot::Events)
</UL>

<P><STRONG><a name="[92f]"></a>ot::BackboneRouter::Leader::Leader(ot::Instance&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bbr_leader.o(.text._ZN2ot14BackboneRouter6LeaderC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bc5]"></a>ot::BackboneRouter::Leader::Leader__sub_object(ot::Instance&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bbr_leader.o(.text._ZN2ot14BackboneRouter6LeaderC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[3ff]"></a>ot::CslTxScheduler::HandleSentFrame(ot::Mac::TxFrame const&, otError)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, csl_tx_scheduler.o(.text._ZN2ot14CslTxScheduler15HandleSentFrameERKNS_3Mac7TxFrameE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = ot::CslTxScheduler::HandleSentFrame(ot::Mac::TxFrame const&, otError) &rArr; ot::CslTxScheduler::HandleSentFrame(ot::Mac::TxFrame const&, otError, ot::Child&) &rArr; ot::IndirectSender::HandleSentFrameToChild(ot::Mac::TxFrame const&, ot::IndirectSenderBase::FrameContext const&, otError, ot::Child&) &rArr; ot::IndirectSender::ClearMessagesForRemovedChildren() &rArr; ot::IndirectSender::ClearAllMessagesForSleepyChild(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::RescheduleCslTx()
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::HandleSentFrame(ot::Mac::TxFrame const&, otError, ot::Child&)
</UL>
<BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[400]"></a>ot::CslTxScheduler::HandleSentFrame(ot::Mac::TxFrame const&, otError, ot::Child&)</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, csl_tx_scheduler.o(.text._ZN2ot14CslTxScheduler15HandleSentFrameERKNS_3Mac7TxFrameE7otErrorRNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = ot::CslTxScheduler::HandleSentFrame(ot::Mac::TxFrame const&, otError, ot::Child&) &rArr; ot::IndirectSender::HandleSentFrameToChild(ot::Mac::TxFrame const&, ot::IndirectSenderBase::FrameContext const&, otError, ot::Child&) &rArr; ot::IndirectSender::ClearMessagesForRemovedChildren() &rArr; ot::IndirectSender::ClearAllMessagesForSleepyChild(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetKeyId(unsigned char&) const
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetFrameCounter(unsigned int&) const
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleSentFrameToChild(ot::Mac::TxFrame const&, ot::IndirectSenderBase::FrameContext const&, otError, ot::Child&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::HandleSentFrame(ot::Mac::TxFrame const&, otError)
</UL>

<P><STRONG><a name="[401]"></a>ot::CslTxScheduler::RescheduleCslTx()</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, csl_tx_scheduler.o(.text._ZN2ot14CslTxScheduler15RescheduleCslTxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ot::CslTxScheduler::RescheduleCslTx() &rArr; ot::Mac::Mac::RequestCslFrameTransmission(unsigned int) &rArr; ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::RequestCslFrameTransmission(unsigned int)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::GetNextCslTransmissionDelay(ot::Child const&, unsigned int&, unsigned int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::Update()
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::HandleSentFrame(ot::Mac::TxFrame const&, otError)
</UL>

<P><STRONG><a name="[407]"></a>ot::CslTxScheduler::HandleFrameRequest(ot::Mac::TxFrames&)</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, csl_tx_scheduler.o(.text._ZN2ot14CslTxScheduler18HandleFrameRequestERNS_3Mac8TxFramesE))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = ot::CslTxScheduler::HandleFrameRequest(ot::Mac::TxFrames&) &rArr; ot::IndirectSender::PrepareFrameForChild(ot::Mac::TxFrame&, ot::IndirectSenderBase::FrameContext&, ot::Child&) &rArr; ot::IndirectSender::PrepareDataFrame(ot::Mac::TxFrame&, ot::Child&, ot::Message&) &rArr; ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool) &rArr; ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&) &rArr; ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&) &rArr;  ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetKeyId(unsigned char)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetFrameCounter(unsigned int)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::PrepareFrameForChild(ot::Mac::TxFrame&, ot::IndirectSenderBase::FrameContext&, ot::Child&)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::GetNextCslTransmissionDelay(ot::Child const&, unsigned int&, unsigned int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::BeginTransmit()
</UL>

<P><STRONG><a name="[40b]"></a>ot::CslTxScheduler::Clear()</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, csl_tx_scheduler.o(.text._ZN2ot14CslTxScheduler5ClearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ot::CslTxScheduler::Clear() &rArr; ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter) &rArr; ot::ChildTable::Iterator::Reset() &rArr; ot::ChildTable::Iterator::Advance()
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::Stop()
</UL>

<P><STRONG><a name="[40c]"></a>ot::CslTxScheduler::Update()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, csl_tx_scheduler.o(.text._ZN2ot14CslTxScheduler6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ot::CslTxScheduler::Update() &rArr; ot::CslTxScheduler::RescheduleCslTx() &rArr; ot::Mac::Mac::RequestCslFrameTransmission(unsigned int) &rArr; ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::RescheduleCslTx()
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessCsl(ot::Mac::RxFrame const&, ot::Mac::Address const&)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleSentFrameToChild(ot::Mac::TxFrame const&, ot::IndirectSenderBase::FrameContext const&, otError, ot::Child&)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::ClearAllMessagesForSleepyChild(ot::Child&)
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::UpdateIndirectMessage(ot::Child&)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleChildModeChange(ot::Child&, ot::Mle::DeviceMode)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::RequestMessageUpdate(ot::Child&)
</UL>

<P><STRONG><a name="[40d]"></a>ot::CslTxScheduler::CslTxScheduler(ot::Instance&)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, csl_tx_scheduler.o(.text._ZN2ot14CslTxSchedulerC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetBusSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::IndirectSender(ot::Instance&)
</UL>

<P><STRONG><a name="[bc6]"></a>ot::CslTxScheduler::CslTxScheduler__sub_object(ot::Instance&)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, csl_tx_scheduler.o(.text._ZN2ot14CslTxSchedulerC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[3a2]"></a>ot::DataPollSender::StopPolling()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, data_poll_sender.o(.text._ZN2ot14DataPollSender11StopPollingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ot::DataPollSender::StopPolling() &rArr; ot::TimerMilli::Stop() &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SetRxOnWhenIdle(bool)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::Stop()
</UL>

<P><STRONG><a name="[336]"></a>ot::DataPollSender::SendDataPoll()</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, data_poll_sender.o(.text._ZN2ot14DataPollSender12SendDataPollEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ot::DataPollSender::SendDataPoll() &rArr; ot::Mac::Mac::RequestDataPollTransmission() &rArr; ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::RequestDataPollTransmission()
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::ScheduleNextPoll(ot::DataPollSender::PollPeriodSelector)
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkSendDataRequest
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::HandlePollTimeout()
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::ProcessRxFrame(ot::Mac::RxFrame const&)
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::ProcessTxDone(ot::Mac::TxFrame const&, ot::Mac::RxFrame const*, otError)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilliIn&lang;ot::DataPollSender, &(ot::DataPollSender::HandlePollTimer())&rang;::HandleTimer(ot::Timer&)
</UL>

<P><STRONG><a name="[3a4]"></a>ot::DataPollSender::StartPolling()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, data_poll_sender.o(.text._ZN2ot14DataPollSender12StartPollingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::DataPollSender::StartPolling() &rArr; ot::DataPollSender::ScheduleNextPoll(ot::DataPollSender::PollPeriodSelector) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::ScheduleNextPoll(ot::DataPollSender::PollPeriodSelector)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SetRxOnWhenIdle(bool)
</UL>

<P><STRONG><a name="[411]"></a>ot::DataPollSender::ProcessTxDone(ot::Mac::TxFrame const&, ot::Mac::RxFrame const*, otError)</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, data_poll_sender.o(.text._ZN2ot14DataPollSender13ProcessTxDoneERKNS_3Mac7TxFrameEPKNS1_7RxFrameE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ot::DataPollSender::ProcessTxDone(ot::Mac::TxFrame const&, ot::Mac::RxFrame const*, otError) &rArr; ot::DataPollSender::SendDataPoll() &rArr; ot::Mac::Mac::RequestDataPollTransmission() &rArr; ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::SendDataPoll()
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::ResetKeepAliveTimer()
</UL>
<BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[23c]"></a>ot::DataPollSender::SendFastPolls(unsigned char)</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, data_poll_sender.o(.text._ZN2ot14DataPollSender13SendFastPollsEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::DataPollSender::SendFastPolls(unsigned char) &rArr; ot::DataPollSender::ScheduleNextPoll(ot::DataPollSender::PollPeriodSelector) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::ScheduleNextPoll(ot::DataPollSender::PollPeriodSelector)
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::PerformNextRegistration()
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendDelayedResponse(ot::Mle::Mle::TxMessage&, ot::Mle::Mle::DelayedResponseMetadata const&)
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendDataRequest(ot::Ip6::Address const&, unsigned char const*, unsigned char, unsigned short)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistration()
</UL>

<P><STRONG><a name="[413]"></a>ot::DataPollSender::SetAttachMode(bool)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, data_poll_sender.o(.text._ZN2ot14DataPollSender13SetAttachModeEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::DataPollSender::SetAttachMode(bool) &rArr; ot::DataPollSender::ScheduleNextPoll(ot::DataPollSender::PollPeriodSelector) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::ScheduleNextPoll(ot::DataPollSender::PollPeriodSelector)
</UL>
<BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Reattach()
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildIdResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildIdRequest()
</UL>

<P><STRONG><a name="[414]"></a>ot::DataPollSender::StopFastPolls()</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, data_poll_sender.o(.text._ZN2ot14DataPollSender13StopFastPollsEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::ScheduleNextPoll(ot::DataPollSender::PollPeriodSelector)
</UL>
<BR>[Called By]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleDataResponse(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[415]"></a>ot::DataPollSender::HandlePollSent(ot::Mac::TxFrame&, otError)</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, data_poll_sender.o(.text._ZN2ot14DataPollSender14HandlePollSentERNS_3Mac7TxFrameE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776 + Unknown Stack Size
<LI>Call Chain = ot::DataPollSender::HandlePollSent(ot::Mac::TxFrame&, otError) &rArr; ot::MeshForwarder::UpdateNeighborOnSentFrame(ot::Mac::TxFrame&, otError, ot::Mac::Address const&, bool) &rArr; ot::MeshForwarder::UpdateNeighborLinkFailures(ot::Neighbor&, otError, bool, unsigned char) &rArr; ot::Mle::MleRouter::RemoveRouterLink(ot::Router&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::BecomeDetached()
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetDstAddr(ot::Mac::Address&) const
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::ScheduleNextPoll(ot::DataPollSender::PollPeriodSelector)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateNeighborOnSentFrame(ot::Mac::TxFrame&, otError, ot::Mac::Address const&, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[416]"></a>ot::DataPollSender::ProcessRxFrame(ot::Mac::RxFrame const&)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, data_poll_sender.o(.text._ZN2ot14DataPollSender14ProcessRxFrameERKNS_3Mac7RxFrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ot::DataPollSender::ProcessRxFrame(ot::Mac::RxFrame const&) &rArr; ot::DataPollSender::SendDataPoll() &rArr; ot::Mac::Mac::RequestDataPollTransmission() &rArr; ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::SendDataPoll()
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[410]"></a>ot::DataPollSender::ScheduleNextPoll(ot::DataPollSender::PollPeriodSelector)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, data_poll_sender.o(.text._ZN2ot14DataPollSender16ScheduleNextPollENS0_18PollPeriodSelectorE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::DataPollSender::ScheduleNextPoll(ot::DataPollSender::PollPeriodSelector) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::CalculatePollPeriod() const
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::StartAt(ot::Time, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::SetExternalPollPeriod(unsigned int)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::SendDataPoll()
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::RecalculatePollPeriod()
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::HandlePollSent(ot::Mac::TxFrame&, otError)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::StopFastPolls()
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::SetAttachMode(bool)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::SendFastPolls(unsigned char)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::StartPolling()
</UL>

<P><STRONG><a name="[418]"></a>ot::DataPollSender::HandlePollTimeout()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, data_poll_sender.o(.text._ZN2ot14DataPollSender17HandlePollTimeoutEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ot::DataPollSender::HandlePollTimeout() &rArr; ot::DataPollSender::SendDataPoll() &rArr; ot::Mac::Mac::RequestDataPollTransmission() &rArr; ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::SendDataPoll()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleTimer()
</UL>

<P><STRONG><a name="[419]"></a>ot::DataPollSender::PrepareDataRequest(ot::Mac::TxFrames&)</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, data_poll_sender.o(.text._ZN2ot14DataPollSender18PrepareDataRequestERNS_3Mac8TxFramesE))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = ot::DataPollSender::PrepareDataRequest(ot::Mac::TxFrames&) &rArr; ot::MeshForwarder::PrepareMacHeaders(ot::Mac::TxFrame&, ot::Mac::Frame::Type, ot::Mac::Addresses const&, ot::Mac::PanIds const&, ot::Mac::Frame::SecurityLevel, ot::Mac::Frame::KeyIdMode, ot::Message const*) &rArr; ot::NeighborTable::FindNeighbor(ot::Mac::Address const&, ot::Neighbor::StateFilter) &rArr; ot::NeighborTable::FindNeighbor(ot::Neighbor::AddressMatcher const&) &rArr; ot::NeighborTable::FindChildOrRouter(ot::Neighbor::AddressMatcher const&) &rArr; ot::ChildTable::FindChild(ot::Neighbor::AddressMatcher const&) const &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetCommandId(unsigned char)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareMacHeaders(ot::Mac::TxFrame&, ot::Mac::Frame::Type, ot::Mac::Addresses const&, ot::Mac::PanIds const&, ot::Mac::Frame::SecurityLevel, ot::Mac::Frame::KeyIdMode, ot::Message const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::BeginTransmit()
</UL>

<P><STRONG><a name="[412]"></a>ot::DataPollSender::ResetKeepAliveTimer()</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, data_poll_sender.o(.text._ZN2ot14DataPollSender19ResetKeepAliveTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::DataPollSender::ResetKeepAliveTimer() &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::StartAt(ot::Time, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::ProcessTxDone(ot::Mac::TxFrame const&, ot::Mac::RxFrame const*, otError)
</UL>

<P><STRONG><a name="[41b]"></a>ot::DataPollSender::RecalculatePollPeriod()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, data_poll_sender.o(.text._ZN2ot14DataPollSender21RecalculatePollPeriodEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::DataPollSender::RecalculatePollPeriod() &rArr; ot::DataPollSender::ScheduleNextPoll(ot::DataPollSender::PollPeriodSelector) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::ScheduleNextPoll(ot::DataPollSender::PollPeriodSelector)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetTimeout(unsigned int)
</UL>

<P><STRONG><a name="[41c]"></a>ot::DataPollSender::SetExternalPollPeriod(unsigned int)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, data_poll_sender.o(.text._ZN2ot14DataPollSender21SetExternalPollPeriodEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::DataPollSender::SetExternalPollPeriod(unsigned int) &rArr; ot::DataPollSender::ScheduleNextPoll(ot::DataPollSender::PollPeriodSelector) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::ScheduleNextPoll(ot::DataPollSender::PollPeriodSelector)
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkSetPollPeriod
</UL>

<P><STRONG><a name="[3ea]"></a>ot::DataPollSender::DataPollSender(ot::Instance&)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, data_poll_sender.o(.text._ZN2ot14DataPollSenderC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::MeshForwarder(ot::Instance&)
</UL>

<P><STRONG><a name="[bc7]"></a>ot::DataPollSender::DataPollSender__sub_object(ot::Instance&)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, data_poll_sender.o(.text._ZN2ot14DataPollSenderC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[41d]"></a>ot::IndirectSender::PrepareDataFrame(ot::Mac::TxFrame&, ot::Child&, ot::Message&)</STRONG> (Thumb, 216 bytes, Stack size 112 bytes, indirect_sender.o(.text._ZN2ot14IndirectSender16PrepareDataFrameERNS_3Mac7TxFrameERNS_5ChildERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = ot::IndirectSender::PrepareDataFrame(ot::Mac::TxFrame&, ot::Child&, ot::Message&) &rArr; ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool) &rArr; ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&) &rArr; ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&) &rArr;  ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetOffset(unsigned short)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetFramePending(bool)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsLinkLocal() const
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::GetMacDestinationAddress(ot::Ip6::Address const&, ot::Mac::Address&)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::GetMacSourceAddress(ot::Ip6::Address const&, ot::Mac::Address&)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::PrepareFrameForChild(ot::Mac::TxFrame&, ot::IndirectSenderBase::FrameContext&, ot::Child&)
</UL>

<P><STRONG><a name="[41e]"></a>ot::IndirectSender::PrepareEmptyFrame(ot::Mac::TxFrame&, ot::Child&, bool)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, indirect_sender.o(.text._ZN2ot14IndirectSender17PrepareEmptyFrameERNS_3Mac7TxFrameERNS_5ChildEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = ot::IndirectSender::PrepareEmptyFrame(ot::Mac::TxFrame&, ot::Child&, bool) &rArr; ot::MeshForwarder::PrepareEmptyFrame(ot::Mac::TxFrame&, ot::Mac::Address const&, bool) &rArr; ot::MeshForwarder::PrepareMacHeaders(ot::Mac::TxFrame&, ot::Mac::Frame::Type, ot::Mac::Addresses const&, ot::Mac::PanIds const&, ot::Mac::Frame::SecurityLevel, ot::Mac::Frame::KeyIdMode, ot::Message const*) &rArr; ot::NeighborTable::FindNeighbor(ot::Mac::Address const&, ot::Neighbor::StateFilter) &rArr; ot::NeighborTable::FindNeighbor(ot::Neighbor::AddressMatcher const&) &rArr; ot::NeighborTable::FindChildOrRouter(ot::Neighbor::AddressMatcher const&) &rArr; ot::ChildTable::FindChild(ot::Neighbor::AddressMatcher const&) const &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareEmptyFrame(ot::Mac::TxFrame&, ot::Mac::Address const&, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::PrepareFrameForChild(ot::Mac::TxFrame&, ot::IndirectSenderBase::FrameContext&, ot::Child&)
</UL>

<P><STRONG><a name="[41f]"></a>ot::IndirectSender::FindIndirectMessage(ot::Child&, bool)</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, indirect_sender.o(.text._ZN2ot14IndirectSender19FindIndirectMessageERNS_5ChildEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ot::IndirectSender::FindIndirectMessage(ot::Child&, bool) &rArr; ot::Message::GetChildMask(unsigned short) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::begin()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Iterator::Advance()
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetChildMask(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::AddMessageForSleepyChild(ot::Message&, ot::Child&)
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::UpdateIndirectMessage(ot::Child&)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::RequestMessageUpdate(ot::Child&)
</UL>

<P><STRONG><a name="[408]"></a>ot::IndirectSender::PrepareFrameForChild(ot::Mac::TxFrame&, ot::IndirectSenderBase::FrameContext&, ot::Child&)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, indirect_sender.o(.text._ZN2ot14IndirectSender20PrepareFrameForChildERNS_3Mac7TxFrameERNS_18IndirectSenderBase12FrameContextERNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = ot::IndirectSender::PrepareFrameForChild(ot::Mac::TxFrame&, ot::IndirectSenderBase::FrameContext&, ot::Child&) &rArr; ot::IndirectSender::PrepareDataFrame(ot::Mac::TxFrame&, ot::Child&, ot::Message&) &rArr; ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool) &rArr; ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&) &rArr; ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&) &rArr;  ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::PrepareEmptyFrame(ot::Mac::TxFrame&, ot::Child&, bool)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::PrepareDataFrame(ot::Mac::TxFrame&, ot::Child&, ot::Message&)
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::HandleFrameRequest(ot::Mac::TxFrames&)
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::HandleFrameRequest(ot::Mac::TxFrames&)
</UL>

<P><STRONG><a name="[421]"></a>ot::IndirectSender::RequestMessageUpdate(ot::Child&)</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, indirect_sender.o(.text._ZN2ot14IndirectSender20RequestMessageUpdateERNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::Update()
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&)
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetChildMask(unsigned short) const
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::UpdateIndirectMessage(ot::Child&)
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::FindIndirectMessage(ot::Child&, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::AddMessageForSleepyChild(ot::Message&, ot::Child&)
</UL>

<P><STRONG><a name="[424]"></a>ot::IndirectSender::HandleChildModeChange(ot::Child&, ot::Mle::DeviceMode)</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, indirect_sender.o(.text._ZN2ot14IndirectSender21HandleChildModeChangeERNS_5ChildENS_3Mle10DeviceModeE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::begin()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Iterator::Advance()
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::Update()
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::SetSrcMatchAsShort(ot::Child&, bool)
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&)
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetChildMask(unsigned short) const
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ClearChildMask(unsigned short)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::ResetMessageCount(ot::Child&)
</UL>
<BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[428]"></a>ot::IndirectSender::HandleFrameChangeDone(ot::Child&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, indirect_sender.o(.text._ZN2ot14IndirectSender21HandleFrameChangeDoneERNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::UpdateIndirectMessage(ot::Child&)
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::HandleSentFrame(ot::Mac::TxFrame const&, otError, ot::Child&)
</UL>

<P><STRONG><a name="[423]"></a>ot::IndirectSender::UpdateIndirectMessage(ot::Child&)</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, indirect_sender.o(.text._ZN2ot14IndirectSender21UpdateIndirectMessageERNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::Update()
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::HandleNewFrame(ot::Child&)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*)
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::FindIndirectMessage(ot::Child&, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleSentFrameToChild(ot::Mac::TxFrame const&, ot::IndirectSenderBase::FrameContext const&, otError, ot::Child&)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleFrameChangeDone(ot::Child&)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::RequestMessageUpdate(ot::Child&)
</UL>

<P><STRONG><a name="[402]"></a>ot::IndirectSender::HandleSentFrameToChild(ot::Mac::TxFrame const&, ot::IndirectSenderBase::FrameContext const&, otError, ot::Child&)</STRONG> (Thumb, 382 bytes, Stack size 56 bytes, indirect_sender.o(.text._ZN2ot14IndirectSender22HandleSentFrameToChildERKNS_3Mac7TxFrameERKNS_18IndirectSenderBase12FrameContextE7otErrorRNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = ot::IndirectSender::HandleSentFrameToChild(ot::Mac::TxFrame const&, ot::IndirectSenderBase::FrameContext const&, otError, ot::Child&) &rArr; ot::IndirectSender::ClearMessagesForRemovedChildren() &rArr; ot::IndirectSender::ClearAllMessagesForSleepyChild(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SuccessRateTracker::AddSample(bool, unsigned short)
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::Update()
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetDstAddr(ot::Mac::Address&) const
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::SetSrcMatchAsShort(ot::Child&, bool)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::HandleNewFrame(ot::Child&)
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetChildMask(unsigned short) const
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ClearChildMask(unsigned short)
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildSupervisor::UpdateOnSend(ot::Child&)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*)
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::DecrementMessageCount(ot::Child&)
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::ClearMessagesForRemovedChildren()
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::UpdateIndirectMessage(ot::Child&)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessageIfNoPendingTx(ot::Message&)
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::HandleSentFrame(ot::Mac::TxFrame const&, otError, ot::Child&)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::HandleSentFrame(ot::Mac::TxFrame const&, otError, ot::Child&)
</UL>

<P><STRONG><a name="[215]"></a>ot::IndirectSender::SetChildUseShortAddress(ot::Child&, bool)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, indirect_sender.o(.text._ZN2ot14IndirectSender23SetChildUseShortAddressERNS_5ChildEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ot::IndirectSender::SetChildUseShortAddress(ot::Child&, bool) &rArr; ot::SourceMatchController::SetSrcMatchAsShort(ot::Child&, bool) &rArr; ot::SourceMatchController::ClearEntry(ot::Child&) &rArr; ot::SourceMatchController::AddPendingEntries() &rArr; ot::SourceMatchController::AddAddress(ot::Child const&) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::SetSrcMatchAsShort(ot::Child&, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Restore()
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildIdResponse(ot::Child&)
</UL>

<P><STRONG><a name="[363]"></a>ot::IndirectSender::AddMessageForSleepyChild(ot::Message&, ot::Child&)</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, indirect_sender.o(.text._ZN2ot14IndirectSender24AddMessageForSleepyChildERNS_7MessageERNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ot::IndirectSender::AddMessageForSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetChildMask(unsigned short) const
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetChildMask(unsigned short)
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::IncrementMessageCount(ot::Child&)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::RequestMessageUpdate(ot::Child&)
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::FindIndirectMessage(ot::Child&, bool)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessageIfNoPendingTx(ot::Message&)
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMessage(ot::Message&)
</UL>

<P><STRONG><a name="[377]"></a>ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, indirect_sender.o(.text._ZN2ot14IndirectSender28RemoveMessageFromSleepyChildERNS_7MessageERNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetChildMask(unsigned short) const
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ClearChildMask(unsigned short)
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::DecrementMessageCount(ot::Child&)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::RequestMessageUpdate(ot::Child&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveDataResponseMessages()
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessages(ot::Child&, ot::Message::SubType)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessage(ot::Message&)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::AddMessageForSleepyChild(ot::Message&, ot::Child&)
</UL>

<P><STRONG><a name="[42f]"></a>ot::IndirectSender::ClearAllMessagesForSleepyChild(ot::Child&)</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, indirect_sender.o(.text._ZN2ot14IndirectSender30ClearAllMessagesForSleepyChildERNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = ot::IndirectSender::ClearAllMessagesForSleepyChild(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::begin()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Iterator::Advance()
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::Update()
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&)
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ClearChildMask(unsigned short)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::ResetMessageCount(ot::Child&)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessageIfNoPendingTx(ot::Message&)
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&)
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::ClearMessagesForRemovedChildren()
</UL>

<P><STRONG><a name="[42c]"></a>ot::IndirectSender::ClearMessagesForRemovedChildren()</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, indirect_sender.o(.text._ZN2ot14IndirectSender31ClearMessagesForRemovedChildrenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ot::IndirectSender::ClearMessagesForRemovedChildren() &rArr; ot::IndirectSender::ClearAllMessagesForSleepyChild(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::ClearAllMessagesForSleepyChild(ot::Child&)
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleSentFrameToChild(ot::Mac::TxFrame const&, ot::IndirectSenderBase::FrameContext const&, otError, ot::Child&)
</UL>

<P><STRONG><a name="[3e7]"></a>ot::IndirectSender::Stop()</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, indirect_sender.o(.text._ZN2ot14IndirectSender4StopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = ot::IndirectSender::Stop() &rArr; ot::SourceMatchController::ResetMessageCount(ot::Child&) &rArr; ot::SourceMatchController::ClearEntry(ot::Child&) &rArr; ot::SourceMatchController::AddPendingEntries() &rArr; ot::SourceMatchController::AddAddress(ot::Child const&) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::Clear()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::Clear()
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::ResetMessageCount(ot::Child&)
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::Stop()
</UL>

<P><STRONG><a name="[3e9]"></a>ot::IndirectSender::IndirectSender(ot::Instance&)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, indirect_sender.o(.text._ZN2ot14IndirectSenderC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::DataPollHandler(ot::Instance&)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::CslTxScheduler(ot::Instance&)
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::SourceMatchController(ot::Instance&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::MeshForwarder(ot::Instance&)
</UL>

<P><STRONG><a name="[bc8]"></a>ot::IndirectSender::IndirectSender__sub_object(ot::Instance&)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, indirect_sender.o(.text._ZN2ot14IndirectSenderC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[910]"></a>ot::SecurityPolicy::SetToDefault()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, key_manager.o(.text._ZN2ot14SecurityPolicy12SetToDefaultEv))
<BR><BR>[Called By]<UL><LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Info::GenerateRandom(ot::Instance&)
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy() const
</UL>

<P><STRONG><a name="[433]"></a>ot::SecurityPolicy::SetFlags(unsigned char const*, unsigned char)</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, key_manager.o(.text._ZN2ot14SecurityPolicy8SetFlagsEPKhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::SecurityPolicy::SetFlags(unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy() const
</UL>

<P><STRONG><a name="[3d4]"></a>ot::ThreadLinkInfo::SetFrom(ot::Mac::RxFrame const&)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, mesh_forwarder.o(.text._ZN2ot14ThreadLinkInfo7SetFromERKNS_3Mac7RxFrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ot::ThreadLinkInfo::SetFrom(ot::Mac::RxFrame const&) &rArr; ot::Mac::Frame::GetSrcPanId(unsigned short&) const &rArr; ot::Mac::Frame::FindSrcPanIdIndex() const
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetSrcPanId(unsigned short&) const
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetDstPanId(unsigned short&) const
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleReceivedFrame(ot::Mac::RxFrame&)
</UL>

<P><STRONG><a name="[436]"></a>ot::AddressResolver::NewCacheEntry(bool)</STRONG> (Thumb, 234 bytes, Stack size 64 bytes, address_resolver.o(.text._ZN2ot15AddressResolver13NewCacheEntryEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = ot::AddressResolver::NewCacheEntry(bool) &rArr; ot::AddressResolver::RemoveCacheEntry(ot::AddressResolver::CacheEntry&, ot::AddressResolver::CacheEntryList&, ot::AddressResolver::CacheEntry*, ot::AddressResolver::Reason) &rArr; ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::RemoveCacheEntry(ot::AddressResolver::CacheEntry&, ot::AddressResolver::CacheEntryList&, ot::AddressResolver::CacheEntry*, ot::AddressResolver::Reason)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::Resolve(ot::Ip6::Address const&, unsigned short&, bool)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::UpdateSnoopedCacheEntry(ot::Ip6::Address const&, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[438]"></a>ot::AddressResolver::FindCacheEntry(ot::Ip6::Address const&, ot::AddressResolver::CacheEntryList*&, ot::AddressResolver::CacheEntry*&)</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, address_resolver.o(.text._ZN2ot15AddressResolver14FindCacheEntryERKNS_3Ip67AddressERPNS0_14CacheEntryListERPNS0_10CacheEntryE))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ot::AddressResolver::FindCacheEntry(ot::Ip6::Address const&, ot::AddressResolver::CacheEntryList*&, ot::AddressResolver::CacheEntry*&) &rArr; ot::AddressResolver::CacheEntry const* ot::LinkedList&lang;ot::AddressResolver::CacheEntry&rang;::FindMatching&lang;ot::Ip6::Address&rang;(ot::AddressResolver::CacheEntry const*, ot::AddressResolver::CacheEntry const*, ot::Ip6::Address const&, ot::AddressResolver::CacheEntry const*&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::CacheEntry const* ot::LinkedList&lang;ot::AddressResolver::CacheEntry&rang;::FindMatching&lang;ot::Ip6::Address&rang;(ot::AddressResolver::CacheEntry const*, ot::AddressResolver::CacheEntry const*, ot::Ip6::Address const&, ot::AddressResolver::CacheEntry const*&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)1&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::Resolve(ot::Ip6::Address const&, unsigned short&, bool)
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::Remove(ot::Ip6::Address const&, ot::AddressResolver::Reason)
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::UpdateCacheEntry(ot::Ip6::Address const&, unsigned short)
</UL>

<P><STRONG><a name="[291]"></a>ot::AddressResolver::HandleTimeTick()</STRONG> (Thumb, 340 bytes, Stack size 96 bytes, address_resolver.o(.text._ZN2ot15AddressResolver14HandleTimeTickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = ot::AddressResolver::HandleTimeTick() &rArr; ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::UnregisterReceiver(ot::TimeTicker::Receiver)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString() const
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError)
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)1&rang;()
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::LinkedList&lang;ot::AddressResolver::CacheEntry&rang;::PopAfter(ot::AddressResolver::CacheEntry*)
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::HandleTimer()
</UL>

<P><STRONG><a name="[437]"></a>ot::AddressResolver::RemoveCacheEntry(ot::AddressResolver::CacheEntry&, ot::AddressResolver::CacheEntryList&, ot::AddressResolver::CacheEntry*, ot::AddressResolver::Reason)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, address_resolver.o(.text._ZN2ot15AddressResolver16RemoveCacheEntryERNS0_10CacheEntryERNS0_14CacheEntryListEPS1_NS0_6ReasonE))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = ot::AddressResolver::RemoveCacheEntry(ot::AddressResolver::CacheEntry&, ot::AddressResolver::CacheEntryList&, ot::AddressResolver::CacheEntry*, ot::AddressResolver::Reason) &rArr; ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::LogCacheEntryChange(ot::AddressResolver::EntryChange, ot::AddressResolver::Reason, ot::AddressResolver::CacheEntry const&, ot::AddressResolver::CacheEntryList*)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::LinkedList&lang;ot::AddressResolver::CacheEntry&rang;::PopAfter(ot::AddressResolver::CacheEntry*)
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::Remove(unsigned short, bool)
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::Remove(ot::Ip6::Address const&, ot::AddressResolver::Reason)
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::NewCacheEntry(bool)
</UL>

<P><STRONG><a name="[43d]"></a>ot::AddressResolver::SendAddressError(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, ot::Ip6::Address const*)</STRONG> (Thumb, 244 bytes, Stack size 120 bytes, address_resolver.o(.text._ZN2ot15AddressResolver16SendAddressErrorERKNS_3Ip67AddressERKNS1_19InterfaceIdentifierEPS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = ot::AddressResolver::SendAddressError(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, ot::Ip6::Address const*) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::AppendUriPathOptions(char const*)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::SetPayloadMarker()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewMessage()
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PathForUri(ot::Uri)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo(ot::Ip6::Address const&)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString() const
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToRealmLocalAllRoutersMulticast()
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)0&rang;()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)1&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)0&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[445]"></a>ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&)</STRONG> (Thumb, 164 bytes, Stack size 112 bytes, address_resolver.o(.text._ZN2ot15AddressResolver16SendAddressQueryERKNS_3Ip67AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::RegisterReceiver(ot::TimeTicker::Receiver)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString() const
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToRealmLocalAllRoutersMulticast()
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)2&rang;()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::Resolve(ot::Ip6::Address const&, unsigned short&, bool)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::RestartAddressQueries()
</UL>

<P><STRONG><a name="[448]"></a>ot::AddressResolver::UpdateCacheEntry(ot::Ip6::Address const&, unsigned short)</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, address_resolver.o(.text._ZN2ot15AddressResolver16UpdateCacheEntryERKNS_3Ip67AddressEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ot::AddressResolver::UpdateCacheEntry(ot::Ip6::Address const&, unsigned short) &rArr; ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::LogCacheEntryChange(ot::AddressResolver::EntryChange, ot::AddressResolver::Reason, ot::AddressResolver::CacheEntry const&, ot::AddressResolver::CacheEntryList*)
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::FindCacheEntry(ot::Ip6::Address const&, ot::AddressResolver::CacheEntryList*&, ot::AddressResolver::CacheEntry*&)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::LinkedList&lang;ot::AddressResolver::CacheEntry&rang;::PopAfter(ot::AddressResolver::CacheEntry*)
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::UpdateSnoopedCacheEntry(ot::Ip6::Address const&, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[4a]"></a>ot::AddressResolver::HandleIcmpReceive(void*, otMessage*, otMessageInfo const*, otIcmp6Header const*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, address_resolver.o(.text._ZN2ot15AddressResolver17HandleIcmpReceiveEPvP9otMessagePK13otMessageInfoPK13otIcmp6Header))
<BR>[Address Reference Count : 1]<UL><LI> address_resolver.o(.text._ZN2ot15AddressResolverC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[449]"></a>ot::AddressResolver::HandleIcmpReceive(ot::Message&, ot::Ip6::MessageInfo const&, ot::Ip6::Icmp::Header const&)</STRONG> (Thumb, 50 bytes, Stack size 56 bytes, address_resolver.o(.text._ZN2ot15AddressResolver17HandleIcmpReceiveERNS_7MessageERKNS_3Ip611MessageInfoERKNS3_4Icmp6HeaderE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::Remove(ot::Ip6::Address const&, ot::AddressResolver::Reason)
</UL>

<P><STRONG><a name="[43c]"></a>ot::AddressResolver::LogCacheEntryChange(ot::AddressResolver::EntryChange, ot::AddressResolver::Reason, ot::AddressResolver::CacheEntry const&, ot::AddressResolver::CacheEntryList*)</STRONG> (Thumb, 164 bytes, Stack size 96 bytes, address_resolver.o(.text._ZN2ot15AddressResolver19LogCacheEntryChangeENS0_11EntryChangeENS0_6ReasonERKNS0_10CacheEntryEPNS0_14CacheEntryListE))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = ot::AddressResolver::LogCacheEntryChange(ot::AddressResolver::EntryChange, ot::AddressResolver::Reason, ot::AddressResolver::CacheEntry const&, ot::AddressResolver::CacheEntryList*) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString() const
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)1&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::Resolve(ot::Ip6::Address const&, unsigned short&, bool)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::UpdateSnoopedCacheEntry(ot::Ip6::Address const&, unsigned short, unsigned short)
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::UpdateCacheEntry(ot::Ip6::Address const&, unsigned short)
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::RemoveCacheEntry(ot::AddressResolver::CacheEntry&, ot::AddressResolver::CacheEntryList&, ot::AddressResolver::CacheEntry*, ot::AddressResolver::Reason)
</UL>

<P><STRONG><a name="[44b]"></a>ot::AddressResolver::RemoveEntryForAddress(ot::Ip6::Address const&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, address_resolver.o(.text._ZN2ot15AddressResolver21RemoveEntryForAddressERKNS_3Ip67AddressE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::Remove(ot::Ip6::Address const&, ot::AddressResolver::Reason)
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
</UL>

<P><STRONG><a name="[44c]"></a>ot::AddressResolver::RestartAddressQueries()</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, address_resolver.o(.text._ZN2ot15AddressResolver21RestartAddressQueriesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680 + Unknown Stack Size
<LI>Call Chain = ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetRloc16(unsigned short)
</UL>

<P><STRONG><a name="[44d]"></a>ot::AddressResolver::RemoveEntriesForRloc16(unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, address_resolver.o(.text._ZN2ot15AddressResolver22RemoveEntriesForRloc16Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = ot::AddressResolver::RemoveEntriesForRloc16(unsigned short) &rArr; ot::AddressResolver::Remove(unsigned short, bool) &rArr; ot::AddressResolver::RemoveCacheEntry(ot::AddressResolver::CacheEntry&, ot::AddressResolver::CacheEntryList&, ot::AddressResolver::CacheEntry*, ot::AddressResolver::Reason) &rArr; ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::Remove(unsigned short, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveChildrenRloc16(unsigned short)
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressSolicitResponse(ot::Coap::Message const&, ot::ThreadStatusTlv::Status, ot::Router const*, ot::Ip6::MessageInfo const&)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&)
</UL>

<P><STRONG><a name="[7b4]"></a>ot::AddressResolver::ReplaceEntriesForRloc16(unsigned short, unsigned short)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, address_resolver.o(.text._ZN2ot15AddressResolver23ReplaceEntriesForRloc16Ett), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::Mle::RxInfo&, unsigned short, ot::Mle::LeaderData const&)
</UL>

<P><STRONG><a name="[36d]"></a>ot::AddressResolver::UpdateSnoopedCacheEntry(ot::Ip6::Address const&, unsigned short, unsigned short)</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, address_resolver.o(.text._ZN2ot15AddressResolver23UpdateSnoopedCacheEntryERKNS_3Ip67AddressEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = ot::AddressResolver::UpdateSnoopedCacheEntry(ot::Ip6::Address const&, unsigned short, unsigned short) &rArr; ot::AddressResolver::NewCacheEntry(bool) &rArr; ot::AddressResolver::RemoveCacheEntry(ot::AddressResolver::CacheEntry&, ot::AddressResolver::CacheEntryList&, ot::AddressResolver::CacheEntry*, ot::AddressResolver::Reason) &rArr; ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::RegisterReceiver(ot::TimeTicker::Receiver)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::IsMinimalChild(unsigned short)
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::ResolveUsingNetDataServices(ot::Ip6::Address const&, unsigned short&)
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::LogCacheEntryChange(ot::AddressResolver::EntryChange, ot::AddressResolver::Reason, ot::AddressResolver::CacheEntry const&, ot::AddressResolver::CacheEntryList*)
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::UpdateCacheEntry(ot::Ip6::Address const&, unsigned short)
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::NewCacheEntry(bool)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateRoutes(ot::FrameData const&, ot::Mac::Addresses const&)
</UL>

<P><STRONG><a name="[30a]"></a>ot::AddressResolver::RemoveEntriesForRouterId(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, address_resolver.o(.text._ZN2ot15AddressResolver24RemoveEntriesForRouterIdEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = ot::AddressResolver::RemoveEntriesForRouterId(unsigned char) &rArr; ot::AddressResolver::Remove(unsigned short, bool) &rArr; ot::AddressResolver::RemoveCacheEntry(ot::AddressResolver::CacheEntry&, ot::AddressResolver::CacheEntryList&, ot::AddressResolver::CacheEntry*, ot::AddressResolver::Reason) &rArr; ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::Remove(unsigned short, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Release(unsigned char)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::RemoveRouterLink(ot::Router&)
</UL>

<P><STRONG><a name="[450]"></a>ot::AddressResolver::SendAddressQueryResponse(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, unsigned int const*, ot::Ip6::Address const&)</STRONG> (Thumb, 196 bytes, Stack size 120 bytes, address_resolver.o(.text._ZN2ot15AddressResolver24SendAddressQueryResponseERKNS_3Ip67AddressERKNS1_19InterfaceIdentifierEPKjS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = ot::AddressResolver::SendAddressQueryResponse(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, unsigned int const*, ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned short&rang;(ot::Message&, unsigned char, unsigned short)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned int&rang;(ot::Message&, unsigned char, unsigned int)
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo(ot::Ip6::Address const&)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString() const
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)1&rang;()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSendAddressNotification
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)2&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[44f]"></a>ot::AddressResolver::ResolveUsingNetDataServices(ot::Ip6::Address const&, unsigned short&)</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, address_resolver.o(.text._ZN2ot15AddressResolver27ResolveUsingNetDataServicesERKNS_3Ip67AddressERt))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = ot::AddressResolver::ResolveUsingNetDataServices(ot::Ip6::Address const&, unsigned short&) &rArr; ot::NetworkData::Service::Manager::GetNextDnsSrpUnicastInfo(ot::NetworkData::Service::Manager::Iterator&, ot::NetworkData::Service::DnsSrpUnicast::Info&) const &rArr; ot::NetworkData::NetworkData::FindNextThreadService(ot::NetworkData::ServiceTlv const*, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const &rArr; ot::NetworkData::NetworkData::FindNextService(ot::NetworkData::ServiceTlv const*, unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const &rArr; ot::NetworkData::NetworkData::FindService(unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const &rArr; ot::NetworkData::NetworkData::MatchService(ot::NetworkData::ServiceTlv const&, unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Service::Manager::GetNextDnsSrpUnicastInfo(ot::NetworkData::Service::Manager::Iterator&, ot::NetworkData::Service::DnsSrpUnicast::Info&) const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::Resolve(ot::Ip6::Address const&, unsigned short&, bool)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::UpdateSnoopedCacheEntry(ot::Ip6::Address const&, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[452]"></a>ot::AddressResolver::Clear()</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, address_resolver.o(.text._ZN2ot15AddressResolver5ClearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = ot::AddressResolver::Clear() &rArr; ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode)
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandlePartitionChange()
</UL>

<P><STRONG><a name="[44a]"></a>ot::AddressResolver::Remove(ot::Ip6::Address const&, ot::AddressResolver::Reason)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, address_resolver.o(.text._ZN2ot15AddressResolver6RemoveERKNS_3Ip67AddressENS0_6ReasonE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::RemoveCacheEntry(ot::AddressResolver::CacheEntry&, ot::AddressResolver::CacheEntryList&, ot::AddressResolver::CacheEntry*, ot::AddressResolver::Reason)
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::FindCacheEntry(ot::Ip6::Address const&, ot::AddressResolver::CacheEntryList*&, ot::AddressResolver::CacheEntry*&)
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::RemoveEntryForAddress(ot::Ip6::Address const&)
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::HandleIcmpReceive(ot::Message&, ot::Ip6::MessageInfo const&, ot::Ip6::Icmp::Header const&)
</UL>

<P><STRONG><a name="[44e]"></a>ot::AddressResolver::Remove(unsigned short, bool)</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, address_resolver.o(.text._ZN2ot15AddressResolver6RemoveEtb))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = ot::AddressResolver::Remove(unsigned short, bool) &rArr; ot::AddressResolver::RemoveCacheEntry(ot::AddressResolver::CacheEntry&, ot::AddressResolver::CacheEntryList&, ot::AddressResolver::CacheEntry*, ot::AddressResolver::Reason) &rArr; ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::RemoveCacheEntry(ot::AddressResolver::CacheEntry&, ot::AddressResolver::CacheEntryList&, ot::AddressResolver::CacheEntry*, ot::AddressResolver::Reason)
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::RemoveEntriesForRouterId(unsigned char)
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::RemoveEntriesForRloc16(unsigned short)
</UL>

<P><STRONG><a name="[3c5]"></a>ot::AddressResolver::Resolve(ot::Ip6::Address const&, unsigned short&, bool)</STRONG> (Thumb, 366 bytes, Stack size 48 bytes, address_resolver.o(.text._ZN2ot15AddressResolver7ResolveERKNS_3Ip67AddressERtb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696 + Unknown Stack Size
<LI>Call Chain = ot::AddressResolver::Resolve(ot::Ip6::Address const&, unsigned short&, bool) &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::ResolveUsingNetDataServices(ot::Ip6::Address const&, unsigned short&)
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::LogCacheEntryChange(ot::AddressResolver::EntryChange, ot::AddressResolver::Reason, ot::AddressResolver::CacheEntry const&, ot::AddressResolver::CacheEntryList*)
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&)
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::FindCacheEntry(ot::Ip6::Address const&, ot::AddressResolver::CacheEntryList*&, ot::AddressResolver::CacheEntry*&)
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::NewCacheEntry(bool)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::LinkedList&lang;ot::AddressResolver::CacheEntry&rang;::PopAfter(ot::AddressResolver::CacheEntry*)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateIp6RouteFtd(ot::Ip6::Header&, ot::Message&)
</UL>

<P><STRONG><a name="[453]"></a>void ot::AddressResolver::HandleTmf&lang;(ot::Uri)0&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 380 bytes, Stack size 88 bytes, address_resolver.o(.text._ZN2ot15AddressResolver9HandleTmfILNS_3UriE0EEEvRNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288 + Unknown Stack Size
<LI>Call Chain = void ot::AddressResolver::HandleTmf&lang;(ot::Uri)0&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::AddressResolver::SendAddressError(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, ot::Ip6::Address const*) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendEmptyAck(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, void*, unsigned char)
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::GetLocatorAddress(ot::Ip6::Address&, unsigned short) const
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::RemoveIp6Address(ot::Ip6::Address const&)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressError(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, ot::Ip6::Address const*)
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)0&rang;()
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::RemoveUnicastAddress(ot::Ip6::Netif::UnicastAddress const&)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(ot::Mac::ExtAddress&) const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[457]"></a>void ot::AddressResolver::HandleTmf&lang;(ot::Uri)1&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 368 bytes, Stack size 136 bytes, address_resolver.o(.text._ZN2ot15AddressResolver9HandleTmfILNS_3UriE1EEEvRNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336 + Unknown Stack Size
<LI>Call Chain = void ot::AddressResolver::HandleTmf&lang;(ot::Uri)1&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::AddressResolver::SendAddressError(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, ot::Ip6::Address const*) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::IsConfirmablePostRequest() const
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendEmptyAck(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, void*, unsigned char)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned int&rang;(ot::Message const&, unsigned char, unsigned int&)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString() const
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::LogCacheEntryChange(ot::AddressResolver::EntryChange, ot::AddressResolver::Reason, ot::AddressResolver::CacheEntry const&, ot::AddressResolver::CacheEntryList*)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressError(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, ot::Ip6::Address const*)
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::FindCacheEntry(ot::Ip6::Address const&, ot::AddressResolver::CacheEntryList*&, ot::AddressResolver::CacheEntry*&)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError)
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)1&rang;()
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::LinkedList&lang;ot::AddressResolver::CacheEntry&rang;::PopAfter(ot::AddressResolver::CacheEntry*)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[45a]"></a>void ot::AddressResolver::HandleTmf&lang;(ot::Uri)2&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 236 bytes, Stack size 104 bytes, address_resolver.o(.text._ZN2ot15AddressResolver9HandleTmfILNS_3UriE2EEEvRNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760 + Unknown Stack Size
<LI>Call Chain = void ot::AddressResolver::HandleTmf&lang;(ot::Uri)2&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::AddressResolver::SendAddressQueryResponse(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, unsigned int const*, ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::IsNonConfirmablePostRequest() const
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressQueryResponse(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, unsigned int const*, ot::Ip6::Address const&)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, void*, unsigned char)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString() const
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::HasIp6Address(ot::Ip6::Address const&) const
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)2&rang;()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Address const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[45c]"></a>ot::AddressResolver::AddressResolver(ot::Instance&)</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, address_resolver.o(.text._ZN2ot15AddressResolverC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::RegisterHandler(ot::Ip6::Icmp::Handler&)
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bc9]"></a>ot::AddressResolver::AddressResolver__sub_object(ot::Instance&)</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, address_resolver.o(.text._ZN2ot15AddressResolverC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[45e]"></a>ot::ChildSupervisor::CheckState()</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, child_supervision.o(.text._ZN2ot15ChildSupervisor10CheckStateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ot::ChildSupervisor::CheckState() &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::UnregisterReceiver(ot::TimeTicker::Receiver)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::RegisterReceiver(ot::TimeTicker::Receiver)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::HasChildren(ot::Neighbor::StateFilter) const
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildSupervisor::HandleNotifierEvents(ot::Events)
</UL>

<P><STRONG><a name="[45f]"></a>ot::ChildSupervisor::SendMessage(ot::Child&)</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, child_supervision.o(.text._ZN2ot15ChildSupervisor11SendMessageERNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = ot::ChildSupervisor::SendMessage(ot::Child&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::Allocate(ot::Message::Type, unsigned short)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMessage(ot::Message&)
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildSupervisor::HandleTimeTick()
</UL>

<P><STRONG><a name="[42a]"></a>ot::ChildSupervisor::UpdateOnSend(ot::Child&)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, child_supervision.o(.text._ZN2ot15ChildSupervisor12UpdateOnSendERNS_5ChildE))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleSentFrameToChild(ot::Mac::TxFrame const&, ot::IndirectSenderBase::FrameContext const&, otError, ot::Child&)
</UL>

<P><STRONG><a name="[292]"></a>ot::ChildSupervisor::HandleTimeTick()</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, child_supervision.o(.text._ZN2ot15ChildSupervisor14HandleTimeTickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = ot::ChildSupervisor::HandleTimeTick() &rArr; ot::ChildSupervisor::SendMessage(ot::Child&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildSupervisor::SendMessage(ot::Child&)
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::HandleTimer()
</UL>

<P><STRONG><a name="[461]"></a>ot::ChildSupervisor::HandleNotifierEvents(ot::Events)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, child_supervision.o(.text._ZN2ot15ChildSupervisor20HandleNotifierEventsENS_6EventsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ot::ChildSupervisor::HandleNotifierEvents(ot::Events) &rArr; ot::ChildSupervisor::CheckState() &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildSupervisor::CheckState()
</UL>
<BR>[Called By]<UL><LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::EmitEvents()
</UL>

<P><STRONG><a name="[932]"></a>ot::ChildSupervisor::ChildSupervisor(ot::Instance&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, child_supervision.o(.text._ZN2ot15ChildSupervisorC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bca]"></a>ot::ChildSupervisor::ChildSupervisor__sub_object(ot::Instance&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, child_supervision.o(.text._ZN2ot15ChildSupervisorC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[462]"></a>ot::DataPollHandler::HandleDataPoll(ot::Mac::RxFrame&)</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, data_poll_handler.o(.text._ZN2ot15DataPollHandler14HandleDataPollERNS_3Mac7RxFrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = ot::DataPollHandler::HandleDataPoll(ot::Mac::RxFrame&) &rArr; ot::SourceMatchController::SetSrcMatchAsShort(ot::Child&, bool) &rArr; ot::SourceMatchController::ClearEntry(ot::Child&) &rArr; ot::SourceMatchController::AddPendingEntries() &rArr; ot::SourceMatchController::AddAddress(ot::Child const&) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetSrcAddr(ot::Mac::Address&) const
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::RequestIndirectFrameTransmission()
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::SetSrcMatchAsShort(ot::Child&, bool)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::FindChild(ot::Mac::Address const&, ot::Neighbor::StateFilter)
</UL>
<BR>[Called By]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleMacCommand(ot::Mac::RxFrame&)
</UL>

<P><STRONG><a name="[429]"></a>ot::DataPollHandler::HandleNewFrame(ot::Child&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, data_poll_handler.o(.text._ZN2ot15DataPollHandler14HandleNewFrameERNS_5ChildE))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleSentFrameToChild(ot::Mac::TxFrame const&, ot::IndirectSenderBase::FrameContext const&, otError, ot::Child&)
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::UpdateIndirectMessage(ot::Child&)
</UL>

<P><STRONG><a name="[464]"></a>ot::DataPollHandler::HandleSentFrame(ot::Mac::TxFrame const&, otError)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, data_poll_handler.o(.text._ZN2ot15DataPollHandler15HandleSentFrameERKNS_3Mac7TxFrameE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = ot::DataPollHandler::HandleSentFrame(ot::Mac::TxFrame const&, otError) &rArr; ot::DataPollHandler::HandleSentFrame(ot::Mac::TxFrame const&, otError, ot::Child&) &rArr; ot::IndirectSender::HandleSentFrameToChild(ot::Mac::TxFrame const&, ot::IndirectSenderBase::FrameContext const&, otError, ot::Child&) &rArr; ot::IndirectSender::ClearMessagesForRemovedChildren() &rArr; ot::IndirectSender::ClearAllMessagesForSleepyChild(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::ProcessPendingPolls()
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::HandleSentFrame(ot::Mac::TxFrame const&, otError, ot::Child&)
</UL>
<BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[465]"></a>ot::DataPollHandler::HandleSentFrame(ot::Mac::TxFrame const&, otError, ot::Child&)</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, data_poll_handler.o(.text._ZN2ot15DataPollHandler15HandleSentFrameERKNS_3Mac7TxFrameE7otErrorRNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = ot::DataPollHandler::HandleSentFrame(ot::Mac::TxFrame const&, otError, ot::Child&) &rArr; ot::IndirectSender::HandleSentFrameToChild(ot::Mac::TxFrame const&, ot::IndirectSenderBase::FrameContext const&, otError, ot::Child&) &rArr; ot::IndirectSender::ClearMessagesForRemovedChildren() &rArr; ot::IndirectSender::ClearAllMessagesForSleepyChild(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetKeyId(unsigned char&) const
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetFrameCounter(unsigned int&) const
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleSentFrameToChild(ot::Mac::TxFrame const&, ot::IndirectSenderBase::FrameContext const&, otError, ot::Child&)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleFrameChangeDone(ot::Child&)
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::HandleSentFrame(ot::Mac::TxFrame const&, otError)
</UL>

<P><STRONG><a name="[467]"></a>ot::DataPollHandler::HandleFrameRequest(ot::Mac::TxFrames&)</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, data_poll_handler.o(.text._ZN2ot15DataPollHandler18HandleFrameRequestERNS_3Mac8TxFramesE))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = ot::DataPollHandler::HandleFrameRequest(ot::Mac::TxFrames&) &rArr; ot::IndirectSender::PrepareFrameForChild(ot::Mac::TxFrame&, ot::IndirectSenderBase::FrameContext&, ot::Child&) &rArr; ot::IndirectSender::PrepareDataFrame(ot::Mac::TxFrame&, ot::Child&, ot::Message&) &rArr; ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool) &rArr; ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&) &rArr; ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&) &rArr;  ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetKeyId(unsigned char)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetFrameCounter(unsigned int)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::PrepareFrameForChild(ot::Mac::TxFrame&, ot::IndirectSenderBase::FrameContext&, ot::Child&)
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::BeginTransmit()
</UL>

<P><STRONG><a name="[422]"></a>ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&)</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, data_poll_handler.o(.text._ZN2ot15DataPollHandler18RequestFrameChangeENS0_11FrameChangeERNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleFrameChangeDone(ot::Child&)
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::ClearAllMessagesForSleepyChild(ot::Child&)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleChildModeChange(ot::Child&, ot::Mle::DeviceMode)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::RequestMessageUpdate(ot::Child&)
</UL>

<P><STRONG><a name="[466]"></a>ot::DataPollHandler::ProcessPendingPolls()</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, data_poll_handler.o(.text._ZN2ot15DataPollHandler19ProcessPendingPollsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ot::DataPollHandler::ProcessPendingPolls() &rArr; ot::Mac::Mac::RequestIndirectFrameTransmission() &rArr; ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::RequestIndirectFrameTransmission()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::HandleSentFrame(ot::Mac::TxFrame const&, otError)
</UL>

<P><STRONG><a name="[430]"></a>ot::DataPollHandler::Clear()</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, data_poll_handler.o(.text._ZN2ot15DataPollHandler5ClearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ot::DataPollHandler::Clear() &rArr; ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter) &rArr; ot::ChildTable::Iterator::Reset() &rArr; ot::ChildTable::Iterator::Advance()
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::Stop()
</UL>

<P><STRONG><a name="[432]"></a>ot::DataPollHandler::DataPollHandler(ot::Instance&)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, data_poll_handler.o(.text._ZN2ot15DataPollHandlerC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::IndirectSender(ot::Instance&)
</UL>

<P><STRONG><a name="[bcb]"></a>ot::DataPollHandler::DataPollHandler__sub_object(ot::Instance&)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, data_poll_handler.o(.text._ZN2ot15DataPollHandlerC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[213]"></a>ot::LinkQualityInfo::Clear()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, link_quality.o(.text._ZN2ot15LinkQualityInfo5ClearEv))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Restore()
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::InitNeighbor(ot::Neighbor&, ot::Mle::Mle::RxInfo const&)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&)
</UL>

<P><STRONG><a name="[468]"></a>ot::LinkQualityInfo::AddRss(signed char)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, link_quality.o(.text._ZN2ot15LinkQualityInfo6AddRssEa))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = ot::LinkQualityInfo::AddRss(signed char) &rArr; ot::RssAverager::Add(signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RssAverager::Add(signed char)
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::LinkQualityInfo::GetLinkMargin() const
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::RecordFrameTransmitStatus(ot::Mac::TxFrame const&, ot::Mac::RxFrame*, otError, unsigned char, bool)
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::InitNeighbor(ot::Neighbor&, ot::Mle::Mle::RxInfo const&)
</UL>

<P><STRONG><a name="[46a]"></a>ot::EnergyScanServer::SendReport()</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, energy_scan_server.o(.text._ZN2ot16EnergyScanServer10SendReportEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = ot::EnergyScanServer::SendReport() &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo(ot::Ip6::Address const&)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::LogError(char const*, otError)
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)18&rang;()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::EnergyScanServer::HandleTimer()
</UL>

<P><STRONG><a name="[337]"></a>ot::EnergyScanServer::HandleTimer()</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, energy_scan_server.o(.text._ZN2ot16EnergyScanServer11HandleTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = ot::EnergyScanServer::HandleTimer() &rArr; ot::EnergyScanServer::SendReport() &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::EnergyScan(unsigned int, unsigned short, void (*)(otEnergyScanResult*, void*), void*)
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::EnergyScanServer::SendReport()
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilliIn&lang;ot::EnergyScanServer, &(ot::EnergyScanServer::HandleTimer())&rang;::HandleTimer(ot::Timer&)
</UL>

<P><STRONG><a name="[46e]"></a>ot::EnergyScanServer::HandleScanResult(otEnergyScanResult*)</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, energy_scan_server.o(.text._ZN2ot16EnergyScanServer16HandleScanResultEP18otEnergyScanResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = ot::EnergyScanServer::HandleScanResult(otEnergyScanResult*) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::EnergyScanServer::HandleScanResult(otEnergyScanResult*, void*)
</UL>

<P><STRONG><a name="[4b]"></a>ot::EnergyScanServer::HandleScanResult(otEnergyScanResult*, void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, energy_scan_server.o(.text._ZN2ot16EnergyScanServer16HandleScanResultEP18otEnergyScanResultPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = ot::EnergyScanServer::HandleScanResult(otEnergyScanResult*, void*) &rArr; ot::EnergyScanServer::HandleScanResult(otEnergyScanResult*) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::EnergyScanServer::HandleScanResult(otEnergyScanResult*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> energy_scan_server.o(.text._ZN2ot16EnergyScanServer11HandleTimerEv)
</UL>
<P><STRONG><a name="[46f]"></a>ot::EnergyScanServer::HandleNotifierEvents(ot::Events)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, energy_scan_server.o(.text._ZN2ot16EnergyScanServer20HandleNotifierEventsENS_6EventsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ot::EnergyScanServer::HandleNotifierEvents(ot::Events) &rArr; ot::Message::Free() &rArr; ot::MessagePool::Free(ot::Message*) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetCommissioningData() const
</UL>
<BR>[Called By]<UL><LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::EmitEvents()
</UL>

<P><STRONG><a name="[470]"></a>void ot::EnergyScanServer::HandleTmf&lang;(ot::Uri)19&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, energy_scan_server.o(.text._ZN2ot16EnergyScanServer9HandleTmfILNS_3UriE19EEEvRNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584 + Unknown Stack Size
<LI>Call Chain = void ot::EnergyScanServer::HandleTmf&lang;(ot::Uri)19&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendEmptyAck(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTo(ot::Message&) const
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned char&rang;(ot::Message const&, unsigned char, unsigned char&)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ChannelMaskTlv::GetChannelMask(ot::Message const&)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ChannelMaskTlv::SetChannelMask(unsigned int)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)19&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[934]"></a>ot::EnergyScanServer::EnergyScanServer(ot::Instance&)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, energy_scan_server.o(.text._ZN2ot16EnergyScanServerC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bcc]"></a>ot::EnergyScanServer::EnergyScanServer__sub_object(ot::Instance&)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, energy_scan_server.o(.text._ZN2ot16EnergyScanServerC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[474]"></a>ot::PanIdQueryServer::SendConflict()</STRONG> (Thumb, 176 bytes, Stack size 72 bytes, panid_query_server.o(.text._ZN2ot16PanIdQueryServer12SendConflictEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608 + Unknown Stack Size
<LI>Call Chain = ot::PanIdQueryServer::SendConflict() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTo(ot::Message&) const
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned short&rang;(ot::Message&, unsigned char, unsigned short)
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo(ot::Ip6::Address const&)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::LogError(char const*, otError)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ChannelMaskTlv::SetChannelMask(unsigned int)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)24&rang;()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PanIdQueryServer::HandleScanResult(otActiveScanResult*)
</UL>

<P><STRONG><a name="[476]"></a>ot::PanIdQueryServer::HandleScanResult(otActiveScanResult*)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, panid_query_server.o(.text._ZN2ot16PanIdQueryServer16HandleScanResultEP18otActiveScanResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608 + Unknown Stack Size
<LI>Call Chain = ot::PanIdQueryServer::HandleScanResult(otActiveScanResult*) &rArr; ot::PanIdQueryServer::SendConflict() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PanIdQueryServer::SendConflict()
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PanIdQueryServer::HandleScanResult(otActiveScanResult*, void*)
</UL>

<P><STRONG><a name="[45]"></a>ot::PanIdQueryServer::HandleScanResult(otActiveScanResult*, void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, panid_query_server.o(.text._ZN2ot16PanIdQueryServer16HandleScanResultEP18otActiveScanResultPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608 + Unknown Stack Size
<LI>Call Chain = ot::PanIdQueryServer::HandleScanResult(otActiveScanResult*, void*) &rArr; ot::PanIdQueryServer::HandleScanResult(otActiveScanResult*) &rArr; ot::PanIdQueryServer::SendConflict() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PanIdQueryServer::HandleScanResult(otActiveScanResult*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> panid_query_server.o(.text._ZN2ot12TimerMilliInINS_16PanIdQueryServerEXadL_ZNS1_11HandleTimerEvEEE11HandleTimerERNS_5TimerE)
</UL>
<P><STRONG><a name="[477]"></a>void ot::PanIdQueryServer::HandleTmf&lang;(ot::Uri)26&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, panid_query_server.o(.text._ZN2ot16PanIdQueryServer9HandleTmfILNS_3UriE26EEEvRNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = void ot::PanIdQueryServer::HandleTmf&lang;(ot::Uri)26&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendEmptyAck(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendHeaderResponse(ot::Coap::Code, ot::Coap::Message const&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendEmptyAck(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ChannelMaskTlv::GetChannelMask(ot::Message const&)
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)26&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[933]"></a>ot::PanIdQueryServer::PanIdQueryServer(ot::Instance&)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, panid_query_server.o(.text._ZN2ot16PanIdQueryServerC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bcd]"></a>ot::PanIdQueryServer::PanIdQueryServer__sub_object(ot::Instance&)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, panid_query_server.o(.text._ZN2ot16PanIdQueryServerC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[96c]"></a>ot::ComputeLinkMargin(signed char, signed char)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, link_quality.o(.text._ZN2ot17ComputeLinkMarginEaa))
<BR><BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ComputeLinkMargin(signed char) const
</UL>

<P><STRONG><a name="[479]"></a>ot::IsValidUtf8String(char const*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, string.o(.text._ZN2ot17IsValidUtf8StringEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::IsValidUtf8String(char const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Start(char const*, char const*, char const*, char const*, char const*, char const*, void (*)(otError, void*), void*)
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::GeneratePskc(char const*, ot::MeshCoP::NetworkName const&, ot::MeshCoP::ExtendedPanId const&, ot::Pskc&)
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkName::Set(char const*)
</UL>

<P><STRONG><a name="[47b]"></a>ot::IsValidUtf8String(char const*, unsigned int)</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, string.o(.text._ZN2ot17IsValidUtf8StringEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::IsValidUtf8String(char const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkNameTlv::IsValid() const
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Tlv::IsValid(ot::MeshCoP::Tlv const&)
</UL>

<P><STRONG><a name="[47c]"></a>ot::NetworkDiagnostic::Client::SendCommand(ot::Uri, ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)</STRONG> (Thumb, 236 bytes, Stack size 128 bytes, network_diagnostic.o(.text._ZN2ot17NetworkDiagnostic6Client11SendCommandENS_3UriERKNS_3Ip67AddressEPKhhPFvPvP9otMessagePK13otMessageInfo7otErrorES9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = ot::NetworkDiagnostic::Client::SendCommand(ot::Uri, ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::CoapBase::NewNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewNonConfirmablePostMessage(ot::Uri)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewConfirmablePostMessage(ot::Uri)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString() const
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::PrepareMessageInfoForDest(ot::Ip6::Address const&, ot::Tmf::MessageInfo&) const
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::UriToString(ot::Uri)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::SendDiagnosticReset(ot::Ip6::Address const&, unsigned char const*, unsigned char)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::SendDiagnosticGet(ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(otError, otMessage*, otMessageInfo const*, void*), void*)
</UL>

<P><STRONG><a name="[47f]"></a>ot::NetworkDiagnostic::Client::UriToString(ot::Uri)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, network_diagnostic.o(.text._ZN2ot17NetworkDiagnostic6Client11UriToStringENS_3UriE))
<BR><BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)35&rang;()
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)34&rang;()
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)33&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::SendCommand(ot::Uri, ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
</UL>

<P><STRONG><a name="[483]"></a>ot::NetworkDiagnostic::Client::GetNextDiagTlv(ot::Coap::Message const&, unsigned short&, otNetworkDiagTlv&)</STRONG> (Thumb, 896 bytes, Stack size 120 bytes, network_diagnostic.o(.text._ZN2ot17NetworkDiagnostic6Client14GetNextDiagTlvERKNS_4Coap7MessageERtR16otNetworkDiagTlv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ot::NetworkDiagnostic::Client::GetNextDiagTlv(ot::Coap::Message const&, unsigned short&, otNetworkDiagTlv&) &rArr; otError ot::Tlv::ReadUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned short, unsigned short&) &rArr; ot::Tlv::ReadTlvValue(ot::Message const&, unsigned short, void*, unsigned char) &rArr; ot::Tlv::ParsedInfo::ParseFrom(ot::Message const&, unsigned short) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ReadBytes(unsigned short, void*, unsigned short) const
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DeviceMode::Get(otLinkModeConfig&) const
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::GetSize() const
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::ReadTlvValue(ot::Message const&, unsigned short, void*, unsigned char)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::ReadUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned short, unsigned short&)
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::ReadUintTlv&lang;unsigned int&rang;(ot::Message const&, unsigned short, unsigned int&)
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::ReadUintTlv&lang;unsigned char&rang;(ot::Message const&, unsigned short, unsigned char&)
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::RouteTlv::IsValid() const
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::ConnectivityTlv::GetConnectivity(otNetworkDiagConnectivity&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetNextDiagnosticTlv
</UL>

<P><STRONG><a name="[4e]"></a>ot::NetworkDiagnostic::Client::HandleGetResponse(void*, otMessage*, otMessageInfo const*, otError)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, network_diagnostic.o(.text._ZN2ot17NetworkDiagnostic6Client17HandleGetResponseEPvP9otMessagePK13otMessageInfo7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::NetworkDiagnostic::Client::HandleGetResponse(void*, otMessage*, otMessageInfo const*, otError)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_diagnostic.o(.text._ZN2ot17NetworkDiagnostic6Client17SendDiagnosticGetERKNS_3Ip67AddressEPKhhPFv7otErrorP9otMessagePK13otMessageInfoPvESE_)
</UL>
<P><STRONG><a name="[48b]"></a>ot::NetworkDiagnostic::Client::SendDiagnosticGet(ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(otError, otMessage*, otMessageInfo const*, void*), void*)</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, network_diagnostic.o(.text._ZN2ot17NetworkDiagnostic6Client17SendDiagnosticGetERKNS_3Ip67AddressEPKhhPFv7otErrorP9otMessagePK13otMessageInfoPvESE_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680 + Unknown Stack Size
<LI>Call Chain = ot::NetworkDiagnostic::Client::SendDiagnosticGet(ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(otError, otMessage*, otMessageInfo const*, void*), void*) &rArr; ot::NetworkDiagnostic::Client::SendCommand(ot::Uri, ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::CoapBase::NewNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::SendCommand(ot::Uri, ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSendDiagnosticGet
</UL>

<P><STRONG><a name="[48c]"></a>ot::NetworkDiagnostic::Client::SendDiagnosticReset(ot::Ip6::Address const&, unsigned char const*, unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, network_diagnostic.o(.text._ZN2ot17NetworkDiagnostic6Client19SendDiagnosticResetERKNS_3Ip67AddressEPKhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = ot::NetworkDiagnostic::Client::SendDiagnosticReset(ot::Ip6::Address const&, unsigned char const*, unsigned char) &rArr; ot::NetworkDiagnostic::Client::SendCommand(ot::Uri, ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::CoapBase::NewNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::SendCommand(ot::Uri, ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSendDiagnosticReset
</UL>

<P><STRONG><a name="[48d]"></a>void ot::NetworkDiagnostic::Client::HandleTmf&lang;(ot::Uri)32&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, network_diagnostic.o(.text._ZN2ot17NetworkDiagnostic6Client9HandleTmfILNS_3UriE32EEEvRNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = void ot::NetworkDiagnostic::Client::HandleTmf&lang;(ot::Uri)32&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendEmptyAck(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendHeaderResponse(ot::Coap::Code, ot::Coap::Message const&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::IsConfirmablePostRequest() const
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendEmptyAck(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString() const
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)32&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[92e]"></a>ot::NetworkDiagnostic::Client::Client(ot::Instance&)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, network_diagnostic.o(.text._ZN2ot17NetworkDiagnostic6ClientC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bce]"></a>ot::NetworkDiagnostic::Client::Client__sub_object(ot::Instance&)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, network_diagnostic.o(.text._ZN2ot17NetworkDiagnostic6ClientC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[48f]"></a>ot::NetworkDiagnostic::Server::AppendDiagTlv(unsigned char, ot::Message&)</STRONG> (Thumb, 494 bytes, Stack size 96 bytes, network_diagnostic.o(.text._ZN2ot17NetworkDiagnostic6Server13AppendDiagTlvEhRNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = ot::NetworkDiagnostic::Server::AppendDiagTlv(unsigned char, ot::Message&) &rArr; ot::NetworkDiagnostic::Server::AppendMacCounters(ot::Message&) &rArr; ot::Tlv::AppendTo(ot::Message&) const &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::GetLeaderData()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTo(ot::Message&) const
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned short&rang;(ot::Message&, unsigned char, unsigned short)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned int&rang;(ot::Message&, unsigned char, unsigned int)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned char&rang;(ot::Message&, unsigned char, unsigned char)
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::GetMaxChildTimeout(unsigned int&) const
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::FillRouteTlv(ot::Mle::RouteTlv&, ot::Neighbor const*) const
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::FillConnectivityTlv(ot::Mle::ConnectivityTlv&)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::RouteTlv::Init()
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendIp6AddressList(ot::Message&)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendMacCounters(ot::Message&)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendChildTable(ot::Message&)
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendRequestedTlvs(ot::Message const&, ot::Message&)
</UL>

<P><STRONG><a name="[496]"></a>ot::NetworkDiagnostic::Server::AppendChildTable(ot::Message&)</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, network_diagnostic.o(.text._ZN2ot17NetworkDiagnostic6Server16AppendChildTableERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = ot::NetworkDiagnostic::Server::AppendChildTable(ot::Message&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::GetNumChildren(ot::Neighbor::StateFilter) const
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsRouterOrLeader() const
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendDiagTlv(unsigned char, ot::Message&)
</UL>

<P><STRONG><a name="[495]"></a>ot::NetworkDiagnostic::Server::AppendMacCounters(ot::Message&)</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, network_diagnostic.o(.text._ZN2ot17NetworkDiagnostic6Server17AppendMacCountersERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = ot::NetworkDiagnostic::Server::AppendMacCounters(ot::Message&) &rArr; ot::Tlv::AppendTo(ot::Message&) const &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTo(ot::Message&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendDiagTlv(unsigned char, ot::Message&)
</UL>

<P><STRONG><a name="[499]"></a>ot::NetworkDiagnostic::Server::AppendRequestedTlvs(ot::Message const&, ot::Message&)</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, network_diagnostic.o(.text._ZN2ot17NetworkDiagnostic6Server19AppendRequestedTlvsERKNS_7MessageERS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = ot::NetworkDiagnostic::Server::AppendRequestedTlvs(ot::Message const&, ot::Message&) &rArr; ot::NetworkDiagnostic::Server::AppendDiagTlv(unsigned char, ot::Message&) &rArr; ot::NetworkDiagnostic::Server::AppendMacCounters(ot::Message&) &rArr; ot::Tlv::AppendTo(ot::Message&) const &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlvValueOffset(ot::Message const&, unsigned char, unsigned short&, unsigned short&)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendDiagTlv(unsigned char, ot::Message&)
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)34&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)33&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[494]"></a>ot::NetworkDiagnostic::Server::AppendIp6AddressList(ot::Message&)</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, network_diagnostic.o(.text._ZN2ot17NetworkDiagnostic6Server20AppendIp6AddressListERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = ot::NetworkDiagnostic::Server::AppendIp6AddressList(ot::Message&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendDiagTlv(unsigned char, ot::Message&)
</UL>

<P><STRONG><a name="[49a]"></a>void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)33&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, network_diagnostic.o(.text._ZN2ot17NetworkDiagnostic6Server9HandleTmfILNS_3UriE33EEEvRNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)33&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::IsConfirmablePostRequest() const
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewResponseMessage(ot::Coap::Message const&)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString() const
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendRequestedTlvs(ot::Message const&, ot::Message&)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)33&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[49c]"></a>void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)34&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 182 bytes, Stack size 120 bytes, network_diagnostic.o(.text._ZN2ot17NetworkDiagnostic6Server9HandleTmfILNS_3UriE34EEEvRNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640 + Unknown Stack Size
<LI>Call Chain = void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)34&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::NewConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewConfirmablePostMessage(ot::Uri)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendEmptyAck(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString() const
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::PrepareMessageInfoForDest(ot::Ip6::Address const&, ot::Tmf::MessageInfo&) const
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendRequestedTlvs(ot::Message const&, ot::Message&)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)34&rang;()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[49d]"></a>void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)35&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 184 bytes, Stack size 88 bytes, network_diagnostic.o(.text._ZN2ot17NetworkDiagnostic6Server9HandleTmfILNS_3UriE35EEEvRNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + Unknown Stack Size
<LI>Call Chain = void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)35&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendEmptyAck(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendHeaderResponse(ot::Coap::Code, ot::Coap::Message const&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::IsConfirmablePostRequest() const
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendEmptyAck(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString() const
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)35&rang;()
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[92d]"></a>ot::NetworkDiagnostic::Server::Server(ot::Instance&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, network_diagnostic.o(.text._ZN2ot17NetworkDiagnostic6ServerC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bcf]"></a>ot::NetworkDiagnostic::Server::Server__sub_object(ot::Instance&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, network_diagnostic.o(.text._ZN2ot17NetworkDiagnostic6ServerC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[49f]"></a>ot::AnnounceSenderBase::HandleTimer()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, announce_sender.o(.text._ZN2ot18AnnounceSenderBase11HandleTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456 + Unknown Stack Size
<LI>Call Chain = ot::AnnounceSenderBase::HandleTimer() &rArr; ot::Mle::Mle::SendAnnounce(unsigned char, ot::Mle::Mle::AnnounceMode) &rArr; ot::Mle::Mle::SendAnnounce(unsigned char, ot::Ip6::Address const&, ot::Mle::Mle::AnnounceMode) &rArr; ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&) &rArr; ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::AddJitter(unsigned int, unsigned short)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ChannelMask::GetNextChannel(unsigned char&) const
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendAnnounce(unsigned char, ot::Mle::Mle::AnnounceMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AnnounceBeginServer::HandleTimer(ot::Timer&)
</UL>

<P><STRONG><a name="[4a2]"></a>ot::AnnounceSenderBase::SendAnnounce(unsigned char)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, announce_sender.o(.text._ZN2ot18AnnounceSenderBase12SendAnnounceEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ot::AnnounceSenderBase::SendAnnounce(unsigned char) &rArr; ot::TimerMilli::Start(unsigned int) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint32InRange(unsigned int, unsigned int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AnnounceSenderBase::SelectStartingChannel()
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AnnounceBeginServer::HandleTmf&lang;(ot::Uri)10&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AnnounceBeginServer::SendAnnounce(unsigned int, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[4a4]"></a>ot::AnnounceSenderBase::SetChannelMask(ot::Mac::ChannelMask)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, announce_sender.o(.text._ZN2ot18AnnounceSenderBase14SetChannelMaskENS_3Mac11ChannelMaskE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ot::AnnounceSenderBase::SetChannelMask(ot::Mac::ChannelMask) &rArr; ot::TimerMilli::Stop() &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AnnounceSenderBase::SelectStartingChannel()
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AnnounceBeginServer::HandleTmf&lang;(ot::Uri)10&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AnnounceBeginServer::SendAnnounce(unsigned int, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[4a3]"></a>ot::AnnounceSenderBase::SelectStartingChannel()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, announce_sender.o(.text._ZN2ot18AnnounceSenderBase21SelectStartingChannelEv))
<BR><BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ChannelMask::GetNextChannel(unsigned char&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AnnounceSenderBase::SetChannelMask(ot::Mac::ChannelMask)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AnnounceSenderBase::SendAnnounce(unsigned char)
</UL>

<P><STRONG><a name="[bd0]"></a>ot::AnnounceSenderBase::AnnounceSenderBase(ot::Instance&, void (&)(ot::Timer&))</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, announce_sender.o(.text._ZN2ot18AnnounceSenderBaseC2ERNS_8InstanceERFvRNS_5TimerEE), UNUSED)

<P><STRONG><a name="[4a9]"></a>ot::AnnounceSenderBase::AnnounceSenderBase__sub_object(ot::Instance&, void (&)(ot::Timer&))</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, announce_sender.o(.text._ZN2ot18AnnounceSenderBaseC2ERNS_8InstanceERFvRNS_5TimerEE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AnnounceBeginServer::AnnounceBeginServer(ot::Instance&)
</UL>

<P><STRONG><a name="[962]"></a>ot::CostForLinkQuality(ot::LinkQuality)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, link_quality.o(.text._ZN2ot18CostForLinkQualityENS_11LinkQualityE))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetNextHopAndPathCost(unsigned short, unsigned short&, unsigned char&) const
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetLinkCost(ot::Router const&) const
</UL>

<P><STRONG><a name="[3c9]"></a>ot::SuccessRateTracker::AddSample(bool, unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, link_quality.o(.text._ZN2ot18SuccessRateTracker9AddSampleEbt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::SuccessRateTracker::AddSample(bool, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::RecordFrameTransmitStatus(ot::Mac::TxFrame const&, ot::Mac::RxFrame*, otError, unsigned char, bool)
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::RecordCcaStatus(bool, unsigned char)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleSentFrameToChild(ot::Mac::TxFrame const&, ot::IndirectSenderBase::FrameContext const&, otError, ot::Child&)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateSendMessage(otError, ot::Mac::Address&, ot::Neighbor*)
</UL>

<P><STRONG><a name="[4f]"></a>ot::AnnounceBeginServer::HandleTimer(ot::Timer&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, announce_begin_server.o(.text._ZN2ot19AnnounceBeginServer11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456 + Unknown Stack Size
<LI>Call Chain = ot::AnnounceBeginServer::HandleTimer(ot::Timer&) &rArr; ot::AnnounceSenderBase::HandleTimer() &rArr; ot::Mle::Mle::SendAnnounce(unsigned char, ot::Mle::Mle::AnnounceMode) &rArr; ot::Mle::Mle::SendAnnounce(unsigned char, ot::Ip6::Address const&, ot::Mle::Mle::AnnounceMode) &rArr; ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&) &rArr; ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AnnounceSenderBase::HandleTimer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> announce_begin_server.o(.text._ZN2ot19AnnounceBeginServerC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[4a5]"></a>ot::AnnounceBeginServer::SendAnnounce(unsigned int, unsigned char, unsigned short)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, announce_begin_server.o(.text._ZN2ot19AnnounceBeginServer12SendAnnounceEjht))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ot::AnnounceBeginServer::SendAnnounce(unsigned int, unsigned char, unsigned short) &rArr; ot::AnnounceSenderBase::SendAnnounce(unsigned char) &rArr; ot::TimerMilli::Start(unsigned int) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AnnounceSenderBase::SetChannelMask(ot::Mac::ChannelMask)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AnnounceSenderBase::SendAnnounce(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::InformPreviousChannel()
</UL>

<P><STRONG><a name="[4a6]"></a>void ot::AnnounceBeginServer::HandleTmf&lang;(ot::Uri)10&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, announce_begin_server.o(.text._ZN2ot19AnnounceBeginServer9HandleTmfILNS_3UriE10EEEvRNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = void ot::AnnounceBeginServer::HandleTmf&lang;(ot::Uri)10&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendEmptyAck(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendHeaderResponse(ot::Coap::Code, ot::Coap::Message const&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendEmptyAck(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned char&rang;(ot::Message const&, unsigned char, unsigned char&)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ChannelMaskTlv::GetChannelMask(ot::Message const&)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AnnounceSenderBase::SetChannelMask(ot::Mac::ChannelMask)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AnnounceSenderBase::SendAnnounce(unsigned char)
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)10&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[4a8]"></a>ot::AnnounceBeginServer::AnnounceBeginServer(ot::Instance&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, announce_begin_server.o(.text._ZN2ot19AnnounceBeginServerC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AnnounceSenderBase::AnnounceSenderBase__sub_object(ot::Instance&, void (&)(ot::Timer&))
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bd1]"></a>ot::AnnounceBeginServer::AnnounceBeginServer__sub_object(ot::Instance&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, announce_begin_server.o(.text._ZN2ot19AnnounceBeginServerC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[4aa]"></a>ot::SupervisionListener::SetTimeout(unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, child_supervision.o(.text._ZN2ot19SupervisionListener10SetTimeoutEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ot::SupervisionListener::SetTimeout(unsigned short) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::RestartTimer()
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otChildSupervisionSetCheckTimeout
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::SupervisionListener(ot::Instance&)
</UL>

<P><STRONG><a name="[339]"></a>ot::SupervisionListener::HandleTimer()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, child_supervision.o(.text._ZN2ot19SupervisionListener11HandleTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768 + Unknown Stack Size
<LI>Call Chain = ot::SupervisionListener::HandleTimer() &rArr; ot::Mle::Mle::SendChildUpdateRequest() &rArr; ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::GetRxOnWhenIdle() const
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest()
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::RestartTimer()
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilliIn&lang;ot::SupervisionListener, &(ot::SupervisionListener::HandleTimer())&rang;::HandleTimer(ot::Timer&)
</UL>

<P><STRONG><a name="[4ae]"></a>ot::SupervisionListener::SetInterval(unsigned short)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, child_supervision.o(.text._ZN2ot19SupervisionListener11SetIntervalEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768 + Unknown Stack Size
<LI>Call Chain = ot::SupervisionListener::SetInterval(unsigned short) &rArr; ot::Mle::Mle::SendChildUpdateRequest() &rArr; ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest()
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otChildSupervisionSetInterval
</UL>

<P><STRONG><a name="[4ab]"></a>ot::SupervisionListener::RestartTimer()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, child_supervision.o(.text._ZN2ot19SupervisionListener12RestartTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::SupervisionListener::RestartTimer() &rArr; ot::TimerMilli::Start(unsigned int) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::GetRxOnWhenIdle() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::SetTimeout(unsigned short)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::Start()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::UpdateOnReceive(ot::Mac::Address const&, bool)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::HandleTimer()
</UL>

<P><STRONG><a name="[3d6]"></a>ot::SupervisionListener::UpdateOnReceive(ot::Mac::Address const&, bool)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, child_supervision.o(.text._ZN2ot19SupervisionListener15UpdateOnReceiveERKNS_3Mac7AddressEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = ot::SupervisionListener::UpdateOnReceive(ot::Mac::Address const&, bool) &rArr; ot::NeighborTable::FindNeighbor(ot::Mac::Address const&, ot::Neighbor::StateFilter) &rArr; ot::NeighborTable::FindNeighbor(ot::Neighbor::AddressMatcher const&) &rArr; ot::NeighborTable::FindChildOrRouter(ot::Neighbor::AddressMatcher const&) &rArr; ot::ChildTable::FindChild(ot::Neighbor::AddressMatcher const&) const &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Mac::Address const&, ot::Neighbor::StateFilter)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::RestartTimer()
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleReceivedFrame(ot::Mac::RxFrame&)
</UL>

<P><STRONG><a name="[3a3]"></a>ot::SupervisionListener::Stop()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, child_supervision.o(.text._ZN2ot19SupervisionListener4StopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::SupervisionListener::Stop() &rArr; ot::TimerMilli::Stop() &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SetRxOnWhenIdle(bool)
</UL>

<P><STRONG><a name="[3a5]"></a>ot::SupervisionListener::Start()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, child_supervision.o(.text._ZN2ot19SupervisionListener5StartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::SupervisionListener::Start() &rArr; ot::SupervisionListener::RestartTimer() &rArr; ot::TimerMilli::Start(unsigned int) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::RestartTimer()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SetRxOnWhenIdle(bool)
</UL>

<P><STRONG><a name="[4af]"></a>ot::SupervisionListener::SupervisionListener(ot::Instance&)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, child_supervision.o(.text._ZN2ot19SupervisionListenerC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::SetTimeout(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bd2]"></a>ot::SupervisionListener::SupervisionListener__sub_object(ot::Instance&)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, child_supervision.o(.text._ZN2ot19SupervisionListenerC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[4b0]"></a>ot::SourceMatchController::AddAddress(ot::Child const&)</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, src_match_controller.o(.text._ZN2ot21SourceMatchController10AddAddressERKNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ot::SourceMatchController::AddAddress(ot::Child const&) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::CopyAddress(unsigned char*, unsigned char const*, ot::Mac::ExtAddress::CopyByteOrder)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::ToString() const
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioAddSrcMatchShortEntry
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioAddSrcMatchExtEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::AddEntry(ot::Child&)
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::AddPendingEntries()
</UL>

<P><STRONG><a name="[4b4]"></a>ot::SourceMatchController::ClearEntry(ot::Child&)</STRONG> (Thumb, 236 bytes, Stack size 64 bytes, src_match_controller.o(.text._ZN2ot21SourceMatchController10ClearEntryERNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = ot::SourceMatchController::ClearEntry(ot::Child&) &rArr; ot::SourceMatchController::AddPendingEntries() &rArr; ot::SourceMatchController::AddAddress(ot::Child const&) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::CopyAddress(unsigned char*, unsigned char const*, ot::Mac::ExtAddress::CopyByteOrder)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::ToString() const
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioEnableSrcMatch
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioClearSrcMatchShortEntry
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioClearSrcMatchExtEntry
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::AddPendingEntries()
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::SetSrcMatchAsShort(ot::Child&, bool)
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::DecrementMessageCount(ot::Child&)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::ResetMessageCount(ot::Child&)
</UL>

<P><STRONG><a name="[4b9]"></a>ot::SourceMatchController::ClearTable()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, src_match_controller.o(.text._ZN2ot21SourceMatchController10ClearTableEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioClearSrcMatchShortEntries
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioClearSrcMatchExtEntries
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::SourceMatchController(ot::Instance&)
</UL>

<P><STRONG><a name="[4b7]"></a>ot::SourceMatchController::AddPendingEntries()</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, src_match_controller.o(.text._ZN2ot21SourceMatchController17AddPendingEntriesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ot::SourceMatchController::AddPendingEntries() &rArr; ot::SourceMatchController::AddAddress(ot::Child const&) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::AddAddress(ot::Child const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::AddEntry(ot::Child&)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::ClearEntry(ot::Child&)
</UL>

<P><STRONG><a name="[427]"></a>ot::SourceMatchController::ResetMessageCount(ot::Child&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, src_match_controller.o(.text._ZN2ot21SourceMatchController17ResetMessageCountERNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = ot::SourceMatchController::ResetMessageCount(ot::Child&) &rArr; ot::SourceMatchController::ClearEntry(ot::Child&) &rArr; ot::SourceMatchController::AddPendingEntries() &rArr; ot::SourceMatchController::AddAddress(ot::Child const&) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::ClearEntry(ot::Child&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::Stop()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::ClearAllMessagesForSleepyChild(ot::Child&)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleChildModeChange(ot::Child&, ot::Mle::DeviceMode)
</UL>

<P><STRONG><a name="[425]"></a>ot::SourceMatchController::SetSrcMatchAsShort(ot::Child&, bool)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, src_match_controller.o(.text._ZN2ot21SourceMatchController18SetSrcMatchAsShortERNS_5ChildEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ot::SourceMatchController::SetSrcMatchAsShort(ot::Child&, bool) &rArr; ot::SourceMatchController::ClearEntry(ot::Child&) &rArr; ot::SourceMatchController::AddPendingEntries() &rArr; ot::SourceMatchController::AddAddress(ot::Child const&) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::AddEntry(ot::Child&)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::ClearEntry(ot::Child&)
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::HandleDataPoll(ot::Mac::RxFrame&)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleSentFrameToChild(ot::Mac::TxFrame const&, ot::IndirectSenderBase::FrameContext const&, otError, ot::Child&)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::SetChildUseShortAddress(ot::Child&, bool)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleChildModeChange(ot::Child&, ot::Mle::DeviceMode)
</UL>

<P><STRONG><a name="[42b]"></a>ot::SourceMatchController::DecrementMessageCount(ot::Child&)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, src_match_controller.o(.text._ZN2ot21SourceMatchController21DecrementMessageCountERNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = ot::SourceMatchController::DecrementMessageCount(ot::Child&) &rArr; ot::SourceMatchController::ClearEntry(ot::Child&) &rArr; ot::SourceMatchController::AddPendingEntries() &rArr; ot::SourceMatchController::AddAddress(ot::Child const&) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::ClearEntry(ot::Child&)
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleSentFrameToChild(ot::Mac::TxFrame const&, ot::IndirectSenderBase::FrameContext const&, otError, ot::Child&)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&)
</UL>

<P><STRONG><a name="[42e]"></a>ot::SourceMatchController::IncrementMessageCount(ot::Child&)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, src_match_controller.o(.text._ZN2ot21SourceMatchController21IncrementMessageCountERNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = ot::SourceMatchController::IncrementMessageCount(ot::Child&) &rArr; ot::SourceMatchController::AddEntry(ot::Child&) &rArr; ot::SourceMatchController::AddPendingEntries() &rArr; ot::SourceMatchController::AddAddress(ot::Child const&) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::AddEntry(ot::Child&)
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::AddMessageForSleepyChild(ot::Message&, ot::Child&)
</UL>

<P><STRONG><a name="[4bc]"></a>ot::SourceMatchController::AddEntry(ot::Child&)</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, src_match_controller.o(.text._ZN2ot21SourceMatchController8AddEntryERNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = ot::SourceMatchController::AddEntry(ot::Child&) &rArr; ot::SourceMatchController::AddPendingEntries() &rArr; ot::SourceMatchController::AddAddress(ot::Child const&) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioEnableSrcMatch
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::AddPendingEntries()
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::AddAddress(ot::Child const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::SetSrcMatchAsShort(ot::Child&, bool)
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::IncrementMessageCount(ot::Child&)
</UL>

<P><STRONG><a name="[431]"></a>ot::SourceMatchController::SourceMatchController(ot::Instance&)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, src_match_controller.o(.text._ZN2ot21SourceMatchControllerC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::ClearTable()
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::IndirectSender(ot::Instance&)
</UL>

<P><STRONG><a name="[bd3]"></a>ot::SourceMatchController::SourceMatchController__sub_object(ot::Instance&)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, src_match_controller.o(.text._ZN2ot21SourceMatchControllerC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[74d]"></a>ot::LinkQualityForLinkMargin(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, link_quality.o(.text._ZN2ot24LinkQualityForLinkMarginEh))
<BR><BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkConvertRssToLinkQuality
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleParentResponse(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[afe]"></a>ot::GetTypicalRssForLinkQuality(signed char, ot::LinkQuality)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, link_quality.o(.text._ZN2ot27GetTypicalRssForLinkQualityEaNS_11LinkQualityE))
<BR><BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkConvertLinkQualityToRss
</UL>

<P><STRONG><a name="[4bd]"></a>ot::Cli::UdpExample::HandleUdpReceive(otMessage*, otMessageInfo const*)</STRONG> (Thumb, 104 bytes, Stack size 1520 bytes, cli_udp.o(.text._ZN2ot3Cli10UdpExample16HandleUdpReceiveEP9otMessagePK13otMessageInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688 + Unknown Stack Size
<LI>Call Chain = ot::Cli::UdpExample::HandleUdpReceive(otMessage*, otMessageInfo const*) &rArr; ot::Cli::Output::OutputIp6Address(otIp6Address const&) &rArr; otIp6AddressToString &rArr; ot::Ip6::Address::ToString(char*, unsigned short) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageRead
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageGetOffset
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageGetLength
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6Address(otIp6Address const&)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::UdpExample::HandleUdpReceive(void*, otMessage*, otMessageInfo const*)
</UL>

<P><STRONG><a name="[52]"></a>ot::Cli::UdpExample::HandleUdpReceive(void*, otMessage*, otMessageInfo const*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cli_udp.o(.text._ZN2ot3Cli10UdpExample16HandleUdpReceiveEPvP9otMessagePK13otMessageInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688 + Unknown Stack Size
<LI>Call Chain = ot::Cli::UdpExample::HandleUdpReceive(void*, otMessage*, otMessageInfo const*) &rArr; ot::Cli::UdpExample::HandleUdpReceive(otMessage*, otMessageInfo const*) &rArr; ot::Cli::Output::OutputIp6Address(otIp6Address const&) &rArr; otIp6AddressToString &rArr; ot::Ip6::Address::ToString(char*, unsigned short) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::UdpExample::HandleUdpReceive(otMessage*, otMessageInfo const*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_udp.o(.text._ZN2ot3Cli10UdpExample7ProcessILy1830547446EEE7otErrorPNS_5Utils13CmdLineParser3ArgE)
</UL>
<P><STRONG><a name="[4c4]"></a>ot::Cli::UdpExample::PrepareHexStringPayload(otMessage&, char const*)</STRONG> (Thumb, 74 bytes, Stack size 88 bytes, cli_udp.o(.text._ZN2ot3Cli10UdpExample23PrepareHexStringPayloadER9otMessagePKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = ot::Cli::UdpExample::PrepareHexStringPayload(otMessage&, char const*) &rArr; otMessageAppend &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageAppend
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsHexStringSegment(char const*&, unsigned short&, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;1665316120ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4c7]"></a>ot::Cli::UdpExample::PrepareAutoGeneratedPayload(otMessage&, unsigned short)</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, cli_udp.o(.text._ZN2ot3Cli10UdpExample27PrepareAutoGeneratedPayloadER9otMessaget))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = ot::Cli::UdpExample::PrepareAutoGeneratedPayload(otMessage&, unsigned short) &rArr; otMessageAppend &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageAppend
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;1665316120ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4c8]"></a>ot::Cli::UdpExample::Process(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, cli_udp.o(.text._ZN2ot3Cli10UdpExample7ProcessEPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ot::Cli::UdpExample::Process(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BinarySearch::Find(void const*, void const*, unsigned short, unsigned short, int (&)(void const*, void const*))
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7308417ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[d9]"></a>otError ot::Cli::UdpExample::Process&lang;12648424561679575046ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cli_udp.o(.text._ZN2ot3Cli10UdpExample7ProcessILy12648424561679575046EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = otError ot::Cli::UdpExample::Process&lang;12648424561679575046ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputEnabledDisabledStatus(bool) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputEnabledDisabledStatus(bool)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ParseEnableOrDisable(ot::Utils::CmdLineParser::Arg const&, bool&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_udp.o(.rodata._ZZN2ot3Cli10UdpExample7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[db]"></a>otError ot::Cli::UdpExample::Process&lang;1665316120ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 264 bytes, Stack size 80 bytes, cli_udp.o(.text._ZN2ot3Cli10UdpExample7ProcessILy1665316120EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::UdpExample::Process&lang;1665316120ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otUdpSend &rArr; ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageFree
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageAppend
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otUdpSend
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otUdpNewMessage
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::GetLength() const
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint16(char const*, unsigned short&)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::UdpExample::PrepareAutoGeneratedPayload(otMessage&, unsigned short)
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::UdpExample::PrepareHexStringPayload(otMessage&, char const*)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6AddressLine(otIp6Address const&)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ParseToIp6Address(otInstance*, ot::Utils::CmdLineParser::Arg const&, otIp6Address&, bool&)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_udp.o(.rodata._ZZN2ot3Cli10UdpExample7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[d6]"></a>otError ot::Cli::UdpExample::Process&lang;1665317123ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, cli_udp.o(.text._ZN2ot3Cli10UdpExample7ProcessILy1665317123EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = otError ot::Cli::UdpExample::Process&lang;1665317123ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Utils::CmdLineParser::ParseAsIp6Address(char const*, otIp6Address&) &rArr; otIp6AddressFromString &rArr; ot::Ip6::Address::FromString(char const*) &rArr; ot::Ip4::Address::FromString(char const*, char)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otUdpBind
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsIp6Address(char const*, otIp6Address&)
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint16(char const*, unsigned short&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_udp.o(.rodata._ZZN2ot3Cli10UdpExample7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[da]"></a>otError ot::Cli::UdpExample::Process&lang;1830547446ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cli_udp.o(.text._ZN2ot3Cli10UdpExample7ProcessILy1830547446EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::UdpExample::Process&lang;1830547446ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otUdpOpen &rArr; ot::Ip6::Udp::Open(ot::Ip6::Udp::SocketHandle&, void (*)(void*, otMessage*, otMessageInfo const*), void*) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otUdpOpen
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otUdpIsOpen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_udp.o(.rodata._ZZN2ot3Cli10UdpExample7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[d8]"></a>otError ot::Cli::UdpExample::Process&lang;32000442710786154ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, cli_udp.o(.text._ZN2ot3Cli10UdpExample7ProcessILy32000442710786154EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::UdpExample::Process&lang;32000442710786154ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Interpreter::ParseToIp6Address(otInstance*, ot::Utils::CmdLineParser::Arg const&, otIp6Address&, bool&) &rArr; otNat64SynthesizeIp6Address &rArr; ot::NetworkData::LeaderBase::GetPreferredNat64Prefix(ot::NetworkData::ExternalRouteConfig&) const &rArr; ot::NetworkData::NetworkData::GetNextExternalRoute(unsigned int&, ot::NetworkData::ExternalRouteConfig&) const &rArr; ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const &rArr; ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&) &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otUdpConnect
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint16(char const*, unsigned short&)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6AddressLine(otIp6Address const&)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ParseToIp6Address(otInstance*, ot::Utils::CmdLineParser::Arg const&, otIp6Address&, bool&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_udp.o(.rodata._ZZN2ot3Cli10UdpExample7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[d7]"></a>otError ot::Cli::UdpExample::Process&lang;428967416664ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cli_udp.o(.text._ZN2ot3Cli10UdpExample7ProcessILy428967416664EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = otError ot::Cli::UdpExample::Process&lang;428967416664ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otUdpClose &rArr; ot::Ip6::Udp::Close(ot::Ip6::Udp::SocketHandle&)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otUdpClose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_udp.o(.rodata._ZZN2ot3Cli10UdpExample7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[4d9]"></a>ot::Cli::UdpExample::UdpExample(otInstance*, ot::Cli::OutputImplementer&)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cli_udp.o(.text._ZN2ot3Cli10UdpExampleC2EP10otInstanceRNS0_17OutputImplementerE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::Interpreter(ot::Instance*, int (*)(void*, char const*, std::__va_list), void*)
</UL>

<P><STRONG><a name="[bd4]"></a>ot::Cli::UdpExample::UdpExample__sub_object(otInstance*, ot::Cli::OutputImplementer&)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cli_udp.o(.text._ZN2ot3Cli10UdpExampleC2EP10otInstanceRNS0_17OutputImplementerE), UNUSED)

<P><STRONG><a name="[4da]"></a>ot::Cli::Interpreter::OutputMode(unsigned char, otLinkModeConfig const&)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, cli.o(.text._ZN2ot3Cli11Interpreter10OutputModeEhRK16otLinkModeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ot::Cli::Interpreter::OutputMode(unsigned char, otLinkModeConfig const&) &rArr; ot::Cli::Output::OutputLine(unsigned char, char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(unsigned char, char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage const*, ot::Ip6::MessageInfo const*)
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputChildTableEntry(unsigned char, otNetworkDiagChildEntry const&)
</UL>

<P><STRONG><a name="[5c]"></a>ot::Cli::Interpreter::HandleTimer(ot::Timer&)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cli.o(.text._ZN2ot3Cli11Interpreter11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Interpreter::HandleTimer(ot::Timer&) &rArr; ot::Cli::Interpreter::OutputResult(otError) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputResult(otError)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.text._ZN2ot3Cli11InterpreterC2EPNS_8InstanceEPFiPvPKcSt9__va_listES4_)
</UL>
<P><STRONG><a name="[4dd]"></a>ot::Cli::Interpreter::OutputRoute(unsigned char, otNetworkDiagRoute const&)</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, cli.o(.text._ZN2ot3Cli11Interpreter11OutputRouteEhRK18otNetworkDiagRoute))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ot::Cli::Interpreter::OutputRoute(unsigned char, otNetworkDiagRoute const&) &rArr; ot::Cli::Interpreter::OutputRouteData(unsigned char, otNetworkDiagRouteData const&) &rArr; ot::Cli::Output::OutputLine(unsigned char, char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(unsigned char, char const*, ...)
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(unsigned char, char const*, ...)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputRouteData(unsigned char, otNetworkDiagRouteData const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage const*, ot::Ip6::MessageInfo const*)
</UL>

<P><STRONG><a name="[4e0]"></a>ot::Cli::Interpreter::ProcessLine(char*)</STRONG> (Thumb, 140 bytes, Stack size 152 bytes, cli.o(.text._ZN2ot3Cli11Interpreter11ProcessLineEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Interpreter::ProcessLine(char*) &rArr; ot::Cli::Interpreter::ProcessCommand(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Interpreter::ProcessUserCommands(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Utils::CmdLineParser::Arg::operator==(char const*) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringLength(char const*, unsigned short)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseCmd(char*, ot::Utils::CmdLineParser::Arg*, unsigned char)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessCommand(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputResult(otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCliInputLine
</UL>

<P><STRONG><a name="[4dc]"></a>ot::Cli::Interpreter::OutputResult(otError)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, cli.o(.text._ZN2ot3Cli11Interpreter12OutputResultE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Interpreter::OutputResult(otError) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadErrorToString
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleDetachGracefullyResult(void*)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleEnergyScanResult(otEnergyScanResult*)
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleActiveScanResult(otActiveScanResult*)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandlePingStatistics(otPingSenderStatistics const*)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessLine(char*)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleTimer(ot::Timer&)
</UL>

<P><STRONG><a name="[4e4]"></a>ot::Cli::Interpreter::PrintMacFilter()</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, cli.o(.text._ZN2ot3Cli11Interpreter14PrintMacFilterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Interpreter::PrintMacFilter() &rArr; ot::Cli::Interpreter::OutputMacFilterEntry(otMacFilterEntry const&) &rArr; ot::Cli::Output::OutputBytes(unsigned char const*, unsigned short) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkFilterGetNextRssIn
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkFilterGetNextAddress
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkFilterGetAddressMode
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkConvertRssToLinkQuality
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputMacFilterEntry(otMacFilterEntry const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;16075074835862503559ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4e3]"></a>ot::Cli::Interpreter::ProcessCommand(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, cli.o(.text._ZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ot::Cli::Interpreter::ProcessCommand(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Interpreter::ProcessUserCommands(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Utils::CmdLineParser::Arg::operator==(char const*) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BinarySearch::Find(void const*, void const*, unsigned short, unsigned short, int (&)(void const*, void const*))
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessUserCommands(ot::Utils::CmdLineParser::Arg*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessLine(char*)
</UL>

<P><STRONG><a name="[4eb]"></a>ot::Cli::Interpreter::HandlePingReply(otPingSenderReply const*)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter15HandlePingReplyEPK17otPingSenderReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Interpreter::HandlePingReply(otPingSenderReply const*) &rArr; ot::Cli::Output::OutputIp6Address(otIp6Address const&) &rArr; otIp6AddressToString &rArr; ot::Ip6::Address::ToString(char*, unsigned short) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6Address(otIp6Address const&)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandlePingReply(otPingSenderReply const*, void*)
</UL>

<P><STRONG><a name="[56]"></a>ot::Cli::Interpreter::HandlePingReply(otPingSenderReply const*, void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cli.o(.text._ZN2ot3Cli11Interpreter15HandlePingReplyEPK17otPingSenderReplyPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Interpreter::HandlePingReply(otPingSenderReply const*, void*) &rArr; ot::Cli::Interpreter::HandlePingReply(otPingSenderReply const*) &rArr; ot::Cli::Output::OutputIp6Address(otIp6Address const&) &rArr; otIp6AddressToString &rArr; ot::Ip6::Address::ToString(char*, unsigned short) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandlePingReply(otPingSenderReply const*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1715061262EEE7otErrorPNS_5Utils13CmdLineParser3ArgE)
</UL>
<P><STRONG><a name="[4df]"></a>ot::Cli::Interpreter::OutputRouteData(unsigned char, otNetworkDiagRouteData const&)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cli.o(.text._ZN2ot3Cli11Interpreter15OutputRouteDataEhRK22otNetworkDiagRouteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ot::Cli::Interpreter::OutputRouteData(unsigned char, otNetworkDiagRouteData const&) &rArr; ot::Cli::Output::OutputLine(unsigned char, char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(unsigned char, char const*, ...)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputRoute(unsigned char, otNetworkDiagRoute const&)
</UL>

<P><STRONG><a name="[54d]"></a>ot::Cli::Interpreter::LinkModeToString(otLinkModeConfig const&, char (&) [4])</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, cli.o(.text._ZN2ot3Cli11Interpreter16LinkModeToStringERK16otLinkModeConfigRA4_c))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;424622705244ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1681249789ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4ec]"></a>ot::Cli::Interpreter::OutputLeaderData(unsigned char, otLeaderData const&)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cli.o(.text._ZN2ot3Cli11Interpreter16OutputLeaderDataEhRK12otLeaderData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ot::Cli::Interpreter::OutputLeaderData(unsigned char, otLeaderData const&) &rArr; ot::Cli::Output::OutputLine(unsigned char, char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(unsigned char, char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage const*, ot::Ip6::MessageInfo const*)
</UL>

<P><STRONG><a name="[553]"></a>ot::Cli::Interpreter::ParsePingInterval(ot::Utils::CmdLineParser::Arg const&, unsigned int&)</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, cli.o(.text._ZN2ot3Cli11Interpreter17ParsePingIntervalERKNS_5Utils13CmdLineParser3ArgERj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Cli::Interpreter::ParsePingInterval(ot::Utils::CmdLineParser::Arg const&, unsigned int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1715061262ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4cc]"></a>ot::Cli::Interpreter::ParseToIp6Address(otInstance*, ot::Utils::CmdLineParser::Arg const&, otIp6Address&, bool&)</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, cli.o(.text._ZN2ot3Cli11Interpreter17ParseToIp6AddressEP10otInstanceRKNS_5Utils13CmdLineParser3ArgER12otIp6AddressRb))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Interpreter::ParseToIp6Address(otInstance*, ot::Utils::CmdLineParser::Arg const&, otIp6Address&, bool&) &rArr; otNat64SynthesizeIp6Address &rArr; ot::NetworkData::LeaderBase::GetPreferredNat64Prefix(ot::NetworkData::ExternalRouteConfig&) const &rArr; ot::NetworkData::NetworkData::GetNextExternalRoute(unsigned int&, ot::NetworkData::ExternalRouteConfig&) const &rArr; ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const &rArr; ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&) &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otNat64SynthesizeIp6Address
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsIp6Address(char const*, otIp6Address&)
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsIp4Address(char const*, otIp4Address&)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;32000442710786154ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;1665316120ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1715061262ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4ef]"></a>ot::Cli::Interpreter::SetCommandTimeout(unsigned int)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cli.o(.text._ZN2ot3Cli11Interpreter17SetCommandTimeoutEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Interpreter::SetCommandTimeout(unsigned int) &rArr; ot::TimerMilli::Start(unsigned int) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;5255620471931187573ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4f0]"></a>ot::Cli::Interpreter::OutputConnectivity(unsigned char, otNetworkDiagConnectivity const&)</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, cli.o(.text._ZN2ot3Cli11Interpreter18OutputConnectivityEhRK25otNetworkDiagConnectivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ot::Cli::Interpreter::OutputConnectivity(unsigned char, otNetworkDiagConnectivity const&) &rArr; ot::Cli::Output::OutputLine(unsigned char, char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(unsigned char, char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage const*, ot::Ip6::MessageInfo const*)
</UL>

<P><STRONG><a name="[5c5]"></a>ot::Cli::Interpreter::PreferenceToString(int)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cli.o(.text._ZN2ot3Cli11Interpreter18PreferenceToStringEi))
<BR><BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputPrefix(otBorderRouterConfig const&)
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputRoute(otExternalRouteConfig const&)
</UL>

<P><STRONG><a name="[4f1]"></a>ot::Cli::Interpreter::OutputEidCacheEntry(otCacheEntryInfo const&)</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, cli.o(.text._ZN2ot3Cli11Interpreter19OutputEidCacheEntryERK16otCacheEntryInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Interpreter::OutputEidCacheEntry(otCacheEntryInfo const&) &rArr; ot::Cli::Output::OutputIp6Address(otIp6Address const&) &rArr; otIp6AddressToString &rArr; ot::Ip6::Address::ToString(char*, unsigned short) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6Address(otIp6Address const&)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputNewLine()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7109832251570096126ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4f3]"></a>ot::Cli::Interpreter::ProcessMacFilterRss(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, cli.o(.text._ZN2ot3Cli11Interpreter19ProcessMacFilterRssEPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Interpreter::ProcessMacFilterRss(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Utils::CmdLineParser::ParseAsInt8(char const*, signed char&) &rArr; ot::Utils::CmdLineParser::ParseAsInt32(char const*, int&) &rArr; ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkFilterSetDefaultRssIn
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkFilterRemoveRssIn
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkFilterGetNextRssIn
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkFilterClearDefaultRssIn
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkFilterClearAllRssIn
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkFilterAddRssIn
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkConvertRssToLinkQuality
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkConvertLinkQualityToRss
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsHexString(char const*, unsigned char*, unsigned short)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint8(char const*, unsigned char&)
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsInt8(char const*, signed char&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputMacFilterEntry(otMacFilterEntry const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;16075074835862503559ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4ea]"></a>ot::Cli::Interpreter::ProcessUserCommands(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 84 bytes, Stack size 152 bytes, cli.o(.text._ZN2ot3Cli11Interpreter19ProcessUserCommandsEPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ot::Cli::Interpreter::ProcessUserCommands(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Utils::CmdLineParser::Arg::operator==(char const*) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::CopyArgsToStringArray(ot::Utils::CmdLineParser::Arg*, char**)
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::GetArgsLength(ot::Utils::CmdLineParser::Arg*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessCommand(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4ff]"></a>ot::Cli::Interpreter::HandlePingStatistics(otPingSenderStatistics const*)</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter20HandlePingStatisticsEPK22otPingSenderStatistics))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Interpreter::HandlePingStatistics(otPingSenderStatistics const*) &rArr; ot::Cli::Interpreter::OutputResult(otError) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputNewLine()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputResult(otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandlePingStatistics(otPingSenderStatistics const*, void*)
</UL>

<P><STRONG><a name="[57]"></a>ot::Cli::Interpreter::HandlePingStatistics(otPingSenderStatistics const*, void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cli.o(.text._ZN2ot3Cli11Interpreter20HandlePingStatisticsEPK22otPingSenderStatisticsPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Interpreter::HandlePingStatistics(otPingSenderStatistics const*, void*) &rArr; ot::Cli::Interpreter::HandlePingStatistics(otPingSenderStatistics const*) &rArr; ot::Cli::Interpreter::OutputResult(otError) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandlePingStatistics(otPingSenderStatistics const*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1715061262EEE7otErrorPNS_5Utils13CmdLineParser3ArgE)
</UL>
<P><STRONG><a name="[4e7]"></a>ot::Cli::Interpreter::OutputMacFilterEntry(otMacFilterEntry const&)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cli.o(.text._ZN2ot3Cli11Interpreter20OutputMacFilterEntryERK16otMacFilterEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Interpreter::OutputMacFilterEntry(otMacFilterEntry const&) &rArr; ot::Cli::Output::OutputBytes(unsigned char const*, unsigned short) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkConvertRssToLinkQuality
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputNewLine()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytes(unsigned char const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterAddress(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterRss(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::PrintMacFilter()
</UL>

<P><STRONG><a name="[4ca]"></a>ot::Cli::Interpreter::ParseEnableOrDisable(ot::Utils::CmdLineParser::Arg const&, bool&)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cli.o(.text._ZN2ot3Cli11Interpreter20ParseEnableOrDisableERKNS_5Utils13CmdLineParser3ArgERb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ot::Cli::Interpreter::ParseEnableOrDisable(ot::Utils::CmdLineParser::Arg const&, bool&) &rArr; ot::Utils::CmdLineParser::Arg::operator==(char const*) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;12648424561679575046ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8020460690342608375ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7506025ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7113069ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;31451632477041015ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;29525964638568806ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;15435009332132253075ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;14555083096433720913ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1030263388783878400ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[501]"></a>ot::Cli::Interpreter::ParseJoinerDiscerner(ot::Utils::CmdLineParser::Arg&, otJoinerDiscerner&)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter20ParseJoinerDiscernerERNS_5Utils13CmdLineParser3ArgER17otJoinerDiscerner))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ot::Cli::Interpreter::ParseJoinerDiscerner(ot::Utils::CmdLineParser::Arg&, otJoinerDiscerner&) &rArr; ot::Utils::CmdLineParser::ParseAsUint8(char const*, unsigned char&) &rArr; ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint8(char const*, unsigned char&)
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::NetworkData::Process&lang;3328099188798998309ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Joiner::Process&lang;16073431636142911865ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[504]"></a>ot::Cli::Interpreter::HandleLinkPcapReceive(otRadioFrame const*, bool)</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, cli.o(.text._ZN2ot3Cli11Interpreter21HandleLinkPcapReceiveEPK12otRadioFrameb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ot::Cli::Interpreter::HandleLinkPcapReceive(otRadioFrame const*, bool) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputNewLine()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleLinkPcapReceive(otRadioFrame const*, bool, void*)
</UL>

<P><STRONG><a name="[55]"></a>ot::Cli::Interpreter::HandleLinkPcapReceive(otRadioFrame const*, bool, void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cli.o(.text._ZN2ot3Cli11Interpreter21HandleLinkPcapReceiveEPK12otRadioFramebPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ot::Cli::Interpreter::HandleLinkPcapReceive(otRadioFrame const*, bool, void*) &rArr; ot::Cli::Interpreter::HandleLinkPcapReceive(otRadioFrame const*, bool) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleLinkPcapReceive(otRadioFrame const*, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy14555083096433720913EEE7otErrorPNS_5Utils13CmdLineParser3ArgE)
</UL>
<P><STRONG><a name="[505]"></a>ot::Cli::Interpreter::OutputChildTableEntry(unsigned char, otNetworkDiagChildEntry const&)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter21OutputChildTableEntryEhRK23otNetworkDiagChildEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ot::Cli::Interpreter::OutputChildTableEntry(unsigned char, otNetworkDiagChildEntry const&) &rArr; ot::Cli::Interpreter::OutputMode(unsigned char, otLinkModeConfig const&) &rArr; ot::Cli::Output::OutputLine(unsigned char, char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(unsigned char, char const*, ...)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputMode(unsigned char, otLinkModeConfig const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage const*, ot::Ip6::MessageInfo const*)
</UL>

<P><STRONG><a name="[506]"></a>ot::Cli::Interpreter::HandleActiveScanResult(otActiveScanResult*)</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, cli.o(.text._ZN2ot3Cli11Interpreter22HandleActiveScanResultEP18otActiveScanResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Interpreter::HandleActiveScanResult(otActiveScanResult*) &rArr; ot::Cli::Interpreter::OutputResult(otError) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytes(unsigned char const*, unsigned short)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputResult(otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleActiveScanResult(otActiveScanResult*, void*)
</UL>

<P><STRONG><a name="[59]"></a>ot::Cli::Interpreter::HandleActiveScanResult(otActiveScanResult*, void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cli.o(.text._ZN2ot3Cli11Interpreter22HandleActiveScanResultEP18otActiveScanResultPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Interpreter::HandleActiveScanResult(otActiveScanResult*, void*) &rArr; ot::Cli::Interpreter::HandleActiveScanResult(otActiveScanResult*) &rArr; ot::Cli::Interpreter::OutputResult(otError) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleActiveScanResult(otActiveScanResult*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy8020460690342608375EEE7otErrorPNS_5Utils13CmdLineParser3ArgE)
<LI> cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1830284035EEE7otErrorPNS_5Utils13CmdLineParser3ArgE)
</UL>
<P><STRONG><a name="[5b]"></a>ot::Cli::Interpreter::HandleDiscoveryRequest(otThreadDiscoveryRequestInfo const*, void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cli.o(.text._ZN2ot3Cli11Interpreter22HandleDiscoveryRequestEPK28otThreadDiscoveryRequestInfoPv))
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy8020460690342608375EEE7otErrorPNS_5Utils13CmdLineParser3ArgE)
</UL>
<P><STRONG><a name="[507]"></a>ot::Cli::Interpreter::HandleDiscoveryRequest(otThreadDiscoveryRequestInfo const&)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cli.o(.text._ZN2ot3Cli11Interpreter22HandleDiscoveryRequestERK28otThreadDiscoveryRequestInfo), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytes(unsigned char const*, unsigned short)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>

<P><STRONG><a name="[508]"></a>ot::Cli::Interpreter::HandleEnergyScanResult(otEnergyScanResult*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cli.o(.text._ZN2ot3Cli11Interpreter22HandleEnergyScanResultEP18otEnergyScanResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Interpreter::HandleEnergyScanResult(otEnergyScanResult*) &rArr; ot::Cli::Interpreter::OutputResult(otError) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputResult(otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleEnergyScanResult(otEnergyScanResult*, void*)
</UL>

<P><STRONG><a name="[58]"></a>ot::Cli::Interpreter::HandleEnergyScanResult(otEnergyScanResult*, void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cli.o(.text._ZN2ot3Cli11Interpreter22HandleEnergyScanResultEP18otEnergyScanResultPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Interpreter::HandleEnergyScanResult(otEnergyScanResult*, void*) &rArr; ot::Cli::Interpreter::HandleEnergyScanResult(otEnergyScanResult*) &rArr; ot::Cli::Interpreter::OutputResult(otError) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleEnergyScanResult(otEnergyScanResult*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1830284035EEE7otErrorPNS_5Utils13CmdLineParser3ArgE)
</UL>
<P><STRONG><a name="[509]"></a>ot::Cli::Interpreter::ProcessMacFilterAddress(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 352 bytes, Stack size 32 bytes, cli.o(.text._ZN2ot3Cli11Interpreter23ProcessMacFilterAddressEPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Interpreter::ProcessMacFilterAddress(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Utils::CmdLineParser::ParseAsInt8(char const*, signed char&) &rArr; ot::Utils::CmdLineParser::ParseAsInt32(char const*, int&) &rArr; ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkFilterSetAddressMode
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkFilterRemoveAddress
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkFilterGetNextAddress
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkFilterGetAddressMode
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkFilterClearAddresses
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkFilterAddRssIn
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkFilterAddAddress
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsHexString(char const*, unsigned char*, unsigned short)
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsInt8(char const*, signed char&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputMacFilterEntry(otMacFilterEntry const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;16075074835862503559ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5a]"></a>ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage*, otMessageInfo const*, void*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cli.o(.text._ZN2ot3Cli11Interpreter27HandleDiagnosticGetResponseE7otErrorP9otMessagePK13otMessageInfoPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage*, otMessageInfo const*, void*) &rArr; ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage const*, ot::Ip6::MessageInfo const*) &rArr; otThreadGetNextDiagnosticTlv &rArr; ot::NetworkDiagnostic::Client::GetNextDiagTlv(ot::Coap::Message const&, unsigned short&, otNetworkDiagTlv&) &rArr; otError ot::Tlv::ReadUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned short, unsigned short&) &rArr; ot::Tlv::ReadTlvValue(ot::Message const&, unsigned short, void*, unsigned char) &rArr; ot::Tlv::ParsedInfo::ParseFrom(ot::Message const&, unsigned short) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage const*, ot::Ip6::MessageInfo const*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy5255620471931187573EEE7otErrorPNS_5Utils13CmdLineParser3ArgE)
</UL>
<P><STRONG><a name="[50e]"></a>ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage const*, ot::Ip6::MessageInfo const*)</STRONG> (Thumb, 616 bytes, Stack size 416 bytes, cli.o(.text._ZN2ot3Cli11Interpreter27HandleDiagnosticGetResponseE7otErrorPK9otMessagePKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage const*, ot::Ip6::MessageInfo const*) &rArr; otThreadGetNextDiagnosticTlv &rArr; ot::NetworkDiagnostic::Client::GetNextDiagTlv(ot::Coap::Message const&, unsigned short&, otNetworkDiagTlv&) &rArr; otError ot::Tlv::ReadUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned short, unsigned short&) &rArr; ot::Tlv::ReadTlvValue(ot::Message const&, unsigned short, void*, unsigned char) &rArr; ot::Tlv::ParsedInfo::ParseFrom(ot::Message const&, unsigned short) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetNextDiagnosticTlv
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageRead
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageGetOffset
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageGetLength
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6AddressLine(otIp6Address const&)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6Address(otIp6Address const&)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytesLine(unsigned char const*, unsigned short)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputNewLine()
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(unsigned char, char const*, ...)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytes(unsigned char const*, unsigned short)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputNetworkDiagMacCounters(unsigned char, otNetworkDiagMacCounters const&)
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputChildTableEntry(unsigned char, otNetworkDiagChildEntry const&)
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputConnectivity(unsigned char, otNetworkDiagConnectivity const&)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputLeaderData(unsigned char, otLeaderData const&)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputRoute(unsigned char, otNetworkDiagRoute const&)
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputMode(unsigned char, otLinkModeConfig const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage*, otMessageInfo const*, void*)
</UL>

<P><STRONG><a name="[54]"></a>ot::Cli::Interpreter::HandleDetachGracefullyResult(void*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cli.o(.text._ZN2ot3Cli11Interpreter28HandleDetachGracefullyResultEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Interpreter::HandleDetachGracefullyResult(void*) &rArr; ot::Cli::Interpreter::OutputResult(otError) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputResult(otError)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy112553419349005EEE7otErrorPNS_5Utils13CmdLineParser3ArgE)
</UL>
<P><STRONG><a name="[511]"></a>ot::Cli::Interpreter::OutputNetworkDiagMacCounters(unsigned char, otNetworkDiagMacCounters const&)</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, cli.o(.text._ZN2ot3Cli11Interpreter28OutputNetworkDiagMacCountersEhRK24otNetworkDiagMacCounters))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ot::Cli::Interpreter::OutputNetworkDiagMacCounters(unsigned char, otNetworkDiagMacCounters const&) &rArr; ot::Cli::Output::OutputLine(unsigned char, char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(unsigned char, char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage const*, ot::Ip6::MessageInfo const*)
</UL>

<P><STRONG><a name="[120]"></a>otError ot::Cli::Interpreter::Process&lang;1030263388783878400ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1030263388783878400EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;1030263388783878400ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otThreadSetRouterEligible &rArr; ot::Mle::MleRouter::SetRouterEligible(bool) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetRouterEligible
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadIsRouterEligible
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputEnabledDisabledStatus(bool)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ParseEnableOrDisable(ot::Utils::CmdLineParser::Arg const&, bool&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[122]"></a>otError ot::Cli::Interpreter::Process&lang;10320315516056133487ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy10320315516056133487EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;10320315516056133487ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetRouterSelectionJitter
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetRouterSelectionJitter
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint8(char const*, unsigned char&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[127]"></a>otError ot::Cli::Interpreter::Process&lang;108232213406486ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy108232213406486EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;108232213406486ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otThreadSetEnabled &rArr; ot::Mle::Mle::Start(ot::Mle::Mle::StartMode) &rArr; ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetEnabled
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetVersion
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[10c]"></a>otError ot::Cli::Interpreter::Process&lang;11015563977516890969ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy11015563977516890969EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;11015563977516890969ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otThreadSetNetworkName &rArr; ot::MeshCoP::PendingDatasetManager::Clear() &rArr; ot::MeshCoP::DatasetManager::Clear() &rArr; ot::MeshCoP::DatasetLocal::Clear() &rArr; ot::Settings::DeleteOperationalDataset(ot::MeshCoP::Dataset::Type) &rArr; otPlatSettingsDelete &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetNetworkName
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetNetworkName
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[ec]"></a>otError ot::Cli::Interpreter::Process&lang;112553419349005ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy112553419349005EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;112553419349005ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otThreadDetachGracefully &rArr; ot::Mle::Mle::DetachGracefully(void (*)(void*), void*) &rArr; ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadDetachGracefully
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[105]"></a>otError ot::Cli::Interpreter::Process&lang;11302599500980265950ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy11302599500980265950EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;11302599500980265950ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[de]"></a>otError ot::Cli::Interpreter::Process&lang;11512677311266953430ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy11512677311266953430EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;11512677311266953430ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otPlatRadioSetCcaEnergyDetectThreshold &rArr; lmac15p4_phy_pib_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsInt8(char const*, signed char&)
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSetCcaEnergyDetectThreshold
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetCcaEnergyDetectThreshold
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[11a]"></a>otError ot::Cli::Interpreter::Process&lang;119073513618444ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy119073513618444EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;119073513618444ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSetRegion
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetRegion
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::GetLength() const
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[f9]"></a>otError ot::Cli::Interpreter::Process&lang;123339735204840ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy123339735204840EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;123339735204840ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputIp6AddressLine(otIp6Address const&) &rArr; otIp6AddressToString &rArr; ot::Ip6::Address::ToString(char*, unsigned short) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6RemoveUnicastAddress
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6GetUnicastAddresses
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6AddUnicastAddress
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetRloc
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetMeshLocalEid
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetLinkLocalIp6Address
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsIp6Address(char const*, otIp6Address&)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6AddressLine(otIp6Address const&)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6Address(otIp6Address const&)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputNewLine()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[fb]"></a>otError ot::Cli::Interpreter::Process&lang;123344129789161ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy123344129789161EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;123344129789161ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Joiner::Process(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Joiner::Process(ot::Utils::CmdLineParser::Arg*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[11e]"></a>otError ot::Cli::Interpreter::Process&lang;123344230057719ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 520 bytes, Stack size 64 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy123344230057719EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;123344230057719ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputTableHeader(unsigned char, char const* const*, unsigned char const*) &rArr; ot::Cli::Output::OutputTableSeparator(unsigned char, unsigned char const*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetRouterInfo
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetMaxRouterId
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint16(char const*, unsigned short&)
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputTableHeader(unsigned char, char const* const*, unsigned char const*)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytesLine(unsigned char const*, unsigned short)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputNewLine()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytes(unsigned char const*, unsigned short)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[10f]"></a>otError ot::Cli::Interpreter::Process&lang;125538443212822ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy125538443212822EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;125538443212822ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otThreadSearchForBetterParent &rArr; ot::Mle::Mle::SearchForBetterParent() &rArr; ot::Mle::Mle::Attach(ot::Mle::Mle::AttachMode) &rArr; ot::MeshCoP::DatasetManager::Restore() &rArr; ot::MeshCoP::DatasetLocal::Restore(ot::MeshCoP::Dataset&) &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSearchForBetterParent
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetParentInfo
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytesLine(unsigned char const*, unsigned short)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[fc]"></a>otError ot::Cli::Interpreter::Process&lang;1366262738558941672ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1366262738558941672EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;1366262738558941672ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otThreadSetJoinerUdpPort &rArr; ot::MeshCoP::JoinerRouter::SetJoinerUdpPort(unsigned short) &rArr; ot::MeshCoP::JoinerRouter::Start() &rArr; ot::Ip6::Filter::UpdateUnsecurePorts(ot::Ip6::Filter::Action, unsigned short) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetJoinerUdpPort
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetJoinerUdpPort
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint16(char const*, unsigned short&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[dd]"></a>otError ot::Cli::Interpreter::Process&lang;13711823289570935762ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 152 bytes, Stack size 112 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy13711823289570935762EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;13711823289570935762ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageResetBufferInfo
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageGetBufferInfo
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[11b]"></a>otError ot::Cli::Interpreter::Process&lang;13738210911291060331ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy13738210911291060331EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;13738210911291060331ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otThreadReleaseRouterId &rArr; ot::RouterTable::Release(unsigned char) &rArr; ot::AddressResolver::RemoveEntriesForRouterId(unsigned char) &rArr; ot::AddressResolver::Remove(unsigned short, bool) &rArr; ot::AddressResolver::RemoveCacheEntry(ot::AddressResolver::CacheEntry&, ot::AddressResolver::CacheEntryList&, ot::AddressResolver::CacheEntry*, ot::AddressResolver::Reason) &rArr; ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadReleaseRouterId
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint8(char const*, unsigned char&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[fd]"></a>otError ot::Cli::Interpreter::Process&lang;14182804244553304960ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy14182804244553304960EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;14182804244553304960ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otThreadSetKeySequenceCounter &rArr; ot::KeyManager::SetCurrentKeySequence(unsigned int) &rArr; ot::KeyManager::UpdateKeyMaterial() &rArr; ot::KeyManager::ComputeKeys(unsigned int, ot::KeyManager::HashKeys&) const &rArr; ot::Crypto::HmacSha256::Start(ot::Crypto::Key const&) &rArr; otPlatCryptoHmacSha256Start &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetKeySwitchGuardTime
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetKeySequenceCounter
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetKeySwitchGuardTime
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetKeySequenceCounter
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint32(char const*, unsigned int&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[116]"></a>otError ot::Cli::Interpreter::Process&lang;14555083096433720913ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy14555083096433720913EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;14555083096433720913ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otLinkSetPromiscuous &rArr; ot::Mac::Mac::SetPromiscuous(bool) &rArr; ot::Mac::Mac::UpdateIdleMode() &rArr; ot::Mac::SubMac::Receive(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkSetPromiscuous
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkSetPcapCallback
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkIsPromiscuous
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetPromiscuous
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputEnabledDisabledStatus(bool)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ParseEnableOrDisable(ot::Utils::CmdLineParser::Arg const&, bool&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[ff]"></a>otError ot::Cli::Interpreter::Process&lang;14765126478273032447ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy14765126478273032447EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;14765126478273032447ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetLocalLeaderWeight
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetLocalLeaderWeight
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint8(char const*, unsigned char&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[ed]"></a>otError ot::Cli::Interpreter::Process&lang;1495474164342561146ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1495474164342561146EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;1495474164342561146ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Utils::CmdLineParser::ParseAsInt8(char const*, signed char&) &rArr; ot::Utils::CmdLineParser::ParseAsInt32(char const*, int&) &rArr; ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetDeviceProperties
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetDeviceProperties
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsInt8(char const*, signed char&)
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsBool(char const*, bool&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[e4]"></a>otError ot::Cli::Interpreter::Process&lang;15073379119283750636ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy15073379119283750636EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;15073379119283750636ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetChildRouterLinks
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetChildRouterLinks
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint8(char const*, unsigned char&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[118]"></a>otError ot::Cli::Interpreter::Process&lang;15435009332132253075ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy15435009332132253075EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;15435009332132253075ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otLinkSetRadioFilterEnabled &rArr; ot::Mac::Mac::SetRadioFilterEnabled(bool) &rArr; ot::Mac::Mac::UpdateIdleMode() &rArr; ot::Mac::SubMac::Receive(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkSetRadioFilterEnabled
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkIsRadioFilterEnabled
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputEnabledDisabledStatus(bool)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ParseEnableOrDisable(ot::Utils::CmdLineParser::Arg const&, bool&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[f0]"></a>otError ot::Cli::Interpreter::Process&lang;1562345116032201233ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1562345116032201233EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;1562345116032201233ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otThreadSetDomainName &rArr; ot::MeshCoP::NetworkNameManager::SetDomainName(char const*) &rArr; ot::MeshCoP::NetworkName::Set(char const*) &rArr; ot::MeshCoP::NetworkName::Set(ot::MeshCoP::NameData const&) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetDomainName
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetDomainName
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[123]"></a>otError ot::Cli::Interpreter::Process&lang;15712178869698907848ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy15712178869698907848EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;15712178869698907848ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetRouterUpgradeThreshold
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetRouterUpgradeThreshold
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint8(char const*, unsigned char&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[102]"></a>otError ot::Cli::Interpreter::Process&lang;16075074835862503559ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy16075074835862503559EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;16075074835862503559ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Interpreter::ProcessMacFilterRss(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Utils::CmdLineParser::ParseAsInt8(char const*, signed char&) &rArr; ot::Utils::CmdLineParser::ParseAsInt32(char const*, int&) &rArr; ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterAddress(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterRss(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::PrintMacFilter()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[110]"></a>otError ot::Cli::Interpreter::Process&lang;16244709273642014994ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy16244709273642014994EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;16244709273642014994ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Utils::CmdLineParser::ParseAsInt8(char const*, signed char&) &rArr; ot::Utils::CmdLineParser::ParseAsInt32(char const*, int&) &rArr; ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetParentPriority
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetParentPriority
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsInt8(char const*, signed char&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[117]"></a>otError ot::Cli::Interpreter::Process&lang;1648543237ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1648543237EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;1648543237ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otThreadSetPskc &rArr; ot::MeshCoP::PendingDatasetManager::Clear() &rArr; ot::MeshCoP::DatasetManager::Clear() &rArr; ot::MeshCoP::DatasetLocal::Clear() &rArr; ot::Settings::DeleteOperationalDataset(ot::MeshCoP::Dataset::Type) &rArr; otPlatSettingsDelete &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetGeneratePskc
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetPskc
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetPskc
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetNetworkName
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetExtendedPanId
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsHexString(char const*, unsigned char*, unsigned short)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytesLine(unsigned char const*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[104]"></a>otError ot::Cli::Interpreter::Process&lang;1681249789ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1681249789EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;1681249789ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otThreadSetLinkMode &rArr; ot::Mle::Mle::SetDeviceMode(ot::Mle::DeviceMode) &rArr; ot::Mle::Mle::SetStateChild(unsigned short) &rArr; ot::Mle::MleRouter::HandleChildStart(ot::Mle::Mle::AttachMode) &rArr; ot::Mle::MleRouter::RemoveChildren() &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetLinkMode
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetLinkMode
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::LinkModeToString(otLinkModeConfig const&, char (&) [4])
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[f6]"></a>otError ot::Cli::Interpreter::Process&lang;1681701387ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1681701387EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;1681701387ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otThreadSendAddressNotification &rArr; ot::AddressResolver::SendAddressQueryResponse(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, unsigned int const*, ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSendAddressNotification
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsIp6Address(char const*, otIp6Address&)
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsHexString(char const*, unsigned char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[114]"></a>otError ot::Cli::Interpreter::Process&lang;16863212019509908256ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy16863212019509908256EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;16863212019509908256ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otLinkSetPollPeriod &rArr; ot::DataPollSender::SetExternalPollPeriod(unsigned int) &rArr; ot::DataPollSender::ScheduleNextPoll(ot::DataPollSender::PollPeriodSelector) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkSetPollPeriod
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkGetPollPeriod
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint32(char const*, unsigned int&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[112]"></a>otError ot::Cli::Interpreter::Process&lang;1715061262ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 328 bytes, Stack size 96 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1715061262EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;1715061262ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otPingSenderPing &rArr; ot::Utils::PingSender::Ping(ot::Utils::PingSender::Config const&) &rArr; ot::Utils::PingSender::SendPing() &rArr; ot::Ip6::Icmp::SendEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&, unsigned short) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPingSenderStop
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPingSenderPing
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsIp6Address(char const*, otIp6Address&)
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint16(char const*, unsigned short&)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint8(char const*, unsigned char&)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6AddressLine(otIp6Address const&)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ParseToIp6Address(otInstance*, ot::Utils::CmdLineParser::Arg const&, otIp6Address&, bool&)
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ParsePingInterval(ot::Utils::CmdLineParser::Arg const&, unsigned int&)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[124]"></a>otError ot::Cli::Interpreter::Process&lang;1830284035ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1830284035EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;1830284035ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otLinkEnergyScan &rArr; ot::Mac::Mac::EnergyScan(unsigned int, unsigned short, void (*)(otEnergyScanResult*, void*), void*) &rArr; ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkEnergyScan
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkActiveScan
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint16(char const*, unsigned short&)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint8(char const*, unsigned char&)
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputTableHeader(unsigned char, char const* const*, unsigned char const*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[e7]"></a>otError ot::Cli::Interpreter::Process&lang;1863449829ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1863449829EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;1863449829ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Coap::Process(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::Process(ot::Utils::CmdLineParser::Arg*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[111]"></a>otError ot::Cli::Interpreter::Process&lang;1998604769390126437ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy1998604769390126437EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;1998604769390126437ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetPreferredLeaderPartitionId
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetPreferredLeaderPartitionId
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetPartitionId
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint32(char const*, unsigned int&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[f2]"></a>otError ot::Cli::Interpreter::Process&lang;220771284311ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy220771284311EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;220771284311ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputBytesLine(unsigned char const*, unsigned short) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkGetFactoryAssignedIeeeEui64
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytesLine(unsigned char const*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[107]"></a>otError ot::Cli::Interpreter::Process&lang;26794857157895015ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy26794857157895015EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;26794857157895015ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::NetworkData::Process(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::Process(ot::Utils::CmdLineParser::Arg*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[10b]"></a>otError ot::Cli::Interpreter::Process&lang;2882870027264844783ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy2882870027264844783EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;2882870027264844783ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otThreadSetNetworkKey &rArr; ot::MeshCoP::PendingDatasetManager::Clear() &rArr; ot::MeshCoP::DatasetManager::Clear() &rArr; ot::MeshCoP::DatasetLocal::Clear() &rArr; ot::Settings::DeleteOperationalDataset(ot::MeshCoP::Dataset::Type) &rArr; otPlatSettingsDelete &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetNetworkKey
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetNetworkKey
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsHexString(char const*, unsigned char*, unsigned short)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytesLine(unsigned char const*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[128]"></a>otError ot::Cli::Interpreter::Process&lang;29525964638568806ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy29525964638568806EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;29525964638568806ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Interpreter::ParseEnableOrDisable(ot::Utils::CmdLineParser::Arg const&, bool&) &rArr; ot::Utils::CmdLineParser::Arg::operator==(char const*) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetThreadVersionCheckEnabled
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ParseEnableOrDisable(ot::Utils::CmdLineParser::Arg const&, bool&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[e0]"></a>otError ot::Cli::Interpreter::Process&lang;29803101196888419ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy29803101196888419EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;29803101196888419ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otLinkSetChannel &rArr; ot::MeshCoP::PendingDatasetManager::Clear() &rArr; ot::MeshCoP::DatasetManager::Clear() &rArr; ot::MeshCoP::DatasetLocal::Clear() &rArr; ot::Settings::DeleteOperationalDataset(ot::MeshCoP::Dataset::Type) &rArr; otPlatSettingsDelete &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkSetChannel
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkGetChannel
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetSupportedChannelMask
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetPreferredChannelMask
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint8(char const*, unsigned char&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[e6]"></a>otError ot::Cli::Interpreter::Process&lang;303229889220393947ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy303229889220393947EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;303229889220393947ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otThreadSetChildTimeout &rArr; ot::Mle::Mle::SetTimeout(unsigned int) &rArr; ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetChildTimeout
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetChildTimeout
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint32(char const*, unsigned int&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[12c]"></a>otError ot::Cli::Interpreter::Process&lang;30363746172521848ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy30363746172521848EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;30363746172521848ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otGetVersionString
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[e2]"></a>otError ot::Cli::Interpreter::Process&lang;30907139684939619ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 232 bytes, Stack size 96 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy30907139684939619EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;30907139684939619ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputIp6AddressLine(otIp6Address const&) &rArr; otIp6AddressToString &rArr; ot::Ip6::Address::ToString(char*, unsigned short) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetMaxChildIpAddresses
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetMaxChildIpAddresses
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetMaxAllowedChildren
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetChildNextIp6Address
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetChildInfoByIndex
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint8(char const*, unsigned char&)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6AddressLine(otIp6Address const&)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[10d]"></a>otError ot::Cli::Interpreter::Process&lang;30913625955023990ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy30913625955023990EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;30913625955023990ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputTableHeader(unsigned char, char const* const*, unsigned char const*) &rArr; ot::Cli::Output::OutputTableSeparator(unsigned char, unsigned char const*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadIsRouterIdAllocated
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetNextHopAndPathCost
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint16(char const*, unsigned short&)
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputTableHeader(unsigned char, char const* const*, unsigned char const*)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[fa]"></a>otError ot::Cli::Interpreter::Process&lang;31451632477041015ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy31451632477041015EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;31451632477041015ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputIp6AddressLine(otIp6Address const&) &rArr; otIp6AddressToString &rArr; ot::Ip6::Address::ToString(char*, unsigned short) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6UnsubscribeMulticastAddress
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6SubscribeMulticastAddress
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6SetMulticastPromiscuousEnabled
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6IsMulticastPromiscuousEnabled
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6GetMulticastAddresses
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetRealmLocalAllThreadNodesMulticastAddress
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetLinkLocalAllThreadNodesMulticastAddress
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsIp6Address(char const*, otIp6Address&)
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputEnabledDisabledStatus(bool)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6AddressLine(otIp6Address const&)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ParseEnableOrDisable(ot::Utils::CmdLineParser::Arg const&, bool&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[f3]"></a>otError ot::Cli::Interpreter::Process&lang;31451632477498226ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy31451632477498226EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;31451632477498226ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otLinkSetExtendedAddress &rArr; ot::Mac::SubMac::SetExtAddress(ot::Mac::ExtAddress const&) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkSetExtendedAddress
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkGetExtendedAddress
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsHexString(char const*, unsigned char*, unsigned short)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytesLine(unsigned char const*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[129]"></a>otError ot::Cli::Interpreter::Process&lang;31452791250048641ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy31452791250048641EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;31452791250048641ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Utils::CmdLineParser::ParseAsInt8(char const*, signed char&) &rArr; ot::Utils::CmdLineParser::ParseAsInt32(char const*, int&) &rArr; ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsInt8(char const*, signed char&)
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSetTransmitPower
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetTransmitPower
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[108]"></a>otError ot::Cli::Interpreter::Process&lang;31998349810021265ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy31998349810021265EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;31998349810021265ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otIp6SockAddrToString &rArr; ot::Ip6::SockAddr::ToString(char*, unsigned short) const &rArr; ot::Ip6::Address::ToString() const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6SockAddrToString
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otUdpGetSockets
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputTableHeader(unsigned char, char const* const*, unsigned char const*)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[121]"></a>otError ot::Cli::Interpreter::Process&lang;3200263406431374201ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy3200263406431374201EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;3200263406431374201ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetRouterIdRange
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetRouterIdRange
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint8(char const*, unsigned char&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[ea]"></a>otError ot::Cli::Interpreter::Process&lang;32002658098942360ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy32002658098942360EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;32002658098942360ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Dataset::Process(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Dataset::Print(otOperationalDatasetTlvs&) &rArr; otDatasetParseTlvs &rArr; ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const &rArr; ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy() const &rArr; ot::SecurityPolicy::SetFlags(unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Dataset::Process(ot::Utils::CmdLineParser::Arg*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[103]"></a>otError ot::Cli::Interpreter::Process&lang;424572962149ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy424572962149EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;424572962149ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Utils::CmdLineParser::ParseAsHexString(char const*, unsigned char*, unsigned short) &rArr; ot::Utils::CmdLineParser::ParseHexString(char const*&, unsigned short&, unsigned char*, ot::Utils::CmdLineParser::HexStringParseMode)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6SetMeshLocalIid
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsHexString(char const*, unsigned char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[10e]"></a>otError ot::Cli::Interpreter::Process&lang;424573284472ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy424573284472EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;424573284472ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otLinkSetPanId &rArr; ot::MeshCoP::PendingDatasetManager::Clear() &rArr; ot::MeshCoP::DatasetManager::Clear() &rArr; ot::MeshCoP::DatasetLocal::Clear() &rArr; ot::Settings::DeleteOperationalDataset(ot::MeshCoP::Dataset::Type) &rArr; otPlatSettingsDelete &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkSetPanId
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkGetPanId
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint16(char const*, unsigned short&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[e1]"></a>otError ot::Cli::Interpreter::Process&lang;424622705244ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 636 bytes, Stack size 80 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy424622705244EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;424622705244ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputTableHeader(unsigned char, char const* const*, unsigned char const*) &rArr; ot::Cli::Output::OutputTableSeparator(unsigned char, unsigned char const*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetMaxAllowedChildren
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetChildInfoByIndex
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetChildInfoById
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint16(char const*, unsigned short&)
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputTableHeader(unsigned char, char const* const*, unsigned char const*)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytesLine(unsigned char const*, unsigned short)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputNewLine()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytes(unsigned char const*, unsigned short)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::LinkModeToString(otLinkModeConfig const&, char (&) [4])
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[126]"></a>otError ot::Cli::Interpreter::Process&lang;428983089745ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy428983089745EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;428983089745ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otThreadBecomeLeader &rArr; ot::Mle::MleRouter::BecomeLeader() &rArr; ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode) &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadBecomeRouter
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadBecomeLeader
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetDeviceRole
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadDeviceRoleToString
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadBecomeDetached
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadBecomeChild
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[11c]"></a>otError ot::Cli::Interpreter::Process&lang;492159295119ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy492159295119EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;492159295119ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otInstanceReset &rArr; ot::Instance::Reset() &rArr; otPlatReset &rArr; Wdt_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otInstanceReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[11f]"></a>otError ot::Cli::Interpreter::Process&lang;5021455550522604481ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy5021455550522604481EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;5021455550522604481ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetRouterDowngradeThreshold
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetRouterDowngradeThreshold
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint8(char const*, unsigned char&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[10a]"></a>otError ot::Cli::Interpreter::Process&lang;5126223071761830632ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy5126223071761830632EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;5126223071761830632ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetNetworkIdTimeout
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetNetworkIdTimeout
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint8(char const*, unsigned char&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[109]"></a>otError ot::Cli::Interpreter::Process&lang;5255620471931187573ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 184 bytes, Stack size 72 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy5255620471931187573EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;5255620471931187573ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otThreadSendDiagnosticGet &rArr; ot::NetworkDiagnostic::Client::SendDiagnosticGet(ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(otError, otMessage*, otMessageInfo const*, void*), void*) &rArr; ot::NetworkDiagnostic::Client::SendCommand(ot::Uri, ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::CoapBase::NewNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSendDiagnosticReset
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSendDiagnosticGet
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsIp6Address(char const*, otIp6Address&)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint8(char const*, unsigned char&)
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::SetCommandTimeout(unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[eb]"></a>otError ot::Cli::Interpreter::Process&lang;5345021259271145584ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy5345021259271145584EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;5345021259271145584ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetSetDelayTimerMinimal
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetGetDelayTimerMinimal
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint32(char const*, unsigned int&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[fe]"></a>otError ot::Cli::Interpreter::Process&lang;5743589040336375053ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy5743589040336375053EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;5743589040336375053ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetLeaderData
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[11d]"></a>otError ot::Cli::Interpreter::Process&lang;58431844188429ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy58431844188429EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;58431844188429ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetRloc16
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[125]"></a>otError ot::Cli::Interpreter::Process&lang;603988223085374603ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy603988223085374603EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;603988223085374603ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadIsSingleton
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[101]"></a>otError ot::Cli::Interpreter::Process&lang;6462319ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy6462319EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;6462319ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otLinkSendEmptyData &rArr; ot::MeshForwarder::SendEmptyMessage() &rArr; ot::MessagePool::Allocate(ot::Message::Type) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkSetMaxFrameRetriesIndirect
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkSetMaxFrameRetriesDirect
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkSendEmptyData
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkSendDataRequest
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkGetMaxFrameRetriesIndirect
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkGetMaxFrameRetriesDirect
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint8(char const*, unsigned char&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[100]"></a>otError ot::Cli::Interpreter::Process&lang;6725988ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy6725988EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;6725988ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLoggingSetLevel
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLoggingGetLevel
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint8(char const*, unsigned char&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[f4]"></a>otError ot::Cli::Interpreter::Process&lang;7040008844819482601ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy7040008844819482601EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;7040008844819482601ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otThreadSetExtendedPanId &rArr; ot::MeshCoP::PendingDatasetManager::Clear() &rArr; ot::MeshCoP::DatasetManager::Clear() &rArr; ot::MeshCoP::DatasetLocal::Clear() &rArr; ot::Settings::DeleteOperationalDataset(ot::MeshCoP::Dataset::Type) &rArr; otPlatSettingsDelete &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetExtendedPanId
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetExtendedPanId
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsHexString(char const*, unsigned char*, unsigned short)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytesLine(unsigned char const*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[f1]"></a>otError ot::Cli::Interpreter::Process&lang;7109832251570096126ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 56 bytes, Stack size 80 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy7109832251570096126EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;7109832251570096126ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Interpreter::OutputEidCacheEntry(otCacheEntryInfo const&) &rArr; ot::Cli::Output::OutputIp6Address(otIp6Address const&) &rArr; otIp6AddressToString &rArr; ot::Ip6::Address::ToString(char*, unsigned short) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetNextCacheEntry
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputEidCacheEntry(otCacheEntryInfo const&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[df]"></a>otError ot::Cli::Interpreter::Process&lang;7113069ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy7113069EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;7113069ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Interpreter::ParseEnableOrDisable(ot::Utils::CmdLineParser::Arg const&, bool&) &rArr; ot::Utils::CmdLineParser::Arg::operator==(char const*) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetCcmEnabled
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ParseEnableOrDisable(ot::Utils::CmdLineParser::Arg const&, bool&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[f7]"></a>otError ot::Cli::Interpreter::Process&lang;7113582ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy7113582EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;7113582ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Utils::CmdLineParser::ParseAsInt8(char const*, signed char&) &rArr; ot::Utils::CmdLineParser::ParseAsInt32(char const*, int&) &rArr; ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsInt8(char const*, signed char&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSetFemLnaGain
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetFemLnaGain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[f8]"></a>otError ot::Cli::Interpreter::Process&lang;7250330901759102465ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy7250330901759102465EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;7250330901759102465ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otIp6SetEnabled &rArr; ot::ThreadNetif::Down() &rArr; ot::Mle::Mle::Disable() &rArr; ot::Mle::Mle::Stop(ot::Mle::Mle::StopMode) &rArr; ot::MeshCoP::DatasetManager::HandleDetach() &rArr; ot::MeshCoP::DatasetManager::Restore() &rArr; ot::MeshCoP::DatasetLocal::Restore(ot::MeshCoP::Dataset&) &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6SetEnabled
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6IsEnabled
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[119]"></a>otError ot::Cli::Interpreter::Process&lang;7308159ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy7308159EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;7308159ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetVersionString
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otGetVersionString
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[12a]"></a>otError ot::Cli::Interpreter::Process&lang;7308417ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy7308417EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;7308417ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::UdpExample::Process(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::UdpExample::Process(ot::Utils::CmdLineParser::Arg*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[dc]"></a>otError ot::Cli::Interpreter::Process&lang;7437938ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy7437938EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;7437938ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otBackboneRouterGetPrimary
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[ef]"></a>otError ot::Cli::Interpreter::Process&lang;7506025ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy7506025EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;7506025ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputEnabledDisabledStatus(bool) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDnsSetNameCompressionEnabled
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDnsIsNameCompressionEnabled
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputEnabledDisabledStatus(bool)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ParseEnableOrDisable(ot::Utils::CmdLineParser::Arg const&, bool&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[113]"></a>otError ot::Cli::Interpreter::Process&lang;7673476305065732077ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy7673476305065732077EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;7673476305065732077ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[f5]"></a>otError ot::Cli::Interpreter::Process&lang;775738714908436955ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy775738714908436955EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;775738714908436955ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otInstanceFactoryReset &rArr; ot::Instance::FactoryReset() &rArr; ot::Settings::Wipe() &rArr; otPlatSettingsWipe &rArr; efd_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otInstanceFactoryReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[ee]"></a>otError ot::Cli::Interpreter::Process&lang;8020460690342608375ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy8020460690342608375EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;8020460690342608375ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otThreadDiscover &rArr; ot::Mle::DiscoverScanner::Discover(ot::Mac::ChannelMask const&, unsigned short, bool, bool, ot::MeshCoP::SteeringData::HashBitIndexes const*, void (*)(otActiveScanResult*, void*), void*) &rArr; ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&) &rArr; ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetDiscoveryRequestCallback
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadDiscover
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint8(char const*, unsigned char&)
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputTableHeader(unsigned char, char const* const*, unsigned char const*)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ParseEnableOrDisable(ot::Utils::CmdLineParser::Arg const&, bool&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[106]"></a>otError ot::Cli::Interpreter::Process&lang;8023188516701246990ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 532 bytes, Stack size 88 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy8023188516701246990EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;8023188516701246990ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputTableHeader(unsigned char, char const* const*, unsigned char const*) &rArr; ot::Cli::Output::OutputTableSeparator(unsigned char, unsigned char const*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetNextNeighborInfo
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::PercentageToString(unsigned short, ot::Cli::Output::PercentageStringBuffer&)
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputTableHeader(unsigned char, char const* const*, unsigned char const*)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputNewLine()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytes(unsigned char const*, unsigned short)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[e5]"></a>otError ot::Cli::Interpreter::Process&lang;8059602322220575993ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy8059602322220575993EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;8059602322220575993ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otChildSupervisionSetInterval &rArr; ot::SupervisionListener::SetInterval(unsigned short) &rArr; ot::Mle::Mle::SendChildUpdateRequest() &rArr; ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otChildSupervisionSetInterval
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otChildSupervisionSetCheckTimeout
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otChildSupervisionResetCheckFailureCounter
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otChildSupervisionGetInterval
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otChildSupervisionGetCheckTimeout
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otChildSupervisionGetCheckFailureCounter
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint16(char const*, unsigned short&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[12b]"></a>otError ot::Cli::Interpreter::Process&lang;807264858141456911ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy807264858141456911EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;807264858141456911ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otIp6RemoveUnsecurePort &rArr; ot::Ip6::Filter::UpdateUnsecurePorts(ot::Ip6::Filter::Action, unsigned short) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6RemoveUnsecurePort
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6RemoveAllUnsecurePorts
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6GetUnsecurePorts
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6AddUnsecurePort
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint16(char const*, unsigned short&)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputNewLine()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[e9]"></a>otError ot::Cli::Interpreter::Process&lang;8094126837366616329ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy8094126837366616329EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;8094126837366616329ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(unsigned char, char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkResetCounters
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkGetCounters
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadResetMleCounters
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadResetIp6Counters
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetMleCounters
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetIp6Counters
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(unsigned char, char const*, ...)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[115]"></a>otError ot::Cli::Interpreter::Process&lang;8228328825147909356ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy8228328825147909356EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;8228328825147909356ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Utils::CmdLineParser::ParseAsUint8(char const*, unsigned char&) &rArr; ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetPreferredRouterId
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint8(char const*, unsigned char&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[e3]"></a>otError ot::Cli::Interpreter::Process&lang;8440012427400342744ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy8440012427400342744EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;8440012427400342744ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otThreadSetMaxAllowedChildren &rArr; ot::ChildTable::SetMaxChildrenAllowed(unsigned short) &rArr; ot::ChildTable::HasChildren(ot::Neighbor::StateFilter) const &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetMaxAllowedChildren
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetMaxAllowedChildren
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint16(char const*, unsigned short&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[e8]"></a>otError ot::Cli::Interpreter::Process&lang;8846784157991210846ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11Interpreter7ProcessILy8846784157991210846EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = otError ot::Cli::Interpreter::Process&lang;8846784157991210846ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetContextIdReuseDelay
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetContextIdReuseDelay
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint32(char const*, unsigned int&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli.o(.rodata._ZZN2ot3Cli11Interpreter14ProcessCommandEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[5c0]"></a>ot::Cli::Interpreter::Interpreter(ot::Instance*, int (*)(void*, char const*, std::__va_list), void*)</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11InterpreterC2EPNS_8InstanceEPFiPvPKcSt9__va_listES4_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::Coap(otInstance*, ot::Cli::OutputImplementer&)
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::OutputImplementer::OutputImplementer__sub_object(int (*)(void*, char const*, std::__va_list), void*)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::UdpExample::UdpExample(otInstance*, ot::Cli::OutputImplementer&)
</UL>

<P><STRONG><a name="[af1]"></a>ot::Cli::Interpreter::Interpreter__sub_object(ot::Instance*, int (*)(void*, char const*, std::__va_list), void*)</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cli.o(.text._ZN2ot3Cli11InterpreterC2EPNS_8InstanceEPFiPvPKcSt9__va_listES4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::Cli::Interpreter::Interpreter__sub_object(ot::Instance*, int (*)(void*, char const*, std::__va_list), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCliInit
</UL>

<P><STRONG><a name="[5c3]"></a>ot::Cli::NetworkData::OutputRoute(otExternalRouteConfig const&)</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, cli_network_data.o(.text._ZN2ot3Cli11NetworkData11OutputRouteERK21otExternalRouteConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ot::Cli::NetworkData::OutputRoute(otExternalRouteConfig const&) &rArr; ot::Cli::Output::OutputIp6Prefix(otIp6Prefix const&) &rArr; otIp6PrefixToString &rArr; ot::Ip6::Prefix::ToString(char*, unsigned short) const &rArr; ot::Ip6::Prefix::ToString(ot::StringWriter&) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6Prefix(otIp6Prefix const&)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::PreferenceToString(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputRoutes(bool)
</UL>

<P><STRONG><a name="[5c6]"></a>ot::Cli::NetworkData::OutputBinary(bool)</STRONG> (Thumb, 54 bytes, Stack size 264 bytes, cli_network_data.o(.text._ZN2ot3Cli11NetworkData12OutputBinaryEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = ot::Cli::NetworkData::OutputBinary(bool) &rArr; otNetDataGet &rArr; ot::NetworkData::NetworkData::CopyNetworkData(ot::NetworkData::Type, unsigned char*, unsigned char&) const &rArr; ot::NetworkData::MutableNetworkData::RemoveTemporaryData() &rArr; ot::NetworkData::MutableNetworkData::RemoveTemporaryDataIn(ot::NetworkData::PrefixTlv&) &rArr; ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otNetDataGet
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytesLine(unsigned char const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::NetworkData::Process&lang;1980428035ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5c8]"></a>ot::Cli::NetworkData::OutputPrefix(otBorderRouterConfig const&)</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, cli_network_data.o(.text._ZN2ot3Cli11NetworkData12OutputPrefixERK20otBorderRouterConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ot::Cli::NetworkData::OutputPrefix(otBorderRouterConfig const&) &rArr; ot::Cli::Output::OutputIp6Prefix(otIp6Prefix const&) &rArr; otIp6PrefixToString &rArr; ot::Ip6::Prefix::ToString(char*, unsigned short) const &rArr; ot::Ip6::Prefix::ToString(ot::StringWriter&) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6Prefix(otIp6Prefix const&)
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::PrefixFlagsToString(otBorderRouterConfig const&, char (&) [17])
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::PreferenceToString(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputPrefixes(bool)
</UL>

<P><STRONG><a name="[5ca]"></a>ot::Cli::NetworkData::OutputRoutes(bool)</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, cli_network_data.o(.text._ZN2ot3Cli11NetworkData12OutputRoutesEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ot::Cli::NetworkData::OutputRoutes(bool) &rArr; ot::Cli::NetworkData::OutputRoute(otExternalRouteConfig const&) &rArr; ot::Cli::Output::OutputIp6Prefix(otIp6Prefix const&) &rArr; otIp6PrefixToString &rArr; ot::Ip6::Prefix::ToString(char*, unsigned short) const &rArr; ot::Ip6::Prefix::ToString(ot::StringWriter&) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otNetDataGetNextRoute
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputRoute(otExternalRouteConfig const&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::NetworkData::Process&lang;1980428035ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5cc]"></a>ot::Cli::NetworkData::OutputService(otServiceConfig const&)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cli_network_data.o(.text._ZN2ot3Cli11NetworkData13OutputServiceERK15otServiceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ot::Cli::NetworkData::OutputService(otServiceConfig const&) &rArr; ot::Cli::Output::OutputBytes(unsigned char const*, unsigned short) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytes(unsigned char const*, unsigned short)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputServices(bool)
</UL>

<P><STRONG><a name="[5cd]"></a>ot::Cli::NetworkData::OutputPrefixes(bool)</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, cli_network_data.o(.text._ZN2ot3Cli11NetworkData14OutputPrefixesEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ot::Cli::NetworkData::OutputPrefixes(bool) &rArr; ot::Cli::NetworkData::OutputPrefix(otBorderRouterConfig const&) &rArr; ot::Cli::Output::OutputIp6Prefix(otIp6Prefix const&) &rArr; otIp6PrefixToString &rArr; ot::Ip6::Prefix::ToString(char*, unsigned short) const &rArr; ot::Ip6::Prefix::ToString(ot::StringWriter&) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otNetDataGetNextOnMeshPrefix
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputPrefix(otBorderRouterConfig const&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::NetworkData::Process&lang;1980428035ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5cf]"></a>ot::Cli::NetworkData::OutputServices(bool)</STRONG> (Thumb, 68 bytes, Stack size 536 bytes, cli_network_data.o(.text._ZN2ot3Cli11NetworkData14OutputServicesEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = ot::Cli::NetworkData::OutputServices(bool) &rArr; otNetDataGetNextService &rArr; ot::NetworkData::NetworkData::GetNextService(unsigned int&, ot::NetworkData::ServiceConfig&) const &rArr; ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const &rArr; ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&) &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otNetDataGetNextService
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputService(otServiceConfig const&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::NetworkData::Process&lang;1980428035ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5c9]"></a>ot::Cli::NetworkData::PrefixFlagsToString(otBorderRouterConfig const&, char (&) [17])</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, cli_network_data.o(.text._ZN2ot3Cli11NetworkData19PrefixFlagsToStringERK20otBorderRouterConfigRA17_c))
<BR><BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputPrefix(otBorderRouterConfig const&)
</UL>

<P><STRONG><a name="[5d1]"></a>ot::Cli::NetworkData::OutputLowpanContexts(bool)</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, cli_network_data.o(.text._ZN2ot3Cli11NetworkData20OutputLowpanContextsEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ot::Cli::NetworkData::OutputLowpanContexts(bool) &rArr; ot::Cli::Output::OutputIp6Prefix(otIp6Prefix const&) &rArr; otIp6PrefixToString &rArr; ot::Ip6::Prefix::ToString(char*, unsigned short) const &rArr; ot::Ip6::Prefix::ToString(ot::StringWriter&) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otNetDataGetNextLowpanContextInfo
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6Prefix(otIp6Prefix const&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::NetworkData::Process&lang;1980428035ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[55c]"></a>ot::Cli::NetworkData::Process(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, cli_network_data.o(.text._ZN2ot3Cli11NetworkData7ProcessEPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ot::Cli::NetworkData::Process(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BinarySearch::Find(void const*, void const*, unsigned short, unsigned short, int (&)(void const*, void const*))
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;26794857157895015ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[12d]"></a>otError ot::Cli::NetworkData::Process&lang;112625398707738ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cli_network_data.o(.text._ZN2ot3Cli11NetworkData7ProcessILy112625398707738EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = otError ot::Cli::NetworkData::Process&lang;112625398707738ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otNetDataGetLength
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_network_data.o(.rodata._ZZN2ot3Cli11NetworkData7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[12f]"></a>otError ot::Cli::NetworkData::Process&lang;1980428035ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, cli_network_data.o(.text._ZN2ot3Cli11NetworkData7ProcessILy1980428035EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::NetworkData::Process&lang;1980428035ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::NetworkData::OutputServices(bool) &rArr; otNetDataGetNextService &rArr; ot::NetworkData::NetworkData::GetNextService(unsigned int&, ot::NetworkData::ServiceConfig&) const &rArr; ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const &rArr; ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&) &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputLowpanContexts(bool)
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputServices(bool)
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputPrefixes(bool)
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputRoutes(bool)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputBinary(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_network_data.o(.rodata._ZZN2ot3Cli11NetworkData7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[130]"></a>otError ot::Cli::NetworkData::Process&lang;3328099188798998309ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, cli_network_data.o(.text._ZN2ot3Cli11NetworkData7ProcessILy3328099188798998309EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::NetworkData::Process&lang;3328099188798998309ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otNetDataSteeringDataCheckJoiner &rArr; ot::NetworkData::LeaderBase::SteeringDataCheckJoiner(ot::Mac::ExtAddress const&) const &rArr; ot::MeshCoP::ComputeJoinerId(ot::Mac::ExtAddress const&, ot::Mac::ExtAddress&) &rArr; ot::Crypto::Sha256::Update(void const*, unsigned short) &rArr; otPlatCryptoSha256Update &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otNetDataSteeringDataCheckJoinerWithDiscerner
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otNetDataSteeringDataCheckJoiner
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsHexString(char const*, unsigned char*, unsigned short)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ParseJoinerDiscerner(ot::Utils::CmdLineParser::Arg&, otJoinerDiscerner&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_network_data.o(.rodata._ZZN2ot3Cli11NetworkData7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[12e]"></a>otError ot::Cli::NetworkData::Process&lang;4362819052862294378ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, cli_network_data.o(.text._ZN2ot3Cli11NetworkData7ProcessILy4362819052862294378EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = otError ot::Cli::NetworkData::Process&lang;4362819052862294378ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otNetDataResetMaxLength
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otNetDataGetMaxLength
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_network_data.o(.rodata._ZZN2ot3Cli11NetworkData7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[bd5]"></a>ot::Cli::OutputImplementer::OutputImplementer(int (*)(void*, char const*, std::__va_list), void*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cli_output.o(.text._ZN2ot3Cli17OutputImplementerC2EPFiPvPKcSt9__va_listES2_), UNUSED)

<P><STRONG><a name="[5c1]"></a>ot::Cli::OutputImplementer::OutputImplementer__sub_object(int (*)(void*, char const*, std::__va_list), void*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cli_output.o(.text._ZN2ot3Cli17OutputImplementerC2EPFiPvPKcSt9__va_listES2_), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::Interpreter(ot::Instance*, int (*)(void*, char const*, std::__va_list), void*)
</UL>

<P><STRONG><a name="[5d8]"></a>ot::Cli::Coap::PrintPayload(otMessage*)</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, cli_coap.o(.text._ZN2ot3Cli4Coap12PrintPayloadEP9otMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Coap::PrintPayload(otMessage*) &rArr; otMessageRead &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageRead
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageGetOffset
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageGetLength
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputNewLine()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytes(unsigned char const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::HandleResponse(otMessage*, otMessageInfo const*, otError)
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::HandleRequest(otMessage*, otMessageInfo const*)
</UL>

<P><STRONG><a name="[5d9]"></a>ot::Cli::Coap::HandleRequest(otMessage*, otMessageInfo const*)</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, cli_coap.o(.text._ZN2ot3Cli4Coap13HandleRequestEP9otMessagePK13otMessageInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Coap::HandleRequest(otMessage*, otMessageInfo const*) &rArr; otCoapSendResponseWithParameters &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageFree
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageAppend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadErrorToString
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapSendResponseWithParameters
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapNewMessage
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageSetPayloadMarker
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageInitResponse
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageGetType
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageGetCode
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::PrintPayload(otMessage*)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6Address(otIp6Address const&)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::HandleRequest(void*, otMessage*, otMessageInfo const*)
</UL>

<P><STRONG><a name="[60]"></a>ot::Cli::Coap::HandleRequest(void*, otMessage*, otMessageInfo const*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cli_coap.o(.text._ZN2ot3Cli4Coap13HandleRequestEPvP9otMessagePK13otMessageInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Coap::HandleRequest(void*, otMessage*, otMessageInfo const*) &rArr; ot::Cli::Coap::HandleRequest(otMessage*, otMessageInfo const*) &rArr; otCoapSendResponseWithParameters &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::HandleRequest(otMessage*, otMessageInfo const*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_coap.o(.text._ZN2ot3Cli4Coap7ProcessILy7108473799409246994EEE7otErrorPNS_5Utils13CmdLineParser3ArgE)
</UL>
<P><STRONG><a name="[5e0]"></a>ot::Cli::Coap::HandleResponse(otMessage*, otMessageInfo const*, otError)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, cli_coap.o(.text._ZN2ot3Cli4Coap14HandleResponseEP9otMessagePK13otMessageInfo7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Coap::HandleResponse(otMessage*, otMessageInfo const*, otError) &rArr; ot::Cli::Output::OutputIp6Address(otIp6Address const&) &rArr; otIp6AddressToString &rArr; ot::Ip6::Address::ToString(char*, unsigned short) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadErrorToString
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::PrintPayload(otMessage*)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6Address(otIp6Address const&)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::HandleResponse(void*, otMessage*, otMessageInfo const*, otError)
</UL>

<P><STRONG><a name="[5e]"></a>ot::Cli::Coap::HandleResponse(void*, otMessage*, otMessageInfo const*, otError)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cli_coap.o(.text._ZN2ot3Cli4Coap14HandleResponseEPvP9otMessagePK13otMessageInfo7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Coap::HandleResponse(void*, otMessage*, otMessageInfo const*, otError) &rArr; ot::Cli::Coap::HandleResponse(otMessage*, otMessageInfo const*, otError) &rArr; ot::Cli::Output::OutputIp6Address(otIp6Address const&) &rArr; otIp6AddressToString &rArr; ot::Ip6::Address::ToString(char*, unsigned short) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::HandleResponse(otMessage*, otMessageInfo const*, otError)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_coap.o(.text._ZN2ot3Cli4Coap14ProcessRequestEPNS_5Utils13CmdLineParser3ArgE10otCoapCode)
</UL>
<P><STRONG><a name="[5e1]"></a>ot::Cli::Coap::ProcessRequest(ot::Utils::CmdLineParser::Arg*, otCoapCode)</STRONG> (Thumb, 336 bytes, Stack size 136 bytes, cli_coap.o(.text._ZN2ot3Cli4Coap14ProcessRequestEPNS_5Utils13CmdLineParser3ArgE10otCoapCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Coap::ProcessRequest(ot::Utils::CmdLineParser::Arg*, otCoapCode) &rArr; otCoapMessageGenerateToken &rArr; ot::Coap::Message::GenerateRandomToken(unsigned char) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageFree
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageAppend
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapSendRequestWithParameters
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapNewMessage
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageSetPayloadMarker
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageInit
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageGenerateToken
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageAppendUriPathOptions
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::GetLength() const
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsIp6Address(char const*, otIp6Address&)
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Coap::Process&lang;7572847ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Coap::Process&lang;7568758ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Coap::Process&lang;1930945792ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Coap::Process&lang;109390753686805ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[557]"></a>ot::Cli::Coap::Process(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, cli_coap.o(.text._ZN2ot3Cli4Coap7ProcessEPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ot::Cli::Coap::Process(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BinarySearch::Find(void const*, void const*, unsigned short, unsigned short, int (&)(void const*, void const*))
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1863449829ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[131]"></a>otError ot::Cli::Coap::Process&lang;109390753686805ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cli_coap.o(.text._ZN2ot3Cli4Coap7ProcessILy109390753686805EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Coap::Process&lang;109390753686805ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Coap::ProcessRequest(ot::Utils::CmdLineParser::Arg*, otCoapCode) &rArr; otCoapMessageGenerateToken &rArr; ot::Coap::Message::GenerateRandomToken(unsigned char) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::ProcessRequest(ot::Utils::CmdLineParser::Arg*, otCoapCode)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_coap.o(.rodata._ZZN2ot3Cli4Coap7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[133]"></a>otError ot::Cli::Coap::Process&lang;16542423019117308726ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, cli_coap.o(.text._ZN2ot3Cli4Coap7ProcessILy16542423019117308726EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = otError ot::Cli::Coap::Process&lang;16542423019117308726ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint32(char const*, unsigned int&)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint8(char const*, unsigned char&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_coap.o(.rodata._ZZN2ot3Cli4Coap7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[139]"></a>otError ot::Cli::Coap::Process&lang;1864361470ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cli_coap.o(.text._ZN2ot3Cli4Coap7ProcessILy1864361470EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Coap::Process&lang;1864361470ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otCoapStop &rArr; ot::Coap::Coap::Stop() &rArr; ot::Coap::CoapBase::ClearRequests(ot::Ip6::Address const*) &rArr; ot::Coap::CoapBase::Metadata::ReadFrom(ot::Coap::Message const&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapStop
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapRemoveResource
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_coap.o(.rodata._ZZN2ot3Cli4Coap7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[134]"></a>otError ot::Cli::Coap::Process&lang;1930945792ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cli_coap.o(.text._ZN2ot3Cli4Coap7ProcessILy1930945792EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Coap::Process&lang;1930945792ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Coap::ProcessRequest(ot::Utils::CmdLineParser::Arg*, otCoapCode) &rArr; otCoapMessageGenerateToken &rArr; ot::Coap::Message::GenerateRandomToken(unsigned char) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::ProcessRequest(ot::Utils::CmdLineParser::Arg*, otCoapCode)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_coap.o(.rodata._ZZN2ot3Cli4Coap7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[138]"></a>otError ot::Cli::Coap::Process&lang;492373686370ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cli_coap.o(.text._ZN2ot3Cli4Coap7ProcessILy492373686370EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Coap::Process&lang;492373686370ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otCoapStart &rArr; ot::Coap::Coap::Start(unsigned short, ot::Ip6::NetifIdentifier) &rArr; ot::Ip6::Udp::Socket::Bind(unsigned short, ot::Ip6::NetifIdentifier) &rArr; ot::Ip6::Udp::Bind(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&, ot::Ip6::NetifIdentifier) &rArr; ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Address const&) const &rArr; bool ot::LinkedList&lang;ot::Ip6::Netif::UnicastAddress&rang;::ContainsMatching&lang;ot::Ip6::Address&rang;(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_coap.o(.rodata._ZZN2ot3Cli4Coap7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[136]"></a>otError ot::Cli::Coap::Process&lang;7108473799409246994ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, cli_coap.o(.text._ZN2ot3Cli4Coap7ProcessILy7108473799409246994EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = otError ot::Cli::Coap::Process&lang;7108473799409246994ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapAddResource
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::GetLength() const
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_coap.o(.rodata._ZZN2ot3Cli4Coap7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[132]"></a>otError ot::Cli::Coap::Process&lang;7568758ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cli_coap.o(.text._ZN2ot3Cli4Coap7ProcessILy7568758EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Coap::Process&lang;7568758ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Coap::ProcessRequest(ot::Utils::CmdLineParser::Arg*, otCoapCode) &rArr; otCoapMessageGenerateToken &rArr; ot::Coap::Message::GenerateRandomToken(unsigned char) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::ProcessRequest(ot::Utils::CmdLineParser::Arg*, otCoapCode)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_coap.o(.rodata._ZZN2ot3Cli4Coap7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[137]"></a>otError ot::Cli::Coap::Process&lang;7568770ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, cli_coap.o(.text._ZN2ot3Cli4Coap7ProcessILy7568770EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = otError ot::Cli::Coap::Process&lang;7568770ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::GetLength() const
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_coap.o(.rodata._ZZN2ot3Cli4Coap7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[135]"></a>otError ot::Cli::Coap::Process&lang;7572847ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cli_coap.o(.text._ZN2ot3Cli4Coap7ProcessILy7572847EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Coap::Process&lang;7572847ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Coap::ProcessRequest(ot::Utils::CmdLineParser::Arg*, otCoapCode) &rArr; otCoapMessageGenerateToken &rArr; ot::Coap::Message::GenerateRandomToken(unsigned char) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::ProcessRequest(ot::Utils::CmdLineParser::Arg*, otCoapCode)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_coap.o(.rodata._ZZN2ot3Cli4Coap7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[5c2]"></a>ot::Cli::Coap::Coap(otInstance*, ot::Cli::OutputImplementer&)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cli_coap.o(.text._ZN2ot3Cli4CoapC2EP10otInstanceRNS0_17OutputImplementerE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::Interpreter(ot::Instance*, int (*)(void*, char const*, std::__va_list), void*)
</UL>

<P><STRONG><a name="[bd6]"></a>ot::Cli::Coap::Coap__sub_object(otInstance*, ot::Cli::OutputImplementer&)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cli_coap.o(.text._ZN2ot3Cli4CoapC2EP10otInstanceRNS0_17OutputImplementerE), UNUSED)

<P><STRONG><a name="[5ec]"></a>ot::Cli::Joiner::HandleCallback(otError)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cli_joiner.o(.text._ZN2ot3Cli6Joiner14HandleCallbackE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ot::Cli::Joiner::HandleCallback(otError) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadErrorToString
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Joiner::HandleCallback(otError, void*)
</UL>

<P><STRONG><a name="[62]"></a>ot::Cli::Joiner::HandleCallback(otError, void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cli_joiner.o(.text._ZN2ot3Cli6Joiner14HandleCallbackE7otErrorPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ot::Cli::Joiner::HandleCallback(otError, void*) &rArr; ot::Cli::Joiner::HandleCallback(otError) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Joiner::HandleCallback(otError)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_joiner.o(.text._ZN2ot3Cli6Joiner7ProcessILy492373686370EEE7otErrorPNS_5Utils13CmdLineParser3ArgE)
</UL>
<P><STRONG><a name="[525]"></a>ot::Cli::Joiner::Process(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, cli_joiner.o(.text._ZN2ot3Cli6Joiner7ProcessEPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ot::Cli::Joiner::Process(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BinarySearch::Find(void const*, void const*, unsigned short, unsigned short, int (&)(void const*, void const*))
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;123344129789161ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[13a]"></a>otError ot::Cli::Joiner::Process&lang;16073431636142911865ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, cli_joiner.o(.text._ZN2ot3Cli6Joiner7ProcessILy16073431636142911865EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Joiner::Process&lang;16073431636142911865ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otJoinerSetDiscerner &rArr; ot::MeshCoP::Joiner::SetDiscerner(ot::MeshCoP::JoinerDiscerner const&) &rArr; ot::MeshCoP::JoinerDiscerner::GenerateJoinerId(ot::Mac::ExtAddress&) const &rArr; ot::Mac::ExtAddress::GenerateRandom() &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otJoinerSetDiscerner
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otJoinerGetDiscerner
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ParseJoinerDiscerner(ot::Utils::CmdLineParser::Arg&, otJoinerDiscerner&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_joiner.o(.rodata._ZZN2ot3Cli6Joiner7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[13e]"></a>otError ot::Cli::Joiner::Process&lang;1864361470ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cli_joiner.o(.text._ZN2ot3Cli6Joiner7ProcessILy1864361470EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Joiner::Process&lang;1864361470ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otJoinerStop &rArr; ot::MeshCoP::Joiner::Stop() &rArr; ot::MeshCoP::Joiner::Finish(otError) &rArr; ot::Coap::CoapSecure::Stop() &rArr; ot::MeshCoP::Dtls::Close() &rArr; ot::MeshCoP::Dtls::Disconnect() &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt_ext &rArr; mbedtls_cipher_aead_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otJoinerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_joiner.o(.rodata._ZZN2ot3Cli6Joiner7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[13b]"></a>otError ot::Cli::Joiner::Process&lang;25605ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cli_joiner.o(.text._ZN2ot3Cli6Joiner7ProcessILy25605EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = otError ot::Cli::Joiner::Process&lang;25605ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputBytesLine(unsigned char const*, unsigned short) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otJoinerGetId
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytesLine(unsigned char const*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_joiner.o(.rodata._ZZN2ot3Cli6Joiner7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[13d]"></a>otError ot::Cli::Joiner::Process&lang;428983089745ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cli_joiner.o(.text._ZN2ot3Cli6Joiner7ProcessILy428983089745EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Joiner::Process&lang;428983089745ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otJoinerStateToString
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otJoinerGetState
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_joiner.o(.rodata._ZZN2ot3Cli6Joiner7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[13c]"></a>otError ot::Cli::Joiner::Process&lang;492373686370ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, cli_joiner.o(.text._ZN2ot3Cli6Joiner7ProcessILy492373686370EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Joiner::Process&lang;492373686370ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otJoinerStart &rArr; ot::MeshCoP::Joiner::Start(char const*, char const*, char const*, char const*, char const*, char const*, void (*)(otError, void*), void*) &rArr; ot::MeshCoP::Joiner::PrepareJoinerFinalizeMessage(char const*, char const*, char const*, char const*, char const*) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otJoinerStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_joiner.o(.rodata._ZZN2ot3Cli6Joiner7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[4c3]"></a>ot::Cli::Output::OutputLine(char const*, ...)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, cli_output.o(.text._ZN2ot3Cli6Output10OutputLineEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::UdpExample::HandleUdpReceive(otMessage*, otMessageInfo const*)
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputTableSeparator(unsigned char, unsigned char const*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::NetworkData::Process&lang;4362819052862294378ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::NetworkData::Process&lang;112625398707738ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputLowpanContexts(bool)
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputServices(bool)
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputPrefixes(bool)
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputService(otServiceConfig const&)
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputRoutes(bool)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputPrefix(otBorderRouterConfig const&)
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputRoute(otExternalRouteConfig const&)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Joiner::Process&lang;428983089745ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Joiner::Process&lang;16073431636142911865ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Joiner::HandleCallback(otError)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;513233767555ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;424573284472ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;29803101196888419ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;11734141454226389327ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;11015563977516890969ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Dataset::Print(otOperationalDatasetTlvs&)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Coap::Process&lang;7568770ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Coap::Process&lang;7108473799409246994ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Coap::Process&lang;16542423019117308726ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::HandleResponse(otMessage*, otMessageInfo const*, otError)
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::HandleRequest(otMessage*, otMessageInfo const*)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Dataset::Process(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputEnabledDisabledStatus(bool)
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputTableHeader(unsigned char, char const* const*, unsigned char const*)
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Joiner::Process(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::Process(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::Process(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8846784157991210846ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8440012427400342744ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8094126837366616329ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8059602322220575993ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8023188516701246990ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7673476305065732077ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7437938ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7308159ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7250330901759102465ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7113582ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;6725988ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;6462319ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;603988223085374603ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;58431844188429ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;5743589040336375053ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;5345021259271145584ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;5126223071761830632ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;5021455550522604481ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;428983089745ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;424622705244ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;424573284472ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;3200263406431374201ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;31998349810021265ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;31452791250048641ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;30913625955023990ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;30907139684939619ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;30363746172521848ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;303229889220393947ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;29803101196888419ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1998604769390126437ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;16863212019509908256ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1681249789ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;16244709273642014994ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;15712178869698907848ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1562345116032201233ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;15073379119283750636ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1495474164342561146ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;14765126478273032447ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;14182804244553304960ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;13711823289570935762ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1366262738558941672ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;125538443212822ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;123344230057719ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;119073513618444ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;11512677311266953430ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;11302599500980265950ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;11015563977516890969ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;108232213406486ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;10320315516056133487ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleDetachGracefullyResult(void*)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage const*, ot::Ip6::MessageInfo const*)
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterAddress(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleEnergyScanResult(otEnergyScanResult*)
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleDiscoveryRequest(otThreadDiscoveryRequestInfo const&)
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleActiveScanResult(otActiveScanResult*)
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputChildTableEntry(unsigned char, otNetworkDiagChildEntry const&)
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleLinkPcapReceive(otRadioFrame const*, bool)
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterRss(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputRouteData(unsigned char, otNetworkDiagRouteData const&)
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandlePingReply(otPingSenderReply const*)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessCommand(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::PrintMacFilter()
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputResult(otError)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::UdpExample::Process(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4db]"></a>ot::Cli::Output::OutputLine(unsigned char, char const*, ...)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, cli_output.o(.text._ZN2ot3Cli6Output10OutputLineEhPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ot::Cli::Output::OutputLine(unsigned char, char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8094126837366616329ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputNetworkDiagMacCounters(unsigned char, otNetworkDiagMacCounters const&)
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputChildTableEntry(unsigned char, otNetworkDiagChildEntry const&)
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputConnectivity(unsigned char, otNetworkDiagConnectivity const&)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputLeaderData(unsigned char, otLeaderData const&)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputRouteData(unsigned char, otNetworkDiagRouteData const&)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputRoute(unsigned char, otNetworkDiagRoute const&)
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputMode(unsigned char, otLinkModeConfig const&)
</UL>

<P><STRONG><a name="[500]"></a>ot::Cli::Output::OutputBytes(unsigned char const*, unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, cli_output.o(.text._ZN2ot3Cli6Output11OutputBytesEPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ot::Cli::Output::OutputBytes(unsigned char const*, unsigned short) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputService(otServiceConfig const&)
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::PrintPayload(otMessage*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8023188516701246990ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;424622705244ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;123344230057719ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage const*, ot::Ip6::MessageInfo const*)
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleDiscoveryRequest(otThreadDiscoveryRequestInfo const&)
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleActiveScanResult(otActiveScanResult*)
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputMacFilterEntry(otMacFilterEntry const&)
</UL>

<P><STRONG><a name="[4c0]"></a>ot::Cli::Output::OutputFormat(char const*, ...)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, cli_output.o(.text._ZN2ot3Cli6Output12OutputFormatEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;32000442710786154ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;1665316120ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::UdpExample::HandleUdpReceive(otMessage*, otMessageInfo const*)
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputTableSeparator(unsigned char, unsigned char const*)
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6Prefix(otIp6NetworkPrefix const&)
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputUint64(unsigned long long)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6Prefix(otIp6Prefix const&)
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputService(otServiceConfig const&)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputPrefix(otBorderRouterConfig const&)
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputRoute(otExternalRouteConfig const&)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;13879157579010930576ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Dataset::Print(otOperationalDatasetTlvs&)
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Dataset::OutputSecurityPolicy(otSecurityPolicy const&)
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6PrefixLine(otIp6NetworkPrefix const&)
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputUint64Line(unsigned long long)
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::HandleResponse(otMessage*, otMessageInfo const*, otError)
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::HandleRequest(otMessage*, otMessageInfo const*)
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::PrintPayload(otMessage*)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6AddressLine(otIp6Address const&)
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputTableHeader(unsigned char, char const* const*, unsigned char const*)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6Address(otIp6Address const&)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytesLine(unsigned char const*, unsigned short)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputNewLine()
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(unsigned char, char const*, ...)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytes(unsigned char const*, unsigned short)
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(unsigned char, char const*, ...)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::Interpreter(ot::Instance*, int (*)(void*, char const*, std::__va_list), void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;807264858141456911ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8023188516701246990ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;424622705244ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;31998349810021265ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;30913625955023990ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;30907139684939619ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1715061262ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;125538443212822ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;123344230057719ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;123339735204840ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;11302599500980265950ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage const*, ot::Ip6::MessageInfo const*)
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleDiscoveryRequest(otThreadDiscoveryRequestInfo const&)
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleActiveScanResult(otActiveScanResult*)
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleLinkPcapReceive(otRadioFrame const*, bool)
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputMacFilterEntry(otMacFilterEntry const&)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandlePingStatistics(otPingSenderStatistics const*)
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputEidCacheEntry(otCacheEntryInfo const&)
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandlePingReply(otPingSenderReply const*)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputResult(otError)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessLine(char*)
</UL>

<P><STRONG><a name="[4de]"></a>ot::Cli::Output::OutputFormat(unsigned char, char const*, ...)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, cli_output.o(.text._ZN2ot3Cli6Output12OutputFormatEhPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ot::Cli::Output::OutputFormat(unsigned char, char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage const*, ot::Ip6::MessageInfo const*)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputRoute(unsigned char, otNetworkDiagRoute const&)
</UL>

<P><STRONG><a name="[5f4]"></a>ot::Cli::Output::OutputUint64(unsigned long long)</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, cli_output.o(.text._ZN2ot3Cli6Output12OutputUint64Ey))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ot::Cli::Output::OutputUint64(unsigned long long) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputUint64Line(unsigned long long)
</UL>

<P><STRONG><a name="[4f2]"></a>ot::Cli::Output::OutputNewLine()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cli_output.o(.text._ZN2ot3Cli6Output13OutputNewLineEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::Cli::Output::OutputNewLine() &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Dataset::OutputSecurityPolicy(otSecurityPolicy const&)
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::PrintPayload(otMessage*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;807264858141456911ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8023188516701246990ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;424622705244ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;123344230057719ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;123339735204840ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage const*, ot::Ip6::MessageInfo const*)
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleLinkPcapReceive(otRadioFrame const*, bool)
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputMacFilterEntry(otMacFilterEntry const&)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandlePingStatistics(otPingSenderStatistics const*)
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputEidCacheEntry(otCacheEntryInfo const&)
</UL>

<P><STRONG><a name="[510]"></a>ot::Cli::Output::OutputBytesLine(unsigned char const*, unsigned short)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cli_output.o(.text._ZN2ot3Cli6Output15OutputBytesLineEPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ot::Cli::Output::OutputBytesLine(unsigned char const*, unsigned short) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputBinary(bool)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Joiner::Process&lang;25605ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;7040008844819482601ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;2882870027264844783ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;28438073741397367ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;1914558731ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;1648543237ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;109399277033242ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Dataset::Print(otOperationalDatasetTlvs&)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7040008844819482601ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;424622705244ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;31451632477498226ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;2882870027264844783ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;220771284311ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1648543237ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;125538443212822ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;123344230057719ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage const*, ot::Ip6::MessageInfo const*)
</UL>

<P><STRONG><a name="[5c4]"></a>ot::Cli::Output::OutputIp6Prefix(otIp6Prefix const&)</STRONG> (Thumb, 40 bytes, Stack size 64 bytes, cli_output.o(.text._ZN2ot3Cli6Output15OutputIp6PrefixERK11otIp6Prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Output::OutputIp6Prefix(otIp6Prefix const&) &rArr; otIp6PrefixToString &rArr; ot::Ip6::Prefix::ToString(char*, unsigned short) const &rArr; ot::Ip6::Prefix::ToString(ot::StringWriter&) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6PrefixToString
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputLowpanContexts(bool)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputPrefix(otBorderRouterConfig const&)
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputRoute(otExternalRouteConfig const&)
</UL>

<P><STRONG><a name="[5f6]"></a>ot::Cli::Output::OutputIp6Prefix(otIp6NetworkPrefix const&)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cli_output.o(.text._ZN2ot3Cli6Output15OutputIp6PrefixERK18otIp6NetworkPrefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ot::Cli::Output::OutputIp6Prefix(otIp6NetworkPrefix const&) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6PrefixLine(otIp6NetworkPrefix const&)
</UL>

<P><STRONG><a name="[4c1]"></a>ot::Cli::Output::OutputIp6Address(otIp6Address const&)</STRONG> (Thumb, 38 bytes, Stack size 56 bytes, cli_output.o(.text._ZN2ot3Cli6Output16OutputIp6AddressERK12otIp6Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Output::OutputIp6Address(otIp6Address const&) &rArr; otIp6AddressToString &rArr; ot::Ip6::Address::ToString(char*, unsigned short) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6AddressToString
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::UdpExample::HandleUdpReceive(otMessage*, otMessageInfo const*)
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::HandleResponse(otMessage*, otMessageInfo const*, otError)
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::HandleRequest(otMessage*, otMessageInfo const*)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;123339735204840ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage const*, ot::Ip6::MessageInfo const*)
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputEidCacheEntry(otCacheEntryInfo const&)
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandlePingReply(otPingSenderReply const*)
</UL>

<P><STRONG><a name="[5f8]"></a>ot::Cli::Output::OutputUint64Line(unsigned long long)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cli_output.o(.text._ZN2ot3Cli6Output16OutputUint64LineEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ot::Cli::Output::OutputUint64Line(unsigned long long) &rArr; ot::Cli::Output::OutputUint64(unsigned long long) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputUint64(unsigned long long)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;17991946006187835024ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;13154242556027051009ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Dataset::Print(otOperationalDatasetTlvs&)
</UL>

<P><STRONG><a name="[526]"></a>ot::Cli::Output::OutputTableHeader(unsigned char, char const* const*, unsigned char const*)</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, cli_output.o(.text._ZN2ot3Cli6Output17OutputTableHeaderEhPKPKcPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ot::Cli::Output::OutputTableHeader(unsigned char, char const* const*, unsigned char const*) &rArr; ot::Cli::Output::OutputTableSeparator(unsigned char, unsigned char const*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputTableSeparator(unsigned char, unsigned char const*)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8023188516701246990ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8020460690342608375ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;424622705244ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;31998349810021265ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;30913625955023990ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1830284035ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;123344230057719ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5ab]"></a>ot::Cli::Output::PercentageToString(unsigned short, ot::Cli::Output::PercentageStringBuffer&)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, cli_output.o(.text._ZN2ot3Cli6Output18PercentageToStringEtRNS1_22PercentageStringBufferE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Output::PercentageToString(unsigned short, ot::Cli::Output::PercentageStringBuffer&) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::Append(char const*, ...)
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::StringWriter(char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8023188516701246990ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5fb]"></a>ot::Cli::Output::OutputIp6PrefixLine(otIp6NetworkPrefix const&)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cli_output.o(.text._ZN2ot3Cli6Output19OutputIp6PrefixLineERK18otIp6NetworkPrefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ot::Cli::Output::OutputIp6PrefixLine(otIp6NetworkPrefix const&) &rArr; ot::Cli::Output::OutputIp6Prefix(otIp6NetworkPrefix const&) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6Prefix(otIp6NetworkPrefix const&)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;13879157579010930576ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Dataset::Print(otOperationalDatasetTlvs&)
</UL>

<P><STRONG><a name="[4cd]"></a>ot::Cli::Output::OutputIp6AddressLine(otIp6Address const&)</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, cli_output.o(.text._ZN2ot3Cli6Output20OutputIp6AddressLineERK12otIp6Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Output::OutputIp6AddressLine(otIp6Address const&) &rArr; otIp6AddressToString &rArr; ot::Ip6::Address::ToString(char*, unsigned short) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6AddressToString
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;32000442710786154ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;1665316120ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;31451632477041015ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;30907139684939619ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1715061262ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;123339735204840ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage const*, ot::Ip6::MessageInfo const*)
</UL>

<P><STRONG><a name="[5f9]"></a>ot::Cli::Output::OutputTableSeparator(unsigned char, unsigned char const*)</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, cli_output.o(.text._ZN2ot3Cli6Output20OutputTableSeparatorEhPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ot::Cli::Output::OutputTableSeparator(unsigned char, unsigned char const*) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputTableHeader(unsigned char, char const* const*, unsigned char const*)
</UL>

<P><STRONG><a name="[4cb]"></a>ot::Cli::Output::OutputEnabledDisabledStatus(bool)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cli_output.o(.text._ZN2ot3Cli6Output27OutputEnabledDisabledStatusEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ot::Cli::Output::OutputEnabledDisabledStatus(bool) &rArr; ot::Cli::Output::OutputLine(char const*, ...) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;12648424561679575046ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7506025ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;31451632477041015ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;15435009332132253075ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;14555083096433720913ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1030263388783878400ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5fc]"></a>ot::Cli::Dataset::ParseSecurityPolicy(otSecurityPolicy&, ot::Utils::CmdLineParser::Arg*&)</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, cli_dataset.o(.text._ZN2ot3Cli7Dataset19ParseSecurityPolicyER16otSecurityPolicyRPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ot::Cli::Dataset::ParseSecurityPolicy(otSecurityPolicy&, ot::Utils::CmdLineParser::Arg*&) &rArr; ot::Utils::CmdLineParser::ParseAsUint16(char const*, unsigned short&) &rArr; ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint16(char const*, unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;15490430763919346926ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;12771032504430052662ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5fd]"></a>ot::Cli::Dataset::OutputSecurityPolicy(otSecurityPolicy const&)</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, cli_dataset.o(.text._ZN2ot3Cli7Dataset20OutputSecurityPolicyERK16otSecurityPolicy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ot::Cli::Dataset::OutputSecurityPolicy(otSecurityPolicy const&) &rArr; ot::Cli::Output::OutputNewLine() &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputNewLine()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;15490430763919346926ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Dataset::Print(otOperationalDatasetTlvs&)
</UL>

<P><STRONG><a name="[5fe]"></a>ot::Cli::Dataset::Print(otOperationalDatasetTlvs&)</STRONG> (Thumb, 344 bytes, Stack size 136 bytes, cli_dataset.o(.text._ZN2ot3Cli7Dataset5PrintER24otOperationalDatasetTlvs))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Dataset::Print(otOperationalDatasetTlvs&) &rArr; otDatasetParseTlvs &rArr; ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const &rArr; ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy() const &rArr; ot::SecurityPolicy::SetFlags(unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetParseTlvs
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Dataset::OutputSecurityPolicy(otSecurityPolicy const&)
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6PrefixLine(otIp6NetworkPrefix const&)
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputUint64Line(unsigned long long)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytesLine(unsigned char const*, unsigned short)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;28438073741397367ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;109399277033242ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Dataset::Process(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[57d]"></a>ot::Cli::Dataset::Process(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = ot::Cli::Dataset::Process(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Dataset::Print(otOperationalDatasetTlvs&) &rArr; otDatasetParseTlvs &rArr; ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const &rArr; ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy() const &rArr; ot::SecurityPolicy::SetFlags(unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BinarySearch::Find(void const*, void const*, unsigned short, unsigned short, int (&)(void const*, void const*))
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Dataset::Print(otOperationalDatasetTlvs&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;32002658098942360ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[13f]"></a>otError ot::Cli::Dataset::Process&lang;109399277033242ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 72 bytes, Stack size 272 bytes, cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy109399277033242EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Dataset::Process&lang;109399277033242ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otDatasetGetActiveTlvs &rArr; ot::MeshCoP::DatasetLocal::Read(otOperationalDatasetTlvs&) const &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetGetActiveTlvs
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Dataset::Print(otOperationalDatasetTlvs&)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytesLine(unsigned char const*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[14c]"></a>otError ot::Cli::Dataset::Process&lang;11015563977516890969ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 110 bytes, Stack size 136 bytes, cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy11015563977516890969EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Dataset::Process&lang;11015563977516890969ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otDatasetParseTlvs &rArr; ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const &rArr; ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy() const &rArr; ot::SecurityPolicy::SetFlags(unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otNetworkNameFromString
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetUpdateTlvs
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetParseTlvs
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[142]"></a>otError ot::Cli::Dataset::Process&lang;11734141454226389327ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 100 bytes, Stack size 136 bytes, cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy11734141454226389327EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Dataset::Process&lang;11734141454226389327ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otDatasetParseTlvs &rArr; ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const &rArr; ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy() const &rArr; ot::SecurityPolicy::SetFlags(unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetUpdateTlvs
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetParseTlvs
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint32(char const*, unsigned int&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[144]"></a>otError ot::Cli::Dataset::Process&lang;125517434289129ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy125517434289129EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 2192 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Dataset::Process&lang;125517434289129ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otDatasetSetPendingTlvs &rArr; ot::MeshCoP::PendingDatasetManager::Save(otOperationalDatasetTlvs const&) &rArr; ot::MeshCoP::DatasetManager::HandleDatasetUpdated() &rArr; ot::MeshCoP::DatasetManager::SendSet() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetSetPendingTlvs
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetSetActiveTlvs
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[149]"></a>otError ot::Cli::Dataset::Process&lang;12771032453691045162ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 512 bytes, Stack size 104 bytes, cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy12771032453691045162EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Dataset::Process&lang;12771032453691045162ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otDatasetSendMgmtPendingGet &rArr; ot::MeshCoP::DatasetManager::SendGetRequest(ot::MeshCoP::Dataset::Components const&, unsigned char const*, unsigned char, otIp6Address const*) const &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetSendMgmtPendingGet
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetSendMgmtActiveGet
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsIp6Address(char const*, otIp6Address&)
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsHexString(char const*, unsigned short&, unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[14a]"></a>otError ot::Cli::Dataset::Process&lang;12771032504430052662ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 804 bytes, Stack size 360 bytes, cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy12771032504430052662EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Dataset::Process&lang;12771032504430052662ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otDatasetSendMgmtPendingSet &rArr; ot::MeshCoP::DatasetManager::SendSetRequest(ot::MeshCoP::Dataset::Info const&, unsigned char const*, unsigned char, void (*)(otError, void*), void*) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otNetworkNameFromString
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetSendMgmtPendingSet
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetSendMgmtActiveSet
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsIp6Address(char const*, otIp6Address&)
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsHexString(char const*, unsigned short&, unsigned char*)
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsHexString(char const*, unsigned char*, unsigned short)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint32(char const*, unsigned int&)
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint16(char const*, unsigned short&)
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Dataset::ParseSecurityPolicy(otSecurityPolicy&, ot::Utils::CmdLineParser::Arg*&)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[14f]"></a>otError ot::Cli::Dataset::Process&lang;13154242556027051009ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 110 bytes, Stack size 136 bytes, cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy13154242556027051009EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Dataset::Process&lang;13154242556027051009ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otDatasetParseTlvs &rArr; ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const &rArr; ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy() const &rArr; ot::SecurityPolicy::SetFlags(unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetUpdateTlvs
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetParseTlvs
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputUint64Line(unsigned long long)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[148]"></a>otError ot::Cli::Dataset::Process&lang;13879157579010930576ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 120 bytes, Stack size 152 bytes, cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy13879157579010930576EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Dataset::Process&lang;13879157579010930576ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otDatasetParseTlvs &rArr; ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const &rArr; ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy() const &rArr; ot::SecurityPolicy::SetFlags(unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetUpdateTlvs
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetParseTlvs
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsIp6Address(char const*, otIp6Address&)
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6PrefixLine(otIp6NetworkPrefix const&)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputFormat(char const*, ...)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[151]"></a>otError ot::Cli::Dataset::Process&lang;15490430763919346926ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 104 bytes, Stack size 144 bytes, cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy15490430763919346926EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Dataset::Process&lang;15490430763919346926ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otDatasetParseTlvs &rArr; ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const &rArr; ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy() const &rArr; ot::SecurityPolicy::SetFlags(unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetUpdateTlvs
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetParseTlvs
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Dataset::OutputSecurityPolicy(otSecurityPolicy const&)
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Dataset::ParseSecurityPolicy(otSecurityPolicy&, ot::Utils::CmdLineParser::Arg*&)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[150]"></a>otError ot::Cli::Dataset::Process&lang;1648543237ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 160 bytes, Stack size 136 bytes, cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy1648543237EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Dataset::Process&lang;1648543237ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otDatasetGeneratePskc &rArr; ot::MeshCoP::GeneratePskc(char const*, ot::MeshCoP::NetworkName const&, ot::MeshCoP::ExtendedPanId const&, ot::Pskc&) &rArr; otPlatCryptoPbkdf2GenerateKey &rArr; mbedtls_aes_cmac_prf_128 &rArr; mbedtls_cipher_cmac &rArr; mbedtls_cipher_cmac_finish &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetUpdateTlvs
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetParseTlvs
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetGeneratePskc
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetNetworkName
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetExtendedPanId
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsHexString(char const*, unsigned char*, unsigned short)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytesLine(unsigned char const*, unsigned short)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[140]"></a>otError ot::Cli::Dataset::Process&lang;17991946006187835024ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 108 bytes, Stack size 136 bytes, cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy17991946006187835024EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Dataset::Process&lang;17991946006187835024ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otDatasetParseTlvs &rArr; ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const &rArr; ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy() const &rArr; ot::SecurityPolicy::SetFlags(unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetUpdateTlvs
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetParseTlvs
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputUint64Line(unsigned long long)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[153]"></a>otError ot::Cli::Dataset::Process&lang;1914558731ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy1914558731EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = otError ot::Cli::Dataset::Process&lang;1914558731ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Output::OutputBytesLine(unsigned char const*, unsigned short) &rArr; ot::Cli::Output::OutputFormat(char const*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytesLine(unsigned char const*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[147]"></a>otError ot::Cli::Dataset::Process&lang;1930295280ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 176 bytes, Stack size 136 bytes, cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy1930295280EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Dataset::Process&lang;1930295280ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otDatasetCreateNewNetwork &rArr; ot::MeshCoP::Dataset::Info::GenerateRandom(ot::Instance&) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetCreateNewNetwork
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetGetPendingTlvs
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetGetActiveTlvs
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetConvertToTlvs
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsHexString(char const*, unsigned short&, unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[14e]"></a>otError ot::Cli::Dataset::Process&lang;28438073741397367ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 72 bytes, Stack size 272 bytes, cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy28438073741397367EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Dataset::Process&lang;28438073741397367ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otDatasetGetPendingTlvs &rArr; ot::MeshCoP::DatasetLocal::Read(otOperationalDatasetTlvs&) const &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetGetPendingTlvs
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Dataset::Print(otOperationalDatasetTlvs&)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytesLine(unsigned char const*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[14b]"></a>otError ot::Cli::Dataset::Process&lang;2882870027264844783ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 106 bytes, Stack size 136 bytes, cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy2882870027264844783EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Dataset::Process&lang;2882870027264844783ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otDatasetParseTlvs &rArr; ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const &rArr; ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy() const &rArr; ot::SecurityPolicy::SetFlags(unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetUpdateTlvs
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetParseTlvs
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsHexString(char const*, unsigned char*, unsigned short)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytesLine(unsigned char const*, unsigned short)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[141]"></a>otError ot::Cli::Dataset::Process&lang;29803101196888419ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 104 bytes, Stack size 136 bytes, cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy29803101196888419EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Dataset::Process&lang;29803101196888419ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otDatasetParseTlvs &rArr; ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const &rArr; ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy() const &rArr; ot::SecurityPolicy::SetFlags(unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetUpdateTlvs
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetParseTlvs
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint16(char const*, unsigned short&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[14d]"></a>otError ot::Cli::Dataset::Process&lang;424573284472ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 104 bytes, Stack size 136 bytes, cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy424573284472EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Dataset::Process&lang;424573284472ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otDatasetParseTlvs &rArr; ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const &rArr; ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy() const &rArr; ot::SecurityPolicy::SetFlags(unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetUpdateTlvs
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetParseTlvs
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint16(char const*, unsigned short&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[143]"></a>otError ot::Cli::Dataset::Process&lang;483635559789ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy483635559789EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = otError ot::Cli::Dataset::Process&lang;483635559789ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[145]"></a>otError ot::Cli::Dataset::Process&lang;513233767555ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 100 bytes, Stack size 136 bytes, cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy513233767555EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Dataset::Process&lang;513233767555ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otDatasetParseTlvs &rArr; ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const &rArr; ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy() const &rArr; ot::SecurityPolicy::SetFlags(unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetUpdateTlvs
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetParseTlvs
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint32(char const*, unsigned int&)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputLine(char const*, ...)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[146]"></a>otError ot::Cli::Dataset::Process&lang;7040008844819482601ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 106 bytes, Stack size 136 bytes, cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy7040008844819482601EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Dataset::Process&lang;7040008844819482601ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otDatasetParseTlvs &rArr; ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const &rArr; ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy() const &rArr; ot::SecurityPolicy::SetFlags(unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetUpdateTlvs
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetParseTlvs
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsHexString(char const*, unsigned char*, unsigned short)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputBytesLine(unsigned char const*, unsigned short)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[152]"></a>otError ot::Cli::Dataset::Process&lang;7568770ull&rang;(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 108 bytes, Stack size 400 bytes, cli_dataset.o(.text._ZN2ot3Cli7Dataset7ProcessILy7568770EEE7otErrorPNS_5Utils13CmdLineParser3ArgE))
<BR><BR>[Stack]<UL><LI>Max Depth = 2576 + Unknown Stack Size
<LI>Call Chain = otError ot::Cli::Dataset::Process&lang;7568770ull&rang;(ot::Utils::CmdLineParser::Arg*) &rArr; otDatasetSetPendingTlvs &rArr; ot::MeshCoP::PendingDatasetManager::Save(otOperationalDatasetTlvs const&) &rArr; ot::MeshCoP::DatasetManager::HandleDatasetUpdated() &rArr; ot::MeshCoP::DatasetManager::SendSet() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetSetPendingTlvs
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetSetActiveTlvs
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetParseTlvs
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::Arg::operator==(char const*) const
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsHexString(char const*, unsigned short&, unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_dataset.o(.rodata._ZZN2ot3Cli7Dataset7ProcessEPNS_5Utils13CmdLineParser3ArgEE9kCommands)
</UL>
<P><STRONG><a name="[672]"></a>ot::Ip4::Address::FromString(char const*, char)</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ip4_types.o(.text._ZN2ot3Ip47Address10FromStringEPKcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::Ip4::Address::FromString(char const*, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp4AddressFromString
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::FromString(char const*)
</UL>

<P><STRONG><a name="[60d]"></a>ot::Ip6::AddressInfo::AddressInfo__sub_object(ot::Ip6::Netif::UnicastAddress const&)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, netif.o(.text._ZN2ot3Ip611AddressInfoC2ERKNS0_5Netif14UnicastAddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::Ip6::AddressInfo::AddressInfo__sub_object(ot::Ip6::Netif::UnicastAddress const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::GetScope() const
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::RemoveUnicastAddress(ot::Ip6::Netif::UnicastAddress const&)
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::AddUnicastAddress(ot::Ip6::Netif::UnicastAddress&)
</UL>

<P><STRONG><a name="[60f]"></a>ot::Ip6::NetworkPrefix::GenerateRandomUla()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ip6_address.o(.text._ZN2ot3Ip613NetworkPrefix17GenerateRandomUlaEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = ot::Ip6::NetworkPrefix::GenerateRandomUla() &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoRandomGet
</UL>
<BR>[Called By]<UL><LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Info::GenerateRandom(ot::Instance&)
</UL>

<P><STRONG><a name="[610]"></a>ot::Ip6::InterfaceIdentifier::ApplyPrefix(ot::Ip6::Prefix const&)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ip6_address.o(.text._ZN2ot3Ip619InterfaceIdentifier11ApplyPrefixERKNS0_6PrefixE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ot::Ip6::InterfaceIdentifier::ApplyPrefix(ot::Ip6::Prefix const&) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::ComputeIid(ot::Mac::Address const&, ot::Lowpan::Context const&, ot::Ip6::InterfaceIdentifier&)
</UL>

<P><STRONG><a name="[794]"></a>ot::Ip6::InterfaceIdentifier::SetToLocator(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ip6_address.o(.text._ZN2ot3Ip619InterfaceIdentifier12SetToLocatorEt))
<BR><BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Mle(ot::Instance&)
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::ComputeIid(ot::Mac::Address const&, ot::Lowpan::Context const&, ot::Ip6::InterfaceIdentifier&)
</UL>

<P><STRONG><a name="[611]"></a>ot::Ip6::InterfaceIdentifier::GenerateRandom()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ip6_address.o(.text._ZN2ot3Ip619InterfaceIdentifier14GenerateRandomEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::InterfaceIdentifier::GenerateRandom() &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoRandomGet
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleNotifierEvents(ot::Events)
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Mle(ot::Instance&)
</UL>

<P><STRONG><a name="[612]"></a>ot::Ip6::InterfaceIdentifier::SetFromExtAddress(ot::Mac::ExtAddress const&)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ip6_address.o(.text._ZN2ot3Ip619InterfaceIdentifier17SetFromExtAddressERKNS_3Mac10ExtAddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::Ip6::InterfaceIdentifier::SetFromExtAddress(ot::Mac::ExtAddress const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::CopyAddress(unsigned char*, unsigned char const*, ot::Mac::ExtAddress::CopyByteOrder)
</UL>
<BR>[Called By]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::UpdateLinkLocalAddress()
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::ComputeIid(ot::Mac::Address const&, ot::Lowpan::Context const&, ot::Ip6::InterfaceIdentifier&)
</UL>

<P><STRONG><a name="[979]"></a>ot::Ip6::InterfaceIdentifier::SetBytes(unsigned char const*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ip6_address.o(.text._ZN2ot3Ip619InterfaceIdentifier8SetBytesEPKh))
<BR><BR>[Called By]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::GenerateIid(ot::Ip6::Netif::UnicastAddress&, unsigned char*, unsigned char, unsigned char*) const
</UL>

<P><STRONG><a name="[613]"></a>ot::Ip6::Ip6::NewMessage(unsigned short, ot::Message::Settings const&)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ip6.o(.text._ZN2ot3Ip63Ip610NewMessageEtRKNS_7Message8SettingsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Ip6::NewMessage(unsigned short, ot::Message::Settings const&) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::NewMessage(unsigned short, ot::Message::Settings const&)
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::NewMessage(unsigned short, ot::Message::Settings const&)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Ip6::Headers const&)
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::HandleEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::NewMessage(unsigned short)
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::InformPreviousParent()
</UL>

<P><STRONG><a name="[614]"></a>ot::Ip6::Ip6::PassToHost(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo const&, unsigned char, bool, ot::Message::Ownership)</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, ip6.o(.text._ZN2ot3Ip63Ip610PassToHostERNS_7MessageENS1_13MessageOriginERKNS0_11MessageInfoEhbNS2_9OwnershipE))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Ip6::PassToHost(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo const&, unsigned char, bool, ot::Message::Ownership) &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Clone(unsigned short) const
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::IsPortInUse(unsigned short) const
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsMeshLocalAddress(ot::Ip6::Address const&) const
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::ShouldUsePlatformUdp(unsigned short) const
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::IsAnycastServiceLocator() const
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::RemoveMplOption(ot::Message&)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::IsLocator() const
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::ShouldHandleEchoRequest(ot::Ip6::MessageInfo const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleExtensionHeaders(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&, ot::Ip6::Header&, unsigned char&, bool&)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool)
</UL>

<P><STRONG><a name="[372]"></a>ot::Ip6::Ip6::EcnToString(ot::Ip6::Ecn)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ip6.o(.text._ZN2ot3Ip63Ip611EcnToStringENS0_3EcnE))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMeshIpHeader(ot::Message const&, unsigned short, ot::Mac::Addresses const&, ot::LogLevel)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogIp6Message(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel)
</UL>

<P><STRONG><a name="[61c]"></a>ot::Ip6::Ip6::AddMplOption(ot::Message&, ot::Ip6::Header&)</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, ip6.o(.text._ZN2ot3Ip63Ip612AddMplOptionERNS_7MessageERNS0_6HeaderE))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Ip6::AddMplOption(ot::Message&, ot::Ip6::Header&) &rArr; ot::Message::PrependBytes(void const*, unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::PrependBytes(void const*, unsigned short)
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Option::GetSize() const
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::PadOption::InitToPadHeaderWithSize(unsigned short)
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::InitOption(ot::Ip6::MplOption&, ot::Ip6::Address const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::AddTunneledMplOption(ot::Message&, ot::Ip6::Header&)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
</UL>

<P><STRONG><a name="[621]"></a>ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)</STRONG> (Thumb, 466 bytes, Stack size 72 bytes, ip6.o(.text._ZN2ot3Ip63Ip612SendDatagramERNS_7MessageERNS0_11MessageInfoEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsUnspecified() const
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::PrependBytes(void const*, unsigned short)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::Enqueue(ot::Message&)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Clone(unsigned short) const
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Checksum::UpdateMessageChecksum(ot::Message&, ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned char)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::IsTmfMessage(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned short) const
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsMulticastLargerThanRealmLocal() const
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsRealmLocalMulticast() const
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SelectSourceAddress(ot::Ip6::Address const&) const
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::HasSleepyChildWithAddress(ot::Ip6::Address const&) const
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::PriorityToDscp(ot::Message::Priority)
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::AddTunneledMplOption(ot::Message&, ot::Ip6::Header&)
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char)
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::AddMplOption(ot::Message&, ot::Ip6::Header&)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::SendEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&, unsigned short)
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Ip6::Headers const&)
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::HandleEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::InformPreviousParent()
</UL>

<P><STRONG><a name="[62a]"></a>ot::Ip6::Ip6::HandleOptions(ot::Message&, ot::Ip6::Header&, bool, bool&)</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, ip6.o(.text._ZN2ot3Ip63Ip613HandleOptionsERNS_7MessageERNS0_6HeaderEbRb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Ip6::HandleOptions(ot::Message&, ot::Ip6::Header&, bool, bool&) &rArr; ot::Ip6::Mpl::ProcessOption(ot::Message&, unsigned short, ot::Ip6::Address const&, bool, bool&) &rArr; ot::Ip6::Mpl::AddBufferedMessage(ot::Message&, unsigned short, unsigned char, bool) &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetOffset(unsigned short)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Option::GetSize() const
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Option::ParseFrom(ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::ProcessOption(ot::Message&, unsigned short, ot::Ip6::Address const&, bool, bool&)
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleExtensionHeaders(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&, ot::Ip6::Header&, unsigned char&, bool&)
</UL>

<P><STRONG><a name="[62d]"></a>ot::Ip6::Ip6::HandlePayload(ot::Ip6::Header&, ot::Message&, ot::Ip6::MessageInfo&, unsigned char, ot::Message::Ownership)</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, ip6.o(.text._ZN2ot3Ip63Ip613HandlePayloadERNS0_6HeaderERNS_7MessageERNS0_11MessageInfoEhNS4_9OwnershipE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Ip6::HandlePayload(ot::Ip6::Header&, ot::Message&, ot::Ip6::MessageInfo&, unsigned char, ot::Message::Ownership) &rArr; ot::Ip6::Icmp::HandleMessage(ot::Message&, ot::Ip6::MessageInfo&) &rArr; ot::Ip6::Icmp::HandleEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Clone(unsigned short) const
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::HandleMessage(ot::Message&, ot::Ip6::MessageInfo&)
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::HandleMessage(ot::Message&, ot::Ip6::MessageInfo&)
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool)
</UL>

<P><STRONG><a name="[630]"></a>ot::Ip6::Ip6::SendIcmpError(ot::Message&, ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code)</STRONG> (Thumb, 128 bytes, Stack size 112 bytes, ip6.o(.text._ZN2ot3Ip63Ip613SendIcmpErrorERNS_7MessageENS0_4Icmp6Header4TypeENS5_4CodeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Ip6::SendIcmpError(ot::Message&, ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code) &rArr; ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Message const&) &rArr; ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Ip6::Headers const&) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Message const&)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::UpdateReassemblyList()
</UL>

<P><STRONG><a name="[3ad]"></a>ot::Ip6::Ip6::DscpToPriority(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ip6.o(.text._ZN2ot3Ip63Ip614DscpToPriorityEh))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::GetFramePriority(ot::FrameData const&, ot::Mac::Addresses const&, ot::Message::Priority&)
</UL>

<P><STRONG><a name="[37e]"></a>ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool)</STRONG> (Thumb, 778 bytes, Stack size 168 bytes, ip6.o(.text._ZN2ot3Ip63Ip614HandleDatagramERNS_7MessageENS1_13MessageOriginEPKvb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool) &rArr; ot::Ip6::Ip6::HandlePayload(ot::Ip6::Header&, ot::Message&, ot::Ip6::MessageInfo&, unsigned char, ot::Message::Ownership) &rArr; ot::Ip6::Icmp::HandleMessage(ot::Message&, ot::Ip6::MessageInfo&) &rArr; ot::Ip6::Icmp::HandleEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetOffset(unsigned short)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::RemoveHeader(unsigned short)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsRouterOrLeader() const
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsMulticastLargerThanRealmLocal() const
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsLinkLocal() const
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::IsMulticastSubscribed(ot::Ip6::Address const&) const
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Address const&) const
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::IsOnLink(ot::Ip6::Address const&) const
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::RouteLookup(ot::Ip6::Address const&, ot::Ip6::Address const&) const
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::HasSleepyChildWithAddress(ot::Ip6::Address const&) const
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Header::ParseFrom(ot::Message const&)
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleExtensionHeaders(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&, ot::Ip6::Header&, unsigned char&, bool&)
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandlePayload(ot::Ip6::Header&, ot::Message&, ot::Ip6::MessageInfo&, unsigned char, ot::Message::Ownership)
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::PassToHost(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo const&, unsigned char, bool, ot::Message::Ownership)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMessage(ot::Message&)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleSendQueue()
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleDatagram(ot::Message&, ot::ThreadLinkInfo const&, ot::Mac::Address const&)
</UL>

<P><STRONG><a name="[638]"></a>ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&)</STRONG> (Thumb, 660 bytes, Stack size 160 bytes, ip6.o(.text._ZN2ot3Ip63Ip614HandleFragmentERNS_7MessageENS1_13MessageOriginERNS0_11MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&) &rArr;  ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetOffset(unsigned short)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetLength(unsigned short)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::Enqueue(ot::Message&, ot::MessageQueue::QueuePosition)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::Dequeue(ot::Message&)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::begin()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::MoveOffset(int)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Iterator::Advance()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::DequeueAndFree(ot::Message&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::RegisterReceiver(ot::TimeTicker::Receiver)
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytesFromMessage(unsigned short, ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleExtensionHeaders(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&, ot::Ip6::Header&, unsigned char&, bool&)
</UL>

<P><STRONG><a name="[293]"></a>ot::Ip6::Ip6::HandleTimeTick()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ip6.o(.text._ZN2ot3Ip63Ip614HandleTimeTickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Ip6::HandleTimeTick() &rArr; ot::Ip6::Ip6::UpdateReassemblyList() &rArr; ot::Ip6::Ip6::SendIcmpError(ot::Message&, ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code) &rArr; ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Message const&) &rArr; ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Ip6::Headers const&) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::UnregisterReceiver(ot::TimeTicker::Receiver)
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::UpdateReassemblyList()
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::HandleTimer()
</UL>

<P><STRONG><a name="[63c]"></a>ot::Ip6::Ip6::EnqueueDatagram(ot::Message&)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ip6.o(.text._ZN2ot3Ip63Ip615EnqueueDatagramERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Ip6::EnqueueDatagram(ot::Message&) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::Enqueue(ot::Message&)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::HandleRetransmissionTimer()
</UL>

<P><STRONG><a name="[63d]"></a>ot::Ip6::Ip6::HandleSendQueue()</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ip6.o(.text._ZN2ot3Ip63Ip615HandleSendQueueEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Ip6::HandleSendQueue() &rArr; ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool) &rArr; ot::Ip6::Ip6::HandlePayload(ot::Ip6::Header&, ot::Message&, ot::Ip6::MessageInfo&, unsigned char, ot::Message::Ownership) &rArr; ot::Ip6::Icmp::HandleMessage(ot::Message&, ot::Ip6::MessageInfo&) &rArr; ot::Ip6::Icmp::HandleEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::Dequeue(ot::Message&)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::GetHead() const
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TaskletIn&lang;ot::Ip6::Ip6, &(ot::Ip6::Ip6::HandleSendQueue())&rang;::HandleTasklet(ot::Tasklet&)
</UL>

<P><STRONG><a name="[370]"></a>ot::Ip6::Ip6::IpProtoToString(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ip6.o(.text._ZN2ot3Ip63Ip615IpProtoToStringEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ot::Ip6::Ip6::IpProtoToString(unsigned char) &rArr; ot::BinarySearch::Find(void const*, void const*, unsigned short, unsigned short, int (&)(void const*, void const*))
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BinarySearch::Find(void const*, void const*, unsigned short, unsigned short, int (&)(void const*, void const*))
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMeshIpHeader(ot::Message const&, unsigned short, ot::Mac::Addresses const&, ot::LogLevel)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogIp6Message(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel)
</UL>

<P><STRONG><a name="[61b]"></a>ot::Ip6::Ip6::RemoveMplOption(ot::Message&)</STRONG> (Thumb, 340 bytes, Stack size 104 bytes, ip6.o(.text._ZN2ot3Ip63Ip615RemoveMplOptionERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Ip6::RemoveMplOption(ot::Message&) &rArr; ot::Message::RemoveHeader(unsigned short, unsigned short) &rArr; ot::Message::WriteBytesFromMessage(unsigned short, ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::RemoveHeader(unsigned short, unsigned short)
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Option::GetSize() const
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::PadOption::InitForPadSize(unsigned char)
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Option::ParseFrom(ot::Message const&, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::PassToHost(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo const&, unsigned char, bool, ot::Message::Ownership)
</UL>

<P><STRONG><a name="[629]"></a>ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char)</STRONG> (Thumb, 436 bytes, Stack size 112 bytes, ip6.o(.text._ZN2ot3Ip63Ip616FragmentDatagramERNS_7MessageEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::Manager::NonCryptoGetUint32()
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetOffset(unsigned short)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetLength(unsigned short)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetPriority(ot::Message::Priority)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::Enqueue(ot::Message&)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytesFromMessage(unsigned short, ot::Message const&, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
</UL>

<P><STRONG><a name="[628]"></a>ot::Ip6::Ip6::AddTunneledMplOption(ot::Message&, ot::Ip6::Header&)</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, ip6.o(.text._ZN2ot3Ip63Ip620AddTunneledMplOptionERNS_7MessageERNS0_6HeaderE))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Ip6::AddTunneledMplOption(ot::Message&, ot::Ip6::Header&) &rArr; ot::Ip6::Ip6::AddMplOption(ot::Message&, ot::Ip6::Header&) &rArr; ot::Message::PrependBytes(void const*, unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::PrependBytes(void const*, unsigned short)
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SelectSourceAddress(ot::Ip6::Address const&) const
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToRealmLocalAllMplForwarders()
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::AddMplOption(ot::Message&, ot::Ip6::Header&)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
</UL>

<P><STRONG><a name="[63b]"></a>ot::Ip6::Ip6::UpdateReassemblyList()</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, ip6.o(.text._ZN2ot3Ip63Ip620UpdateReassemblyListEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Ip6::UpdateReassemblyList() &rArr; ot::Ip6::Ip6::SendIcmpError(ot::Message&, ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code) &rArr; ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Message const&) &rArr; ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Ip6::Headers const&) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::begin()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Iterator::Advance()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::DequeueAndFree(ot::Message&)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendIcmpError(ot::Message&, ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code)
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleTimeTick()
</UL>

<P><STRONG><a name="[636]"></a>ot::Ip6::Ip6::HandleExtensionHeaders(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&, ot::Ip6::Header&, unsigned char&, bool&)</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, ip6.o(.text._ZN2ot3Ip63Ip622HandleExtensionHeadersERNS_7MessageENS1_13MessageOriginERNS0_11MessageInfoERNS0_6HeaderERhRb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Ip6::HandleExtensionHeaders(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&, ot::Ip6::Header&, unsigned char&, bool&) &rArr; ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&) &rArr;  ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&)
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleOptions(ot::Message&, ot::Ip6::Header&, bool, bool&)
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::PassToHost(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo const&, unsigned char, bool, ot::Message::Ownership)
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool)
</UL>

<P><STRONG><a name="[641]"></a>ot::Ip6::Ip6::Ip6(ot::Instance&)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ip6.o(.text._ZN2ot3Ip63Ip6C2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Udp(ot::Instance&)
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::Mpl(ot::Instance&)
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::Icmp(ot::Instance&)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bd7]"></a>ot::Ip6::Ip6::Ip6__sub_object(ot::Instance&)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ip6.o(.text._ZN2ot3Ip63Ip6C2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[61d]"></a>ot::Ip6::Mpl::InitOption(ot::Ip6::MplOption&, ot::Ip6::Address const&)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ip6_mpl.o(.text._ZN2ot3Ip63Mpl10InitOptionERNS0_9MplOptionERKNS0_7AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ot::Ip6::Mpl::InitOption(ot::Ip6::MplOption&, ot::Ip6::Address const&) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::AddMplOption(ot::Message&, ot::Ip6::Header&)
</UL>

<P><STRONG><a name="[62c]"></a>ot::Ip6::Mpl::ProcessOption(ot::Message&, unsigned short, ot::Ip6::Address const&, bool, bool&)</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ip6_mpl.o(.text._ZN2ot3Ip63Mpl13ProcessOptionERNS_7MessageEtRKNS0_7AddressEbRb))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Mpl::ProcessOption(ot::Message&, unsigned short, ot::Ip6::Address const&, bool, bool&) &rArr; ot::Ip6::Mpl::AddBufferedMessage(ot::Message&, unsigned short, unsigned char, bool) &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::AddBufferedMessage(ot::Message&, unsigned short, unsigned char, bool)
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::UpdateSeedSet(unsigned short, unsigned char)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::IsLocator() const
</UL>
<BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleOptions(ot::Message&, ot::Ip6::Header&, bool, bool&)
</UL>

<P><STRONG><a name="[645]"></a>ot::Ip6::Mpl::UpdateSeedSet(unsigned short, unsigned char)</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, ip6_mpl.o(.text._ZN2ot3Ip63Mpl13UpdateSeedSetEth))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Mpl::UpdateSeedSet(unsigned short, unsigned char) &rArr; ot::TimeTicker::RegisterReceiver(ot::TimeTicker::Receiver) &rArr; ot::TimerMilli::Start(unsigned int) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::RegisterReceiver(ot::TimeTicker::Receiver)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::ProcessOption(ot::Message&, unsigned short, ot::Ip6::Address const&, bool, bool&)
</UL>

<P><STRONG><a name="[294]"></a>ot::Ip6::Mpl::HandleTimeTick()</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, ip6_mpl.o(.text._ZN2ot3Ip63Mpl14HandleTimeTickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ot::Ip6::Mpl::HandleTimeTick() &rArr; ot::TimeTicker::UnregisterReceiver(ot::TimeTicker::Receiver) &rArr; ot::TimerMilli::Stop() &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::UnregisterReceiver(ot::TimeTicker::Receiver)
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::HandleTimer()
</UL>

<P><STRONG><a name="[646]"></a>ot::Ip6::Mpl::AddBufferedMessage(ot::Message&, unsigned short, unsigned char, bool)</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, ip6_mpl.o(.text._ZN2ot3Ip63Mpl18AddBufferedMessageERNS_7MessageEthb))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Mpl::AddBufferedMessage(ot::Message&, unsigned short, unsigned char, bool) &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint16InRange(unsigned short, unsigned short)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::Enqueue(ot::Message&, ot::MessageQueue::QueuePosition)
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Clone(unsigned short) const
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::FireAtIfEarlier(ot::Time)
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::ProcessOption(ot::Message&, unsigned short, ot::Ip6::Address const&, bool, bool&)
</UL>

<P><STRONG><a name="[33a]"></a>ot::Ip6::Mpl::HandleRetransmissionTimer()</STRONG> (Thumb, 330 bytes, Stack size 72 bytes, ip6_mpl.o(.text._ZN2ot3Ip63Mpl25HandleRetransmissionTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Mpl::HandleRetransmissionTimer() &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint16InRange(unsigned short, unsigned short)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::Dequeue(ot::Message&)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::begin()
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Clone(unsigned short) const
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Iterator::Advance()
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::FireAt(ot::Time)
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::Metadata::RemoveFrom(ot::Message&) const
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::Metadata::ReadFrom(ot::Message const&)
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::EnqueueDatagram(ot::Message&)
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilliIn&lang;ot::Ip6::Mpl, &(ot::Ip6::Mpl::HandleRetransmissionTimer())&rang;::HandleTimer(ot::Timer&)
</UL>

<P><STRONG><a name="[647]"></a>ot::Ip6::Mpl::Metadata::ReadFrom(ot::Message const&)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ip6_mpl.o(.text._ZN2ot3Ip63Mpl8Metadata8ReadFromERKNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Mpl::Metadata::ReadFrom(ot::Message const&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::HandleRetransmissionTimer()
</UL>

<P><STRONG><a name="[644]"></a>ot::Ip6::Mpl::Mpl(ot::Instance&)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ip6_mpl.o(.text._ZN2ot3Ip63MplC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::Ip6(ot::Instance&)
</UL>

<P><STRONG><a name="[bd8]"></a>ot::Ip6::Mpl::Mpl__sub_object(ot::Instance&)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ip6_mpl.o(.text._ZN2ot3Ip63MplC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[649]"></a>ot::Ip6::Udp::NewMessage(unsigned short, ot::Message::Settings const&)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, udp6.o(.text._ZN2ot3Ip63Udp10NewMessageEtRKNS_7Message8SettingsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Udp::NewMessage(unsigned short, ot::Message::Settings const&) &rArr; ot::Ip6::Ip6::NewMessage(unsigned short, ot::Message::Settings const&) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::NewMessage(unsigned short, ot::Message::Settings const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewMessage(ot::Message::Settings const&)
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otUdpNewMessage
</UL>

<P><STRONG><a name="[651]"></a>ot::Ip6::Udp::RemoveSocket(ot::Ip6::Udp::SocketHandle&)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, udp6.o(.text._ZN2ot3Ip63Udp12RemoveSocketERNS1_12SocketHandleE))
<BR><BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::Close()
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Close(ot::Ip6::Udp::SocketHandle&)
</UL>

<P><STRONG><a name="[64a]"></a>ot::Ip6::Udp::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, udp6.o(.text._ZN2ot3Ip63Udp12SendDatagramERNS_7MessageERNS0_11MessageInfoEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Udp::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetOffset(unsigned short)
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::PrependBytes(void const*, unsigned short)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[62e]"></a>ot::Ip6::Udp::HandleMessage(ot::Message&, ot::Ip6::MessageInfo&)</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, udp6.o(.text._ZN2ot3Ip63Udp13HandleMessageERNS_7MessageERNS0_11MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Udp::HandleMessage(ot::Message&, ot::Ip6::MessageInfo&) &rArr; ot::Checksum::VerifyMessageChecksum(ot::Message const&, ot::Ip6::MessageInfo const&, unsigned char) &rArr; ot::Checksum::Calculate(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned char, ot::Message const&) &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::MoveOffset(int)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::HandlePayload(ot::Message&, ot::Ip6::MessageInfo&)
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Checksum::VerifyMessageChecksum(ot::Message const&, ot::Ip6::MessageInfo const&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandlePayload(ot::Ip6::Header&, ot::Message&, ot::Ip6::MessageInfo&, unsigned char, ot::Message::Ownership)
</UL>

<P><STRONG><a name="[64c]"></a>ot::Ip6::Udp::HandlePayload(ot::Message&, ot::Ip6::MessageInfo&)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, udp6.o(.text._ZN2ot3Ip63Udp13HandlePayloadERNS_7MessageERNS0_11MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Udp::HandlePayload(ot::Message&, ot::Ip6::MessageInfo&) &rArr; ot::Message::RemoveHeader(unsigned short) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::RemoveHeader(unsigned short)
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::SocketHandle::Matches(ot::Ip6::MessageInfo const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::HandleMessage(ot::Message&, ot::Ip6::MessageInfo&)
</UL>

<P><STRONG><a name="[64e]"></a>ot::Ip6::Udp::Bind(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&, ot::Ip6::NetifIdentifier)</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, udp6.o(.text._ZN2ot3Ip63Udp4BindERNS1_12SocketHandleERKNS0_8SockAddrENS0_15NetifIdentifierE))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ot::Ip6::Udp::Bind(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&, ot::Ip6::NetifIdentifier) &rArr; ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Address const&) const &rArr; bool ot::LinkedList&lang;ot::Ip6::Netif::UnicastAddress&rang;::ContainsMatching&lang;ot::Ip6::Address&rang;(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsUnspecified() const
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Address const&) const
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::Bind(unsigned short, ot::Ip6::NetifIdentifier)
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otUdpBind
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Connect(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&)
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::Connect(unsigned short)
</UL>

<P><STRONG><a name="[64f]"></a>ot::Ip6::Udp::Open(ot::Ip6::Udp::SocketHandle&, void (*)(void*, otMessage*, otMessageInfo const*), void*)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, udp6.o(.text._ZN2ot3Ip63Udp4OpenERNS1_12SocketHandleEPFvPvP9otMessagePK13otMessageInfoES4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Udp::Open(ot::Ip6::Udp::SocketHandle&, void (*)(void*, otMessage*, otMessageInfo const*), void*) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::Open(void (*)(void*, otMessage*, otMessageInfo const*), void*)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otUdpOpen
</UL>

<P><STRONG><a name="[650]"></a>ot::Ip6::Udp::Close(ot::Ip6::Udp::SocketHandle&)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, udp6.o(.text._ZN2ot3Ip63Udp5CloseERNS1_12SocketHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Ip6::Udp::Close(ot::Ip6::Udp::SocketHandle&)
</UL>
<BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::RemoveSocket(ot::Ip6::Udp::SocketHandle&)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otUdpClose
</UL>

<P><STRONG><a name="[652]"></a>ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 192 bytes, Stack size 80 bytes, udp6.o(.text._ZN2ot3Ip63Udp6SendToERNS1_12SocketHandleERNS_7MessageERKNS0_11MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsUnspecified() const
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Bind(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&, ot::Ip6::NetifIdentifier)
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::SendTo(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otUdpSend
</UL>

<P><STRONG><a name="[653]"></a>ot::Ip6::Udp::Socket::NewMessage(unsigned short, ot::Message::Settings const&)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, udp6.o(.text._ZN2ot3Ip63Udp6Socket10NewMessageEtRKNS_7Message8SettingsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Udp::Socket::NewMessage(unsigned short, ot::Message::Settings const&) &rArr; ot::Ip6::Ip6::NewMessage(unsigned short, ot::Message::Settings const&) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::NewMessage(unsigned short, ot::Message::Settings const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::JoinerRouter::HandleTmf&lang;(ot::Uri)29&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleDtlsSend(unsigned char const*, unsigned short, ot::Message::SubType)
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::NewMleMessage(ot::Mle::Mle::Command)
</UL>

<P><STRONG><a name="[654]"></a>ot::Ip6::Udp::Socket::Bind(unsigned short, ot::Ip6::NetifIdentifier)</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, udp6.o(.text._ZN2ot3Ip63Udp6Socket4BindEtNS0_15NetifIdentifierE))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ot::Ip6::Udp::Socket::Bind(unsigned short, ot::Ip6::NetifIdentifier) &rArr; ot::Ip6::Udp::Bind(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&, ot::Ip6::NetifIdentifier) &rArr; ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Address const&) const &rArr; bool ot::LinkedList&lang;ot::Ip6::Netif::UnicastAddress&rang;::ContainsMatching&lang;ot::Ip6::Address&rang;(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Bind(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&, ot::Ip6::NetifIdentifier)
</UL>
<BR>[Called By]<UL><LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Coap::Start(unsigned short, ot::Ip6::NetifIdentifier)
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Bind(unsigned short)
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::Start()
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Enable()
</UL>

<P><STRONG><a name="[655]"></a>ot::Ip6::Udp::Socket::Open(void (*)(void*, otMessage*, otMessageInfo const*), void*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, udp6.o(.text._ZN2ot3Ip63Udp6Socket4OpenEPFvPvP9otMessagePK13otMessageInfoES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Udp::Socket::Open(void (*)(void*, otMessage*, otMessageInfo const*), void*) &rArr; ot::Ip6::Udp::Open(ot::Ip6::Udp::SocketHandle&, void (*)(void*, otMessage*, otMessageInfo const*), void*) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Open(ot::Ip6::Udp::SocketHandle&, void (*)(void*, otMessage*, otMessageInfo const*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Coap::Start(unsigned short, ot::Ip6::NetifIdentifier)
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Open(void (*)(void*, unsigned char*, unsigned short), void (*)(void*, bool), void*)
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::Start()
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Enable()
</UL>

<P><STRONG><a name="[656]"></a>ot::Ip6::Udp::Socket::Close()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, udp6.o(.text._ZN2ot3Ip63Udp6Socket5CloseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Ip6::Udp::Socket::Close()
</UL>
<BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::RemoveSocket(ot::Ip6::Udp::SocketHandle&)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Coap::Start(unsigned short, ot::Ip6::NetifIdentifier)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Coap::Stop()
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Close()
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::Start()
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Disable()
</UL>

<P><STRONG><a name="[657]"></a>ot::Ip6::Udp::Socket::SendTo(ot::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, udp6.o(.text._ZN2ot3Ip63Udp6Socket6SendToERNS_7MessageERKNS0_11MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Udp::Socket::SendTo(ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Coap::Send(ot::Coap::CoapBase&, ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::JoinerRouter::HandleTmf&lang;(ot::Uri)29&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleDtlsSend(unsigned char const*, unsigned short, ot::Message::SubType)
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&)
</UL>

<P><STRONG><a name="[658]"></a>ot::Ip6::Udp::Socket::Connect(unsigned short)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, udp6.o(.text._ZN2ot3Ip63Udp6Socket7ConnectEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ot::Ip6::Udp::Socket::Connect(unsigned short) &rArr; ot::Ip6::Udp::Bind(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&, ot::Ip6::NetifIdentifier) &rArr; ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Address const&) const &rArr; bool ot::LinkedList&lang;ot::Ip6::Netif::UnicastAddress&rang;::ContainsMatching&lang;ot::Ip6::Address&rang;(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Bind(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&, ot::Ip6::NetifIdentifier)
</UL>
<BR>[Called By]<UL><LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Disconnect()
</UL>

<P><STRONG><a name="[659]"></a>ot::Ip6::Udp::Socket::Socket(ot::Instance&)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, udp6.o(.text._ZN2ot3Ip63Udp6SocketC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::JoinerRouter(ot::Instance&)
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Dtls(ot::Instance&, bool)
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Coap::Coap(ot::Instance&)
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Mle(ot::Instance&)
</UL>

<P><STRONG><a name="[bd9]"></a>ot::Ip6::Udp::Socket::Socket__sub_object(ot::Instance&)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, udp6.o(.text._ZN2ot3Ip63Udp6SocketC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[65a]"></a>ot::Ip6::Udp::Connect(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, udp6.o(.text._ZN2ot3Ip63Udp7ConnectERNS1_12SocketHandleERKNS0_8SockAddrE))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ot::Ip6::Udp::Connect(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&) &rArr; ot::Ip6::Udp::Bind(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&, ot::Ip6::NetifIdentifier) &rArr; ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Address const&) const &rArr; bool ot::LinkedList&lang;ot::Ip6::Netif::UnicastAddress&rang;::ContainsMatching&lang;ot::Ip6::Address&rang;(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Bind(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&, ot::Ip6::NetifIdentifier)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otUdpConnect
</UL>

<P><STRONG><a name="[643]"></a>ot::Ip6::Udp::Udp(ot::Instance&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, udp6.o(.text._ZN2ot3Ip63UdpC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::Ip6(ot::Instance&)
</UL>

<P><STRONG><a name="[bda]"></a>ot::Ip6::Udp::Udp__sub_object(ot::Instance&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, udp6.o(.text._ZN2ot3Ip63UdpC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[65b]"></a>ot::Ip6::Icmp::NewMessage(unsigned short)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, icmp6.o(.text._ZN2ot3Ip64Icmp10NewMessageEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Icmp::NewMessage(unsigned short) &rArr; ot::Ip6::Ip6::NewMessage(unsigned short, ot::Message::Settings const&) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::NewMessage(unsigned short, ot::Message::Settings const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::PingSender::SendPing()
</UL>

<P><STRONG><a name="[62f]"></a>ot::Ip6::Icmp::HandleMessage(ot::Message&, ot::Ip6::MessageInfo&)</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, icmp6.o(.text._ZN2ot3Ip64Icmp13HandleMessageERNS_7MessageERNS0_11MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Icmp::HandleMessage(ot::Message&, ot::Ip6::MessageInfo&) &rArr; ot::Ip6::Icmp::HandleEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::MoveOffset(int)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Checksum::VerifyMessageChecksum(ot::Message const&, ot::Ip6::MessageInfo const&, unsigned char)
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::HandleEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandlePayload(ot::Ip6::Header&, ot::Message&, ot::Ip6::MessageInfo&, unsigned char, ot::Message::Ownership)
</UL>

<P><STRONG><a name="[45d]"></a>ot::Ip6::Icmp::RegisterHandler(ot::Ip6::Icmp::Handler&)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, icmp6.o(.text._ZN2ot3Ip64Icmp15RegisterHandlerERNS1_7HandlerE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::PingSender::PingSender(ot::Instance&)
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::AddressResolver(ot::Instance&)
</UL>

<P><STRONG><a name="[65d]"></a>ot::Ip6::Icmp::SendEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&, unsigned short)</STRONG> (Thumb, 152 bytes, Stack size 80 bytes, icmp6.o(.text._ZN2ot3Ip64Icmp15SendEchoRequestERNS_7MessageERKNS0_11MessageInfoEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Icmp::SendEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&, unsigned short) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetOffset(unsigned short)
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::PrependBytes(void const*, unsigned short)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::PingSender::SendPing()
</UL>

<P><STRONG><a name="[65c]"></a>ot::Ip6::Icmp::HandleEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 276 bytes, Stack size 88 bytes, icmp6.o(.text._ZN2ot3Ip64Icmp17HandleEchoRequestERNS_7MessageERKNS0_11MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Icmp::HandleEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::NewMessage(unsigned short, ot::Message::Settings const&)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::IsLocator() const
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::HandleMessage(ot::Message&, ot::Ip6::MessageInfo&)
</UL>

<P><STRONG><a name="[617]"></a>ot::Ip6::Icmp::ShouldHandleEchoRequest(ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, icmp6.o(.text._ZN2ot3Ip64Icmp23ShouldHandleEchoRequestERKNS0_11MessageInfoE))
<BR><BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::PassToHost(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo const&, unsigned char, bool, ot::Message::Ownership)
</UL>

<P><STRONG><a name="[3be]"></a>ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Ip6::Headers const&)</STRONG> (Thumb, 208 bytes, Stack size 96 bytes, icmp6.o(.text._ZN2ot3Ip64Icmp9SendErrorENS1_6Header4TypeENS2_4CodeERKNS0_11MessageInfoERKNS0_7HeadersE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Ip6::Headers const&) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::NewMessage(unsigned short, ot::Message::Settings const&)
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Settings::Settings(ot::Message::LinkSecurityMode, ot::Message::Priority)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Message const&)
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::CheckReachability(ot::FrameData const&, ot::Mac::Addresses const&)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendIcmpErrorIfDstUnreach(ot::Message const&, ot::Mac::Addresses const&)
</UL>

<P><STRONG><a name="[631]"></a>ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Message const&)</STRONG> (Thumb, 50 bytes, Stack size 88 bytes, icmp6.o(.text._ZN2ot3Ip64Icmp9SendErrorENS1_6Header4TypeENS2_4CodeERKNS0_11MessageInfoERKNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Message const&) &rArr; ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Ip6::Headers const&) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Headers::ParseFrom(ot::Message const&)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Ip6::Headers const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendIcmpError(ot::Message&, ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code)
</UL>

<P><STRONG><a name="[642]"></a>ot::Ip6::Icmp::Icmp(ot::Instance&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, icmp6.o(.text._ZN2ot3Ip64IcmpC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::Ip6(ot::Instance&)
</UL>

<P><STRONG><a name="[bdb]"></a>ot::Ip6::Icmp::Icmp__sub_object(ot::Instance&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, icmp6.o(.text._ZN2ot3Ip64IcmpC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[65f]"></a>ot::Ip6::Netif::UnicastAddress::InitAsSlaacOrigin(unsigned char, bool)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, netif.o(.text._ZN2ot3Ip65Netif14UnicastAddress17InitAsSlaacOriginEhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::Ip6::Netif::UnicastAddress::InitAsSlaacOrigin(unsigned char, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::Update(unsigned char)
</UL>

<P><STRONG><a name="[660]"></a>ot::Ip6::Netif::UnicastAddress::InitAsThreadOrigin(bool)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, netif.o(.text._ZN2ot3Ip65Netif14UnicastAddress18InitAsThreadOriginEb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Mle(ot::Instance&)
</UL>

<P><STRONG><a name="[661]"></a>ot::Ip6::Netif::UnicastAddress::InitAsThreadOriginRealmLocalScope()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, netif.o(.text._ZN2ot3Ip65Netif14UnicastAddress33InitAsThreadOriginRealmLocalScopeEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Mle(ot::Instance&)
</UL>

<P><STRONG><a name="[662]"></a>ot::Ip6::Netif::AddUnicastAddress(ot::Ip6::Netif::UnicastAddress&)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, netif.o(.text._ZN2ot3Ip65Netif17AddUnicastAddressERNS1_14UnicastAddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Netif::AddUnicastAddress(ot::Ip6::Netif::UnicastAddress&) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::AddressInfo::AddressInfo__sub_object(ot::Ip6::Netif::UnicastAddress const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::UpdateLinkLocalAddress()
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleNotifierEvents(ot::Events)
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode)
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetRloc16(unsigned short)
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ApplyMeshLocalPrefix()
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::Update(unsigned char)
</UL>

<P><STRONG><a name="[663]"></a>ot::Ip6::Netif::SubscribeMulticast(ot::Ip6::Netif::MulticastAddress&)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, netif.o(.text._ZN2ot3Ip65Netif18SubscribeMulticastERNS1_16MulticastAddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Netif::SubscribeMulticast(ot::Ip6::Netif::MulticastAddress&) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::GetScope() const
</UL>
<BR>[Called By]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ApplyMeshLocalPrefix()
</UL>

<P><STRONG><a name="[455]"></a>ot::Ip6::Netif::RemoveUnicastAddress(ot::Ip6::Netif::UnicastAddress const&)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, netif.o(.text._ZN2ot3Ip65Netif20RemoveUnicastAddressERKNS1_14UnicastAddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Netif::RemoveUnicastAddress(ot::Ip6::Netif::UnicastAddress const&) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::AddressInfo::AddressInfo__sub_object(ot::Ip6::Netif::UnicastAddress const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::UpdateLinkLocalAddress()
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Stop(ot::Mle::Mle::StopMode)
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetMeshLocalPrefix(ot::Ip6::NetworkPrefix const&)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)0&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetRloc16(unsigned short)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Disable()
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetStateDetached()
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetStateChild(unsigned short)
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::Update(unsigned char)
</UL>

<P><STRONG><a name="[664]"></a>ot::Ip6::Netif::UnsubscribeMulticast(ot::Ip6::Netif::MulticastAddress const&)</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, netif.o(.text._ZN2ot3Ip65Netif20UnsubscribeMulticastERKNS1_16MulticastAddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Netif::UnsubscribeMulticast(ot::Ip6::Netif::MulticastAddress const&) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::GetScope() const
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Stop(ot::Mle::Mle::StopMode)
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetMeshLocalPrefix(ot::Ip6::NetworkPrefix const&)
</UL>

<P><STRONG><a name="[665]"></a>ot::Ip6::Netif::ExternalMulticastAddress::Iterator::AdvanceFrom(ot::Ip6::Netif::MulticastAddress const*)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, netif.o(.text._ZN2ot3Ip65Netif24ExternalMulticastAddress8Iterator11AdvanceFromEPKNS1_16MulticastAddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::Ip6::Netif::ExternalMulticastAddress::Iterator::AdvanceFrom(ot::Ip6::Netif::MulticastAddress const*) &rArr; ot::Ip6::Address::MatchesFilter(ot::Ip6::Address::TypeFilter) const
</UL>
<BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::MatchesFilter(ot::Ip6::Address::TypeFilter) const
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Iterator(ot::Ip6::Netif const&, ot::Ip6::Address::TypeFilter)
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Mle::Mle::AddressRegistrationMode)
</UL>

<P><STRONG><a name="[667]"></a>ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Iterator(ot::Ip6::Netif const&, ot::Ip6::Address::TypeFilter)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, netif.o(.text._ZN2ot3Ip65Netif24ExternalMulticastAddress8IteratorC2ERKS1_NS0_7Address10TypeFilterE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Iterator(ot::Ip6::Netif const&, ot::Ip6::Address::TypeFilter) &rArr; ot::Ip6::Netif::ExternalMulticastAddress::Iterator::AdvanceFrom(ot::Ip6::Netif::MulticastAddress const*) &rArr; ot::Ip6::Address::MatchesFilter(ot::Ip6::Address::TypeFilter) const
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::ExternalMulticastAddress::Iterator::AdvanceFrom(ot::Ip6::Netif::MulticastAddress const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Mle::Mle::AddressRegistrationMode)
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HasUnregisteredAddress()
</UL>

<P><STRONG><a name="[bdc]"></a>ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Iterator__sub_object(ot::Ip6::Netif const&, ot::Ip6::Address::TypeFilter)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, netif.o(.text._ZN2ot3Ip65Netif24ExternalMulticastAddress8IteratorC2ERKS1_NS0_7Address10TypeFilterE), UNUSED)

<P><STRONG><a name="[668]"></a>ot::Ip6::Netif::AddExternalUnicastAddress(ot::Ip6::Netif::UnicastAddress const&)</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, netif.o(.text._ZN2ot3Ip65Netif25AddExternalUnicastAddressERKNS1_14UnicastAddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Netif::AddExternalUnicastAddress(ot::Ip6::Netif::UnicastAddress const&) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsLinkLocal() const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6AddUnicastAddress
</UL>

<P><STRONG><a name="[316]"></a>ot::Ip6::Netif::SubscribeAllNodesMulticast()</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, netif.o(.text._ZN2ot3Ip65Netif26SubscribeAllNodesMulticastEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Netif::SubscribeAllNodesMulticast() &rArr; ot::Ip6::Netif::SignalMulticastAddressChange(ot::Ip6::Netif::AddressEvent, ot::Ip6::Netif::MulticastAddress const*, ot::Ip6::Netif::MulticastAddress const*) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::SignalMulticastAddressChange(ot::Ip6::Netif::AddressEvent, ot::Ip6::Netif::MulticastAddress const*, ot::Ip6::Netif::MulticastAddress const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ThreadNetif::Up()
</UL>

<P><STRONG><a name="[66a]"></a>ot::Ip6::Netif::SubscribeExternalMulticast(ot::Ip6::Address const&)</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, netif.o(.text._ZN2ot3Ip65Netif26SubscribeExternalMulticastERKNS0_7AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Netif::SubscribeExternalMulticast(ot::Ip6::Address const&) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ot::LinkedList&lang;ot::Ip6::Netif::MulticastAddress&rang;::ContainsMatching&lang;ot::Ip6::Address&rang;(ot::Ip6::Address const&) const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6SubscribeMulticastAddress
</UL>

<P><STRONG><a name="[66c]"></a>ot::Ip6::Netif::RemoveExternalUnicastAddress(ot::Ip6::Address const&)</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, netif.o(.text._ZN2ot3Ip65Netif28RemoveExternalUnicastAddressERKNS0_7AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Netif::RemoveExternalUnicastAddress(ot::Ip6::Address const&) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6RemoveUnicastAddress
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::RemoveAllExternalUnicastAddresses()
</UL>

<P><STRONG><a name="[669]"></a>ot::Ip6::Netif::SignalMulticastAddressChange(ot::Ip6::Netif::AddressEvent, ot::Ip6::Netif::MulticastAddress const*, ot::Ip6::Netif::MulticastAddress const*)</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, netif.o(.text._ZN2ot3Ip65Netif28SignalMulticastAddressChangeENS1_12AddressEventEPKNS1_16MulticastAddressES5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Netif::SignalMulticastAddressChange(ot::Ip6::Netif::AddressEvent, ot::Ip6::Netif::MulticastAddress const*, ot::Ip6::Netif::MulticastAddress const*) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::GetScope() const
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::UnsubscribeAllRoutersMulticast()
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::UnsubscribeAllNodesMulticast()
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::SubscribeAllRoutersMulticast()
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::SubscribeAllNodesMulticast()
</UL>

<P><STRONG><a name="[66d]"></a>ot::Ip6::Netif::SubscribeAllRoutersMulticast()</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, netif.o(.text._ZN2ot3Ip65Netif28SubscribeAllRoutersMulticastEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Netif::SubscribeAllRoutersMulticast() &rArr; ot::Ip6::Netif::SignalMulticastAddressChange(ot::Ip6::Netif::AddressEvent, ot::Ip6::Netif::MulticastAddress const*, ot::Ip6::Netif::MulticastAddress const*) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::SignalMulticastAddressChange(ot::Ip6::Netif::AddressEvent, ot::Ip6::Netif::MulticastAddress const*, ot::Ip6::Netif::MulticastAddress const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode)
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildStart(ot::Mle::Mle::AttachMode)
</UL>

<P><STRONG><a name="[320]"></a>ot::Ip6::Netif::UnsubscribeAllNodesMulticast()</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, netif.o(.text._ZN2ot3Ip65Netif28UnsubscribeAllNodesMulticastEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Netif::UnsubscribeAllNodesMulticast() &rArr; ot::Ip6::Netif::SignalMulticastAddressChange(ot::Ip6::Netif::AddressEvent, ot::Ip6::Netif::MulticastAddress const*, ot::Ip6::Netif::MulticastAddress const*) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::SignalMulticastAddressChange(ot::Ip6::Netif::AddressEvent, ot::Ip6::Netif::MulticastAddress const*, ot::Ip6::Netif::MulticastAddress const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ThreadNetif::Down()
</UL>

<P><STRONG><a name="[66e]"></a>ot::Ip6::Netif::UnsubscribeExternalMulticast(ot::Ip6::Address const&)</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, netif.o(.text._ZN2ot3Ip65Netif28UnsubscribeExternalMulticastERKNS0_7AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Netif::UnsubscribeExternalMulticast(ot::Ip6::Address const&) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6UnsubscribeMulticastAddress
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::UnsubscribeAllExternalMulticastAddresses()
</UL>

<P><STRONG><a name="[31f]"></a>ot::Ip6::Netif::UnsubscribeAllRoutersMulticast()</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, netif.o(.text._ZN2ot3Ip65Netif30UnsubscribeAllRoutersMulticastEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Netif::UnsubscribeAllRoutersMulticast() &rArr; ot::Ip6::Netif::SignalMulticastAddressChange(ot::Ip6::Netif::AddressEvent, ot::Ip6::Netif::MulticastAddress const*, ot::Ip6::Netif::MulticastAddress const*) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::SignalMulticastAddressChange(ot::Ip6::Netif::AddressEvent, ot::Ip6::Netif::MulticastAddress const*, ot::Ip6::Netif::MulticastAddress const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ThreadNetif::Down()
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleDetachStart()
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildStart(ot::Mle::Mle::AttachMode)
</UL>

<P><STRONG><a name="[31d]"></a>ot::Ip6::Netif::RemoveAllExternalUnicastAddresses()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, netif.o(.text._ZN2ot3Ip65Netif33RemoveAllExternalUnicastAddressesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Netif::RemoveAllExternalUnicastAddresses() &rArr; ot::Ip6::Netif::RemoveExternalUnicastAddress(ot::Ip6::Address const&) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::RemoveExternalUnicastAddress(ot::Ip6::Address const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ThreadNetif::Down()
</UL>

<P><STRONG><a name="[31e]"></a>ot::Ip6::Netif::UnsubscribeAllExternalMulticastAddresses()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, netif.o(.text._ZN2ot3Ip65Netif40UnsubscribeAllExternalMulticastAddressesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Netif::UnsubscribeAllExternalMulticastAddresses() &rArr; ot::Ip6::Netif::UnsubscribeExternalMulticast(ot::Ip6::Address const&) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::UnsubscribeExternalMulticast(ot::Ip6::Address const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ThreadNetif::Down()
</UL>

<P><STRONG><a name="[bdd]"></a>ot::Ip6::Netif::Netif(ot::Instance&)</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, netif.o(.text._ZN2ot3Ip65NetifC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[323]"></a>ot::Ip6::Netif::Netif__sub_object(ot::Instance&)</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, netif.o(.text._ZN2ot3Ip65NetifC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ThreadNetif::ThreadNetif(ot::Instance&)
</UL>

<P><STRONG><a name="[66f]"></a>ot::Ip6::Filter::UpdateUnsecurePorts(ot::Ip6::Filter::Action, unsigned short)</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, ip6_filter.o(.text._ZN2ot3Ip66Filter19UpdateUnsecurePortsENS1_6ActionEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Filter::UpdateUnsecurePorts(ot::Ip6::Filter::Action, unsigned short) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6RemoveUnsecurePort
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6AddUnsecurePort
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::Start()
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Connect(ot::MeshCoP::Joiner::JoinerRouter&)
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Finish(otError)
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleJoinerFinalizeResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
</UL>

<P><STRONG><a name="[632]"></a>ot::Ip6::Header::ParseFrom(ot::Message const&)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ip6_headers.o(.text._ZN2ot3Ip66Header9ParseFromERKNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Header::ParseFrom(ot::Message const&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Headers::ParseFrom(ot::Message const&)
</UL>

<P><STRONG><a name="[62b]"></a>ot::Ip6::Option::ParseFrom(ot::Message const&, unsigned short, unsigned short)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ip6_headers.o(.text._ZN2ot3Ip66Option9ParseFromERKNS_7MessageEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Option::ParseFrom(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::RemoveMplOption(ot::Message&)
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleOptions(ot::Message&, ot::Ip6::Header&, bool, bool&)
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressExtensionHeader(ot::Message&, ot::FrameBuilder&, unsigned char&)
</UL>

<P><STRONG><a name="[670]"></a>ot::Ip6::Prefix::MatchLength(unsigned char const*, unsigned char const*, unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ip6_address.o(.text._ZN2ot3Ip66Prefix11MatchLengthEPKhS3_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Prefix::MatchLength(unsigned char const*, unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::operator==(ot::Ip6::Prefix const&) const
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::MatchesPrefix(ot::Ip6::Prefix const&) const
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::MatchesPrefix(unsigned char const*, unsigned char) const
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::operator&lang;(ot::Ip6::Prefix const&) const
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::FindPrefix(unsigned char const*, unsigned char) const
</UL>

<P><STRONG><a name="[954]"></a>ot::Ip6::Prefix::IsValidNat64PrefixLength(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ip6_address.o(.text._ZN2ot3Ip66Prefix24IsValidNat64PrefixLengthEh))
<BR><BR>[Called By]<UL><LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetPreferredNat64Prefix(ot::NetworkData::ExternalRouteConfig&) const
</UL>

<P><STRONG><a name="[2b0]"></a>ot::Ip6::Prefix::Set(unsigned char const*, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ip6_address.o(.text._ZN2ot3Ip66Prefix3SetEPKhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetContext(unsigned char, ot::Lowpan::Context&) const
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetContext(ot::Ip6::Address const&, ot::Lowpan::Context&) const
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&)
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::OnMeshPrefixConfig::SetFrom(ot::NetworkData::PrefixTlv const&, ot::NetworkData::BorderRouterTlv const&, ot::NetworkData::BorderRouterEntry const&)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LowpanContextInfo::SetFrom(ot::NetworkData::PrefixTlv const&, ot::NetworkData::ContextTlv const&)
</UL>

<P><STRONG><a name="[671]"></a>ot::Ip6::Address::FromString(char const*)</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, ip6_address.o(.text._ZN2ot3Ip67Address10FromStringEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ot::Ip6::Address::FromString(char const*) &rArr; ot::Ip4::Address::FromString(char const*, char)
</UL>
<BR>[Calls]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip4::Address::FromString(char const*, char)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6AddressFromString
</UL>

<P><STRONG><a name="[239]"></a>ot::Ip6::Address::SetToLocator(ot::Ip6::NetworkPrefix const&, unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ip6_address.o(.text._ZN2ot3Ip67Address12SetToLocatorERKNS0_13NetworkPrefixEt))
<BR><BR>[Called By]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::GetLeaderAddress(ot::Ip6::Address&) const
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::GetServiceAloc(unsigned char, ot::Ip6::Address&) const
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::PerformNextRegistration()
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Service::Manager::GetNextDnsSrpUnicastInfo(ot::NetworkData::Service::Manager::Iterator&, ot::NetworkData::Service::DnsSrpUnicast::Info&) const
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistrationMessage(otIp6Address const*, unsigned char, unsigned int const*, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
</UL>

<P><STRONG><a name="[897]"></a>ot::Ip6::Address::SetToLinkLocalAddress(ot::Ip6::InterfaceIdentifier const&)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ip6_address.o(.text._ZN2ot3Ip67Address21SetToLinkLocalAddressERKNS0_19InterfaceIdentifierE))
<BR><BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::JoinerRouter::HandleTmf&lang;(ot::Uri)29&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[673]"></a>ot::Ip6::Address::SetToLinkLocalAddress(ot::Mac::ExtAddress const&)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ip6_address.o(.text._ZN2ot3Ip67Address21SetToLinkLocalAddressERKNS_3Mac10ExtAddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::Ip6::Address::SetToLinkLocalAddress(ot::Mac::ExtAddress const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::CopyAddress(unsigned char*, unsigned char const*, ot::Mac::ExtAddress::CopyByteOrder)
</UL>
<BR>[Called By]<UL><LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Connect(ot::MeshCoP::Joiner::JoinerRouter&)
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildIdResponse(ot::Child&)
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendParentResponse(ot::Child*, ot::Mle::Mle::Challenge const&, bool)
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child&)
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor*)
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Mle(ot::Instance&)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleMessageTransmissionTimer()
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateResponse(ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildIdRequest()
</UL>

<P><STRONG><a name="[674]"></a>ot::Ip6::Address::SynthesizeFromIp4Address(ot::Ip6::Prefix const&, ot::Ip4::Address const&)</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ip6_address.o(.text._ZN2ot3Ip67Address24SynthesizeFromIp4AddressERKNS0_6PrefixERKNS_3Ip47AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Address::SynthesizeFromIp4Address(ot::Ip6::Prefix const&, ot::Ip4::Address const&) &rArr; ot::Ip6::Address::SetPrefix(ot::Ip6::Prefix const&) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetPrefix(ot::Ip6::Prefix const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otNat64SynthesizeIp6Address
</UL>

<P><STRONG><a name="[676]"></a>ot::Ip6::Address::SetMulticastNetworkPrefix(unsigned char const*, unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ip6_address.o(.text._ZN2ot3Ip67Address25SetMulticastNetworkPrefixEPKhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ot::Ip6::Address::SetMulticastNetworkPrefix(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ApplyMeshLocalPrefix()
</UL>

<P><STRONG><a name="[677]"></a>ot::Ip6::Address::SetToLinkLocalAllNodesMulticast()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ip6_address.o(.text._ZN2ot3Ip67Address31SetToLinkLocalAllNodesMulticastEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Ip6::Address::SetToLinkLocalAllNodesMulticast() &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendAnnounce(unsigned char, ot::Mle::Mle::AnnounceMode)
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAdvertisement()
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleNetworkDataUpdateRouter()
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAttachTimer()
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAnnounce(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[640]"></a>ot::Ip6::Address::SetToRealmLocalAllMplForwarders()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ip6_address.o(.text._ZN2ot3Ip67Address31SetToRealmLocalAllMplForwardersEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Ip6::Address::SetToRealmLocalAllMplForwarders() &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::AddTunneledMplOption(ot::Message&, ot::Ip6::Header&)
</UL>

<P><STRONG><a name="[678]"></a>ot::Ip6::Address::SetToLinkLocalAllRoutersMulticast()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ip6_address.o(.text._ZN2ot3Ip67Address33SetToLinkLocalAllRoutersMulticastEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Ip6::Address::SetToLinkLocalAllRoutersMulticast() &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::Discover(ot::Mac::ChannelMask const&, unsigned short, bool, bool, ot::MeshCoP::SteeringData::HashBitIndexes const*, void (*)(otActiveScanResult*, void*), void*)
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor*)
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendParentRequest(ot::Mle::Mle::ParentRequestType)
</UL>

<P><STRONG><a name="[679]"></a>ot::Ip6::Address::SetToRealmLocalAllRoutersMulticast()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ip6_address.o(.text._ZN2ot3Ip67Address34SetToRealmLocalAllRoutersMulticastEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Ip6::Address::SetToRealmLocalAllRoutersMulticast() &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToRealmLocalAllRoutersMulticast()
</UL>

<P><STRONG><a name="[743]"></a>ot::Ip6::Address::SetPrefix(ot::Ip6::NetworkPrefix const&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ip6_address.o(.text._ZN2ot3Ip67Address9SetPrefixERKNS0_13NetworkPrefixE))
<BR><BR>[Called By]<UL><LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::GetNextCacheEntry(ot::AddressResolver::EntryInfo&, ot::AddressResolver::Iterator&) const
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetMeshLocalPrefix(ot::Ip6::NetworkPrefix const&)
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::GetMeshLocalIp6Address(ot::Ip6::Address&) const
</UL>

<P><STRONG><a name="[675]"></a>ot::Ip6::Address::SetPrefix(ot::Ip6::Prefix const&)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ip6_address.o(.text._ZN2ot3Ip67Address9SetPrefixERKNS0_6PrefixE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ot::Ip6::Address::SetPrefix(ot::Ip6::Prefix const&) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SynthesizeFromIp4Address(ot::Ip6::Prefix const&, ot::Ip4::Address const&)
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressBaseHeader(ot::Ip6::Header&, bool&, ot::Mac::Addresses const&, ot::FrameData&)
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::Update(unsigned char)
</UL>

<P><STRONG><a name="[39e]"></a>ot::Ip6::Headers::DecompressFrom(ot::Message const&, unsigned short, ot::Mac::Addresses const&)</STRONG> (Thumb, 52 bytes, Stack size 96 bytes, ip6.o(.text._ZN2ot3Ip67Headers14DecompressFromERKNS_7MessageEtRKNS_3Mac9AddressesE))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Headers::DecompressFrom(ot::Message const&, unsigned short, ot::Mac::Addresses const&) &rArr; ot::Ip6::Headers::DecompressFrom(ot::FrameData const&, ot::Mac::Addresses const&, ot::Instance&) &rArr; ot::Lowpan::Lowpan::DecompressBaseHeader(ot::Ip6::Header&, bool&, ot::Mac::Addresses const&, ot::FrameData&) &rArr; ot::NetworkData::LeaderBase::GetContext(unsigned char, ot::Lowpan::Context&) const &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ReadBytes(unsigned short, void*, unsigned short) const
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Headers::DecompressFrom(ot::FrameData const&, ot::Mac::Addresses const&, ot::Instance&)
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMeshIpHeader(ot::Message const&, unsigned short, ot::Mac::Addresses const&, ot::LogLevel)
</UL>

<P><STRONG><a name="[36a]"></a>ot::Ip6::Headers::DecompressFrom(ot::FrameData const&, ot::Mac::Addresses const&, ot::Instance&)</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, ip6.o(.text._ZN2ot3Ip67Headers14DecompressFromERKNS_9FrameDataERKNS_3Mac9AddressesERNS_8InstanceE))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ot::Ip6::Headers::DecompressFrom(ot::FrameData const&, ot::Mac::Addresses const&, ot::Instance&) &rArr; ot::Lowpan::Lowpan::DecompressBaseHeader(ot::Ip6::Header&, bool&, ot::Mac::Addresses const&, ot::FrameData&) &rArr; ot::NetworkData::LeaderBase::GetContext(unsigned char, ot::Lowpan::Context&) const &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameData::ReadBytes(void*, unsigned short)
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressBaseHeader(ot::Ip6::Header&, bool&, ot::Mac::Addresses const&, ot::FrameData&)
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressUdpHeader(ot::Ip6::Udp::Header&, ot::FrameData&)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::FragmentHeader::ParseFrom(ot::FrameData&)
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Headers::DecompressFrom(ot::Message const&, unsigned short, ot::Mac::Addresses const&)
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::CheckReachability(ot::FrameData const&, ot::Mac::Addresses const&)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::GetFramePriority(ot::FrameData const&, ot::Mac::Addresses const&, ot::Message::Priority&)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateRoutes(ot::FrameData const&, ot::Mac::Addresses const&)
</UL>

<P><STRONG><a name="[36f]"></a>ot::Ip6::Headers::ParseFrom(ot::Message const&)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ip6.o(.text._ZN2ot3Ip67Headers9ParseFromERKNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Headers::ParseFrom(ot::Message const&) &rArr; ot::Ip6::Header::ParseFrom(ot::Message const&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Header::ParseFrom(ot::Message const&)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Filter::Accept(ot::Message&) const
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Message const&)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendIcmpErrorIfDstUnreach(ot::Message const&, ot::Mac::Addresses const&)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogIp6Message(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel)
</UL>

<P><STRONG><a name="[63f]"></a>ot::Ip6::PadOption::InitForPadSize(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ip6_headers.o(.text._ZN2ot3Ip69PadOption14InitForPadSizeEh))
<BR><BR>[Called By]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::RemoveMplOption(ot::Message&)
</UL>

<P><STRONG><a name="[61f]"></a>ot::Ip6::PadOption::InitToPadHeaderWithSize(unsigned short)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ip6_headers.o(.text._ZN2ot3Ip69PadOption23InitToPadHeaderWithSizeEt))
<BR><BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::AddMplOption(ot::Message&, ot::Ip6::Header&)
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressExtensionHeader(ot::Message&, ot::FrameData&)
</UL>

<P><STRONG><a name="[32b]"></a>ot::Mac::ExtAddress::CopyAddress(unsigned char*, unsigned char const*, ot::Mac::ExtAddress::CopyByteOrder)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mac_types.o(.text._ZN2ot3Mac10ExtAddress11CopyAddressEPhPKhNS1_13CopyByteOrderE))
<BR><BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetExtAddress(ot::Mac::ExtAddress const&)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::AppendMacAddress(ot::Mac::Address const&)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetDstAddr(ot::Mac::Address&) const
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetSrcAddr(ot::Mac::Address&) const
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLinkLocalAddress(ot::Mac::ExtAddress const&)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::ConvertToMacAddress(ot::Mac::Address&) const
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(ot::Mac::ExtAddress&) const
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::SetFromExtAddress(ot::Mac::ExtAddress const&)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::ClearEntry(ot::Child&)
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::AddAddress(ot::Child const&)
</UL>

<P><STRONG><a name="[67d]"></a>ot::Mac::ExtAddress::GenerateRandom()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mac_types.o(.text._ZN2ot3Mac10ExtAddress14GenerateRandomEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = ot::Mac::ExtAddress::GenerateRandom() &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoRandomGet
</UL>
<BR>[Called By]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Start(char const*, char const*, char const*, char const*, char const*, char const*, void (*)(otError, void*), void*)
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::Mac(ot::Instance&)
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerDiscerner::GenerateJoinerId(ot::Mac::ExtAddress&) const
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleTimer()
</UL>

<P><STRONG><a name="[6df]"></a>ot::Mac::KeyMaterial::Clear()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mac_types.o(.text._ZN2ot3Mac11KeyMaterial5ClearEv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Init()
</UL>

<P><STRONG><a name="[258]"></a>ot::Mac::KeyMaterial::SetFrom(ot::Mac::Key const&, bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mac_types.o(.text._ZN2ot3Mac11KeyMaterial7SetFromERKNS0_3KeyEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Mac::KeyMaterial::SetFrom(ot::Mac::Key const&, bool) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::Mac(ot::Instance&)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::UpdateKeyMaterial()
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetKek(ot::Mac::Key const&)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::GetTemporaryMleKey(unsigned int)
</UL>

<P><STRONG><a name="[25b]"></a>ot::Mac::LinkFrameCounters::SetAll(unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mac_types.o(.text._ZN2ot3Mac17LinkFrameCounters6SetAllEj))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::KeyManager(ot::Instance&)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetCurrentKeySequence(unsigned int)
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleParentResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetAllMacFrameCounters(unsigned int, bool)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::ResetFrameCounters()
</UL>

<P><STRONG><a name="[67e]"></a>ot::Mac::GenerateRandomPanId()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mac_types.o(.text._ZN2ot3Mac19GenerateRandomPanIdEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ot::Mac::GenerateRandomPanId() &rArr; ot::Random::Manager::NonCryptoGetUint32() &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::Manager::NonCryptoGetUint32()
</UL>
<BR>[Called By]<UL><LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Info::GenerateRandom(ot::Instance&)
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Start(ot::Mle::Mle::StartMode)
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::Discover(ot::Mac::ChannelMask const&, unsigned short, bool, bool, ot::MeshCoP::SteeringData::HashBitIndexes const*, void (*)(otActiveScanResult*, void*), void*)
</UL>

<P><STRONG><a name="[338]"></a>ot::Mac::Mac::ActiveScan(unsigned int, unsigned short, void (*)(otActiveScanResult*, void*), void*)</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, mac.o(.text._ZN2ot3Mac3Mac10ActiveScanEjtPFvP18otActiveScanResultPvES4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::ActiveScan(unsigned int, unsigned short, void (*)(otActiveScanResult*, void*), void*) &rArr; ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation)
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkActiveScan
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilliIn&lang;ot::PanIdQueryServer, &(ot::PanIdQueryServer::HandleTimer())&rang;::HandleTimer(ot::Timer&)
</UL>

<P><STRONG><a name="[46d]"></a>ot::Mac::Mac::EnergyScan(unsigned int, unsigned short, void (*)(otEnergyScanResult*, void*), void*)</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, mac.o(.text._ZN2ot3Mac3Mac10EnergyScanEjtPFvP18otEnergyScanResultPvES4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::EnergyScan(unsigned int, unsigned short, void (*)(otEnergyScanResult*, void*), void*) &rArr; ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation)
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkEnergyScan
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::EnergyScanServer::HandleTimer()
</UL>

<P><STRONG><a name="[680]"></a>ot::Mac::Mac::ProcessCsl(ot::Mac::RxFrame const&, ot::Mac::Address const&)</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, mac.o(.text._ZN2ot3Mac3Mac10ProcessCslERKNS0_7RxFrameERKNS0_7AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::ProcessCsl(ot::Mac::RxFrame const&, ot::Mac::Address const&) &rArr; ot::CslTxScheduler::Update() &rArr; ot::CslTxScheduler::RescheduleCslTx() &rArr; ot::Mac::Mac::RequestCslFrameTransmission(unsigned int) &rArr; ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetHeaderIe(unsigned char) const
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::Update()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::FindChild(ot::Mac::Address const&, ot::Neighbor::StateFilter)
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::RecordFrameTransmitStatus(ot::Mac::TxFrame const&, ot::Mac::RxFrame*, otError, unsigned char, bool)
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[33b]"></a>ot::Mac::Mac::HandleTimer()</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, mac.o(.text._ZN2ot3Mac3Mac11HandleTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::HandleTimer() &rArr; ot::Mac::Mac::PerformNextOperation() &rArr; ot::Mac::Mac::PerformActiveScan() &rArr;  ot::Mac::Mac::PerformNextOperation() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformNextOperation()
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformActiveScan()
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::HandlePollTimeout()
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilliIn&lang;ot::Mac::Mac, &(ot::Mac::Mac::HandleTimer())&rang;::HandleTimer(ot::Timer&)
</UL>

<P><STRONG><a name="[684]"></a>ot::Mac::Mac::BeginTransmit()</STRONG> (Thumb, 428 bytes, Stack size 16 bytes, mac.o(.text._ZN2ot3Mac3Mac13BeginTransmitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::BeginTransmit() &rArr; ot::Mac::Links::Send() &rArr; ot::Mac::SubMac::Send() &rArr; ot::Mac::SubMac::Callbacks::TransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr; ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr;  ot::Mac::Links::Send() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetPanId(unsigned short)
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Links::Send()
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessTransmitSecurity(ot::Mac::TxFrame&)
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PrepareBeaconRequest()
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PrepareBeacon()
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::HandleFrameRequest(ot::Mac::TxFrames&)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFrameRequest(ot::Mac::TxFrames&)
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::PrepareDataRequest(ot::Mac::TxFrames&)
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::HandleFrameRequest(ot::Mac::TxFrames&)
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformNextOperation()
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformActiveScan()
</UL>

<P><STRONG><a name="[688]"></a>ot::Mac::Mac::PrepareBeacon()</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, mac.o(.text._ZN2ot3Mac3Mac13PrepareBeaconEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::PrepareBeacon() &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetPayload() const
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::InitMacHeader(ot::Mac::Frame::Type, ot::Mac::Frame::Version, ot::Mac::Addresses const&, ot::Mac::PanIds const&, ot::Mac::Frame::SecurityLevel, ot::Mac::Frame::KeyIdMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::BeginTransmit()
</UL>

<P><STRONG><a name="[68b]"></a>ot::Mac::Mac::SetPanChannel(unsigned char)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, mac.o(.text._ZN2ot3Mac3Mac13SetPanChannelEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::SetPanChannel(unsigned char) &rArr; ot::Mac::Mac::UpdateIdleMode() &rArr; ot::Mac::SubMac::Receive(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;unsigned char&rang;(unsigned char&, unsigned char const&, ot::Event)
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::UpdateIdleMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkSetChannel
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Connect(ot::MeshCoP::Joiner::JoinerRouter&)
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ApplyConfiguration(ot::Instance&, bool*) const
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Reattach()
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ProcessAnnounce()
</UL>

<P><STRONG><a name="[68e]"></a>ot::Mac::Mac::EnergyScanDone(signed char)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mac.o(.text._ZN2ot3Mac3Mac14EnergyScanDoneEa))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = ot::Mac::Mac::EnergyScanDone(signed char) &rArr;  ot::Mac::Mac::PerformEnergyScan() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformEnergyScan()
</UL>
<BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Callbacks::EnergyScanDone(signed char)
</UL>

<P><STRONG><a name="[690]"></a>ot::Mac::Mac::SetPromiscuous(bool)</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mac.o(.text._ZN2ot3Mac3Mac14SetPromiscuousEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::SetPromiscuous(bool) &rArr; ot::Mac::Mac::UpdateIdleMode() &rArr; ot::Mac::SubMac::Receive(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSetPromiscuous
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::UpdateIdleMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkSetPromiscuous
</UL>

<P><STRONG><a name="[67f]"></a>ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mac.o(.text._ZN2ot3Mac3Mac14StartOperationENS1_9OperationE))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::EnergyScan(unsigned int, unsigned short, void (*)(otEnergyScanResult*, void*), void*)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ActiveScan(unsigned int, unsigned short, void (*)(otActiveScanResult*, void*), void*)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::RequestDirectFrameTransmission()
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::RequestCslFrameTransmission(unsigned int)
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleMacCommand(ot::Mac::RxFrame&)
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::RequestDataPollTransmission()
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::RequestIndirectFrameTransmission()
</UL>

<P><STRONG><a name="[68d]"></a>ot::Mac::Mac::UpdateIdleMode()</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, mac.o(.text._ZN2ot3Mac3Mac14UpdateIdleModeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::UpdateIdleMode() &rArr; ot::Mac::SubMac::Receive(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::FireAt(ot::Time)
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Receive(unsigned char)
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Sleep()
</UL>
<BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetRadioFilterEnabled(bool)
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetPromiscuous(bool)
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetPanChannel(unsigned char)
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ClearTemporaryChannel()
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformNextOperation()
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetTemporaryChannel(unsigned char)
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetRxOnWhenIdle(bool)
</UL>

<P><STRONG><a name="[694]"></a>ot::Mac::Mac::RecordCcaStatus(bool, unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mac.o(.text._ZN2ot3Mac3Mac15RecordCcaStatusEbh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Mac::Mac::RecordCcaStatus(bool, unsigned char) &rArr; ot::SuccessRateTracker::AddSample(bool, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SuccessRateTracker::AddSample(bool, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Callbacks::RecordCcaStatus(bool, unsigned char)
</UL>

<P><STRONG><a name="[3a1]"></a>ot::Mac::Mac::SetRxOnWhenIdle(bool)</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, mac.o(.text._ZN2ot3Mac3Mac15SetRxOnWhenIdleEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::SetRxOnWhenIdle(bool) &rArr; ot::Mac::Mac::UpdateIdleMode() &rArr; ot::Mac::SubMac::Receive(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::UpdateIdleMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SetRxOnWhenIdle(bool)
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Attach(ot::Mle::Mle::AttachMode)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::Start()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::Stop()
</UL>

<P><STRONG><a name="[695]"></a>ot::Mac::Mac::HandleMacCommand(ot::Mac::RxFrame&)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, mac.o(.text._ZN2ot3Mac3Mac16HandleMacCommandERNS0_7RxFrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::HandleMacCommand(ot::Mac::RxFrame&) &rArr; ot::DataPollHandler::HandleDataPoll(ot::Mac::RxFrame&) &rArr; ot::SourceMatchController::SetSrcMatchAsShort(ot::Child&, bool) &rArr; ot::SourceMatchController::ClearEntry(ot::Child&) &rArr; ot::SourceMatchController::AddPendingEntries() &rArr; ot::SourceMatchController::AddAddress(ot::Child const&) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetCommandId(unsigned char&) const
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation)
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::HandleDataPoll(ot::Mac::RxFrame&)
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[682]"></a>ot::Mac::Mac::PerformActiveScan()</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, mac.o(.text._ZN2ot3Mac3Mac17PerformActiveScanEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = ot::Mac::Mac::PerformActiveScan() &rArr;  ot::Mac::Mac::PerformNextOperation() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetPanId(unsigned short)
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformNextOperation()
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::BeginTransmit()
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ChannelMask::GetNextChannel(unsigned char&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformNextOperation()
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleTimer()
</UL>

<P><STRONG><a name="[68f]"></a>ot::Mac::Mac::PerformEnergyScan()</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, mac.o(.text._ZN2ot3Mac3Mac17PerformEnergyScanEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = ot::Mac::Mac::PerformEnergyScan() &rArr;  ot::Mac::Mac::PerformNextOperation() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::GetRssi() const
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Receive(unsigned char)
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::EnergyScan(unsigned char, unsigned short)
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformNextOperation()
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ChannelMask::GetNextChannel(unsigned char&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformNextOperation()
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::EnergyScanDone(signed char)
</UL>

<P><STRONG><a name="[685]"></a>ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)</STRONG> (Thumb, 704 bytes, Stack size 40 bytes, mac.o(.text._ZN2ot3Mac3Mac18HandleTransmitDoneERNS0_7TxFrameEPNS0_7RxFrameE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr;  ot::Mac::Links::Send() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::DumpAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, void const*, unsigned short)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Links::Send()
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessEnhAckSecurity(ot::Mac::TxFrame&, ot::Mac::RxFrame&)
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformNextOperation()
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation)
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::HandleSentFrame(ot::Mac::TxFrame const&, otError)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleSentFrame(ot::Mac::TxFrame&, otError)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetDstAddr(ot::Mac::Address&) const
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::HandlePollSent(ot::Mac::TxFrame&, otError)
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::ProcessTxDone(ot::Mac::TxFrame const&, ot::Mac::RxFrame const*, otError)
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::HandleSentFrame(ot::Mac::TxFrame const&, otError)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ToYesNo(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::BeginTransmit()
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Callbacks::TransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[69a]"></a>ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)</STRONG> (Thumb, 984 bytes, Stack size 56 bytes, mac.o(.text._ZN2ot3Mac3Mac19HandleReceivedFrameEPNS0_7RxFrameE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 2240 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError) &rArr; ot::MeshForwarder::HandleReceivedFrame(ot::Mac::RxFrame&) &rArr; ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&) &rArr; ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&) &rArr; ot::MeshForwarder::UpdateRoutes(ot::FrameData const&, ot::Mac::Addresses const&) &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::DumpAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, void const*, unsigned short)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Filter::ApplyToRxFrame(ot::Mac::RxFrame&, ot::Mac::ExtAddress const&, ot::Neighbor*) const
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::IsDataRequestCommand() const
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetFrameControlField() const
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::ValidatePsdu() const
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetKeyIdMode(unsigned char&) const
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetDstPanId(unsigned short&) const
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::LogFrameRxFailure(ot::Mac::RxFrame const*, otError) const
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ReportActiveScanResult(ot::Mac::RxFrame const*)
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessReceiveSecurity(ot::Mac::RxFrame&, ot::Mac::Address const&, ot::Neighbor*)
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformNextOperation()
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleMacCommand(ot::Mac::RxFrame&)
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::UpdateIdleMode()
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessCsl(ot::Mac::RxFrame const&, ot::Mac::Address const&)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::LinkQualityInfo::AddRss(signed char)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindRxOnlyNeighborRouter(ot::Mac::Address const&)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Mac::Address const&, ot::Neighbor::StateFilter)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleReceivedFrame(ot::Mac::RxFrame&)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetDstAddr(ot::Mac::Address&) const
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::ProcessRxFrame(ot::Mac::RxFrame const&)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetSrcAddr(ot::Mac::Address&) const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Callbacks::ReceiveDone(ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[6a3]"></a>ot::Mac::Mac::SetTemporaryChannel(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mac.o(.text._ZN2ot3Mac3Mac19SetTemporaryChannelEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::SetTemporaryChannel(unsigned char) &rArr; ot::Mac::Mac::UpdateIdleMode() &rArr; ot::Mac::SubMac::Receive(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::UpdateIdleMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::PrepareDiscoveryRequestFrame(ot::Mac::TxFrame&)
</UL>

<P><STRONG><a name="[683]"></a>ot::Mac::Mac::PerformNextOperation()</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, mac.o(.text._ZN2ot3Mac3Mac20PerformNextOperationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::PerformNextOperation() &rArr; ot::Mac::Mac::PerformActiveScan() &rArr;  ot::Mac::Mac::PerformNextOperation() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Receive(unsigned char)
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformEnergyScan()
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformActiveScan()
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::UpdateIdleMode()
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::BeginTransmit()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TaskletIn&lang;ot::Mac::Mac, &(ot::Mac::Mac::PerformNextOperation())&rang;::HandleTasklet(ot::Tasklet&)
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformEnergyScan()
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformActiveScan()
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleTimer()
</UL>

<P><STRONG><a name="[687]"></a>ot::Mac::Mac::PrepareBeaconRequest()</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, mac.o(.text._ZN2ot3Mac3Mac20PrepareBeaconRequestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::PrepareBeaconRequest() &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::InitMacHeader(ot::Mac::Frame::Type, ot::Mac::Frame::Version, ot::Mac::Addresses const&, ot::Mac::PanIds const&, ot::Mac::Frame::SecurityLevel, ot::Mac::Frame::KeyIdMode)
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetCommandId(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::BeginTransmit()
</UL>

<P><STRONG><a name="[6a4]"></a>ot::Mac::Mac::ClearTemporaryChannel()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mac.o(.text._ZN2ot3Mac3Mac21ClearTemporaryChannelEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::ClearTemporaryChannel() &rArr; ot::Mac::Mac::UpdateIdleMode() &rArr; ot::Mac::SubMac::Receive(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::UpdateIdleMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoverComplete()
</UL>

<P><STRONG><a name="[699]"></a>ot::Mac::Mac::ProcessEnhAckSecurity(ot::Mac::TxFrame&, ot::Mac::RxFrame&)</STRONG> (Thumb, 376 bytes, Stack size 64 bytes, mac.o(.text._ZN2ot3Mac3Mac21ProcessEnhAckSecurityERNS0_7TxFrameERNS0_7RxFrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::ProcessEnhAckSecurity(ot::Mac::TxFrame&, ot::Mac::RxFrame&) &rArr; ot::Mac::RxFrame::ProcessReceiveAesCcm(ot::Mac::ExtAddress const&, ot::Mac::KeyMaterial const&) &rArr; ot::Crypto::AesCcm::Init(unsigned int, unsigned int, unsigned char, void const*, unsigned char) &rArr; ot::Crypto::AesEcb::Encrypt(unsigned char const*, unsigned char*) &rArr; otPlatCryptoAesEncrypt &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetFrameControlField() const
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetSecurityLevel(unsigned char&) const
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetKeyIdMode(unsigned char&) const
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::RxFrame::ProcessReceiveAesCcm(ot::Mac::ExtAddress const&, ot::Mac::KeyMaterial const&)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Mac::Address const&, ot::Neighbor::StateFilter)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetDstAddr(ot::Mac::Address&) const
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetKeyId(unsigned char&) const
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetFrameCounter(unsigned int&) const
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetSrcAddr(ot::Mac::Address&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[6a7]"></a>ot::Mac::Mac::SetRadioFilterEnabled(bool)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mac.o(.text._ZN2ot3Mac3Mac21SetRadioFilterEnabledEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::SetRadioFilterEnabled(bool) &rArr; ot::Mac::Mac::UpdateIdleMode() &rArr; ot::Mac::SubMac::Receive(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::UpdateIdleMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkSetRadioFilterEnabled
</UL>

<P><STRONG><a name="[69e]"></a>ot::Mac::Mac::ProcessReceiveSecurity(ot::Mac::RxFrame&, ot::Mac::Address const&, ot::Neighbor*)</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, mac.o(.text._ZN2ot3Mac3Mac22ProcessReceiveSecurityERNS0_7RxFrameERKNS0_7AddressEPNS_8NeighborE))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::ProcessReceiveSecurity(ot::Mac::RxFrame&, ot::Mac::Address const&, ot::Neighbor*) &rArr; ot::KeyManager::SetCurrentKeySequence(unsigned int) &rArr; ot::KeyManager::UpdateKeyMaterial() &rArr; ot::KeyManager::ComputeKeys(unsigned int, ot::KeyManager::HashKeys&) const &rArr; ot::Crypto::HmacSha256::Start(ot::Crypto::Key const&) &rArr; otPlatCryptoHmacSha256Start &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetCurrentKeySequence(unsigned int)
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Links::GetTemporaryMacKey(ot::Mac::Frame const&, unsigned int) const
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Links::GetCurrentMacKey(ot::Mac::Frame const&) const
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetSecurityLevel(unsigned char&) const
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetKeyIdMode(unsigned char&) const
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::RxFrame::ProcessReceiveAesCcm(ot::Mac::ExtAddress const&, ot::Mac::KeyMaterial const&)
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetKeyId(unsigned char&) const
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetFrameCounter(unsigned int&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[6a2]"></a>ot::Mac::Mac::ReportActiveScanResult(ot::Mac::RxFrame const*)</STRONG> (Thumb, 46 bytes, Stack size 72 bytes, mac.o(.text._ZN2ot3Mac3Mac22ReportActiveScanResultEPKNS0_7RxFrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::ReportActiveScanResult(ot::Mac::RxFrame const*) &rArr; ot::Mac::Mac::ConvertBeaconToActiveScanResult(ot::Mac::RxFrame const*, otActiveScanResult&) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ConvertBeaconToActiveScanResult(ot::Mac::RxFrame const*, otActiveScanResult&)
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[689]"></a>ot::Mac::Mac::ProcessTransmitSecurity(ot::Mac::TxFrame&)</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, mac.o(.text._ZN2ot3Mac3Mac23ProcessTransmitSecurityERNS0_7TxFrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::ProcessTransmitSecurity(ot::Mac::TxFrame&) &rArr; ot::Mac::TxFrame::ProcessTransmitAesCcm(ot::Mac::ExtAddress const&) &rArr; ot::Crypto::AesCcm::Init(unsigned int, unsigned int, unsigned char, void const*, unsigned char) &rArr; ot::Crypto::AesEcb::Encrypt(unsigned char const*, unsigned char*) &rArr; otPlatCryptoAesEncrypt &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetKeyIdMode(unsigned char&) const
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::TxFrame::ProcessTransmitAesCcm(ot::Mac::ExtAddress const&)
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetKeySource(unsigned char const*)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetKeyId(unsigned char)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetFrameCounter(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::BeginTransmit()
</UL>

<P><STRONG><a name="[6ad]"></a>ot::Mac::Mac::RecordFrameTransmitStatus(ot::Mac::TxFrame const&, ot::Mac::RxFrame*, otError, unsigned char, bool)</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, mac.o(.text._ZN2ot3Mac3Mac25RecordFrameTransmitStatusERKNS0_7TxFrameEPNS0_7RxFrameE7otErrorhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::RecordFrameTransmitStatus(ot::Mac::TxFrame const&, ot::Mac::RxFrame*, otError, unsigned char, bool) &rArr; void ot::Logger::DumpAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, void const*, unsigned short) &rArr; ot::Logger::DumpInModule(char const*, ot::LogLevel, char const*, void const*, unsigned short) &rArr; ot::Logger::DumpLine(char const*, ot::LogLevel, unsigned char const*, unsigned short) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::DumpAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, void const*, unsigned short)
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Filter::ApplyToRxFrame(ot::Mac::RxFrame&, ot::Mac::ExtAddress const&, ot::Neighbor*) const
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetFrameControlField() const
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::LogFrameTxFailure(ot::Mac::TxFrame const&, otError, unsigned char, bool) const
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessCsl(ot::Mac::RxFrame const&, ot::Mac::Address const&)
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SuccessRateTracker::AddSample(bool, unsigned short)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::LinkQualityInfo::AddRss(signed char)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Mac::Address const&, ot::Neighbor::StateFilter)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetDstAddr(ot::Mac::Address&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Callbacks::RecordFrameTransmitStatus(ot::Mac::TxFrame const&, ot::Mac::RxFrame*, otError, unsigned char, bool)
</UL>

<P><STRONG><a name="[406]"></a>ot::Mac::Mac::RequestCslFrameTransmission(unsigned int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mac.o(.text._ZN2ot3Mac3Mac27RequestCslFrameTransmissionEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::RequestCslFrameTransmission(unsigned int) &rArr; ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation)
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::RescheduleCslTx()
</UL>

<P><STRONG><a name="[40f]"></a>ot::Mac::Mac::RequestDataPollTransmission()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mac.o(.text._ZN2ot3Mac3Mac27RequestDataPollTransmissionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::RequestDataPollTransmission() &rArr; ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation)
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::SendDataPoll()
</UL>

<P><STRONG><a name="[3de]"></a>ot::Mac::Mac::RequestDirectFrameTransmission()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mac.o(.text._ZN2ot3Mac3Mac30RequestDirectFrameTransmissionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::RequestDirectFrameTransmission() &rArr; ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation)
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::ScheduleTransmissionTask()
</UL>

<P><STRONG><a name="[6aa]"></a>ot::Mac::Mac::ConvertBeaconToActiveScanResult(ot::Mac::RxFrame const*, otActiveScanResult&)</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, mac.o(.text._ZN2ot3Mac3Mac31ConvertBeaconToActiveScanResultEPKNS0_7RxFrameER18otActiveScanResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::ConvertBeaconToActiveScanResult(ot::Mac::RxFrame const*, otActiveScanResult&) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetSrcPanId(unsigned short&) const
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetDstPanId(unsigned short&) const
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetSrcAddr(ot::Mac::Address&) const
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ReportActiveScanResult(ot::Mac::RxFrame const*)
</UL>

<P><STRONG><a name="[463]"></a>ot::Mac::Mac::RequestIndirectFrameTransmission()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mac.o(.text._ZN2ot3Mac3Mac32RequestIndirectFrameTransmissionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::RequestIndirectFrameTransmission() &rArr; ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation)
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::ProcessPendingPolls()
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::HandleDataPoll(ot::Mac::RxFrame&)
</UL>

<P><STRONG><a name="[6af]"></a>ot::Mac::Mac::SetPanId(unsigned short)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mac.o(.text._ZN2ot3Mac3Mac8SetPanIdEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::SetPanId(unsigned short) &rArr; ot::Mac::SubMac::SetPanId(unsigned short) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;unsigned short&rang;(unsigned short&, unsigned short const&, ot::Event)
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetPanId(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkSetPanId
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::Mac(ot::Instance&)
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Start(ot::Mle::Mle::StartMode)
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::Discover(ot::Mac::ChannelMask const&, unsigned short, bool, bool, ot::MeshCoP::SteeringData::HashBitIndexes const*, void (*)(otActiveScanResult*, void*), void*)
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Connect(ot::MeshCoP::Joiner::JoinerRouter&)
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ApplyConfiguration(ot::Instance&, bool*) const
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoverComplete()
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Reattach()
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ProcessAnnounce()
</UL>

<P><STRONG><a name="[6b1]"></a>ot::Mac::Mac::Mac(ot::Instance&)</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, mac.o(.text._ZN2ot3Mac3MacC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::Manager::NonCryptoGetUint32()
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetExtAddress(ot::Mac::ExtAddress const&)
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetPanId(unsigned short)
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetSupportedChannelMask
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Enable()
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetShortAddress(unsigned short)
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Filter::Filter()
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Links::Links(ot::Instance&)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::KeyMaterial::SetFrom(ot::Mac::Key const&, bool)
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::GenerateRandom()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::UpdateKeyMaterial()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bde]"></a>ot::Mac::Mac::Mac__sub_object(ot::Instance&)</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, mac.o(.text._ZN2ot3Mac3MacC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[41a]"></a>ot::Mac::Frame::SetCommandId(unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mac_frame.o(.text._ZN2ot3Mac5Frame12SetCommandIdEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ot::Mac::Frame::SetCommandId(unsigned char) &rArr; ot::Mac::Frame::FindPayloadIndex() const &rArr; ot::Mac::Frame::SkipSecurityHeaderIndex() const &rArr; ot::Mac::Frame::CalculateAddrFieldSize(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindPayloadIndex() const
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PrepareBeaconRequest()
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::PrepareDataRequest(ot::Mac::TxFrames&)
</UL>

<P><STRONG><a name="[6ab]"></a>ot::Mac::Frame::SetKeySource(unsigned char const*)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mac_frame.o(.text._ZN2ot3Mac5Frame12SetKeySourceEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Frame::SetKeySource(unsigned char const*) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindSecurityHeaderIndex() const
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessTransmitSecurity(ot::Mac::TxFrame&)
</UL>

<P><STRONG><a name="[3c2]"></a>ot::Mac::Frame::InitMacHeader(ot::Mac::Frame::Type, ot::Mac::Frame::Version, ot::Mac::Addresses const&, ot::Mac::PanIds const&, ot::Mac::Frame::SecurityLevel, ot::Mac::Frame::KeyIdMode)</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, mac_frame.o(.text._ZN2ot3Mac5Frame13InitMacHeaderENS1_4TypeENS1_7VersionERKNS0_9AddressesERKNS0_6PanIdsENS1_13SecurityLevelENS1_9KeyIdModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ot::Mac::Frame::InitMacHeader(ot::Mac::Frame::Type, ot::Mac::Frame::Version, ot::Mac::Addresses const&, ot::Mac::PanIds const&, ot::Mac::Frame::SecurityLevel, ot::Mac::Frame::KeyIdMode) &rArr; ot::FrameBuilder::AppendMacAddress(ot::Mac::Address const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::AppendLittleEndianUint16(unsigned short)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::AppendMacAddress(ot::Mac::Address const&)
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::AppendUint8(unsigned char)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::Init(void*, unsigned short)
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::IsDstPanIdPresent(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PrepareBeaconRequest()
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PrepareBeacon()
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareMacHeaders(ot::Mac::TxFrame&, ot::Mac::Frame::Type, ot::Mac::Addresses const&, ot::Mac::PanIds const&, ot::Mac::Frame::SecurityLevel, ot::Mac::Frame::KeyIdMode, ot::Message const*)
</UL>

<P><STRONG><a name="[3c0]"></a>ot::Mac::Frame::SetAckRequest(bool)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mac_frame.o(.text._ZN2ot3Mac5Frame13SetAckRequestEb))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareEmptyFrame(ot::Mac::TxFrame&, ot::Mac::Address const&, bool)
</UL>

<P><STRONG><a name="[409]"></a>ot::Mac::Frame::SetFrameCounter(unsigned int)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mac_frame.o(.text._ZN2ot3Mac5Frame15SetFrameCounterEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Frame::SetFrameCounter(unsigned int) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindSecurityHeaderIndex() const
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessTransmitSecurity(ot::Mac::TxFrame&)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::HandleFrameRequest(ot::Mac::TxFrames&)
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::HandleFrameRequest(ot::Mac::TxFrames&)
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::ProcessTransmitSecurity()
</UL>

<P><STRONG><a name="[3bb]"></a>ot::Mac::Frame::SetFramePending(bool)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mac_frame.o(.text._ZN2ot3Mac5Frame15SetFramePendingEb))
<BR><BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::PrepareDataFrame(ot::Mac::TxFrame&, ot::Child&, ot::Message&)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool)
</UL>

<P><STRONG><a name="[3ba]"></a>ot::Mac::Frame::SetPayloadLength(unsigned short)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mac_frame.o(.text._ZN2ot3Mac5Frame16SetPayloadLengthEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ot::Mac::Frame::SetPayloadLength(unsigned short) &rArr; ot::Mac::Frame::FindPayloadIndex() const &rArr; ot::Mac::Frame::SkipSecurityHeaderIndex() const &rArr; ot::Mac::Frame::CalculateAddrFieldSize(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindPayloadIndex() const
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetFooterLength() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMesh(ot::Message&, ot::Mac::TxFrame&)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareEmptyFrame(ot::Mac::TxFrame&, ot::Mac::Address const&, bool)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool)
</UL>

<P><STRONG><a name="[6bb]"></a>ot::Mac::Frame::IsDstPanIdPresent(unsigned short)</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, mac_frame.o(.text._ZN2ot3Mac5Frame17IsDstPanIdPresentEt))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetDstPanId(unsigned short&) const
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::InitMacHeader(ot::Mac::Frame::Type, ot::Mac::Frame::Version, ot::Mac::Addresses const&, ot::Mac::PanIds const&, ot::Mac::Frame::SecurityLevel, ot::Mac::Frame::KeyIdMode)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetDstAddr(ot::Mac::Address&) const
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindSrcPanIdIndex() const
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindSrcAddrIndex() const
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::CalculateAddrFieldSize(unsigned short)
</UL>

<P><STRONG><a name="[6bc]"></a>ot::Mac::Frame::CalculateAddrFieldSize(unsigned short)</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, mac_frame.o(.text._ZN2ot3Mac5Frame22CalculateAddrFieldSizeEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Mac::Frame::CalculateAddrFieldSize(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::IsDstPanIdPresent(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SkipSecurityHeaderIndex() const
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindSecurityHeaderIndex() const
</UL>

<P><STRONG><a name="[40a]"></a>ot::Mac::Frame::SetKeyId(unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mac_frame.o(.text._ZN2ot3Mac5Frame8SetKeyIdEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Frame::SetKeyId(unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindSecurityHeaderIndex() const
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessTransmitSecurity(ot::Mac::TxFrame&)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::HandleFrameRequest(ot::Mac::TxFrames&)
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::HandleFrameRequest(ot::Mac::TxFrames&)
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::ProcessTransmitSecurity()
</UL>

<P><STRONG><a name="[68a]"></a>ot::Mac::Links::Send()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mac.o(.text._ZN2ot3Mac5Links4SendEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Links::Send() &rArr; ot::Mac::SubMac::Send() &rArr; ot::Mac::SubMac::Callbacks::TransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr; ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr;  ot::Mac::Links::Send() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Send()
</UL>
<BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::BeginTransmit()
</UL>

<P><STRONG><a name="[6b2]"></a>ot::Mac::Links::Links(ot::Instance&)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mac_links.o(.text._ZN2ot3Mac5LinksC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SubMac(ot::Instance&)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::Mac(ot::Instance&)
</UL>

<P><STRONG><a name="[bdf]"></a>ot::Mac::Links::Links__sub_object(ot::Instance&)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mac_links.o(.text._ZN2ot3Mac5LinksC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[6bf]"></a>ot::Mac::Filter::AddAddress(ot::Mac::ExtAddress const&)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mac_filter.o(.text._ZN2ot3Mac6Filter10AddAddressERKNS0_10ExtAddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ot::Mac::Filter::AddAddress(ot::Mac::ExtAddress const&) &rArr; ot::Mac::Filter::FindEntry(ot::Mac::ExtAddress const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Filter::FindEntry(ot::Mac::ExtAddress const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkFilterAddAddress
</UL>

<P><STRONG><a name="[6c1]"></a>ot::Mac::Filter::RemoveRssIn(ot::Mac::ExtAddress const&)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mac_filter.o(.text._ZN2ot3Mac6Filter11RemoveRssInERKNS0_10ExtAddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ot::Mac::Filter::RemoveRssIn(ot::Mac::ExtAddress const&) &rArr; ot::Mac::Filter::FindEntry(ot::Mac::ExtAddress const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Filter::FindEntry(ot::Mac::ExtAddress const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkFilterRemoveRssIn
</UL>

<P><STRONG><a name="[b00]"></a>ot::Mac::Filter::ClearAllRssIn()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mac_filter.o(.text._ZN2ot3Mac6Filter13ClearAllRssInEv))
<BR><BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkFilterClearAllRssIn
</UL>

<P><STRONG><a name="[6c2]"></a>ot::Mac::Filter::RemoveAddress(ot::Mac::ExtAddress const&)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mac_filter.o(.text._ZN2ot3Mac6Filter13RemoveAddressERKNS0_10ExtAddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ot::Mac::Filter::RemoveAddress(ot::Mac::ExtAddress const&) &rArr; ot::Mac::Filter::FindEntry(ot::Mac::ExtAddress const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Filter::FindEntry(ot::Mac::ExtAddress const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkFilterRemoveAddress
</UL>

<P><STRONG><a name="[aff]"></a>ot::Mac::Filter::ClearAddresses()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mac_filter.o(.text._ZN2ot3Mac6Filter14ClearAddressesEv))
<BR><BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkFilterClearAddresses
</UL>

<P><STRONG><a name="[6c3]"></a>ot::Mac::Filter::AddRssIn(ot::Mac::ExtAddress const&, signed char)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mac_filter.o(.text._ZN2ot3Mac6Filter8AddRssInERKNS0_10ExtAddressEa))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ot::Mac::Filter::AddRssIn(ot::Mac::ExtAddress const&, signed char) &rArr; ot::Mac::Filter::FindEntry(ot::Mac::ExtAddress const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Filter::FindEntry(ot::Mac::ExtAddress const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkFilterAddRssIn
</UL>

<P><STRONG><a name="[6b3]"></a>ot::Mac::Filter::Filter()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mac_filter.o(.text._ZN2ot3Mac6FilterC2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::Mac(ot::Instance&)
</UL>

<P><STRONG><a name="[be0]"></a>ot::Mac::Filter::Filter__sub_object()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mac_filter.o(.text._ZN2ot3Mac6FilterC2Ev), UNUSED)

<P><STRONG><a name="[697]"></a>ot::Mac::SubMac::EnergyScan(unsigned char, unsigned short)</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, sub_mac.o(.text._ZN2ot3Mac6SubMac10EnergyScanEht))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ot::Mac::SubMac::EnergyScan(unsigned char, unsigned short) &rArr; otPlatRadioEnergyScan &rArr; otPlatRadioEnergyScanDone &rArr; ot::Radio::Callbacks::HandleEnergyScanDone(signed char) &rArr; ot::Mac::SubMac::HandleEnergyScanDone(signed char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioReceive
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioEnergyScan
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleEnergyScanDone(signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformEnergyScan()
</UL>

<P><STRONG><a name="[6c7]"></a>ot::Mac::SubMac::SampleRssi()</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, sub_mac.o(.text._ZN2ot3Mac6SubMac10SampleRssiEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ot::Mac::SubMac::SampleRssi() &rArr; ot::Mac::SubMac::HandleEnergyScanDone(signed char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::StartAt(ot::Time, unsigned int)
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetRssi
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleEnergyScanDone(signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleTimer()
</UL>

<P><STRONG><a name="[33c]"></a>ot::Mac::SubMac::HandleTimer()</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, sub_mac.o(.text._ZN2ot3Mac6SubMac11HandleTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864 + Unknown Stack Size
<LI>Call Chain = ot::Mac::SubMac::HandleTimer() &rArr; ot::Mac::SubMac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr; ot::Mac::SubMac::Callbacks::TransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr; ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr;  ot::Mac::Links::Send() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioReceive
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::StartCsmaBackoff()
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::BeginTransmit()
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SampleRssi()
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilliIn&lang;ot::Mac::SubMac, &(ot::Mac::SubMac::HandleTimer())&rang;::HandleTimer(ot::Timer&)
</UL>

<P><STRONG><a name="[6c9]"></a>ot::Mac::SubMac::BeginTransmit()</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, sub_mac.o(.text._ZN2ot3Mac6SubMac13BeginTransmitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ot::Mac::SubMac::BeginTransmit() &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioReceive
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Radio::Transmit(ot::Mac::TxFrame&)
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::StartCsmaBackoff()
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleTimer()
</UL>

<P><STRONG><a name="[6b5]"></a>ot::Mac::SubMac::SetExtAddress(ot::Mac::ExtAddress const&)</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, sub_mac.o(.text._ZN2ot3Mac6SubMac13SetExtAddressERKNS0_10ExtAddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ot::Mac::SubMac::SetExtAddress(ot::Mac::ExtAddress const&) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::CopyAddress(unsigned char*, unsigned char const*, ot::Mac::ExtAddress::CopyByteOrder)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::ToString() const
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Radio::SetExtendedAddress(ot::Mac::ExtAddress const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkSetExtendedAddress
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Start(char const*, char const*, char const*, char const*, char const*, char const*, void (*)(otError, void*), void*)
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Restore()
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::Mac(ot::Instance&)
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleDiscoverResult(otActiveScanResult*)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleTimer()
</UL>

<P><STRONG><a name="[261]"></a>ot::Mac::SubMac::SetFrameCounter(unsigned int, bool)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, sub_mac.o(.text._ZN2ot3Mac6SubMac15SetFrameCounterEjb))
<BR><BR>[Calls]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSetMacFrameCounterIfLarger
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSetMacFrameCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetCurrentKeySequence(unsigned int)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetAllMacFrameCounters(unsigned int, bool)
</UL>

<P><STRONG><a name="[6b6]"></a>ot::Mac::SubMac::SetShortAddress(unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sub_mac.o(.text._ZN2ot3Mac6SubMac15SetShortAddressEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ot::Mac::SubMac::SetShortAddress(unsigned short) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Radio::SetShortAddress(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Restore()
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::Mac(ot::Instance&)
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetRloc16(unsigned short)
</UL>

<P><STRONG><a name="[6cb]"></a>ot::Mac::SubMac::StartCsmaBackoff()</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, sub_mac.o(.text._ZN2ot3Mac6SubMac16StartCsmaBackoffEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ot::Mac::SubMac::StartCsmaBackoff() &rArr; ot::Mac::SubMac::StartTimerForBackoff(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::StartAt(ot::Time, unsigned int)
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::StartTimerForBackoff(unsigned char)
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::BeginTransmit()
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetNow
</UL>
<BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Send()
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleTimer()
</UL>

<P><STRONG><a name="[6d3]"></a>ot::Mac::SubMac::HandleReceiveDone(ot::Mac::RxFrame*, otError)</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, sub_mac.o(.text._ZN2ot3Mac6SubMac17HandleReceiveDoneEPNS0_7RxFrameE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264 + Unknown Stack Size
<LI>Call Chain = ot::Mac::SubMac::HandleReceiveDone(ot::Mac::RxFrame*, otError) &rArr; ot::Mac::SubMac::Callbacks::ReceiveDone(ot::Mac::RxFrame*, otError) &rArr; ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError) &rArr; ot::MeshForwarder::HandleReceivedFrame(ot::Mac::RxFrame&) &rArr; ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&) &rArr; ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&) &rArr; ot::MeshForwarder::UpdateRoutes(ot::FrameData const&, ot::Mac::Addresses const&) &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Callbacks::FrameCounterUsed(unsigned int)
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Callbacks::ReceiveDone(ot::Mac::RxFrame*, otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Radio::Callbacks::HandleReceiveDone(ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[6ca]"></a>ot::Mac::SubMac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, sub_mac.o(.text._ZN2ot3Mac6SubMac18HandleTransmitDoneERNS0_7TxFrameEPNS0_7RxFrameE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856 + Unknown Stack Size
<LI>Call Chain = ot::Mac::SubMac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr; ot::Mac::SubMac::Callbacks::TransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr; ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr;  ot::Mac::Links::Send() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Callbacks::RecordFrameTransmitStatus(ot::Mac::TxFrame const&, ot::Mac::RxFrame*, otError, unsigned char, bool)
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Callbacks::RecordCcaStatus(bool, unsigned char)
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Callbacks::TransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SignalFrameCounterUsedOnTxDone(ot::Mac::TxFrame const&)
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::StartTimerForBackoff(unsigned char)
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::StartCsmaBackoff()
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleTimer()
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Radio::Callbacks::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[6c5]"></a>ot::Mac::SubMac::HandleEnergyScanDone(signed char)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sub_mac.o(.text._ZN2ot3Mac6SubMac20HandleEnergyScanDoneEa))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ot::Mac::SubMac::HandleEnergyScanDone(signed char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Callbacks::EnergyScanDone(signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::EnergyScan(unsigned char, unsigned short)
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SampleRssi()
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Radio::Callbacks::HandleEnergyScanDone(signed char)
</UL>

<P><STRONG><a name="[6d2]"></a>ot::Mac::SubMac::StartTimerForBackoff(unsigned char)</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, sub_mac.o(.text._ZN2ot3Mac6SubMac20StartTimerForBackoffEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ot::Mac::SubMac::StartTimerForBackoff(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint32InRange(unsigned int, unsigned int)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSleep
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::StartCsmaBackoff()
</UL>

<P><STRONG><a name="[6dc]"></a>ot::Mac::SubMac::HandleTransmitStarted(ot::Mac::TxFrame&)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sub_mac.o(.text._ZN2ot3Mac6SubMac21HandleTransmitStartedERNS0_7TxFrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::Mac::SubMac::HandleTransmitStarted(ot::Mac::TxFrame&) &rArr; ot::TimerMilli::Start(unsigned int) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Radio::Callbacks::HandleTransmitStarted(ot::Mac::TxFrame&)
</UL>

<P><STRONG><a name="[6dd]"></a>ot::Mac::SubMac::ProcessTransmitSecurity()</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, sub_mac.o(.text._ZN2ot3Mac6SubMac23ProcessTransmitSecurityEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = ot::Mac::SubMac::ProcessTransmitSecurity() &rArr; ot::Mac::SubMac::Callbacks::FrameCounterUsed(unsigned int) &rArr; ot::KeyManager::MacFrameCounterUsed(unsigned int) &rArr; ot::Mle::Mle::Store() &rArr; ot::Settings::SaveEntry(ot::SettingsBase::Key, void const*, void*, unsigned short) &rArr; otPlatSettingsSet &rArr; [Anonymous Symbol] &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetKeyIdMode(unsigned char&) const
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::TxFrame::ProcessTransmitAesCcm(ot::Mac::ExtAddress const&)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetKeyId(unsigned char)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetFrameCounter(unsigned int)
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Callbacks::FrameCounterUsed(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Send()
</UL>

<P><STRONG><a name="[6d6]"></a>ot::Mac::SubMac::SignalFrameCounterUsedOnTxDone(ot::Mac::TxFrame const&)</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, sub_mac.o(.text._ZN2ot3Mac6SubMac30SignalFrameCounterUsedOnTxDoneERKNS0_7TxFrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = ot::Mac::SubMac::SignalFrameCounterUsedOnTxDone(ot::Mac::TxFrame const&) &rArr; ot::Mac::SubMac::Callbacks::FrameCounterUsed(unsigned int) &rArr; ot::KeyManager::MacFrameCounterUsed(unsigned int) &rArr; ot::Mle::Mle::Store() &rArr; ot::Settings::SaveEntry(ot::SettingsBase::Key, void const*, void*, unsigned short) &rArr; otPlatSettingsSet &rArr; [Anonymous Symbol] &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetKeyIdMode(unsigned char&) const
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetKeyId(unsigned char&) const
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetFrameCounter(unsigned int&) const
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Callbacks::FrameCounterUsed(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[6de]"></a>ot::Mac::SubMac::Init()</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sub_mac.o(.text._ZN2ot3Mac6SubMac4InitEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::KeyMaterial::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SubMac(ot::Instance&)
</UL>

<P><STRONG><a name="[6bd]"></a>ot::Mac::SubMac::Send()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sub_mac.o(.text._ZN2ot3Mac6SubMac4SendEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832 + Unknown Stack Size
<LI>Call Chain = ot::Mac::SubMac::Send() &rArr; ot::Mac::SubMac::Callbacks::TransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr; ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr;  ot::Mac::Links::Send() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Callbacks::TransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::ProcessTransmitSecurity()
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::StartCsmaBackoff()
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Links::Send()
</UL>

<P><STRONG><a name="[693]"></a>ot::Mac::SubMac::Sleep()</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sub_mac.o(.text._ZN2ot3Mac6SubMac5SleepEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ot::Mac::SubMac::Sleep() &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::UpdateIdleMode()
</UL>

<P><STRONG><a name="[6b4]"></a>ot::Mac::SubMac::Enable()</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, sub_mac.o(.text._ZN2ot3Mac6SubMac6EnableEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSleep
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::Mac(ot::Instance&)
</UL>

<P><STRONG><a name="[692]"></a>ot::Mac::SubMac::Receive(unsigned char)</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sub_mac.o(.text._ZN2ot3Mac6SubMac7ReceiveEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ot::Mac::SubMac::Receive(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSleep
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformNextOperation()
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformEnergyScan()
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::UpdateIdleMode()
</UL>

<P><STRONG><a name="[686]"></a>ot::Mac::SubMac::SetPanId(unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sub_mac.o(.text._ZN2ot3Mac6SubMac8SetPanIdEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ot::Mac::SubMac::SetPanId(unsigned short) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSetPanId
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetPanId(unsigned short)
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformActiveScan()
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::BeginTransmit()
</UL>

<P><STRONG><a name="[6d5]"></a>ot::Mac::SubMac::Callbacks::ReceiveDone(ot::Mac::RxFrame*, otError)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sub_mac_callbacks.o(.text._ZN2ot3Mac6SubMac9Callbacks11ReceiveDoneEPNS0_7RxFrameE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 2240 + Unknown Stack Size
<LI>Call Chain = ot::Mac::SubMac::Callbacks::ReceiveDone(ot::Mac::RxFrame*, otError) &rArr; ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError) &rArr; ot::MeshForwarder::HandleReceivedFrame(ot::Mac::RxFrame&) &rArr; ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&) &rArr; ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&) &rArr; ot::MeshForwarder::UpdateRoutes(ot::FrameData const&, ot::Mac::Addresses const&) &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleReceiveDone(ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[6d9]"></a>ot::Mac::SubMac::Callbacks::TransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sub_mac_callbacks.o(.text._ZN2ot3Mac6SubMac9Callbacks12TransmitDoneERNS0_7TxFrameEPNS0_7RxFrameE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816 + Unknown Stack Size
<LI>Call Chain = ot::Mac::SubMac::Callbacks::TransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr; ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr;  ot::Mac::Links::Send() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Send()
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[6da]"></a>ot::Mac::SubMac::Callbacks::EnergyScanDone(signed char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sub_mac_callbacks.o(.text._ZN2ot3Mac6SubMac9Callbacks14EnergyScanDoneEa))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::Mac::SubMac::Callbacks::EnergyScanDone(signed char) &rArr; ot::Mac::Mac::EnergyScanDone(signed char) &rArr;  ot::Mac::Mac::PerformEnergyScan() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::EnergyScanDone(signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleEnergyScanDone(signed char)
</UL>

<P><STRONG><a name="[6d7]"></a>ot::Mac::SubMac::Callbacks::RecordCcaStatus(bool, unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sub_mac_callbacks.o(.text._ZN2ot3Mac6SubMac9Callbacks15RecordCcaStatusEbh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Mac::SubMac::Callbacks::RecordCcaStatus(bool, unsigned char) &rArr; ot::Mac::Mac::RecordCcaStatus(bool, unsigned char) &rArr; ot::SuccessRateTracker::AddSample(bool, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::RecordCcaStatus(bool, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[6d4]"></a>ot::Mac::SubMac::Callbacks::FrameCounterUsed(unsigned int)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sub_mac_callbacks.o(.text._ZN2ot3Mac6SubMac9Callbacks16FrameCounterUsedEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = ot::Mac::SubMac::Callbacks::FrameCounterUsed(unsigned int) &rArr; ot::KeyManager::MacFrameCounterUsed(unsigned int) &rArr; ot::Mle::Mle::Store() &rArr; ot::Settings::SaveEntry(ot::SettingsBase::Key, void const*, void*, unsigned short) &rArr; otPlatSettingsSet &rArr; [Anonymous Symbol] &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::MacFrameCounterUsed(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SignalFrameCounterUsedOnTxDone(ot::Mac::TxFrame const&)
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::ProcessTransmitSecurity()
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleReceiveDone(ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[6d8]"></a>ot::Mac::SubMac::Callbacks::RecordFrameTransmitStatus(ot::Mac::TxFrame const&, ot::Mac::RxFrame*, otError, unsigned char, bool)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sub_mac_callbacks.o(.text._ZN2ot3Mac6SubMac9Callbacks25RecordFrameTransmitStatusERKNS0_7TxFrameEPNS0_7RxFrameE7otErrorhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = ot::Mac::SubMac::Callbacks::RecordFrameTransmitStatus(ot::Mac::TxFrame const&, ot::Mac::RxFrame*, otError, unsigned char, bool) &rArr; ot::Mac::Mac::RecordFrameTransmitStatus(ot::Mac::TxFrame const&, ot::Mac::RxFrame*, otError, unsigned char, bool) &rArr; void ot::Logger::DumpAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, void const*, unsigned short) &rArr; ot::Logger::DumpInModule(char const*, ot::LogLevel, char const*, void const*, unsigned short) &rArr; ot::Logger::DumpLine(char const*, ot::LogLevel, unsigned char const*, unsigned short) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::RecordFrameTransmitStatus(ot::Mac::TxFrame const&, ot::Mac::RxFrame*, otError, unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[6e5]"></a>ot::Mac::SubMac::Callbacks::Callbacks(ot::Instance&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sub_mac_callbacks.o(.text._ZN2ot3Mac6SubMac9CallbacksC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SubMac(ot::Instance&)
</UL>

<P><STRONG><a name="[be1]"></a>ot::Mac::SubMac::Callbacks::Callbacks__sub_object(ot::Instance&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sub_mac_callbacks.o(.text._ZN2ot3Mac6SubMac9CallbacksC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[259]"></a>ot::Mac::SubMac::SetMacKey(unsigned char, unsigned char, ot::Mac::KeyMaterial const&, ot::Mac::KeyMaterial const&, ot::Mac::KeyMaterial const&)</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, sub_mac.o(.text._ZN2ot3Mac6SubMac9SetMacKeyEhhRKNS0_11KeyMaterialES4_S4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ot::Mac::SubMac::SetMacKey(unsigned char, unsigned char, ot::Mac::KeyMaterial const&, ot::Mac::KeyMaterial const&, ot::Mac::KeyMaterial const&) &rArr; otPlatRadioSetMacKey &rArr; lmac15p4_key_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSetMacKey
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::UpdateKeyMaterial()
</UL>

<P><STRONG><a name="[6be]"></a>ot::Mac::SubMac::SubMac(ot::Instance&)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sub_mac.o(.text._ZN2ot3Mac6SubMacC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetTransmitBuffer
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetCaps
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Callbacks::Callbacks(ot::Instance&)
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Init()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Links::Links(ot::Instance&)
</UL>

<P><STRONG><a name="[be2]"></a>ot::Mac::SubMac::SubMac__sub_object(ot::Instance&)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sub_mac.o(.text._ZN2ot3Mac6SubMacC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[6a6]"></a>ot::Mac::RxFrame::ProcessReceiveAesCcm(ot::Mac::ExtAddress const&, ot::Mac::KeyMaterial const&)</STRONG> (Thumb, 266 bytes, Stack size 432 bytes, mac_frame.o(.text._ZN2ot3Mac7RxFrame20ProcessReceiveAesCcmERKNS0_10ExtAddressERKNS0_11KeyMaterialE))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = ot::Mac::RxFrame::ProcessReceiveAesCcm(ot::Mac::ExtAddress const&, ot::Mac::KeyMaterial const&) &rArr; ot::Crypto::AesCcm::Init(unsigned int, unsigned int, unsigned char, void const*, unsigned char) &rArr; ot::Crypto::AesEcb::Encrypt(unsigned char const*, unsigned char*) &rArr; otPlatCryptoAesEncrypt &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesEcb::~AesEcb()
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesEcb::AesEcb()
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Finalize(void*)
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Payload(void*, void*, unsigned int, ot::Crypto::AesCcm::Mode)
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Header(void const*, unsigned int)
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Init(unsigned int, unsigned int, unsigned char, void const*, unsigned char)
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetFrameCounter(unsigned int&) const
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::SetKey(ot::Mac::KeyMaterial const&)
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::GenerateNonce(ot::Mac::ExtAddress const&, unsigned int, unsigned char, unsigned char*)
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindSecurityHeaderIndex() const
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetPayloadLength() const
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindPayloadIndex() const
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetFooterLength() const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessReceiveSecurity(ot::Mac::RxFrame&, ot::Mac::Address const&, ot::Neighbor*)
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessEnhAckSecurity(ot::Mac::TxFrame&, ot::Mac::RxFrame&)
</UL>

<P><STRONG><a name="[6ac]"></a>ot::Mac::TxFrame::ProcessTransmitAesCcm(ot::Mac::ExtAddress const&)</STRONG> (Thumb, 240 bytes, Stack size 408 bytes, mac_frame.o(.text._ZN2ot3Mac7TxFrame21ProcessTransmitAesCcmERKNS0_10ExtAddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = ot::Mac::TxFrame::ProcessTransmitAesCcm(ot::Mac::ExtAddress const&) &rArr; ot::Crypto::AesCcm::Init(unsigned int, unsigned int, unsigned char, void const*, unsigned char) &rArr; ot::Crypto::AesEcb::Encrypt(unsigned char const*, unsigned char*) &rArr; otPlatCryptoAesEncrypt &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesEcb::~AesEcb()
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesEcb::AesEcb()
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Finalize(void*)
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Payload(void*, void*, unsigned int, ot::Crypto::AesCcm::Mode)
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Header(void const*, unsigned int)
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Init(unsigned int, unsigned int, unsigned char, void const*, unsigned char)
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetFrameCounter(unsigned int&) const
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::SetKey(ot::Mac::KeyMaterial const&)
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::GenerateNonce(ot::Mac::ExtAddress const&, unsigned int, unsigned char, unsigned char*)
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindSecurityHeaderIndex() const
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetPayloadLength() const
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindPayloadIndex() const
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetFooterLength() const
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessTransmitSecurity(ot::Mac::TxFrame&)
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::ProcessTransmitSecurity()
</UL>

<P><STRONG><a name="[b2d]"></a>ot::Mle::DeviceMode::Set(otLinkModeConfig const&)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mle_types.o(.text._ZN2ot3Mle10DeviceMode3SetERK16otLinkModeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetLinkMode
</UL>

<P><STRONG><a name="[76e]"></a>ot::Mle::RoleToString(ot::Mle::DeviceRole)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mle_types.o(.text._ZN2ot3Mle12RoleToStringENS0_10DeviceRoleE))
<BR><BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadDeviceRoleToString
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SettingsBase::NetworkInfo::Log(ot::SettingsBase::Action) const
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetRole(ot::Mle::DeviceRole)
</UL>

<P><STRONG><a name="[6ee]"></a>ot::Mle::ConnectivityTlv::SetParentPriority(signed char)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mle_tlvs.o(.text._ZN2ot3Mle15ConnectivityTlv17SetParentPriorityEa))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Mle::ConnectivityTlv::SetParentPriority(signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Preference::To2BitUint(signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::FillConnectivityTlv(ot::Mle::ConnectivityTlv&)
</UL>

<P><STRONG><a name="[7af]"></a>ot::Mle::ConnectivityTlv::IncrementLinkQuality(ot::LinkQuality)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mle_tlvs.o(.text._ZN2ot3Mle15ConnectivityTlv20IncrementLinkQualityENS_11LinkQualityE))
<BR><BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::FillConnectivityTlv(ot::Mle::ConnectivityTlv&)
</UL>

<P><STRONG><a name="[33d]"></a>ot::Mle::DiscoverScanner::HandleTimer()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, discover_scanner.o(.text._ZN2ot3Mle15DiscoverScanner11HandleTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ot::Mle::DiscoverScanner::HandleTimer() &rArr; ot::MeshForwarder::ResumeMessageTransmissions() &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ChannelMask::GetNextChannel(unsigned char&) const
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::ResumeMessageTransmissions()
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilliIn&lang;ot::Mle::DiscoverScanner, &(ot::Mle::DiscoverScanner::HandleTimer())&rang;::HandleTimer(ot::Timer&)
</UL>

<P><STRONG><a name="[3e5]"></a>ot::Mle::DiscoverScanner::HandleDiscoverComplete()</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, discover_scanner.o(.text._ZN2ot3Mle15DiscoverScanner22HandleDiscoverCompleteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ot::Mle::DiscoverScanner::HandleDiscoverComplete() &rArr; ot::MeshForwarder::SetRxOnWhenIdle(bool) &rArr; ot::Mac::Mac::SetRxOnWhenIdle(bool) &rArr; ot::Mac::Mac::UpdateIdleMode() &rArr; ot::Mac::SubMac::Receive(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetPanId(unsigned short)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ClearTemporaryChannel()
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::ResumeMessageTransmissions()
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SetRxOnWhenIdle(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoveryRequestFrameTxDone(ot::Message&)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::Stop()
</UL>

<P><STRONG><a name="[3cd]"></a>ot::Mle::DiscoverScanner::PrepareDiscoveryRequestFrame(ot::Mac::TxFrame&)</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, discover_scanner.o(.text._ZN2ot3Mle15DiscoverScanner28PrepareDiscoveryRequestFrameERNS_3Mac7TxFrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ot::Mle::DiscoverScanner::PrepareDiscoveryRequestFrame(ot::Mac::TxFrame&) &rArr; ot::Mac::Mac::SetTemporaryChannel(unsigned char) &rArr; ot::Mac::Mac::UpdateIdleMode() &rArr; ot::Mac::SubMac::Receive(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetTemporaryChannel(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFrameRequest(ot::Mac::TxFrames&)
</UL>

<P><STRONG><a name="[3ca]"></a>ot::Mle::DiscoverScanner::HandleDiscoveryRequestFrameTxDone(ot::Message&)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, discover_scanner.o(.text._ZN2ot3Mle15DiscoverScanner33HandleDiscoveryRequestFrameTxDoneERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = ot::Mle::DiscoverScanner::HandleDiscoveryRequestFrameTxDone(ot::Message&) &rArr; ot::Mle::DiscoverScanner::HandleDiscoverComplete() &rArr; ot::MeshForwarder::SetRxOnWhenIdle(bool) &rArr; ot::Mac::Mac::SetRxOnWhenIdle(bool) &rArr; ot::Mac::Mac::UpdateIdleMode() &rArr; ot::Mac::SubMac::Receive(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoverComplete()
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateSendMessage(otError, ot::Mac::Address&, ot::Neighbor*)
</UL>

<P><STRONG><a name="[6f0]"></a>ot::Mle::DiscoverScanner::Discover(ot::Mac::ChannelMask const&, unsigned short, bool, bool, ot::MeshCoP::SteeringData::HashBitIndexes const*, void (*)(otActiveScanResult*, void*), void*)</STRONG> (Thumb, 518 bytes, Stack size 136 bytes, discover_scanner.o(.text._ZN2ot3Mle15DiscoverScanner8DiscoverERKNS_3Mac11ChannelMaskEtbbPKNS_7MeshCoP12SteeringData14HashBitIndexesEPFvP18otActiveScanResultPvESD_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = ot::Mle::DiscoverScanner::Discover(ot::Mac::ChannelMask const&, unsigned short, bool, bool, ot::MeshCoP::SteeringData::HashBitIndexes const*, void (*)(otActiveScanResult*, void*), void*) &rArr; ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&) &rArr; ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetIeeeEui64
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetPanId(unsigned short)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ChannelMask::GetNextChannel(unsigned char&) const
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTo(ot::Message&) const
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::GetSize() const
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ComputeJoinerId(ot::Mac::ExtAddress const&, ot::Mac::ExtAddress&)
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SteeringData::CalculateHashBitIndexes(ot::Mac::ExtAddress const&, ot::MeshCoP::SteeringData::HashBitIndexes&)
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::GenerateRandomPanId()
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&)
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&)
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::NewMleMessage(ot::Mle::Mle::Command)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SetRxOnWhenIdle(bool)
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLinkLocalAllRoutersMulticast()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Start(char const*, char const*, char const*, char const*, char const*, char const*, void (*)(otError, void*), void*)
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadDiscover
</UL>

<P><STRONG><a name="[92b]"></a>ot::Mle::DiscoverScanner::DiscoverScanner(ot::Instance&)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, discover_scanner.o(.text._ZN2ot3Mle15DiscoverScannerC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[be3]"></a>ot::Mle::DiscoverScanner::DiscoverScanner__sub_object(ot::Instance&)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, discover_scanner.o(.text._ZN2ot3Mle15DiscoverScannerC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[7b8]"></a>ot::Mle::DeviceProperties::ClampWeightAdjustment()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mle_types.o(.text._ZN2ot3Mle16DeviceProperties21ClampWeightAdjustmentEv))
<BR><BR>[Called By]<UL><LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetDeviceProperties(ot::Mle::DeviceProperties const&)
</UL>

<P><STRONG><a name="[7d5]"></a>ot::Mle::DeviceProperties::DeviceProperties()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mle_types.o(.text._ZN2ot3Mle16DevicePropertiesC2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::MleRouter(ot::Instance&)
</UL>

<P><STRONG><a name="[be4]"></a>ot::Mle::DeviceProperties::DeviceProperties__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mle_types.o(.text._ZN2ot3Mle16DevicePropertiesC2Ev), UNUSED)

<P><STRONG><a name="[6f7]"></a>ot::Mle::Mle::SetTimeout(unsigned int)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mle.o(.text._ZN2ot3Mle3Mle10SetTimeoutEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::SetTimeout(unsigned int) &rArr; ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::RecalculatePollPeriod()
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetChildTimeout
</UL>

<P><STRONG><a name="[6f9]"></a>ot::Mle::Mle::BecomeChild()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mle.o(.text._ZN2ot3Mle3Mle11BecomeChildEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::BecomeChild() &rArr; ot::Mle::Mle::Attach(ot::Mle::Mle::AttachMode) &rArr; ot::MeshCoP::DatasetManager::Restore() &rArr; ot::MeshCoP::DatasetLocal::Restore(ot::MeshCoP::Dataset&) &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Attach(ot::Mle::Mle::AttachMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadBecomeChild
</UL>

<P><STRONG><a name="[afd]"></a>ot::Mle::Mle::AddBlackList(unsigned short)</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle12AddBlackListEt))
<BR><BR>[Called By]<UL><LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkBlackListAddPanId
</UL>

<P><STRONG><a name="[6fb]"></a>ot::Mle::Mle::InitNeighbor(ot::Neighbor&, ot::Mle::Mle::RxInfo const&)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mle.o(.text._ZN2ot3Mle3Mle12InitNeighborERNS_8NeighborERKNS1_6RxInfoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::LinkQualityInfo::AddRss(signed char)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::LinkQualityInfo::Clear()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(ot::Mac::ExtAddress&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleParentRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::Mle::RxInfo&, unsigned short, ot::Mle::LeaderData const&)
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleParentResponse(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[6fc]"></a>ot::Mle::Mle::LogSendError(ot::Mle::Mle::MessageType, otError)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle12LogSendErrorENS1_11MessageTypeE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::LogSendError(ot::Mle::Mle::MessageType, otError) &rArr; ot::Mle::Mle::LogError(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, otError) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogError(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendParentResponse(ot::Child*, ot::Mle::Mle::Challenge const&, bool)
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAdvertisement()
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDataResponse(ot::Ip6::Address const&, ot::Mle::Mle::TlvList const&, unsigned short, ot::Message const*)
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressRelease()
</UL>

<P><STRONG><a name="[4a0]"></a>ot::Mle::Mle::SendAnnounce(unsigned char, ot::Mle::Mle::AnnounceMode)</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, mle.o(.text._ZN2ot3Mle3Mle12SendAnnounceEhNS1_12AnnounceModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::SendAnnounce(unsigned char, ot::Mle::Mle::AnnounceMode) &rArr; ot::Mle::Mle::SendAnnounce(unsigned char, ot::Ip6::Address const&, ot::Mle::Mle::AnnounceMode) &rArr; ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&) &rArr; ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLinkLocalAllNodesMulticast()
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendAnnounce(unsigned char, ot::Ip6::Address const&, ot::Mle::Mle::AnnounceMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AnnounceSenderBase::HandleTimer()
</UL>

<P><STRONG><a name="[6fe]"></a>ot::Mle::Mle::SendAnnounce(unsigned char, ot::Ip6::Address const&, ot::Mle::Mle::AnnounceMode)</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, mle.o(.text._ZN2ot3Mle3Mle12SendAnnounceEhRKNS_3Ip67AddressENS1_12AnnounceModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::SendAnnounce(unsigned char, ot::Ip6::Address const&, ot::Mle::Mle::AnnounceMode) &rArr; ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&) &rArr; ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTo(ot::Message&) const
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned short&rang;(ot::Message&, unsigned char, unsigned short)
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&)
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::NewMleMessage(ot::Mle::Mle::Command)
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv()
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendAnnounce(unsigned char, ot::Mle::Mle::AnnounceMode)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAttachTimer()
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAnnounce(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[493]"></a>ot::Mle::Mle::GetLeaderData()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle13GetLeaderDataEv))
<BR><BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetPartitionId
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetLeaderData
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendDiagTlv(unsigned char, ot::Message&)
</UL>

<P><STRONG><a name="[6f4]"></a>ot::Mle::Mle::NewMleMessage(ot::Mle::Mle::Command)</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, mle.o(.text._ZN2ot3Mle3Mle13NewMleMessageENS1_7CommandE))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::NewMleMessage(ot::Mle::Mle::Command) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Settings::Settings(ot::Message::LinkSecurityMode, ot::Message::Priority)
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::NewMessage(unsigned short, ot::Message::Settings const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::Discover(ot::Mac::ChannelMask const&, unsigned short, bool, bool, ot::MeshCoP::SteeringData::HashBitIndexes const*, void (*)(otActiveScanResult*, void*), void*)
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateResponse(ot::Child*, ot::Ip6::MessageInfo const&, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDiscoveryResponse(ot::Ip6::Address const&, ot::Message const&)
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildIdResponse(ot::Child&)
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendParentResponse(ot::Child*, ot::Mle::Mle::Challenge const&, bool)
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAdvertisement()
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDataResponse(ot::Ip6::Address const&, ot::Mle::Mle::TlvList const&, unsigned short, ot::Message const*)
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkAccept(ot::Ip6::MessageInfo const&, ot::Neighbor*, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child&)
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor*)
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateResponse(ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildIdRequest()
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendParentRequest(ot::Mle::Mle::ParentRequestType)
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendDataRequest(ot::Ip6::Address const&, unsigned char const*, unsigned char, unsigned short)
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendAnnounce(unsigned char, ot::Ip6::Address const&, ot::Mle::Mle::AnnounceMode)
</UL>

<P><STRONG><a name="[700]"></a>ot::Mle::Mle::SetDeviceMode(ot::Mle::DeviceMode)</STRONG> (Thumb, 196 bytes, Stack size 80 bytes, mle.o(.text._ZN2ot3Mle3Mle13SetDeviceModeENS0_10DeviceModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::SetDeviceMode(ot::Mle::DeviceMode) &rArr; ot::Mle::Mle::SetStateChild(unsigned short) &rArr; ot::Mle::MleRouter::HandleChildStart(ot::Mle::Mle::AttachMode) &rArr; ot::Mle::MleRouter::RemoveChildren() &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::BecomeDetached()
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DeviceMode::ToString() const
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Attach(ot::Mle::Mle::AttachMode)
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetStateDetached()
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetStateChild(unsigned short)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Store()
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetLinkMode
</UL>

<P><STRONG><a name="[704]"></a>ot::Mle::Mle::SetLeaderData(unsigned int, unsigned char, unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, mle.o(.text._ZN2ot3Mle3Mle13SetLeaderDataEjhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::SetLeaderData(unsigned int, unsigned char, unsigned char) &rArr; ot::Mle::MleRouter::HandlePartitionChange() &rArr; ot::AddressResolver::Clear() &rArr; ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::SignalIfFirst(ot::Event)
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandlePartitionChange()
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeLeader()
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildIdResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAdvertisement(ot::Mle::Mle::RxInfo&)
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleLeaderData(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[703]"></a>ot::Mle::Mle::SetStateChild(unsigned short)</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, mle.o(.text._ZN2ot3Mle3Mle13SetStateChildEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::SetStateChild(unsigned short) &rArr; ot::Mle::MleRouter::HandleChildStart(ot::Mle::Mle::AttachMode) &rArr; ot::Mle::MleRouter::RemoveChildren() &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::RemoveUnicastAddress(ot::Ip6::Netif::UnicastAddress const&)
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildStart(ot::Mle::Mle::AttachMode)
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetRloc16(unsigned short)
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetRole(ot::Mle::DeviceRole)
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ScheduleMessageTransmissionTimer()
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::InformPreviousChannel()
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::InformPreviousParent()
</UL>
<BR>[Called By]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetDeviceMode(ot::Mle::DeviceMode)
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildIdResponse(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[2cb]"></a>ot::Mle::Mle::BecomeDetached()</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, mle.o(.text._ZN2ot3Mle3Mle14BecomeDetachedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleDetach()
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetRloc16(unsigned short)
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Attach(ot::Mle::Mle::AttachMode)
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetStateDetached()
</UL>
<BR>[Called By]<UL><LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetRouterEligible(bool)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadBecomeDetached
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetDeviceMode(ot::Mle::DeviceMode)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::HandlePollSent(ot::Mac::TxFrame&, otError)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessRouteTlv(ot::Mle::RouteTlv const&, ot::Mle::Mle::RxInfo&)
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::Mle::RxInfo&, unsigned short, ot::Mle::LeaderData const&)
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Reattach()
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleMessageTransmissionTimer()
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAdvertisement(ot::Mle::Mle::RxInfo&)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveRouterLink(ot::Router&)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::HandleTimer()
</UL>

<P><STRONG><a name="[70d]"></a>ot::Mle::Mle::HandleAnnounce(ot::Mle::Mle::RxInfo&)</STRONG> (Thumb, 376 bytes, Stack size 64 bytes, mle.o(.text._ZN2ot3Mle3Mle14HandleAnnounceERNS1_6RxInfoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, unsigned short, ot::Tlv&)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, void*, unsigned char)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::GetTimestamp() const
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Timestamp::Compare(ot::MeshCoP::Timestamp const*, ot::MeshCoP::Timestamp const*)
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLinkLocalAllNodesMulticast()
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogError(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, otError)
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendAnnounce(unsigned char, ot::Ip6::Address const&, ot::Mle::Mle::AnnounceMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[295]"></a>ot::Mle::Mle::HandleTimeTick()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mle.o(.text._ZN2ot3Mle3Mle14HandleTimeTickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Mle::Mle::HandleTimeTick()
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::HandleTimer()
</UL>

<P><STRONG><a name="[711]"></a>ot::Mle::Mle::IsBetterParent(unsigned short, ot::LinkQuality, unsigned char, ot::Mle::ConnectivityTlv const&, unsigned short, ot::Mac::CslAccuracy const&)</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, mle.o(.text._ZN2ot3Mle3Mle14IsBetterParentEtNS_11LinkQualityEhRKNS0_15ConnectivityTlvEtRKNS_3Mac11CslAccuracyE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Router::GetTwoWayLinkQuality() const
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::ConnectivityTlv::GetParentPriority() const
</UL>
<BR>[Called By]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleParentResponse(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[714]"></a>ot::Mle::Mle::SetAttachState(ot::Mle::Mle::AttachState)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mle.o(.text._ZN2ot3Mle3Mle14SetAttachStateENS1_11AttachStateE))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::SetAttachState(ot::Mle::Mle::AttachState) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode)
</UL>

<P><STRONG><a name="[715]"></a>ot::Mle::Mle::LogProcessError(ot::Mle::Mle::MessageType, otError)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle15LogProcessErrorENS1_11MessageTypeE7otError), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogError(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoveryResponse(ot::Mle::Mle::RxInfo&) const
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDiscoveryResponse(ot::Ip6::Address const&, ot::Message const&)
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAcceptAndRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleDiscoveryRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleParentRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleDataRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[716]"></a>ot::Mle::Mle::ParentCandidate::Clear()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mle.o(.text._ZN2ot3Mle3Mle15ParentCandidate5ClearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Mle::Mle::ParentCandidate::Clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::Init(ot::Instance&)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&)
</UL>

<P><STRONG><a name="[717]"></a>ot::Mle::Mle::ProcessAnnounce()</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, mle.o(.text._ZN2ot3Mle3Mle15ProcessAnnounceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::ProcessAnnounce() &rArr; ot::Mle::Mle::Start(ot::Mle::Mle::StartMode) &rArr; ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetPanId(unsigned short)
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetPanChannel(unsigned char)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Start(ot::Mle::Mle::StartMode)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Stop(ot::Mle::Mle::StopMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAttachTimer()
</UL>

<P><STRONG><a name="[719]"></a>ot::Mle::Mle::SendDataRequest(ot::Ip6::Address const&, unsigned char const*, unsigned char, unsigned short)</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, mle.o(.text._ZN2ot3Mle3Mle15SendDataRequestERKNS_3Ip67AddressEPKhht))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::SendDataRequest(ot::Ip6::Address const&, unsigned char const*, unsigned char, unsigned short) &rArr; ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&) &rArr; ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::SendFastPolls(unsigned char)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&)
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::NewMleMessage(ot::Mle::Mle::Command)
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv()
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv()
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendAfterDelay(ot::Ip6::Address const&, unsigned short)
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ScheduleMessageTransmissionTimer()
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RemoveDelayedMessage(ot::Message::SubType, ot::Mle::Mle::MessageType, ot::Ip6::Address const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleMessageTransmissionTimer()
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAdvertisement(ot::Mle::Mle::RxInfo&)
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleLeaderData(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[afa]"></a>ot::Mle::Mle::SetMeshLocalIid(ot::Ip6::InterfaceIdentifier const&)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle15SetMeshLocalIidERKNS_3Ip619InterfaceIdentifierE))
<BR><BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6SetMeshLocalIid
</UL>

<P><STRONG><a name="[71d]"></a>ot::Mle::Mle::DetachGracefully(void (*)(void*), void*)</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, mle.o(.text._ZN2ot3Mle3Mle16DetachGracefullyEPFvPvES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::DetachGracefully(void (*)(void*), void*) &rArr; ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressRelease()
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadDetachGracefully
</UL>

<P><STRONG><a name="[71f]"></a>ot::Mle::Mle::HandleLeaderData(ot::Mle::Mle::RxInfo&)</STRONG> (Thumb, 560 bytes, Stack size 80 bytes, mle.o(.text._ZN2ot3Mle3Mle16HandleLeaderDataERNS1_6RxInfoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint16InRange(unsigned short, unsigned short)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, void*, unsigned char)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlvValueOffset(ot::Message const&, unsigned char, unsigned short&, unsigned short&)
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::GetTimestamp() const
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Timestamp::Compare(ot::MeshCoP::Timestamp const*, ot::MeshCoP::Timestamp const*)
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::Save(ot::MeshCoP::Timestamp const&, ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::Save(ot::MeshCoP::Timestamp const&, ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::IncrementVersionAndStableVersion()
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(ot::Mle::LeaderData&) const
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendDataRequest(ot::Ip6::Address const&, unsigned char const*, unsigned char, unsigned short)
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetLeaderData(unsigned int, unsigned char, unsigned char)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SetNetworkData(unsigned char, unsigned char, ot::NetworkData::Type, ot::Message const&, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleDataResponse(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[6c]"></a>ot::Mle::Mle::HandleUdpReceive(void*, otMessage*, otMessageInfo const*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle16HandleUdpReceiveEPvP9otMessagePK13otMessageInfo))
<BR>[Address Reference Count : 1]<UL><LI> mle.o(.text._ZN2ot3Mle3Mle6EnableEv)
</UL>
<P><STRONG><a name="[723]"></a>ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 824 bytes, Stack size 88 bytes, mle.o(.text._ZN2ot3Mle3Mle16HandleUdpReceiveERNS_7MessageERKNS_3Ip611MessageInfoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::MoveOffset(int)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetCurrentKeySequence(unsigned int)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::LinkFrameCounters::SetAll(unsigned int)
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoveryResponse(ot::Mle::Mle::RxInfo&) const
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(ot::Mac::ExtAddress&) const
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAcceptAndRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleDiscoveryRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleParentRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleDataRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&)
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogError(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, otError)
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ReestablishLinkWithNeighbor(ot::Neighbor&)
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&)
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildIdResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleParentResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAdvertisement(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleDataResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAnnounce(ot::Mle::Mle::RxInfo&)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Mac::ExtAddress const&, ot::Neighbor::StateFilter)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindParent(ot::Mac::ExtAddress const&, ot::Neighbor::StateFilter)
</UL>

<P><STRONG><a name="[702]"></a>ot::Mle::Mle::SetStateDetached()</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, mle.o(.text._ZN2ot3Mle3Mle16SetStateDetachedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::SetStateDetached() &rArr; ot::Mle::MleRouter::HandleDetachStart() &rArr; ot::RouterTable::ClearNeighbors() &rArr; ot::NeighborTable::Signal(ot::NeighborTable::Event, ot::Neighbor const&) &rArr; ot::DuaManager::UpdateChildDomainUnicastAddress(ot::Child const&, ot::Mle::ChildDuaState) &rArr; ot::DuaManager::UpdateCheckDelay(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::Reset()
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SetRxOnWhenIdle(bool)
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::RemoveUnicastAddress(ot::Ip6::Netif::UnicastAddress const&)
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleDetachStart()
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetRole(ot::Mle::DeviceRole)
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Start(ot::Mle::Mle::StartMode)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Stop(ot::Mle::Mle::StopMode)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::BecomeDetached()
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetDeviceMode(ot::Mle::DeviceMode)
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildIdResponse(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[738]"></a>ot::Mle::Mle::CheckReachability(unsigned short, ot::Ip6::Header const&)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mle.o(.text._ZN2ot3Mle3Mle17CheckReachabilityEtRKNS_3Ip66HeaderE))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ot::Mle::Mle::CheckReachability(unsigned short, ot::Ip6::Header const&) &rArr; ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Address const&) const &rArr; bool ot::LinkedList&lang;ot::Ip6::Netif::UnicastAddress&rang;::ContainsMatching&lang;ot::Ip6::Address&rang;(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Address const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::CheckReachability(unsigned short, ot::Ip6::Header const&)
</UL>

<P><STRONG><a name="[33e]"></a>ot::Mle::Mle::HandleAttachTimer()</STRONG> (Thumb, 640 bytes, Stack size 40 bytes, mle.o(.text._ZN2ot3Mle3Mle17HandleAttachTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2624 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::HandleAttachTimer() &rArr; ot::Mle::Mle::Reattach() &rArr; otDatasetSetActiveTlvs &rArr; ot::MeshCoP::DatasetManager::Save(otOperationalDatasetTlvs const&) &rArr; ot::MeshCoP::DatasetManager::HandleDatasetUpdated() &rArr; ot::MeshCoP::DatasetManager::SendSet() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SetRxOnWhenIdle(bool)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::Init(ot::Instance&)
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLinkLocalAllNodesMulticast()
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HasAcceptableParentCandidate() const
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::DetermineParentRequestType(ot::Mle::Mle::ParentRequestType&) const
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::GetNextAnnounceChannel(unsigned char&) const
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Reattach()
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::PrepareAnnounceState()
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildIdRequest()
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendParentRequest(ot::Mle::Mle::ParentRequestType)
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ProcessAnnounce()
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendAnnounce(unsigned char, ot::Ip6::Address const&, ot::Mle::Mle::AnnounceMode)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilliIn&lang;ot::Mle::Mle, &(ot::Mle::Mle::HandleAttachTimer())&rang;::HandleTimer(ot::Timer&)
</UL>

<P><STRONG><a name="[73f]"></a>ot::Mle::Mle::SendParentRequest(ot::Mle::Mle::ParentRequestType)</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, mle.o(.text._ZN2ot3Mle3Mle17SendParentRequestENS1_17ParentRequestTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::SendParentRequest(ot::Mle::Mle::ParentRequestType) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoRandomGet
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned short&rang;(ot::Message&, unsigned char, unsigned short)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned char&rang;(ot::Message&, unsigned char, unsigned char)
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&)
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::NewMleMessage(ot::Mle::Mle::Command)
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLinkLocalAllRoutersMulticast()
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAttachTimer()
</UL>

<P><STRONG><a name="[72c]"></a>ot::Mle::Mle::HandleDataResponse(ot::Mle::Mle::RxInfo&)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, mle.o(.text._ZN2ot3Mle3Mle18HandleDataResponseERNS1_6RxInfoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::StopFastPolls()
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogError(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, otError)
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleLeaderData(ot::Mle::Mle::RxInfo&)
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[73a]"></a>ot::Mle::Mle::SendChildIdRequest()</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, mle.o(.text._ZN2ot3Mle3Mle18SendChildIdRequestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::SendChildIdRequest() &rArr; ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&) &rArr; ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::SetAttachMode(bool)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned short&rang;(ot::Message&, unsigned char, unsigned short)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned int&rang;(ot::Message&, unsigned char, unsigned int)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned char&rang;(ot::Message&, unsigned char, unsigned char)
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLinkLocalAddress(ot::Mac::ExtAddress const&)
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::LinkFrameCounters::GetMaximum() const
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&)
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::NewMleMessage(ot::Mle::Mle::Command)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SetRxOnWhenIdle(bool)
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Mle::Mle::AddressRegistrationMode)
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv()
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv()
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAttachTimer()
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RequestShorterChildIdRequest()
</UL>

<P><STRONG><a name="[742]"></a>ot::Mle::Mle::SetMeshLocalPrefix(ot::Ip6::NetworkPrefix const&)</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, mle.o(.text._ZN2ot3Mle3Mle18SetMeshLocalPrefixERKNS_3Ip613NetworkPrefixE))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::SetMeshLocalPrefix(ot::Ip6::NetworkPrefix const&) &rArr; ot::Mle::Mle::ApplyMeshLocalPrefix() &rArr; ot::Ip6::Netif::SubscribeMulticast(ot::Ip6::Netif::MulticastAddress&) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::SignalIfFirst(ot::Event)
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::UnsubscribeMulticast(ot::Ip6::Netif::MulticastAddress const&)
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::RemoveUnicastAddress(ot::Ip6::Netif::UnicastAddress const&)
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetPrefix(ot::Ip6::NetworkPrefix const&)
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ApplyMeshLocalPrefix()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ApplyConfiguration(ot::Instance&, bool*) const
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Mle(ot::Instance&)
</UL>

<P><STRONG><a name="[72a]"></a>ot::Mle::Mle::HandleAdvertisement(ot::Mle::Mle::RxInfo&)</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, mle.o(.text._ZN2ot3Mle3Mle19HandleAdvertisementERNS1_6RxInfoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint16InRange(unsigned short, unsigned short)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::BecomeDetached()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(ot::Mle::LeaderData&) const
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ReadAndProcessRouteTlvOnFed(ot::Mle::Mle::RxInfo&, unsigned char)
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::Mle::RxInfo&, unsigned short, ot::Mle::LeaderData const&)
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogError(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, otError)
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendDataRequest(ot::Ip6::Address const&, unsigned char const*, unsigned char, unsigned short)
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetLeaderData(unsigned int, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[747]"></a>ot::Mle::Mle::SendDelayedResponse(ot::Mle::Mle::TxMessage&, ot::Mle::Mle::DelayedResponseMetadata const&)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, mle.o(.text._ZN2ot3Mle3Mle19SendDelayedResponseERNS1_9TxMessageERKNS1_23DelayedResponseMetadataE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::SendDelayedResponse(ot::Mle::Mle::TxMessage&, ot::Mle::Mle::DelayedResponseMetadata const&) &rArr; ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&) &rArr; ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::SendFastPolls(unsigned char)
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&)
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::DelayedResponseMetadata::RemoveFrom(ot::Message&) const
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv()
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv()
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleDelayedResponseTimer()
</UL>

<P><STRONG><a name="[744]"></a>ot::Mle::Mle::ApplyMeshLocalPrefix()</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, mle.o(.text._ZN2ot3Mle3Mle20ApplyMeshLocalPrefixEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::ApplyMeshLocalPrefix() &rArr; ot::Ip6::Netif::SubscribeMulticast(ot::Ip6::Netif::MulticastAddress&) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::SubscribeMulticast(ot::Ip6::Netif::MulticastAddress&)
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::AddUnicastAddress(ot::Ip6::Netif::UnicastAddress&)
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetMulticastNetworkPrefix(unsigned char const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Start(ot::Mle::Mle::StartMode)
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetMeshLocalPrefix(ot::Ip6::NetworkPrefix const&)
</UL>

<P><STRONG><a name="[749]"></a>ot::Mle::Mle::HandleNotifierEvents(ot::Events)</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, mle.o(.text._ZN2ot3Mle3Mle20HandleNotifierEventsENS_6EventsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::HandleNotifierEvents(ot::Events) &rArr; ot::Mle::MleRouter::HandleNetworkDataUpdateRouter() &rArr; ot::Mle::MleRouter::SynchronizeChildNetworkData() &rArr; ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child&) &rArr; ot::Child::GenerateChallenge() &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::Update()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::AddUnicastAddress(ot::Ip6::Netif::UnicastAddress&)
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::GenerateRandom()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Address const&) const
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleNetworkDataUpdateRouter()
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ScheduleMessageTransmissionTimer()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Store()
</UL>
<BR>[Called By]<UL><LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::EmitEvents()
</UL>

<P><STRONG><a name="[72e]"></a>ot::Mle::Mle::HandleParentResponse(ot::Mle::Mle::RxInfo&)</STRONG> (Thumb, 796 bytes, Stack size 112 bytes, mle.o(.text._ZN2ot3Mle3Mle20HandleParentResponseERNS1_6RxInfoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ComputeLinkMargin(signed char) const
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::LinkQualityForLinkMargin(unsigned char)
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::IsSingleton() const
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, unsigned short, ot::Tlv&)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned char&rang;(ot::Message const&, unsigned char, unsigned char&)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::LinkFrameCounters::SetAll(unsigned int)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(ot::Mac::ExtAddress&) const
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadChallengeOrResponse(unsigned char, ot::Mle::Mle::Challenge&) const
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadFrameCounterTlvs(unsigned int&, unsigned int&) const
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(ot::Mle::LeaderData&) const
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::ConnectivityTlv::GetParentPriority() const
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ComparePartitions(bool, ot::Mle::LeaderData const&, bool, ot::Mle::LeaderData const&)
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogError(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, otError)
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsBetterParent(unsigned short, ot::LinkQuality, unsigned char, ot::Mle::ConnectivityTlv const&, unsigned short, ot::Mac::CslAccuracy const&)
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::InitNeighbor(ot::Neighbor&, ot::Mle::Mle::RxInfo const&)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[70b]"></a>ot::Mle::Mle::InformPreviousParent()</STRONG> (Thumb, 200 bytes, Stack size 64 bytes, mle.o(.text._ZN2ot3Mle3Mle20InformPreviousParentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::InformPreviousParent() &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetLength(unsigned short)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::NewMessage(unsigned short, ot::Message::Settings const&)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetStateChild(unsigned short)
</UL>

<P><STRONG><a name="[73c]"></a>ot::Mle::Mle::PrepareAnnounceState()</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, mle.o(.text._ZN2ot3Mle3Mle20PrepareAnnounceStateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::PrepareAnnounceState() &rArr; ot::MeshCoP::DatasetManager::GetChannelMask(ot::Mac::ChannelMask&) const &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ChannelMask::GetNumberOfChannels() const
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::GetChannelMask(ot::Mac::ChannelMask&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAttachTimer()
</UL>

<P><STRONG><a name="[71a]"></a>ot::Mle::Mle::RemoveDelayedMessage(ot::Message::SubType, ot::Mle::Mle::MessageType, ot::Ip6::Address const*)</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, mle.o(.text._ZN2ot3Mle3Mle20RemoveDelayedMessageENS_7Message7SubTypeENS1_11MessageTypeEPKNS_3Ip67AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::RemoveDelayedMessage(ot::Message::SubType, ot::Mle::Mle::MessageType, ot::Ip6::Address const*) &rArr; ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::begin()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Iterator::Advance()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::DequeueAndFree(ot::Message&)
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::DelayedResponseMetadata::ReadFrom(ot::Message const&)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RemoveDelayedDataResponseMessage()
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendDataRequest(ot::Ip6::Address const&, unsigned char const*, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[730]"></a>ot::Mle::Mle::HandleChildIdResponse(ot::Mle::Mle::RxInfo&)</STRONG> (Thumb, 604 bytes, Stack size 80 bytes, mle.o(.text._ZN2ot3Mle3Mle21HandleChildIdResponseERNS1_6RxInfoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::Clear()
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::SetAttachMode(bool)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, void*, unsigned char)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlvValueOffset(ot::Message const&, unsigned char, unsigned short&, unsigned short&)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::Save(ot::MeshCoP::Timestamp const&, ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::ClearNetwork()
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::Save(ot::MeshCoP::Timestamp const&, ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SetRxOnWhenIdle(bool)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::Init(ot::Instance&)
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(ot::Mle::LeaderData&) const
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ReadAndProcessRouteTlvOnFed(ot::Mle::Mle::RxInfo&, unsigned char)
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogError(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, otError)
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetStateDetached()
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetStateChild(unsigned short)
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetLeaderData(unsigned int, unsigned char, unsigned char)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SetNetworkData(unsigned char, unsigned char, ot::NetworkData::Type, ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[70a]"></a>ot::Mle::Mle::InformPreviousChannel()</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, mle.o(.text._ZN2ot3Mle3Mle21InformPreviousChannelEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::InformPreviousChannel() &rArr; ot::AnnounceBeginServer::SendAnnounce(unsigned int, unsigned char, unsigned short) &rArr; ot::AnnounceSenderBase::SendAnnounce(unsigned char) &rArr; ot::TimerMilli::Start(unsigned int) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AnnounceBeginServer::SendAnnounce(unsigned int, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetStateChild(unsigned short)
</UL>

<P><STRONG><a name="[756]"></a>ot::Mle::Mle::SearchForBetterParent()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mle.o(.text._ZN2ot3Mle3Mle21SearchForBetterParentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::SearchForBetterParent() &rArr; ot::Mle::Mle::Attach(ot::Mle::Mle::AttachMode) &rArr; ot::MeshCoP::DatasetManager::Restore() &rArr; ot::MeshCoP::DatasetLocal::Restore(ot::MeshCoP::Dataset&) &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Attach(ot::Mle::Mle::AttachMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSearchForBetterParent
</UL>

<P><STRONG><a name="[757]"></a>ot::Mle::Mle::HasUnregisteredAddress()</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, mle.o(.text._ZN2ot3Mle3Mle22HasUnregisteredAddressEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsRoutingLocator(ot::Ip6::Address const&) const
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Iterator(ot::Ip6::Netif const&, ot::Ip6::Address::TypeFilter)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsAnycastLocator(ot::Ip6::Address const&) const
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsLinkLocal() const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateResponse(ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
</UL>

<P><STRONG><a name="[725]"></a>ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&)</STRONG> (Thumb, 302 bytes, Stack size 440 bytes, mle.o(.text._ZN2ot3Mle3Mle22ProcessMessageSecurityENS_6Crypto6AesCcm4ModeERNS_7MessageERKNS_3Ip611MessageInfoEtRKNS1_14SecurityHeaderE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetLength(unsigned short)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesEcb::~AesEcb()
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesEcb::AesEcb()
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Finalize(void*)
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Header(void const*, unsigned int)
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Init(unsigned int, unsigned int, unsigned char, void const*, unsigned char)
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Payload(ot::Message&, unsigned short, unsigned short, ot::Crypto::AesCcm::Mode)
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::SetKey(ot::Mac::KeyMaterial const&)
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::GenerateNonce(ot::Mac::ExtAddress const&, unsigned int, unsigned char, unsigned char*)
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::CompareBytes(unsigned short, void const*, unsigned short, bool (*)(unsigned char, unsigned char)) const
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(ot::Mac::ExtAddress&) const
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::GetTemporaryMleKey(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&)
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[6f8]"></a>ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)</STRONG> (Thumb, 424 bytes, Stack size 40 bytes, mle.o(.text._ZN2ot3Mle3Mle22SendChildUpdateRequestENS1_22ChildUpdateRequestModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoRandomGet
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::BecomeDetached()
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::SetAttachMode(bool)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned short&rang;(ot::Message&, unsigned char, unsigned short)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned int&rang;(ot::Message&, unsigned char, unsigned int)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned char&rang;(ot::Message&, unsigned char, unsigned char)
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLinkLocalAddress(ot::Mac::ExtAddress const&)
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&)
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::NewMleMessage(ot::Mle::Mle::Command)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SetRxOnWhenIdle(bool)
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Mle::Mle::AddressRegistrationMode)
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendLeaderDataTlv()
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ScheduleMessageTransmissionTimer()
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Start(ot::Mle::Mle::StartMode)
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::DetachGracefully(void (*)(void*), void*)
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetDeviceMode(ot::Mle::DeviceMode)
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetTimeout(unsigned int)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest()
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleMessageTransmissionTimer()
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ReestablishLinkWithNeighbor(ot::Neighbor&)
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateResponse(ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
</UL>

<P><STRONG><a name="[4ad]"></a>ot::Mle::Mle::SendChildUpdateRequest()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle22SendChildUpdateRequestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::SendChildUpdateRequest() &rArr; ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::SetInterval(unsigned short)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::HandleTimer()
</UL>

<P><STRONG><a name="[75b]"></a>ot::Mle::Mle::UpdateLinkLocalAddress()</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, mle.o(.text._ZN2ot3Mle3Mle22UpdateLinkLocalAddressEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::UpdateLinkLocalAddress() &rArr; ot::Ip6::Netif::RemoveUnicastAddress(ot::Ip6::Netif::UnicastAddress const&) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::RemoveUnicastAddress(ot::Ip6::Netif::UnicastAddress const&)
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::AddUnicastAddress(ot::Ip6::Netif::UnicastAddress&)
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::SetFromExtAddress(ot::Mac::ExtAddress const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkSetExtendedAddress
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Start(char const*, char const*, char const*, char const*, char const*, char const*, void (*)(otError, void*), void*)
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleDiscoverResult(otActiveScanResult*)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleTimer()
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Enable()
</UL>

<P><STRONG><a name="[753]"></a>ot::Mle::Mle::DelayedResponseMetadata::ReadFrom(ot::Message const&)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mle.o(.text._ZN2ot3Mle3Mle23DelayedResponseMetadata8ReadFromERKNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::DelayedResponseMetadata::ReadFrom(ot::Message const&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleDelayedResponseTimer()
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RemoveDelayedMessage(ot::Message::SubType, ot::Mle::Mle::MessageType, ot::Ip6::Address const*)
</UL>

<P><STRONG><a name="[75c]"></a>ot::Mle::Mle::SendChildUpdateResponse(ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, mle.o(.text._ZN2ot3Mle3Mle23SendChildUpdateResponseERKNS1_7TlvListERKNS1_9ChallengeE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned short&rang;(ot::Message&, unsigned char, unsigned short)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned int&rang;(ot::Message&, unsigned char, unsigned int)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned char&rang;(ot::Message&, unsigned char, unsigned char)
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLinkLocalAddress(ot::Mac::ExtAddress const&)
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::LinkFrameCounters::GetMaximum() const
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&)
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::NewMleMessage(ot::Mle::Mle::Command)
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Mle::Mle::AddressRegistrationMode)
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendLeaderDataTlv()
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HasUnregisteredAddress()
</UL>
<BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[733]"></a>ot::Mle::Mle::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)</STRONG> (Thumb, 262 bytes, Stack size 112 bytes, mle.o(.text._ZN2ot3Mle3Mle24HandleChildUpdateRequestERNS1_6RxInfoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::BecomeDetached()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned char&rang;(ot::Message const&, unsigned char, unsigned char&)
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadChallengeOrResponse(unsigned char, ot::Mle::Mle::Challenge&) const
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadTlvRequestTlv(ot::Mle::Mle::TlvList&) const
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogError(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, otError)
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TlvList::Add(unsigned char)
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateResponse(ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleLeaderData(ot::Mle::Mle::RxInfo&)
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[734]"></a>ot::Mle::Mle::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)</STRONG> (Thumb, 486 bytes, Stack size 48 bytes, mle.o(.text._ZN2ot3Mle3Mle25HandleChildUpdateResponseERNS1_6RxInfoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Stop(ot::Mle::Mle::StopMode)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::BecomeDetached()
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::SetAttachMode(bool)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned int&rang;(ot::Message const&, unsigned char, unsigned int&)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned char&rang;(ot::Message const&, unsigned char, unsigned char&)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::LinkFrameCounters::SetAll(unsigned int)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SetRxOnWhenIdle(bool)
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadChallengeOrResponse(unsigned char, ot::Mle::Mle::Challenge&) const
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadFrameCounterTlvs(unsigned int&, unsigned int&) const
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogError(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, otError)
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ScheduleMessageTransmissionTimer()
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleLeaderData(ot::Mle::Mle::RxInfo&)
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetStateChild(unsigned short)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[33f]"></a>ot::Mle::Mle::HandleDelayedResponseTimer()</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, mle.o(.text._ZN2ot3Mle3Mle26HandleDelayedResponseTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::HandleDelayedResponseTimer() &rArr; ot::Mle::Mle::SendDelayedResponse(ot::Mle::Mle::TxMessage&, ot::Mle::Mle::DelayedResponseMetadata const&) &rArr; ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&) &rArr; ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::Dequeue(ot::Message&)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::begin()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Iterator::Advance()
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::FireAt(ot::Time)
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::DelayedResponseMetadata::ReadFrom(ot::Message const&)
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendDelayedResponse(ot::Mle::Mle::TxMessage&, ot::Mle::Mle::DelayedResponseMetadata const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilliIn&lang;ot::Mle::Mle, &(ot::Mle::Mle::HandleDelayedResponseTimer())&rang;::HandleTimer(ot::Timer&)
</UL>

<P><STRONG><a name="[735]"></a>ot::Mle::Mle::ReestablishLinkWithNeighbor(ot::Neighbor&)</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle27ReestablishLinkWithNeighborERNS_8NeighborE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child&)
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor*)
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[3cb]"></a>ot::Mle::Mle::RequestShorterChildIdRequest()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle28RequestShorterChildIdRequestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::RequestShorterChildIdRequest() &rArr; ot::Mle::Mle::SendChildIdRequest() &rArr; ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&) &rArr; ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildIdRequest()
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateSendMessage(otError, ot::Mac::Address&, ot::Neighbor*)
</UL>

<P><STRONG><a name="[341]"></a>ot::Mle::Mle::HandleMessageTransmissionTimer()</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, mle.o(.text._ZN2ot3Mle3Mle30HandleMessageTransmissionTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::HandleMessageTransmissionTimer() &rArr; ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::BecomeDetached()
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLinkLocalAddress(ot::Mac::ExtAddress const&)
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor*)
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ScheduleMessageTransmissionTimer()
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendDataRequest(ot::Ip6::Address const&, unsigned char const*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilliIn&lang;ot::Mle::Mle, &(ot::Mle::Mle::HandleMessageTransmissionTimer())&rang;::HandleTimer(ot::Timer&)
</UL>

<P><STRONG><a name="[763]"></a>ot::Mle::Mle::MessageTypeActionToSuffixString(ot::Mle::Mle::MessageType, ot::Mle::Mle::MessageAction)</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle31MessageTypeActionToSuffixStringENS1_11MessageTypeENS1_13MessageActionE))
<BR><BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogError(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, otError)
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)
</UL>

<P><STRONG><a name="[761]"></a>ot::Mle::Mle::RemoveDelayedDataResponseMessage()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle32RemoveDelayedDataResponseMessageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::RemoveDelayedDataResponseMessage() &rArr; ot::Mle::Mle::RemoveDelayedMessage(ot::Message::SubType, ot::Mle::Mle::MessageType, ot::Ip6::Address const*) &rArr; ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RemoveDelayedMessage(ot::Message::SubType, ot::Mle::Mle::MessageType, ot::Ip6::Address const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDataResponse(ot::Ip6::Address const&, ot::Mle::Mle::TlvList const&, unsigned short, ot::Message const*)
</UL>

<P><STRONG><a name="[708]"></a>ot::Mle::Mle::ScheduleMessageTransmissionTimer()</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, mle.o(.text._ZN2ot3Mle3Mle32ScheduleMessageTransmissionTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::ScheduleMessageTransmissionTimer() &rArr; ot::TimerMilli::Start(unsigned int) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint32InRange(unsigned int, unsigned int)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeRouter(ot::ThreadStatusTlv::Status)
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleNotifierEvents(ot::Events)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleMessageTransmissionTimer()
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendDataRequest(ot::Ip6::Address const&, unsigned char const*, unsigned char, unsigned short)
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetStateChild(unsigned short)
</UL>

<P><STRONG><a name="[6f6]"></a>ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle3LogENS1_13MessageActionENS1_11MessageTypeERKNS_3Ip67AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&) &rArr; ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::Discover(ot::Mac::ChannelMask const&, unsigned short, bool, bool, ot::MeshCoP::SteeringData::HashBitIndexes const*, void (*)(otActiveScanResult*, void*), void*)
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoveryResponse(ot::Mle::Mle::RxInfo&) const
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)4&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)3&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressSolicitResponse(ot::Coap::Message const&, ot::ThreadStatusTlv::Status, ot::Router const*, ot::Ip6::MessageInfo const&)
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateResponse(ot::Child*, ot::Ip6::MessageInfo const&, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDiscoveryResponse(ot::Ip6::Address const&, ot::Message const&)
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendParentResponse(ot::Child*, ot::Mle::Mle::Challenge const&, bool)
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressSolicit(ot::ThreadStatusTlv::Status)
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAdvertisement()
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDataResponse(ot::Ip6::Address const&, ot::Mle::Mle::TlvList const&, unsigned short, ot::Message const*)
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkAccept(ot::Ip6::MessageInfo const&, ot::Neighbor*, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleDiscoveryRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleParentRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressRelease()
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleDataRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor*)
</UL>

<P><STRONG><a name="[70e]"></a>ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)</STRONG> (Thumb, 124 bytes, Stack size 120 bytes, mle.o(.text._ZN2ot3Mle3Mle3LogENS1_13MessageActionENS1_11MessageTypeERKNS_3Ip67AddressEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::StringWriter__sub_object(char*, unsigned short)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::Append(char const*, ...)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString() const
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::MessageTypeActionToSuffixString(ot::Mle::Mle::MessageType, ot::Mle::Mle::MessageAction)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&)
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateResponse(ot::Child*, ot::Ip6::MessageInfo const&, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildIdResponse(ot::Child&)
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child&)
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateResponse(ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildIdResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RemoveDelayedMessage(ot::Message::SubType, ot::Mle::Mle::MessageType, ot::Ip6::Address const*)
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleParentResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendDelayedResponse(ot::Mle::Mle::TxMessage&, ot::Mle::Mle::DelayedResponseMetadata const&)
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAdvertisement(ot::Mle::Mle::RxInfo&)
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildIdRequest()
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleDataResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendParentRequest(ot::Mle::Mle::ParentRequestType)
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendDataRequest(ot::Ip6::Address const&, unsigned char const*, unsigned char, unsigned short)
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAnnounce(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[340]"></a>ot::Mle::Mle::Stop(ot::Mle::Mle::StopMode)</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, mle.o(.text._ZN2ot3Mle3Mle4StopENS1_8StopModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::Stop(ot::Mle::Mle::StopMode) &rArr; ot::MeshCoP::DatasetManager::HandleDetach() &rArr; ot::MeshCoP::DatasetManager::Restore() &rArr; ot::MeshCoP::DatasetLocal::Restore(ot::MeshCoP::Dataset&) &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleDetach()
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::UnsubscribeMulticast(ot::Ip6::Netif::MulticastAddress const&)
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::RemoveUnicastAddress(ot::Ip6::Netif::UnicastAddress const&)
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetRole(ot::Mle::DeviceRole)
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetStateDetached()
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetEnabled
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Reattach()
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Disable()
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ProcessAnnounce()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilliIn&lang;ot::Mle::Mle, &(ot::Mle::Mle::HandleDetachGracefullyTimer())&rang;::HandleTimer(ot::Timer&)
</UL>

<P><STRONG><a name="[718]"></a>ot::Mle::Mle::Start(ot::Mle::Mle::StartMode)</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, mle.o(.text._ZN2ot3Mle3Mle5StartENS1_9StartModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::Start(ot::Mle::Mle::StartMode) &rArr; ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetPanId(unsigned short)
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeRouter(ot::ThreadStatusTlv::Status)
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::GenerateRandomPanId()
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetPromiscuous
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetRloc16(unsigned short)
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Attach(ot::Mle::Mle::AttachMode)
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ApplyMeshLocalPrefix()
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetStateDetached()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::Start()
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetEnabled
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Reattach()
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ProcessAnnounce()
</UL>

<P><STRONG><a name="[25d]"></a>ot::Mle::Mle::Store()</STRONG> (Thumb, 268 bytes, Stack size 120 bytes, mle.o(.text._ZN2ot3Mle3Mle5StoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::Store() &rArr; ot::Settings::SaveEntry(ot::SettingsBase::Key, void const*, void*, unsigned short) &rArr; otPlatSettingsSet &rArr; [Anonymous Symbol] &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::ReadEntry(ot::SettingsBase::Key, void*, unsigned short) const
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::SaveEntry(ot::SettingsBase::Key, void const*, void*, unsigned short)
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::LinkFrameCounters::GetMaximum() const
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetDeviceMode(ot::Mle::DeviceMode)
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleNotifierEvents(ot::Events)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::MacFrameCounterUsed(unsigned int)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::IncrementMleFrameCounter()
</UL>

<P><STRONG><a name="[6fa]"></a>ot::Mle::Mle::Attach(ot::Mle::Mle::AttachMode)</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, mle.o(.text._ZN2ot3Mle3Mle6AttachENS1_10AttachModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::Attach(ot::Mle::Mle::AttachMode) &rArr; ot::MeshCoP::DatasetManager::Restore() &rArr; ot::MeshCoP::DatasetLocal::Restore(ot::MeshCoP::Dataset&) &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetRxOnWhenIdle(bool)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Restore()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::Init(ot::Instance&)
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::GetAttachStartDelay() const
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::StopAdvertiseTrickleTimer()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Start(ot::Mle::Mle::StartMode)
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SearchForBetterParent()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::BecomeDetached()
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetDeviceMode(ot::Mle::DeviceMode)
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::BecomeChild()
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::Mle::RxInfo&, unsigned short, ot::Mle::LeaderData const&)
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Reattach()
</UL>

<P><STRONG><a name="[317]"></a>ot::Mle::Mle::Enable()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mle.o(.text._ZN2ot3Mle3Mle6EnableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::Enable() &rArr; ot::Mle::Mle::UpdateLinkLocalAddress() &rArr; ot::Ip6::Netif::RemoveUnicastAddress(ot::Ip6::Netif::UnicastAddress const&) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::UpdateLinkLocalAddress()
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::Open(void (*)(void*, otMessage*, otMessageInfo const*), void*)
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::Bind(unsigned short, ot::Ip6::NetifIdentifier)
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ThreadNetif::Up()
</UL>

<P><STRONG><a name="[31c]"></a>ot::Mle::Mle::Disable()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mle.o(.text._ZN2ot3Mle3Mle7DisableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::Disable() &rArr; ot::Mle::Mle::Stop(ot::Mle::Mle::StopMode) &rArr; ot::MeshCoP::DatasetManager::HandleDetach() &rArr; ot::MeshCoP::DatasetManager::Restore() &rArr; ot::MeshCoP::DatasetLocal::Restore(ot::MeshCoP::Dataset&) &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::Close()
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Stop(ot::Mle::Mle::StopMode)
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::RemoveUnicastAddress(ot::Ip6::Netif::UnicastAddress const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ThreadNetif::Down()
</UL>

<P><STRONG><a name="[76a]"></a>ot::Mle::Mle::Restore()</STRONG> (Thumb, 366 bytes, Stack size 80 bytes, mle.o(.text._ZN2ot3Mle3Mle7RestoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::Restore() &rArr; ot::MeshCoP::DatasetManager::Restore() &rArr; ot::MeshCoP::DatasetLocal::Restore(ot::MeshCoP::Dataset&) &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetExtAddress(ot::Mac::ExtAddress const&)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetCurrentKeySequence(unsigned int)
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetShortAddress(unsigned short)
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::ReadEntry(ot::SettingsBase::Key, void*, unsigned short) const
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Restore()
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Restore()
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Parent::Clear()
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetRouterId(unsigned char)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetAllMacFrameCounters(unsigned int, bool)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::InitSingle()
</UL>

<P><STRONG><a name="[707]"></a>ot::Mle::Mle::SetRole(ot::Mle::DeviceRole)</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, mle.o(.text._ZN2ot3Mle3Mle7SetRoleENS0_10DeviceRoleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::SetRole(ot::Mle::DeviceRole) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::RoleToString(ot::Mle::DeviceRole)
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;ot::Mle::DeviceRole&rang;(ot::Mle::DeviceRole&, ot::Mle::DeviceRole const&, ot::Event)
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Stop(ot::Mle::Mle::StopMode)
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode)
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetStateDetached()
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetStateChild(unsigned short)
</UL>

<P><STRONG><a name="[76f]"></a>ot::Mle::Mle::TlvList::AddElementsFrom(ot::Mle::Mle::TlvList const&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mle.o(.text._ZN2ot3Mle3Mle7TlvList15AddElementsFromERKS2_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TlvList::Add(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[75d]"></a>ot::Mle::Mle::TlvList::Add(unsigned char)</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mle.o(.text._ZN2ot3Mle3Mle7TlvList3AddEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::TlvList::Add(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleNetworkDataUpdateRouter()
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleDataRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TlvList::AddElementsFrom(ot::Mle::Mle::TlvList const&)
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[6fd]"></a>ot::Mle::Mle::LogError(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, otError)</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, mle.o(.text._ZN2ot3Mle3Mle8LogErrorENS1_13MessageActionENS1_11MessageTypeE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::LogError(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, otError) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::MessageTypeActionToSuffixString(ot::Mle::Mle::MessageType, ot::Mle::Mle::MessageAction)
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogProcessError(ot::Mle::Mle::MessageType, otError)
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildIdResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleParentResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAdvertisement(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleDataResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAnnounce(ot::Mle::Mle::RxInfo&)
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogSendError(ot::Mle::Mle::MessageType, otError)
</UL>

<P><STRONG><a name="[73e]"></a>ot::Mle::Mle::Reattach()</STRONG> (Thumb, 424 bytes, Stack size 408 bytes, mle.o(.text._ZN2ot3Mle3Mle8ReattachEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2584 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::Reattach() &rArr; otDatasetSetActiveTlvs &rArr; ot::MeshCoP::DatasetManager::Save(otOperationalDatasetTlvs const&) &rArr; ot::MeshCoP::DatasetManager::HandleDatasetUpdated() &rArr; ot::MeshCoP::DatasetManager::SendSet() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint32InRange(unsigned int, unsigned int)
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Clear()
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetPanId(unsigned short)
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetPanChannel(unsigned char)
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetUpdateTlvs
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetSetActiveTlvs
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeLeader()
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Start(ot::Mle::Mle::StartMode)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Stop(ot::Mle::Mle::StopMode)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::BecomeDetached()
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::SetAttachMode(bool)
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::IsPartiallyComplete() const
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::ApplyConfiguration() const
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Restore()
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SetRxOnWhenIdle(bool)
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Attach(ot::Mle::Mle::AttachMode)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAttachTimer()
</UL>

<P><STRONG><a name="[774]"></a>ot::Mle::Mle::Challenge::GenerateRandom()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle9Challenge14GenerateRandomEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = ot::Mle::Mle::Challenge::GenerateRandom() &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoRandomGet
</UL>
<BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor*)
</UL>

<P><STRONG><a name="[706]"></a>ot::Mle::Mle::SetRloc16(unsigned short)</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, mle.o(.text._ZN2ot3Mle3Mle9SetRloc16Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ClearRequests(ot::Ip6::Address const&)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetShortAddress(unsigned short)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::RestartAddressQueries()
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::RemoveUnicastAddress(ot::Ip6::Netif::UnicastAddress const&)
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::AddUnicastAddress(ot::Ip6::Netif::UnicastAddress&)
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Start(ot::Mle::Mle::StartMode)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::BecomeDetached()
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode)
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetStateChild(unsigned short)
</UL>

<P><STRONG><a name="[776]"></a>ot::Mle::Mle::TxMessage::AppendModeTlv(ot::Mle::DeviceMode)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage13AppendModeTlvENS0_10DeviceModeE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned char&rang;(ot::Message&, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateResponse(ot::Child*, ot::Ip6::MessageInfo const&, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
</UL>

<P><STRONG><a name="[777]"></a>ot::Mle::Mle::TxMessage::AppendRouteTlv(ot::Neighbor*)</STRONG> (Thumb, 50 bytes, Stack size 96 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage14AppendRouteTlvEPNS_8NeighborE))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::TxMessage::AppendRouteTlv(ot::Neighbor*) &rArr; ot::Tlv::AppendTo(ot::Message&) const &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTo(ot::Message&) const
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::FillRouteTlv(ot::Mle::RouteTlv&, ot::Neighbor const*) const
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::RouteTlv::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildIdResponse(ot::Child&)
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAdvertisement()
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkAccept(ot::Ip6::MessageInfo const&, ot::Neighbor*, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
</UL>

<P><STRONG><a name="[71b]"></a>ot::Mle::Mle::TxMessage::SendAfterDelay(ot::Ip6::Address const&, unsigned short)</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage14SendAfterDelayERKNS_3Ip67AddressEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::TxMessage::SendAfterDelay(ot::Ip6::Address const&, unsigned short) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::Enqueue(ot::Message&, ot::MessageQueue::QueuePosition)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::FireAtIfEarlier(ot::Time)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDiscoveryResponse(ot::Ip6::Address const&, ot::Message const&)
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendParentResponse(ot::Child*, ot::Mle::Mle::Challenge const&, bool)
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDataResponse(ot::Ip6::Address const&, ot::Mle::Mle::TlvList const&, unsigned short, ot::Message const*)
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkAccept(ot::Ip6::MessageInfo const&, ot::Neighbor*, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendDataRequest(ot::Ip6::Address const&, unsigned char const*, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[778]"></a>ot::Mle::Mle::TxMessage::AppendStatusTlv(ot::Mle::StatusTlv::Status)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage15AppendStatusTlvENS0_9StatusTlv6StatusE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned char&rang;(ot::Message&, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateResponse(ot::Child*, ot::Ip6::MessageInfo const&, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
</UL>

<P><STRONG><a name="[779]"></a>ot::Mle::Mle::TxMessage::AppendTimeoutTlv(unsigned int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage16AppendTimeoutTlvEj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned int&rang;(ot::Message&, unsigned char, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateResponse(ot::Child*, ot::Ip6::MessageInfo const&, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
</UL>

<P><STRONG><a name="[77a]"></a>ot::Mle::Mle::TxMessage::AppendVersionTlv()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage16AppendVersionTlvEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::TxMessage::AppendVersionTlv() &rArr; otError ot::Tlv::AppendUintTlv&lang;unsigned short&rang;(ot::Message&, unsigned char, unsigned short) &rArr; ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned short&rang;(ot::Message&, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendParentResponse(ot::Child*, ot::Mle::Mle::Challenge const&, bool)
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkAccept(ot::Ip6::MessageInfo const&, ot::Neighbor*, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor*)
</UL>

<P><STRONG><a name="[77b]"></a>ot::Mle::Mle::TxMessage::AppendResponseTlv(ot::Mle::Mle::Challenge const&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage17AppendResponseTlvERKNS1_9ChallengeE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateResponse(ot::Child*, ot::Ip6::MessageInfo const&, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendParentResponse(ot::Child*, ot::Mle::Mle::Challenge const&, bool)
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkAccept(ot::Ip6::MessageInfo const&, ot::Neighbor*, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
</UL>

<P><STRONG><a name="[77c]"></a>ot::Mle::Mle::TxMessage::AppendAddress16Tlv(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage18AppendAddress16TlvEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::TxMessage::AppendAddress16Tlv(unsigned short) &rArr; otError ot::Tlv::AppendUintTlv&lang;unsigned short&rang;(ot::Message&, unsigned char, unsigned short) &rArr; ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned short&rang;(ot::Message&, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildIdResponse(ot::Child&)
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkAccept(ot::Ip6::MessageInfo const&, ot::Neighbor*, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
</UL>

<P><STRONG><a name="[77d]"></a>ot::Mle::Mle::TxMessage::AppendAddressEntry(ot::Ip6::Address const&)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage18AppendAddressEntryERKNS_3Ip67AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::TxMessage::AppendAddressEntry(ot::Ip6::Address const&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Child&)
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Mle::Mle::AddressRegistrationMode)
</UL>

<P><STRONG><a name="[77e]"></a>ot::Mle::Mle::TxMessage::AppendChallengeTlv(unsigned char const*, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage18AppendChallengeTlvEPKhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::TxMessage::AppendChallengeTlv(unsigned char const*, unsigned char) &rArr; ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendParentResponse(ot::Child*, ot::Mle::Mle::Challenge const&, bool)
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkAccept(ot::Ip6::MessageInfo const&, ot::Neighbor*, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child&)
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor*)
</UL>

<P><STRONG><a name="[77f]"></a>ot::Mle::Mle::TxMessage::AppendChallengeTlv(ot::Mle::Mle::Challenge const&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage18AppendChallengeTlvERKNS1_9ChallengeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::TxMessage::AppendChallengeTlv(ot::Mle::Mle::Challenge const&) &rArr; ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor*)
</UL>

<P><STRONG><a name="[75a]"></a>ot::Mle::Mle::TxMessage::AppendLeaderDataTlv()</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage19AppendLeaderDataTlvEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::TxMessage::AppendLeaderDataTlv() &rArr; ot::Tlv::AppendTo(ot::Message&) const &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTo(ot::Message&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateResponse(ot::Child*, ot::Ip6::MessageInfo const&, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildIdResponse(ot::Child&)
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendParentResponse(ot::Child*, ot::Mle::Mle::Challenge const&, bool)
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAdvertisement()
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDataResponse(ot::Ip6::Address const&, ot::Mle::Mle::TlvList const&, unsigned short, ot::Message const*)
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkAccept(ot::Ip6::MessageInfo const&, ot::Neighbor*, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child&)
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor*)
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateResponse(ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
</UL>

<P><STRONG><a name="[780]"></a>ot::Mle::Mle::TxMessage::AppendLinkMarginTlv(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage19AppendLinkMarginTlvEh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned char&rang;(ot::Message&, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendParentResponse(ot::Child*, ot::Mle::Mle::Challenge const&, bool)
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkAccept(ot::Ip6::MessageInfo const&, ot::Neighbor*, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
</UL>

<P><STRONG><a name="[781]"></a>ot::Mle::Mle::TxMessage::AppendTlvRequestTlv(unsigned char const*, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage19AppendTlvRequestTlvEPKhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::TxMessage::AppendTlvRequestTlv(unsigned char const*, unsigned char) &rArr; ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkAccept(ot::Ip6::MessageInfo const&, ot::Neighbor*, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child&)
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor*)
</UL>

<P><STRONG><a name="[782]"></a>ot::Mle::Mle::TxMessage::AppendNetworkDataTlv(ot::NetworkData::Type)</STRONG> (Thumb, 70 bytes, Stack size 272 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage20AppendNetworkDataTlvENS_11NetworkData4TypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::TxMessage::AppendNetworkDataTlv(ot::NetworkData::Type) &rArr; ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::CopyNetworkData(ot::NetworkData::Type, unsigned char*, unsigned char&) const
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateResponse(ot::Child*, ot::Ip6::MessageInfo const&, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildIdResponse(ot::Child&)
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDataResponse(ot::Ip6::Address const&, ot::Mle::Mle::TlvList const&, unsigned short, ot::Message const*)
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child&)
</UL>

<P><STRONG><a name="[784]"></a>ot::Mle::Mle::TxMessage::AppendConnectivityTlv()</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage21AppendConnectivityTlvEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTo(ot::Message&) const
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::FillConnectivityTlv(ot::Mle::ConnectivityTlv&)
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendParentResponse(ot::Child*, ot::Mle::Mle::Challenge const&, bool)
</UL>

<P><STRONG><a name="[785]"></a>ot::Mle::Mle::TxMessage::AppendActiveDatasetTlv()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage22AppendActiveDatasetTlvEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::TxMessage::AppendActiveDatasetTlv() &rArr; ot::MeshCoP::DatasetManager::AppendMleDatasetTlv(ot::Message&) const &rArr; ot::MeshCoP::Dataset::AppendMleDatasetTlv(ot::MeshCoP::Dataset::Type, ot::Message&) const &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::AppendMleDatasetTlv(ot::Message&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildIdResponse(ot::Child&)
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDataResponse(ot::Ip6::Address const&, ot::Mle::Mle::TlvList const&, unsigned short, ot::Message const*)
</UL>

<P><STRONG><a name="[787]"></a>ot::Mle::Mle::TxMessage::AppendSourceAddressTlv()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage22AppendSourceAddressTlvEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::TxMessage::AppendSourceAddressTlv() &rArr; otError ot::Tlv::AppendUintTlv&lang;unsigned short&rang;(ot::Message&, unsigned char, unsigned short) &rArr; ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned short&rang;(ot::Message&, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateResponse(ot::Child*, ot::Ip6::MessageInfo const&, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildIdResponse(ot::Child&)
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendParentResponse(ot::Child*, ot::Mle::Mle::Challenge const&, bool)
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAdvertisement()
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDataResponse(ot::Ip6::Address const&, ot::Mle::Mle::TlvList const&, unsigned short, ot::Message const*)
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkAccept(ot::Ip6::MessageInfo const&, ot::Neighbor*, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child&)
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor*)
</UL>

<P><STRONG><a name="[788]"></a>ot::Mle::Mle::TxMessage::AppendPendingDatasetTlv()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage23AppendPendingDatasetTlvEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::TxMessage::AppendPendingDatasetTlv() &rArr; ot::MeshCoP::DatasetManager::AppendMleDatasetTlv(ot::Message&) const &rArr; ot::MeshCoP::Dataset::AppendMleDatasetTlv(ot::MeshCoP::Dataset::Type, ot::Message&) const &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::AppendMleDatasetTlv(ot::Message&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildIdResponse(ot::Child&)
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDataResponse(ot::Ip6::Address const&, ot::Mle::Mle::TlvList const&, unsigned short, ot::Message const*)
</UL>

<P><STRONG><a name="[6ff]"></a>ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage24AppendActiveTimestampTlvEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv() &rArr; ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::GetTimestamp() const
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateResponse(ot::Child*, ot::Ip6::MessageInfo const&, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildIdResponse(ot::Child&)
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDataResponse(ot::Ip6::Address const&, ot::Mle::Mle::TlvList const&, unsigned short, ot::Message const*)
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child&)
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendDelayedResponse(ot::Mle::Mle::TxMessage&, ot::Mle::Mle::DelayedResponseMetadata const&)
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildIdRequest()
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendDataRequest(ot::Ip6::Address const&, unsigned char const*, unsigned char, unsigned short)
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendAnnounce(unsigned char, ot::Ip6::Address const&, ot::Mle::Mle::AnnounceMode)
</UL>

<P><STRONG><a name="[789]"></a>ot::Mle::Mle::TxMessage::AppendMleFrameCounterTlv()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage24AppendMleFrameCounterTlvEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned int&rang;(ot::Message&, unsigned char, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateResponse(ot::Child*, ot::Ip6::MessageInfo const&, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendParentResponse(ot::Child*, ot::Mle::Mle::Challenge const&, bool)
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkAccept(ot::Ip6::MessageInfo const&, ot::Neighbor*, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
</UL>

<P><STRONG><a name="[78a]"></a>ot::Mle::Mle::TxMessage::AppendCslClockAccuracyTlv()</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage25AppendCslClockAccuracyTlvEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetCslUncertainty
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetCslAccuracy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateResponse(ot::Child*, ot::Ip6::MessageInfo const&, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendParentResponse(ot::Child*, ot::Mle::Mle::Challenge const&, bool)
</UL>

<P><STRONG><a name="[78d]"></a>ot::Mle::Mle::TxMessage::AppendLinkFrameCounterTlv()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage25AppendLinkFrameCounterTlvEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned int&rang;(ot::Message&, unsigned char, unsigned int)
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::LinkFrameCounters::GetMaximum() const
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateResponse(ot::Child*, ot::Ip6::MessageInfo const&, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendParentResponse(ot::Child*, ot::Mle::Mle::Challenge const&, bool)
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkAccept(ot::Ip6::MessageInfo const&, ot::Neighbor*, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
</UL>

<P><STRONG><a name="[71c]"></a>ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage25AppendPendingTimestampTlvEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv() &rArr; ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::GetTimestamp() const
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateResponse(ot::Child*, ot::Ip6::MessageInfo const&, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildIdResponse(ot::Child&)
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDataResponse(ot::Ip6::Address const&, ot::Mle::Mle::TlvList const&, unsigned short, ot::Message const*)
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child&)
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendDelayedResponse(ot::Mle::Mle::TxMessage&, ot::Mle::Mle::DelayedResponseMetadata const&)
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildIdRequest()
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendDataRequest(ot::Ip6::Address const&, unsigned char const*, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[741]"></a>ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Mle::Mle::AddressRegistrationMode)</STRONG> (Thumb, 352 bytes, Stack size 72 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage28AppendAddressRegistrationTlvENS1_23AddressRegistrationModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Mle::Mle::AddressRegistrationMode) &rArr; ot::Mle::Mle::TxMessage::AppendCompressedAddressEntry(unsigned char, ot::Ip6::Address const&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsRoutingLocator(ot::Ip6::Address const&) const
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Iterator(ot::Ip6::Netif const&, ot::Ip6::Address::TypeFilter)
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::ExternalMulticastAddress::Iterator::AdvanceFrom(ot::Ip6::Netif::MulticastAddress const*)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsAnycastLocator(ot::Ip6::Address const&) const
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsMulticastLargerThanRealmLocal() const
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsLinkLocal() const
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendCompressedAddressEntry(unsigned char, ot::Ip6::Address const&)
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressEntry(ot::Ip6::Address const&)
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetContext(ot::Ip6::Address const&, ot::Lowpan::Context&) const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateResponse(ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildIdRequest()
</UL>

<P><STRONG><a name="[790]"></a>ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Child&)</STRONG> (Thumb, 194 bytes, Stack size 80 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage28AppendAddressRegistrationTlvERNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Child&) &rArr; ot::Mle::Mle::TxMessage::AppendCompressedAddressEntry(unsigned char, ot::Ip6::Address const&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddressIterator::GetAddress() const
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddressIterator::Update()
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendCompressedAddressEntry(unsigned char, ot::Ip6::Address const&)
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressEntry(ot::Ip6::Address const&)
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetContext(ot::Ip6::Address const&, ot::Lowpan::Context&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateResponse(ot::Child*, ot::Ip6::MessageInfo const&, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildIdResponse(ot::Child&)
</UL>

<P><STRONG><a name="[78e]"></a>ot::Mle::Mle::TxMessage::AppendCompressedAddressEntry(unsigned char, ot::Ip6::Address const&)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage28AppendCompressedAddressEntryEhRKNS_3Ip67AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::TxMessage::AppendCompressedAddressEntry(unsigned char, ot::Ip6::Address const&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Child&)
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Mle::Mle::AddressRegistrationMode)
</UL>

<P><STRONG><a name="[791]"></a>ot::Mle::Mle::TxMessage::AppendSupervisionIntervalTlv(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage28AppendSupervisionIntervalTlvEt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned short&rang;(ot::Message&, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateResponse(ot::Child*, ot::Ip6::MessageInfo const&, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
</UL>

<P><STRONG><a name="[6f5]"></a>ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&)</STRONG> (Thumb, 202 bytes, Stack size 88 bytes, mle.o(.text._ZN2ot3Mle3Mle9TxMessage6SendToERKNS_3Ip67AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&) &rArr; ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::SendTo(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::IncrementMleFrameCounter()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::Discover(ot::Mac::ChannelMask const&, unsigned short, bool, bool, ot::MeshCoP::SteeringData::HashBitIndexes const*, void (*)(otActiveScanResult*, void*), void*)
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateResponse(ot::Child*, ot::Ip6::MessageInfo const&, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildIdResponse(ot::Child&)
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAdvertisement()
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDataResponse(ot::Ip6::Address const&, ot::Mle::Mle::TlvList const&, unsigned short, ot::Message const*)
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkAccept(ot::Ip6::MessageInfo const&, ot::Neighbor*, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child&)
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor*)
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateResponse(ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendDelayedResponse(ot::Mle::Mle::TxMessage&, ot::Mle::Mle::DelayedResponseMetadata const&)
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildIdRequest()
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendParentRequest(ot::Mle::Mle::ParentRequestType)
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendDataRequest(ot::Ip6::Address const&, unsigned char const*, unsigned char, unsigned short)
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendAnnounce(unsigned char, ot::Ip6::Address const&, ot::Mle::Mle::AnnounceMode)
</UL>

<P><STRONG><a name="[792]"></a>ot::Mle::Mle::Mle(ot::Instance&)</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, mle.o(.text._ZN2ot3Mle3MleC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::Socket(ot::Instance&)
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetMeshLocalPrefix(ot::Ip6::NetworkPrefix const&)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::RegisterReceiver(ot::TimeTicker::Receiver)
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLinkLocalAddress(ot::Mac::ExtAddress const&)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::Init(ot::Instance&)
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::UnicastAddress::InitAsThreadOriginRealmLocalScope()
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::UnicastAddress::InitAsThreadOrigin(bool)
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::GenerateRandom()
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::SetToLocator(unsigned short)
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Parent::Clear()
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::NeighborTable(ot::Instance&)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[7d4]"></a>ot::Mle::Mle::Mle__sub_object(ot::Instance&)</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, mle.o(.text._ZN2ot3Mle3MleC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::MleRouter(ot::Instance&)
</UL>

<P><STRONG><a name="[491]"></a>ot::Mle::RouteTlv::Init()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mle_tlvs.o(.text._ZN2ot3Mle8RouteTlv4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Mle::RouteTlv::Init()
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendRouteTlv(ot::Neighbor*)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendDiagTlv(unsigned char, ot::Message&)
</UL>

<P><STRONG><a name="[76b]"></a>ot::Mle::MleRouter::SetRouterId(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter11SetRouterIdEh))
<BR><BR>[Called By]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Restore()
</UL>

<P><STRONG><a name="[773]"></a>ot::Mle::MleRouter::BecomeLeader()</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter12BecomeLeaderEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::BecomeLeader() &rArr; ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode) &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint8InRange(unsigned char, unsigned char)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::Manager::NonCryptoGetUint32()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::IsRouterEligible() const
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetRouterIdRange(unsigned char&, unsigned char&) const
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SetEmptyCommissionerData()
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::IsPartiallyComplete() const
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Allocate(unsigned char)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Clear()
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::Reset()
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetLeaderData(unsigned int, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadBecomeLeader
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Reattach()
</UL>

<P><STRONG><a name="[764]"></a>ot::Mle::MleRouter::BecomeRouter(ot::ThreadStatusTlv::Status)</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter12BecomeRouterENS_15ThreadStatusTlv6StatusE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::BecomeRouter(ot::ThreadStatusTlv::Status) &rArr; ot::Mle::MleRouter::SendAddressSolicit(ot::ThreadStatusTlv::Status) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::IsRouterEligible() const
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::RegisterReceiver(ot::TimeTicker::Receiver)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SetRxOnWhenIdle(bool)
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::GetNumChildren(ot::Neighbor::StateFilter) const
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressSolicit(ot::ThreadStatusTlv::Status)
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor*)
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ScheduleMessageTransmissionTimer()
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadBecomeRouter
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Start(ot::Mle::Mle::StartMode)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildStart(ot::Mle::Mle::AttachMode)
</UL>

<P><STRONG><a name="[290]"></a>ot::Mle::MleRouter::HandleTimeTick()</STRONG> (Thumb, 896 bytes, Stack size 56 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter14HandleTimeTickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::HandleTimeTick() &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeRouter(ot::ThreadStatusTlv::Status)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Release(unsigned char)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::BecomeDetached()
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::Update()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TrickleTimer::Start(ot::TrickleTimer::Mode, unsigned int, unsigned int, unsigned short)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::UnregisterReceiver(ot::TimeTicker::Receiver)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsRouterOrLeader() const
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HasNeighborWithGoodLinkQuality() const
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::FindNextHopOf(ot::Router const&) const
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetLeaderAge() const
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetLinkCost(ot::Router const&) const
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SynchronizeChildNetworkData()
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAdvertisement()
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::HandleTimeTick()
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child&)
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor*)
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Attach(ot::Mle::Mle::AttachMode)
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::InformPreviousChannel()
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&)
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::HandleTimer()
</UL>

<P><STRONG><a name="[351]"></a>ot::Mle::MleRouter::IsMinimalChild(unsigned short)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter14IsMinimalChildEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ot::Mle::MleRouter::IsMinimalChild(unsigned short) &rArr; ot::NeighborTable::FindNeighbor(unsigned short, ot::Neighbor::StateFilter) &rArr; ot::NeighborTable::FindNeighbor(ot::Neighbor::AddressMatcher const&) &rArr; ot::NeighborTable::FindChildOrRouter(ot::Neighbor::AddressMatcher const&) &rArr; ot::ChildTable::FindChild(ot::Neighbor::AddressMatcher const&) const &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(unsigned short, ot::Neighbor::StateFilter)
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::UpdateSnoopedCacheEntry(ot::Ip6::Address const&, unsigned short, unsigned short)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[79f]"></a>ot::Mle::MleRouter::RemoveChildren()</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter14RemoveChildrenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::RemoveChildren() &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildStart(ot::Mle::Mle::AttachMode)
</UL>

<P><STRONG><a name="[36e]"></a>ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&)</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter14RemoveNeighborERNS_8NeighborE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::BecomeDetached()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::LinkQualityInfo::Clear()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::Signal(ot::NeighborTable::Event, ot::Neighbor const&)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::RemoveStoredChild(ot::Child const&)
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::RemoveEntriesForRloc16(unsigned short)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::RemoveRouterLink(ot::Router&)
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ParentCandidate::Clear()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::ClearAllMessagesForSleepyChild(ot::Child&)
</UL>
<BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveChildrenRloc16(unsigned short)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode)
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveChildren()
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::Mle::RxInfo&, unsigned short, ot::Mle::LeaderData const&)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateRoutes(ot::FrameData const&, ot::Mac::Addresses const&)
</UL>

<P><STRONG><a name="[7a0]"></a>ot::Mle::MleRouter::SendLinkAccept(ot::Ip6::MessageInfo const&, ot::Neighbor*, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)</STRONG> (Thumb, 394 bytes, Stack size 32 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter14SendLinkAcceptERKNS_3Ip611MessageInfoEPNS_8NeighborERKNS0_3Mle7TlvListERKNS8_9ChallengeE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint16InRange(unsigned short, unsigned short)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ComputeLinkMargin(signed char) const
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&)
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&)
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::NewMleMessage(ot::Mle::Mle::Command)
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::GenerateChallenge()
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendLinkFrameCounterTlv()
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendMleFrameCounterTlv()
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendSourceAddressTlv()
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendTlvRequestTlv(unsigned char const*, unsigned char)
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendLinkMarginTlv(unsigned char)
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendLeaderDataTlv()
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendChallengeTlv(unsigned char const*, unsigned char)
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddress16Tlv(unsigned short)
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendResponseTlv(ot::Mle::Mle::Challenge const&)
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendVersionTlv()
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendAfterDelay(ot::Ip6::Address const&, unsigned short)
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendRouteTlv(ot::Neighbor*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[7a2]"></a>ot::Mle::MleRouter::ProcessRouteTlv(ot::Mle::RouteTlv const&, ot::Mle::Mle::RxInfo&)</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter15ProcessRouteTlvERKNS0_8RouteTlvERNS0_3Mle6RxInfoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::BecomeDetached()
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::UpdateRouterIdSet(unsigned char, ot::Mle::RouterIdSet const&)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(unsigned short, ot::Neighbor::StateFilter)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ReadAndProcessRouteTlvOnFed(ot::Mle::Mle::RxInfo&, unsigned char)
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::Mle::RxInfo&, unsigned short, ot::Mle::LeaderData const&)
</UL>

<P><STRONG><a name="[760]"></a>ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor*)</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter15SendLinkRequestEPNS_8NeighborE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor*) &rArr; ot::Neighbor::GenerateChallenge() &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLinkLocalAddress(ot::Mac::ExtAddress const&)
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&)
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&)
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::NewMleMessage(ot::Mle::Mle::Command)
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLinkLocalAllRoutersMulticast()
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::GenerateChallenge()
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendSourceAddressTlv()
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendTlvRequestTlv(unsigned char const*, unsigned char)
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendLeaderDataTlv()
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendChallengeTlv(ot::Mle::Mle::Challenge const&)
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendChallengeTlv(unsigned char const*, unsigned char)
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendVersionTlv()
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Challenge::GenerateRandom()
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeRouter(ot::ThreadStatusTlv::Status)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::Mle::RxInfo&, unsigned short, ot::Mle::LeaderData const&)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleMessageTransmissionTimer()
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ReestablishLinkWithNeighbor(ot::Neighbor&)
</UL>

<P><STRONG><a name="[709]"></a>ot::Mle::MleRouter::HandleChildStart(ot::Mle::Mle::AttachMode)</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter16HandleChildStartENS0_3Mle10AttachModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::HandleChildStart(ot::Mle::Mle::AttachMode) &rArr; ot::Mle::MleRouter::RemoveChildren() &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint8InRange(unsigned char, unsigned char)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeRouter(ot::ThreadStatusTlv::Status)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::RegisterReceiver(ot::TimeTicker::Receiver)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::HasChildren(ot::Neighbor::StateFilter) const
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::UnsubscribeAllRoutersMulticast()
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::SubscribeAllRoutersMulticast()
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveChildren()
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressRelease()
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetStateChild(unsigned short)
</UL>

<P><STRONG><a name="[728]"></a>ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter16HandleLinkAcceptERNS0_3Mle6RxInfoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogProcessError(ot::Mle::Mle::MessageType, otError)
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[7a3]"></a>ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)</STRONG> (Thumb, 960 bytes, Stack size 200 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter16HandleLinkAcceptERNS0_3Mle6RxInfoEb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::LinkQualityForLinkMargin(unsigned char)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned char&rang;(ot::Message const&, unsigned char, unsigned char&)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::LinkFrameCounters::SetAll(unsigned int)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::Signal(ot::NeighborTable::Event, ot::Neighbor const&)
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::IsRouteTlvIdSequenceMoreRecent(ot::Mle::RouteTlv const&) const
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::FindRouterById(unsigned char) const
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ResetAdvertiseInterval()
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessRouteTlv(ot::Mle::RouteTlv const&, ot::Mle::Mle::RxInfo&)
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkAccept(ot::Ip6::MessageInfo const&, ot::Neighbor*, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Clear()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::UpdateRoutes(ot::Mle::RouteTlv const&, unsigned char)
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadFrameCounterTlvs(unsigned int&, unsigned int&) const
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadTlvRequestTlv(ot::Mle::Mle::TlvList&) const
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(ot::Mle::LeaderData&) const
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadChallengeTlv(ot::Mle::Mle::Challenge&) const
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadResponseTlv(ot::Mle::Mle::Challenge&) const
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadRouteTlv(ot::Mle::RouteTlv&) const
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Challenge::Matches(unsigned char const*, unsigned char) const
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendDataRequest(ot::Ip6::Address const&, unsigned char const*, unsigned char, unsigned short)
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetLeaderData(unsigned int, unsigned char, unsigned char)
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::InitNeighbor(ot::Neighbor&, ot::Mle::Mle::RxInfo const&)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&)
</UL>
<BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAcceptAndRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[3e4]"></a>ot::Mle::MleRouter::RemoveRouterLink(ot::Router&)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter16RemoveRouterLinkERNS_6RouterE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::RemoveRouterLink(ot::Router&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::BecomeDetached()
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::RemoveRouterLink(ot::Router&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateNeighborLinkFailures(ot::Neighbor&, otError, bool, unsigned char)
</UL>

<P><STRONG><a name="[7a9]"></a>ot::Mle::MleRouter::SendDataResponse(ot::Ip6::Address const&, ot::Mle::Mle::TlvList const&, unsigned short, ot::Message const*)</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter16SendDataResponseERKNS_3Ip67AddressERKNS0_3Mle7TlvListEtPKNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::SendDataResponse(ot::Ip6::Address const&, ot::Mle::Mle::TlvList const&, unsigned short, ot::Message const*) &rArr; ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&) &rArr; ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&)
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&)
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::NewMleMessage(ot::Mle::Mle::Command)
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv()
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv()
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendPendingDatasetTlv()
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendSourceAddressTlv()
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendActiveDatasetTlv()
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendNetworkDataTlv(ot::NetworkData::Type)
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendLeaderDataTlv()
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendAfterDelay(ot::Ip6::Address const&, unsigned short)
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RemoveDelayedDataResponseMessage()
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogSendError(ot::Mle::Mle::MessageType, otError)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Ip6::Address const&, ot::Neighbor::StateFilter)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveDataResponseMessages()
</UL>
<BR>[Called By]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleNetworkDataUpdateRouter()
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleDataRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[3bd]"></a>ot::Mle::MleRouter::CheckReachability(unsigned short, ot::Ip6::Header const&)</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter17CheckReachabilityEtRKNS_3Ip66HeaderE))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ot::Mle::MleRouter::CheckReachability(unsigned short, ot::Ip6::Header const&) &rArr; ot::NeighborTable::FindNeighbor(ot::Ip6::Address const&, ot::Neighbor::StateFilter) &rArr; ot::NeighborTable::FindNeighbor(ot::Neighbor::AddressMatcher const&) &rArr; ot::NeighborTable::FindChildOrRouter(ot::Neighbor::AddressMatcher const&) &rArr; ot::ChildTable::FindChild(ot::Neighbor::AddressMatcher const&) const &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::FindChild(unsigned short, ot::Neighbor::StateFilter)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Address const&) const
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::CheckReachability(unsigned short, ot::Ip6::Header const&)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Ip6::Address const&, ot::Neighbor::StateFilter)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetNextHop(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::CheckReachability(ot::FrameData const&, ot::Mac::Addresses const&)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendIcmpErrorIfDstUnreach(ot::Message const&, ot::Mac::Addresses const&)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateIp6RouteFtd(ot::Ip6::Header&, ot::Message&)
</UL>

<P><STRONG><a name="[74f]"></a>ot::Mle::MleRouter::ComparePartitions(bool, ot::Mle::LeaderData const&, bool, ot::Mle::LeaderData const&)</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter17ComparePartitionsEbRKNS0_10LeaderDataEbS4_), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleParentResponse(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[72b]"></a>ot::Mle::MleRouter::HandleDataRequest(ot::Mle::Mle::RxInfo&)</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter17HandleDataRequestERNS0_3Mle6RxInfoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, void*, unsigned char)
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::GetTimestamp() const
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Timestamp::Compare(ot::MeshCoP::Timestamp const*, ot::MeshCoP::Timestamp const*)
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&)
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogProcessError(ot::Mle::Mle::MessageType, otError)
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDataResponse(ot::Ip6::Address const&, ot::Mle::Mle::TlvList const&, unsigned short, ot::Message const*)
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadTlvRequestTlv(ot::Mle::Mle::TlvList&) const
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TlvList::Add(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[737]"></a>ot::Mle::MleRouter::HandleDetachStart()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter17HandleDetachStartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::HandleDetachStart() &rArr; ot::RouterTable::ClearNeighbors() &rArr; ot::NeighborTable::Signal(ot::NeighborTable::Event, ot::Neighbor const&) &rArr; ot::DuaManager::UpdateChildDomainUnicastAddress(ot::Child const&, ot::Mle::ChildDuaState) &rArr; ot::DuaManager::UpdateCheckDelay(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::UnregisterReceiver(ot::TimeTicker::Receiver)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::UnsubscribeAllRoutersMulticast()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::ClearNeighbors()
</UL>
<BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetStateDetached()
</UL>

<P><STRONG><a name="[727]"></a>ot::Mle::MleRouter::HandleLinkRequest(ot::Mle::Mle::RxInfo&)</STRONG> (Thumb, 306 bytes, Stack size 96 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter17HandleLinkRequestERNS0_3Mle6RxInfoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&)
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogProcessError(ot::Mle::Mle::MessageType, otError)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(ot::Mac::ExtAddress&) const
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsRouterOrLeader() const
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::FindRouterByRloc16(unsigned short) const
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkAccept(ot::Ip6::MessageInfo const&, ot::Neighbor*, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadTlvRequestTlv(ot::Mle::Mle::TlvList&) const
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(ot::Mle::LeaderData&) const
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadChallengeTlv(ot::Mle::Mle::Challenge&) const
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::InitNeighbor(ot::Neighbor&, ot::Mle::Mle::RxInfo const&)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[79e]"></a>ot::Mle::MleRouter::SendAdvertisement()</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter17SendAdvertisementEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::SendAdvertisement() &rArr; ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&) &rArr; ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&)
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&)
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::NewMleMessage(ot::Mle::Mle::Command)
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLinkLocalAllNodesMulticast()
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendSourceAddressTlv()
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendLeaderDataTlv()
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendRouteTlv(ot::Neighbor*)
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogSendError(ot::Mle::Mle::MessageType, otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertiseTrickleTimer()
</UL>

<P><STRONG><a name="[7ab]"></a>ot::Mle::MleRouter::SetRouterEligible(bool)</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter17SetRouterEligibleEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::SetRouterEligible(bool) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::BecomeDetached()
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetRouterEligible
</UL>

<P><STRONG><a name="[71e]"></a>ot::Mle::MleRouter::SendAddressRelease()</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter18SendAddressReleaseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::SendAddressRelease() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned short&rang;(ot::Message&, unsigned char, unsigned short)
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&)
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderRloc()
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogSendError(ot::Mle::Mle::MessageType, otError)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::DetachGracefully(void (*)(void*), void*)
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildStart(ot::Mle::Mle::AttachMode)
</UL>

<P><STRONG><a name="[799]"></a>ot::Mle::MleRouter::SendAddressSolicit(ot::ThreadStatusTlv::Status)</STRONG> (Thumb, 214 bytes, Stack size 80 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter18SendAddressSolicitENS_15ThreadStatusTlv6StatusE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::SendAddressSolicit(ot::ThreadStatusTlv::Status) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned short&rang;(ot::Message&, unsigned char, unsigned short)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned char&rang;(ot::Message&, unsigned char, unsigned char)
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&)
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderRloc()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeRouter(ot::ThreadStatusTlv::Status)
</UL>

<P><STRONG><a name="[7ad]"></a>ot::Mle::MleRouter::SendParentResponse(ot::Child*, ot::Mle::Mle::Challenge const&, bool)</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter18SendParentResponseEPNS_5ChildERKNS0_3Mle9ChallengeEb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint16InRange(unsigned short, unsigned short)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLinkLocalAddress(ot::Mac::ExtAddress const&)
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&)
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::NewMleMessage(ot::Mle::Mle::Command)
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::GenerateChallenge()
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendLinkFrameCounterTlv()
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendCslClockAccuracyTlv()
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendMleFrameCounterTlv()
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendSourceAddressTlv()
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendConnectivityTlv()
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendLinkMarginTlv(unsigned char)
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendLeaderDataTlv()
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendChallengeTlv(unsigned char const*, unsigned char)
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendResponseTlv(ot::Mle::Mle::Challenge const&)
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendVersionTlv()
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendAfterDelay(ot::Ip6::Address const&, unsigned short)
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogSendError(ot::Mle::Mle::MessageType, otError)
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::LinkQualityInfo::GetLinkMargin() const
</UL>
<BR>[Called By]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleParentRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[490]"></a>ot::Mle::MleRouter::FillConnectivityTlv(ot::Mle::ConnectivityTlv&)</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter19FillConnectivityTlvERNS0_15ConnectivityTlvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ot::Mle::MleRouter::FillConnectivityTlv(ot::Mle::ConnectivityTlv&) &rArr; ot::RouterTable::GetPathCostToLeader() const &rArr; ot::RouterTable::GetNextHopAndPathCost(unsigned short, unsigned short&, unsigned char&) const &rArr; ot::ChildTable::FindChild(unsigned short, ot::Neighbor::StateFilter) &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::GetNumChildren(ot::Neighbor::StateFilter) const
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetPathCostToLeader() const
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::ConnectivityTlv::IncrementLinkQuality(ot::LinkQuality)
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::ConnectivityTlv::SetParentPriority(signed char)
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Router::GetTwoWayLinkQuality() const
</UL>
<BR>[Called By]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendConnectivityTlv()
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendDiagTlv(unsigned char, ot::Message&)
</UL>

<P><STRONG><a name="[745]"></a>ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::Mle::RxInfo&, unsigned short, ot::Mle::LeaderData const&)</STRONG> (Thumb, 888 bytes, Stack size 120 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter19HandleAdvertisementERNS0_3Mle6RxInfoEtRKNS0_10LeaderDataE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint8InRange(unsigned char, unsigned char)
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ComputeLinkMargin(signed char) const
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::IsSingleton() const
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::BecomeDetached()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::Signal(ot::NeighborTable::Event, ot::Neighbor const&)
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::ReplaceEntriesForRloc16(unsigned short, unsigned short)
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ShouldDowngrade(unsigned char, ot::Mle::RouteTlv const&) const
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::RouterIdSet::GetNumberOfAllocatedIds() const
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::IsRouteTlvIdSequenceMoreRecent(ot::Mle::RouteTlv const&) const
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetNeighborCount() const
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::FindRouterById(unsigned char) const
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessRouteTlv(ot::Mle::RouteTlv const&, ot::Mle::Mle::RxInfo&)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::UpdateRoutesOnFed(ot::Mle::RouteTlv const&, unsigned char)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::UpdateRoutes(ot::Mle::RouteTlv const&, unsigned char)
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::RouteTlv::IsValid() const
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadRouteTlv(ot::Mle::RouteTlv&) const
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor*)
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Attach(ot::Mle::Mle::AttachMode)
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::InitNeighbor(ot::Neighbor&, ot::Mle::Mle::RxInfo const&)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&)
</UL>
<BR>[Called By]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAdvertisement(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[72d]"></a>ot::Mle::MleRouter::HandleParentRequest(ot::Mle::Mle::RxInfo&)</STRONG> (Thumb, 390 bytes, Stack size 48 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter19HandleParentRequestERNS0_3Mle6RxInfoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::IsRouterEligible() const
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned char&rang;(ot::Message const&, unsigned char, unsigned char&)
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&)
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogProcessError(ot::Mle::Mle::MessageType, otError)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::SetDeviceMode(ot::Mle::DeviceMode)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::FindChild(ot::Mac::ExtAddress const&, ot::Neighbor::StateFilter)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::GetNewChild()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(ot::Mac::ExtAddress&) const
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetPathCostToLeader() const
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetLeaderAge() const
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendParentResponse(ot::Child*, ot::Mle::Mle::Challenge const&, bool)
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadChallengeTlv(ot::Mle::Mle::Challenge&) const
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::InitNeighbor(ot::Neighbor&, ot::Mle::Mle::RxInfo const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[355]"></a>ot::Mle::MleRouter::ResolveRoutingLoops(unsigned short, unsigned short)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter19ResolveRoutingLoopsEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::ResolveRoutingLoops(unsigned short, unsigned short) &rArr; ot::Mle::MleRouter::ResetAdvertiseInterval() &rArr; ot::TrickleTimer::Start(ot::TrickleTimer::Mode, unsigned int, unsigned int, unsigned short) &rArr; ot::TrickleTimer::StartNewInterval() &rArr; ot::TimerMilli::Start(unsigned int) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::FindRouterByRloc16(unsigned short) const
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Router::SetNextHopToInvalid()
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ResetAdvertiseInterval()
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetNextHop(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[7b5]"></a>ot::Mle::MleRouter::SendChildIdResponse(ot::Child&)</STRONG> (Thumb, 374 bytes, Stack size 56 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter19SendChildIdResponseERNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 2080 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::SendChildIdResponse(ot::Child&) &rArr; ot::Mle::MleRouter::SetChildStateToValid(ot::Child&) &rArr; ot::MlrManager::UpdateProxiedSubscriptions(ot::Child&, ot::Ip6::Address const*, unsigned short) &rArr; ot::MlrManager::ScheduleSend(unsigned short) &rArr; ot::MlrManager::SendMulticastListenerRegistration() &rArr;  ot::MlrManager::ScheduleSend(unsigned short) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLinkLocalAddress(ot::Mac::ExtAddress const&)
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&)
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::NewMleMessage(ot::Mle::Mle::Command)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::SetChildUseShortAddress(ot::Child&, bool)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::FindChild(unsigned short, ot::Neighbor::StateFilter)
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetChildStateToValid(ot::Child&)
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Child&)
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv()
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv()
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendPendingDatasetTlv()
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendSourceAddressTlv()
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendActiveDatasetTlv()
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendNetworkDataTlv(ot::NetworkData::Type)
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendLeaderDataTlv()
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddress16Tlv(unsigned short)
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendRouteTlv(ot::Neighbor*)
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[b2c]"></a>ot::Mle::MleRouter::SetChildRouterLinks(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter19SetChildRouterLinksEh))
<BR><BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetChildRouterLinks
</UL>

<P><STRONG><a name="[7b7]"></a>ot::Mle::MleRouter::SetDeviceProperties(ot::Mle::DeviceProperties const&)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter19SetDevicePropertiesERKNS0_16DevicePropertiesE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::Mle::MleRouter::SetDeviceProperties(ot::Mle::DeviceProperties const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DeviceProperties::CalculateLeaderWeight() const
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DeviceProperties::ClampWeightAdjustment()
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetDeviceProperties
</UL>

<P><STRONG><a name="[72f]"></a>ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)</STRONG> (Thumb, 772 bytes, Stack size 128 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter20HandleChildIdRequestERNS0_3Mle6RxInfoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::IsRouterEligible() const
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeRouter(ot::ThreadStatusTlv::Status)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsAttached() const
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::LinkQualityInfo::AddRss(signed char)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, void*, unsigned char)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned int&rang;(ot::Message const&, unsigned char, unsigned int&)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned char&rang;(ot::Message const&, unsigned char, unsigned char&)
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::GetTimestamp() const
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Timestamp::Compare(ot::MeshCoP::Timestamp const*, ot::MeshCoP::Timestamp const*)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::LinkFrameCounters::SetAll(unsigned int)
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&)
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogProcessError(ot::Mle::Mle::MessageType, otError)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::SetDeviceMode(ot::Mle::DeviceMode)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::FindChild(ot::Mac::ExtAddress const&, ot::Neighbor::StateFilter)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(ot::Mac::ExtAddress&) const
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildIdResponse(ot::Child&)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::FindRouter(ot::Mac::ExtAddress const&)
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadFrameCounterTlvs(unsigned int&, unsigned int&) const
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadTlvRequestTlv(ot::Mle::Mle::TlvList&) const
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadResponseTlv(ot::Mle::Mle::Challenge&) const
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Challenge::Matches(unsigned char const*, unsigned char) const
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessages(ot::Child&, ot::Message::SubType)
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[7bb]"></a>ot::Mle::MleRouter::RemoveChildrenRloc16(unsigned short)</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter20RemoveChildrenRloc16Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::RemoveChildrenRloc16(unsigned short) &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::RemoveEntriesForRloc16(unsigned short)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&)
</UL>
<BR>[Called By]<UL><LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkRemoveChildren
</UL>

<P><STRONG><a name="[7b6]"></a>ot::Mle::MleRouter::SetChildStateToValid(ot::Child&)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter20SetChildStateToValidERNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::SetChildStateToValid(ot::Child&) &rArr; ot::MlrManager::UpdateProxiedSubscriptions(ot::Child&, ot::Ip6::Address const*, unsigned short) &rArr; ot::MlrManager::ScheduleSend(unsigned short) &rArr; ot::MlrManager::SendMulticastListenerRegistration() &rArr;  ot::MlrManager::ScheduleSend(unsigned short) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::Signal(ot::NeighborTable::Event, ot::Neighbor const&)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::StoreChild(ot::Child const&)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::UpdateProxiedSubscriptions(ot::Child&, ot::Ip6::Address const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildIdResponse(ot::Child&)
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[b30]"></a>ot::Mle::MleRouter::SetPreferredRouterId(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter20SetPreferredRouterIdEh))
<BR><BR>[Called By]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetPreferredRouterId
</UL>

<P><STRONG><a name="[705]"></a>ot::Mle::MleRouter::HandlePartitionChange()</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter21HandlePartitionChangeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::HandlePartitionChange() &rArr; ot::AddressResolver::Clear() &rArr; ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::AbortTransaction(void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::Clear()
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetLeaderData(unsigned int, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[7bc]"></a>ot::Mle::MleRouter::SendDiscoveryResponse(ot::Ip6::Address const&, ot::Message const&)</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter21SendDiscoveryResponseERKNS_3Ip67AddressERKNS_7MessageE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint16InRange(unsigned short, unsigned short)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::GetJoinerUdpPort()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTo(ot::Message&) const
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned short&rang;(ot::Message&, unsigned char, unsigned short)
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkNameTlv::SetNetworkName(ot::MeshCoP::NameData const&)
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(ot::MeshCoP::Tlv::Type) const
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkName::GetAsData() const
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&)
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogProcessError(ot::Mle::Mle::MessageType, otError)
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::NewMleMessage(ot::Mle::Mle::Command)
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendAfterDelay(ot::Ip6::Address const&, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleDiscoveryRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[724]"></a>ot::Mle::MleRouter::HandleDiscoveryRequest(ot::Mle::Mle::RxInfo&)</STRONG> (Thumb, 352 bytes, Stack size 72 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter22HandleDiscoveryRequestERNS0_3Mle6RxInfoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::IsRouterEligible() const
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlvValueOffset(ot::Message const&, unsigned char, unsigned short&, unsigned short&)
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::ReadTlvValue(ot::Message const&, unsigned short, void*, unsigned char)
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::IsJoiningEnabled() const
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&)
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogProcessError(ot::Mle::Mle::MessageType, otError)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(ot::Mac::ExtAddress&) const
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDiscoveryResponse(ot::Ip6::Address const&, ot::Message const&)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[304]"></a>ot::Mle::MleRouter::ResetAdvertiseInterval()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter22ResetAdvertiseIntervalEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::ResetAdvertiseInterval() &rArr; ot::TrickleTimer::Start(ot::TrickleTimer::Mode, unsigned int, unsigned int, unsigned short) &rArr; ot::TrickleTimer::StartNewInterval() &rArr; ot::TimerMilli::Start(unsigned int) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TrickleTimer::Start(ot::TrickleTimer::Mode, unsigned int, unsigned int, unsigned short)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TrickleTimer::IndicateInconsistent()
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsRouterOrLeader() const
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Release(unsigned char)
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode)
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Allocate(unsigned char)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::UpdateRouterIdSet(unsigned char, ot::Mle::RouterIdSet const&)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::RemoveRouterLink(ot::Router&)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::UpdateRoutes(ot::Mle::RouteTlv const&, unsigned char)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ResolveRoutingLoops(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[75f]"></a>ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child&)</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter22SendChildUpdateRequestERNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child&) &rArr; ot::Child::GenerateChallenge() &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetNext() const
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetChildMask(unsigned short) const
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::begin() const
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLinkLocalAddress(ot::Mac::ExtAddress const&)
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&)
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::NewMleMessage(ot::Mle::Mle::Command)
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::GenerateChallenge()
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv()
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv()
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendSourceAddressTlv()
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendNetworkDataTlv(ot::NetworkData::Type)
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendTlvRequestTlv(unsigned char const*, unsigned char)
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendLeaderDataTlv()
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendChallengeTlv(unsigned char const*, unsigned char)
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessages(ot::Child&, ot::Message::SubType)
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SynchronizeChildNetworkData()
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ReestablishLinkWithNeighbor(ot::Neighbor&)
</UL>

<P><STRONG><a name="[b2e]"></a>ot::Mle::MleRouter::SetMaxChildIpAddresses(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter22SetMaxChildIpAddressesEh))
<BR><BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetMaxChildIpAddresses
</UL>

<P><STRONG><a name="[798]"></a>ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode)</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter22SetStateRouterOrLeaderENS0_10DeviceRoleEtNS0_15LeaderStartModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode) &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::RegisterReceiver(ot::TimeTicker::Receiver)
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::GetLocatorAddress(ot::Ip6::Address&, unsigned short) const
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::StartLeader()
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::StartLeader()
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Restore()
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::Clear()
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::SubscribeAllRoutersMulticast()
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::AddUnicastAddress(ot::Ip6::Netif::UnicastAddress&)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ResetAdvertiseInterval()
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::Start(ot::Mle::LeaderStartMode)
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetRloc16(unsigned short)
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetRole(ot::Mle::DeviceRole)
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetAttachState(ot::Mle::Mle::AttachState)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&)
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeLeader()
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
</UL>

<P><STRONG><a name="[7c5]"></a>ot::Mle::MleRouter::SendChildUpdateResponse(ot::Child*, ot::Ip6::MessageInfo const&, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter23SendChildUpdateResponseEPNS_5ChildERKNS_3Ip611MessageInfoERKNS0_3Mle7TlvListERKNS8_9ChallengeE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&)
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&)
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::NewMleMessage(ot::Mle::Mle::Command)
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendSupervisionIntervalTlv(unsigned short)
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Child&)
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv()
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendLinkFrameCounterTlv()
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendCslClockAccuracyTlv()
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendMleFrameCounterTlv()
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv()
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendSourceAddressTlv()
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendNetworkDataTlv(ot::NetworkData::Type)
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendLeaderDataTlv()
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendResponseTlv(ot::Mle::Mle::Challenge const&)
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendTimeoutTlv(unsigned int)
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendStatusTlv(ot::Mle::StatusTlv::Status)
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendModeTlv(ot::Mle::DeviceMode)
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[b2f]"></a>ot::Mle::MleRouter::SetAssignParentPriority(signed char)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter23SetAssignParentPriorityEa))
<BR><BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetParentPriority
</UL>

<P><STRONG><a name="[731]"></a>ot::Mle::MleRouter::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)</STRONG> (Thumb, 688 bytes, Stack size 216 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter24HandleChildUpdateRequestERNS0_3Mle6RxInfoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, unsigned short, ot::Tlv&)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned int&rang;(ot::Message const&, unsigned char, unsigned int&)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned char&rang;(ot::Message const&, unsigned char, unsigned char&)
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&)
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogProcessError(ot::Mle::Mle::MessageType, otError)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::SetDeviceMode(ot::Mle::DeviceMode)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::FindChild(ot::Mac::ExtAddress const&, ot::Neighbor::StateFilter)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::StoreChild(ot::Child const&)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(ot::Mac::ExtAddress&) const
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateResponse(ot::Child*, ot::Ip6::MessageInfo const&, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadTlvRequestTlv(ot::Mle::Mle::TlvList&) const
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(ot::Mle::LeaderData&) const
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadChallengeTlv(ot::Mle::Mle::Challenge&) const
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DeviceMode::ToString() const
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TlvList::Add(unsigned char)
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TlvList::AddElementsFrom(ot::Mle::Mle::TlvList const&)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleChildModeChange(ot::Child&, ot::Mle::DeviceMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[b32]"></a>ot::Mle::MleRouter::SetRouterSelectionJitter(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter24SetRouterSelectionJitterEh))
<BR><BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetRouterSelectionJitter
</UL>

<P><STRONG><a name="[732]"></a>ot::Mle::MleRouter::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)</STRONG> (Thumb, 418 bytes, Stack size 64 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter25HandleChildUpdateResponseERNS0_3Mle6RxInfoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::LinkQualityInfo::AddRss(signed char)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned int&rang;(ot::Message const&, unsigned char, unsigned int&)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned char&rang;(ot::Message const&, unsigned char, unsigned char&)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::LinkFrameCounters::SetAll(unsigned int)
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&)
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogProcessError(ot::Mle::Mle::MessageType, otError)
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetChildStateToValid(ot::Child&)
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(ot::Mle::LeaderData&) const
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadResponseTlv(ot::Mle::Mle::Challenge&) const
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Challenge::Matches(unsigned char const*, unsigned char) const
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&)
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[768]"></a>ot::Mle::MleRouter::StopAdvertiseTrickleTimer()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter25StopAdvertiseTrickleTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::Mle::MleRouter::StopAdvertiseTrickleTimer() &rArr; ot::TimerMilli::Stop() &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Attach(ot::Mle::Mle::AttachMode)
</UL>

<P><STRONG><a name="[729]"></a>ot::Mle::MleRouter::HandleLinkAcceptAndRequest(ot::Mle::Mle::RxInfo&)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter26HandleLinkAcceptAndRequestERNS0_3Mle6RxInfoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogProcessError(ot::Mle::Mle::MessageType, otError)
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[7c6]"></a>ot::Mle::MleRouter::SendAddressSolicitResponse(ot::Coap::Message const&, ot::ThreadStatusTlv::Status, ot::Router const*, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter26SendAddressSolicitResponseERKNS_4Coap7MessageENS_15ThreadStatusTlv6StatusEPKNS_6RouterERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::SendAddressSolicitResponse(ot::Coap::Message const&, ot::ThreadStatusTlv::Status, ot::Router const*, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityResponseMessage(ot::Coap::Message const&)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTo(ot::Message&) const
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned short&rang;(ot::Message&, unsigned char, unsigned short)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned char&rang;(ot::Message&, unsigned char, unsigned char)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsRoutingLocator(ot::Ip6::Address const&) const
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&)
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::RemoveEntriesForRloc16(unsigned short)
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::RouterIdMap::GetAsRouterIdSet(ot::Mle::RouterIdSet&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)4&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[72]"></a>ot::Mle::MleRouter::HandleAdvertiseTrickleTimer(ot::TrickleTimer&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter27HandleAdvertiseTrickleTimerERNS_12TrickleTimerE))
<BR>[Address Reference Count : 1]<UL><LI> mle_router.o(.text._ZN2ot3Mle9MleRouterC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[7c8]"></a>ot::Mle::MleRouter::HandleAdvertiseTrickleTimer()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter27HandleAdvertiseTrickleTimerEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::IsRouterEligible() const
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAdvertisement()
</UL>

<P><STRONG><a name="[746]"></a>ot::Mle::MleRouter::ReadAndProcessRouteTlvOnFed(ot::Mle::Mle::RxInfo&, unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 96 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter27ReadAndProcessRouteTlvOnFedERNS0_3Mle6RxInfoEh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessRouteTlv(ot::Mle::RouteTlv const&, ot::Mle::Mle::RxInfo&)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::UpdateRoutesOnFed(ot::Mle::RouteTlv const&, unsigned char)
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadRouteTlv(ot::Mle::RouteTlv&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildIdResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAdvertisement(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[79d]"></a>ot::Mle::MleRouter::SynchronizeChildNetworkData()</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter27SynchronizeChildNetworkDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::SynchronizeChildNetworkData() &rArr; ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child&) &rArr; ot::Child::GenerateChallenge() &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsRouterOrLeader() const
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child&)
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleNetworkDataUpdateRouter()
</UL>

<P><STRONG><a name="[7c9]"></a>ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)</STRONG> (Thumb, 402 bytes, Stack size 48 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter28HandleAddressSolicitResponseEPNS_4Coap7MessageEPKNS_3Ip611MessageInfoE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 2128 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError) &rArr; ot::Mle::MleRouter::SendChildIdResponse(ot::Child&) &rArr; ot::Mle::MleRouter::SetChildStateToValid(ot::Child&) &rArr; ot::MlrManager::UpdateProxiedSubscriptions(ot::Child&, ot::Ip6::Address const*, unsigned short) &rArr; ot::MlrManager::ScheduleSend(unsigned short) &rArr; ot::MlrManager::SendMulticastListenerRegistration() &rArr;  ot::MlrManager::ScheduleSend(unsigned short) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, unsigned short, ot::Tlv&)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned char&rang;(ot::Message const&, unsigned char, unsigned char&)
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::HasChildren(ot::Neighbor::StateFilter) const
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetLeader() const
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetPathCostToLeader() const
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::FindRouterById(unsigned char) const
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Router::SetFrom(ot::Parent const&)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Router::SetNextHopToInvalid()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Router::SetNextHopAndCost(unsigned char, unsigned char)
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode)
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildIdResponse(ot::Child&)
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAdvertisement()
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveChildren()
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::UpdateRouterIdSet(unsigned char, ot::Mle::RouterIdSet const&)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::ClearNeighbors()
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::InformPreviousChannel()
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAddressSolicitResponse(void*, otMessage*, otMessageInfo const*, otError)
</UL>

<P><STRONG><a name="[71]"></a>ot::Mle::MleRouter::HandleAddressSolicitResponse(void*, otMessage*, otMessageInfo const*, otError)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter28HandleAddressSolicitResponseEPvP9otMessagePK13otMessageInfo7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 2128 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::HandleAddressSolicitResponse(void*, otMessage*, otMessageInfo const*, otError) &rArr; ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError) &rArr; ot::Mle::MleRouter::SendChildIdResponse(ot::Child&) &rArr; ot::Mle::MleRouter::SetChildStateToValid(ot::Child&) &rArr; ot::MlrManager::UpdateProxiedSubscriptions(ot::Child&, ot::Ip6::Address const*, unsigned short) &rArr; ot::MlrManager::ScheduleSend(unsigned short) &rArr; ot::MlrManager::SendMulticastListenerRegistration() &rArr;  ot::MlrManager::ScheduleSend(unsigned short) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mle_router.o(.text._ZN2ot3Mle9MleRouter21HandlePartitionChangeEv)
<LI> mle_router.o(.text._ZN2ot3Mle9MleRouter18SendAddressSolicitENS_15ThreadStatusTlv6StatusE)
</UL>
<P><STRONG><a name="[74a]"></a>ot::Mle::MleRouter::HandleNetworkDataUpdateRouter()</STRONG> (Thumb, 78 bytes, Stack size 64 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter29HandleNetworkDataUpdateRouterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::HandleNetworkDataUpdateRouter() &rArr; ot::Mle::MleRouter::SynchronizeChildNetworkData() &rArr; ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child&) &rArr; ot::Child::GenerateChallenge() &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint16InRange(unsigned short, unsigned short)
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLinkLocalAllNodesMulticast()
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsRouterOrLeader() const
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SynchronizeChildNetworkData()
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDataResponse(ot::Ip6::Address const&, ot::Mle::Mle::TlvList const&, unsigned short, ot::Message const*)
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TlvList::Add(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleNotifierEvents(ot::Events)
</UL>

<P><STRONG><a name="[7ba]"></a>ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)</STRONG> (Thumb, 948 bytes, Stack size 232 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter29ProcessAddressRegistrationTlvERNS0_3Mle6RxInfoERNS_5ChildE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::IsDomainUnicast(ot::Ip6::Address const&) const
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddressIterator::GetAddress() const
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddressIterator::Update()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlvValueOffset(ot::Message const&, unsigned char, unsigned short&, unsigned short&)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString() const
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::UpdateChildDomainUnicastAddress(ot::Child const&, ot::Mle::ChildDuaState)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::RemoveIp6Address(ot::Ip6::Address const&)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::RemoveEntryForAddress(ot::Ip6::Address const&)
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetPrefix(ot::Ip6::Prefix const&)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::GetAddressMlrState(ot::Ip6::Address const&) const
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::ClearIp6Addresses()
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddIp6Address(ot::Ip6::Address const&)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::UpdateProxiedSubscriptions(ot::Child&, ot::Ip6::Address const*, unsigned short)
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetContext(unsigned char, ot::Lowpan::Context&) const
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::GetDomainUnicastAddress() const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[7cf]"></a>void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)3&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter9HandleTmfILNS_3UriE3EEEvRNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)3&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendEmptyAck(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendHeaderResponse(ot::Coap::Code, ot::Coap::Message const&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::IsConfirmablePostRequest() const
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendEmptyAck(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Release(unsigned char)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, void*, unsigned char)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&)
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::FindRouterById(unsigned char) const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[7d0]"></a>void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)4&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 336 bytes, Stack size 72 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouter9HandleTmfILNS_3UriE4EEEvRNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)4&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Mle::MleRouter::SendAddressSolicitResponse(ot::Coap::Message const&, ot::ThreadStatusTlv::Status, ot::Router const*, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::IsConfirmablePostRequest() const
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, void*, unsigned char)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned char&rang;(ot::Message const&, unsigned char, unsigned char&)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::ToString() const
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&)
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatFindNwkMgmChildRegTable
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::CountBorderRouters(ot::NetworkData::RoleFilter) const
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressSolicitResponse(ot::Coap::Message const&, ot::ThreadStatusTlv::Status, ot::Router const*, ot::Ip6::MessageInfo const&)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Allocate()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Allocate(unsigned char)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::FindRouter(ot::Mac::ExtAddress const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[7d3]"></a>ot::Mle::MleRouter::MleRouter(ot::Instance&)</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouterC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TrickleTimer::TrickleTimer(ot::Instance&, void (&)(ot::TrickleTimer&))
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::ChildTable(ot::Instance&)
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DeviceProperties::CalculateLeaderWeight() const
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DeviceProperties::DeviceProperties()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::RouterTable(ot::Instance&)
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Mle__sub_object(ot::Instance&)
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[be5]"></a>ot::Mle::MleRouter::MleRouter__sub_object(ot::Instance&)</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, mle_router.o(.text._ZN2ot3Mle9MleRouterC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[7d6]"></a>ot::Tlv::ParsedInfo::FindIn(ot::Message const&, unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, tlvs.o(.text._ZN2ot3Tlv10ParsedInfo6FindInERKNS_7MessageEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ot::Tlv::ParsedInfo::FindIn(ot::Message const&, unsigned char) &rArr; ot::Tlv::ParsedInfo::ParseFrom(ot::Message const&, unsigned short) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::ParsedInfo::ParseFrom(ot::Message const&, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, unsigned short, ot::Tlv&)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, void*, unsigned char)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlvValueOffset(ot::Message const&, unsigned char, unsigned short&, unsigned short&)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned int&rang;(ot::Message const&, unsigned char, unsigned int&)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned char&rang;(ot::Message const&, unsigned char, unsigned char&)
</UL>

<P><STRONG><a name="[7d7]"></a>ot::Tlv::ParsedInfo::ParseFrom(ot::Message const&, unsigned short)</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tlvs.o(.text._ZN2ot3Tlv10ParsedInfo9ParseFromERKNS_7MessageEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ot::Tlv::ParsedInfo::ParseFrom(ot::Message const&, unsigned short) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::ReadTlvValue(ot::Message const&, unsigned short, void*, unsigned char)
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::ParsedInfo::FindIn(ot::Message const&, unsigned char)
</UL>

<P><STRONG><a name="[228]"></a>otError ot::Tlv::FindUintTlv&lang;unsigned char&rang;(ot::Message const&, unsigned char, unsigned char&)</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, tlvs.o(.text._ZN2ot3Tlv11FindUintTlvIhEE7otErrorRKNS_7MessageEhRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = otError ot::Tlv::FindUintTlv&lang;unsigned char&rang;(ot::Message const&, unsigned char, unsigned char&) &rArr; ot::Tlv::ReadTlvValue(ot::Message const&, unsigned short, void*, unsigned char) &rArr; ot::Tlv::ParsedInfo::ParseFrom(ot::Message const&, unsigned short) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::ReadTlvValue(ot::Message const&, unsigned short, void*, unsigned char)
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::ParsedInfo::FindIn(ot::Message const&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Leader::HandleTmf&lang;(ot::Uri)22&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleJoinerFinalizeResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleMgmtSetResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::ProcessDuaResponse(ot::Coap::Message&)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AnnounceBeginServer::HandleTmf&lang;(ot::Uri)10&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)4&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleParentRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleParentResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::EnergyScanServer::HandleTmf&lang;(ot::Uri)19&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::ParseMulticastListenerRegistrationResponse(otError, ot::Coap::Message*, unsigned char&, ot::Ip6::Address*, unsigned char&)
</UL>

<P><STRONG><a name="[459]"></a>otError ot::Tlv::FindUintTlv&lang;unsigned int&rang;(ot::Message const&, unsigned char, unsigned int&)</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, tlvs.o(.text._ZN2ot3Tlv11FindUintTlvIjEE7otErrorRKNS_7MessageEhRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = otError ot::Tlv::FindUintTlv&lang;unsigned int&rang;(ot::Message const&, unsigned char, unsigned int&) &rArr; ot::Tlv::ReadTlvValue(ot::Message const&, unsigned short, void*, unsigned char) &rArr; ot::Tlv::ParsedInfo::ParseFrom(ot::Message const&, unsigned short) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::ReadTlvValue(ot::Message const&, unsigned short, void*, unsigned char)
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::ParsedInfo::FindIn(ot::Message const&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)1&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadFrameCounterTlvs(unsigned int&, unsigned int&) const
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[2f0]"></a>otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, tlvs.o(.text._ZN2ot3Tlv11FindUintTlvItEE7otErrorRKNS_7MessageEhRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&) &rArr; ot::Tlv::ReadTlvValue(ot::Message const&, unsigned short, void*, unsigned char) &rArr; ot::Tlv::ParsedInfo::ParseFrom(ot::Message const&, unsigned short) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::ReadTlvValue(ot::Message const&, unsigned short, void*, unsigned char)
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::ParsedInfo::FindIn(ot::Message const&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Leader::HandleTmf&lang;(ot::Uri)22&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::JoinerRouter::HandleTmf&lang;(ot::Uri)29&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AnnounceBeginServer::HandleTmf&lang;(ot::Uri)10&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)1&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)4&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)3&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleParentRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildIdResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleParentResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAdvertisement(ot::Mle::Mle::RxInfo&)
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAnnounce(ot::Mle::Mle::RxInfo&)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::EnergyScanServer::HandleTmf&lang;(ot::Uri)19&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::PanIdQueryServer::HandleTmf&lang;(ot::Uri)26&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)5&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[487]"></a>otError ot::Tlv::ReadUintTlv&lang;unsigned char&rang;(ot::Message const&, unsigned short, unsigned char&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tlvs.o(.text._ZN2ot3Tlv11ReadUintTlvIhEE7otErrorRKNS_7MessageEtRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = otError ot::Tlv::ReadUintTlv&lang;unsigned char&rang;(ot::Message const&, unsigned short, unsigned char&) &rArr; ot::Tlv::ReadTlvValue(ot::Message const&, unsigned short, void*, unsigned char) &rArr; ot::Tlv::ParsedInfo::ParseFrom(ot::Message const&, unsigned short) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::ReadTlvValue(ot::Message const&, unsigned short, void*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::GetNextDiagTlv(ot::Coap::Message const&, unsigned short&, otNetworkDiagTlv&)
</UL>

<P><STRONG><a name="[485]"></a>otError ot::Tlv::ReadUintTlv&lang;unsigned int&rang;(ot::Message const&, unsigned short, unsigned int&)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tlvs.o(.text._ZN2ot3Tlv11ReadUintTlvIjEE7otErrorRKNS_7MessageEtRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = otError ot::Tlv::ReadUintTlv&lang;unsigned int&rang;(ot::Message const&, unsigned short, unsigned int&) &rArr; ot::Tlv::ReadTlvValue(ot::Message const&, unsigned short, void*, unsigned char) &rArr; ot::Tlv::ParsedInfo::ParseFrom(ot::Message const&, unsigned short) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::ReadTlvValue(ot::Message const&, unsigned short, void*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::GetNextDiagTlv(ot::Coap::Message const&, unsigned short&, otNetworkDiagTlv&)
</UL>

<P><STRONG><a name="[484]"></a>otError ot::Tlv::ReadUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned short, unsigned short&)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tlvs.o(.text._ZN2ot3Tlv11ReadUintTlvItEE7otErrorRKNS_7MessageEtRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = otError ot::Tlv::ReadUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned short, unsigned short&) &rArr; ot::Tlv::ReadTlvValue(ot::Message const&, unsigned short, void*, unsigned char) &rArr; ot::Tlv::ParsedInfo::ParseFrom(ot::Message const&, unsigned short) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::ReadTlvValue(ot::Message const&, unsigned short, void*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::GetNextDiagTlv(ot::Coap::Message const&, unsigned short&, otNetworkDiagTlv&)
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoveryResponse(ot::Mle::Mle::RxInfo&) const
</UL>

<P><STRONG><a name="[486]"></a>ot::Tlv::ReadTlvValue(ot::Message const&, unsigned short, void*, unsigned char)</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, tlvs.o(.text._ZN2ot3Tlv12ReadTlvValueERKNS_7MessageEtPvh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ot::Tlv::ReadTlvValue(ot::Message const&, unsigned short, void*, unsigned char) &rArr; ot::Tlv::ParsedInfo::ParseFrom(ot::Message const&, unsigned short) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ReadBytes(unsigned short, void*, unsigned short) const
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::ParsedInfo::ParseFrom(ot::Message const&, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::GetNextDiagTlv(ot::Coap::Message const&, unsigned short&, otNetworkDiagTlv&)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::ReadUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned short, unsigned short&)
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::ReadUintTlv&lang;unsigned int&rang;(ot::Message const&, unsigned short, unsigned int&)
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::ReadUintTlv&lang;unsigned char&rang;(ot::Message const&, unsigned short, unsigned char&)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned int&rang;(ot::Message const&, unsigned char, unsigned int&)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned char&rang;(ot::Message const&, unsigned char, unsigned char&)
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoveryResponse(ot::Mle::Mle::RxInfo&) const
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleDiscoveryRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[23f]"></a>otError ot::Tlv::AppendUintTlv&lang;unsigned char&rang;(ot::Message&, unsigned char, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tlvs.o(.text._ZN2ot3Tlv13AppendUintTlvIhEE7otErrorRNS_7MessageEhT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = otError ot::Tlv::AppendUintTlv&lang;unsigned char&rang;(ot::Message&, unsigned char, unsigned char) &rArr; ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendKeepAliveResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendPetitionResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::PrepareJoinerFinalizeMessage(char const*, char const*, char const*, char const*, char const*)
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::SendAddressNotification(ot::Ip6::Address&, ot::ThreadStatusTlv::DuaStatus, ot::Child const&)
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressSolicitResponse(ot::Coap::Message const&, ot::ThreadStatusTlv::Status, ot::Router const*, ot::Ip6::MessageInfo const&)
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressSolicit(ot::ThreadStatusTlv::Status)
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendLinkMarginTlv(unsigned char)
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendStatusTlv(ot::Mle::StatusTlv::Status)
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendModeTlv(ot::Mle::DeviceMode)
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateResponse(ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildIdRequest()
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendParentRequest(ot::Mle::Mle::ParentRequestType)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendDiagTlv(unsigned char, ot::Message&)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::SendCommissioningSetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
</UL>

<P><STRONG><a name="[237]"></a>otError ot::Tlv::AppendUintTlv&lang;unsigned int&rang;(ot::Message&, unsigned char, unsigned int)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tlvs.o(.text._ZN2ot3Tlv13AppendUintTlvIjEE7otErrorRNS_7MessageEhT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = otError ot::Tlv::AppendUintTlv&lang;unsigned int&rang;(ot::Message&, unsigned char, unsigned int) &rArr; ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressQueryResponse(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, unsigned int const*, ot::Ip6::Address const&)
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::PrepareJoinerEntrustMessage()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::PerformNextRegistration()
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendLinkFrameCounterTlv()
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendMleFrameCounterTlv()
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendTimeoutTlv(unsigned int)
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateResponse(ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildIdRequest()
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendDiagTlv(unsigned char, ot::Message&)
</UL>

<P><STRONG><a name="[2fa]"></a>otError ot::Tlv::AppendUintTlv&lang;unsigned short&rang;(ot::Message&, unsigned char, unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tlvs.o(.text._ZN2ot3Tlv13AppendUintTlvItEE7otErrorRNS_7MessageEhT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = otError ot::Tlv::AppendUintTlv&lang;unsigned short&rang;(ot::Message&, unsigned char, unsigned short) &rArr; ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressQueryResponse(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, unsigned int const*, ot::Ip6::Address const&)
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendPetitionResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressSolicitResponse(ot::Coap::Message const&, ot::ThreadStatusTlv::Status, ot::Router const*, ot::Ip6::MessageInfo const&)
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDiscoveryResponse(ot::Ip6::Address const&, ot::Message const&)
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressSolicit(ot::ThreadStatusTlv::Status)
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressRelease()
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendSupervisionIntervalTlv(unsigned short)
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendSourceAddressTlv()
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddress16Tlv(unsigned short)
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendVersionTlv()
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateResponse(ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildIdRequest()
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendParentRequest(ot::Mle::Mle::ParentRequestType)
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendAnnounce(unsigned char, ot::Ip6::Address const&, ot::Mle::Mle::AnnounceMode)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PanIdQueryServer::SendConflict()
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendDiagTlv(unsigned char, ot::Message&)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::SendServerDataNotification(unsigned short, ot::NetworkData::NetworkData const*)
</UL>

<P><STRONG><a name="[7d8]"></a>ot::Tlv::AppendStringTlv(ot::Message&, unsigned char, unsigned char, char const*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tlvs.o(.text._ZN2ot3Tlv15AppendStringTlvERNS_7MessageEhhPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = ot::Tlv::AppendStringTlv(ot::Message&, unsigned char, unsigned char, char const*) &rArr; ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringLength(char const*, unsigned short)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::PrepareJoinerFinalizeMessage(char const*, char const*, char const*, char const*, char const*)
</UL>

<P><STRONG><a name="[288]"></a>ot::Tlv::FindTlvValueOffset(ot::Message const&, unsigned char, unsigned short&, unsigned short&)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, tlvs.o(.text._ZN2ot3Tlv18FindTlvValueOffsetERKNS_7MessageEhRtS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ot::Tlv::FindTlvValueOffset(ot::Message const&, unsigned char, unsigned short&, unsigned short&) &rArr; ot::Tlv::ParsedInfo::FindIn(ot::Message const&, unsigned char) &rArr; ot::Tlv::ParsedInfo::ParseFrom(ot::Message const&, unsigned short) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::ParsedInfo::FindIn(ot::Message const&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ChannelMaskTlv::GetChannelMask(ot::Message const&)
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::JoinerRouter::HandleTmf&lang;(ot::Uri)29&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoveryResponse(ot::Mle::Mle::RxInfo&) const
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadChallengeOrResponse(unsigned char, ot::Mle::Mle::Challenge&) const
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadTlvRequestTlv(ot::Mle::Mle::TlvList&) const
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleDiscoveryRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildIdResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleLeaderData(ot::Mle::Mle::RxInfo&)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendRequestedTlvs(ot::Message const&, ot::Message&)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)14&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::ParseMulticastListenerRegistrationResponse(otError, ot::Coap::Message*, unsigned char&, ot::Ip6::Address*, unsigned char&)
</UL>

<P><STRONG><a name="[229]"></a>ot::Tlv::FindTlv(ot::Message const&, unsigned char, void*, unsigned char)</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, tlvs.o(.text._ZN2ot3Tlv7FindTlvERKNS_7MessageEhPvh))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ot::Tlv::FindTlv(ot::Message const&, unsigned char, void*, unsigned char) &rArr; ot::Tlv::ParsedInfo::FindIn(ot::Message const&, unsigned char) &rArr; ot::Tlv::ParsedInfo::ParseFrom(ot::Message const&, unsigned short) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ReadBytes(unsigned short, void*, unsigned short) const
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::ParsedInfo::FindIn(ot::Message const&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::JoinerRouter::HandleTmf&lang;(ot::Uri)29&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Joiner::HandleTmf&lang;(ot::Uri)20&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::ProcessDuaResponse(ot::Coap::Message&)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)2&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)1&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)0&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)4&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)3&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleDataRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildIdResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleLeaderData(ot::Mle::Mle::RxInfo&)
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAnnounce(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[2f1]"></a>ot::Tlv::FindTlv(ot::Message const&, unsigned char, unsigned short, ot::Tlv&)</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, tlvs.o(.text._ZN2ot3Tlv7FindTlvERKNS_7MessageEhtRS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ot::Tlv::FindTlv(ot::Message const&, unsigned char, unsigned short, ot::Tlv&) &rArr; ot::Tlv::ParsedInfo::FindIn(ot::Message const&, unsigned char) &rArr; ot::Tlv::ParsedInfo::ParseFrom(ot::Message const&, unsigned short) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ReadBytes(unsigned short, void*, unsigned short) const
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::ParsedInfo::FindIn(ot::Message const&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Leader::HandleTmf&lang;(ot::Uri)23&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(ot::Mle::LeaderData&) const
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadRouteTlv(ot::Mle::RouteTlv&) const
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleParentResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAnnounce(ot::Mle::Mle::RxInfo&)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)5&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[236]"></a>ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, tlvs.o(.text._ZN2ot3Tlv9AppendTlvERNS_7MessageEhPKvh))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressQueryResponse(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, unsigned int const*, ot::Ip6::Address const&)
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendStringTlv(ot::Message&, unsigned char, unsigned char, char const*)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned short&rang;(ot::Message&, unsigned char, unsigned short)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned int&rang;(ot::Message&, unsigned char, unsigned int)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned char&rang;(ot::Message&, unsigned char, unsigned char)
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::PrepareJoinerEntrustMessage()
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::SendAddressNotification(ot::Ip6::Address&, ot::ThreadStatusTlv::DuaStatus, ot::Child const&)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::PerformNextRegistration()
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressError(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, ot::Ip6::Address const*)
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDiscoveryResponse(ot::Ip6::Address const&, ot::Message const&)
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressSolicit(ot::ThreadStatusTlv::Status)
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressRelease()
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv()
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv()
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendNetworkDataTlv(ot::NetworkData::Type)
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendTlvRequestTlv(unsigned char const*, unsigned char)
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendChallengeTlv(ot::Mle::Mle::Challenge const&)
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendChallengeTlv(unsigned char const*, unsigned char)
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendResponseTlv(ot::Mle::Mle::Challenge const&)
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateResponse(ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildIdRequest()
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendParentRequest(ot::Mle::Mle::ParentRequestType)
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendDataRequest(ot::Ip6::Address const&, unsigned char const*, unsigned char, unsigned short)
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendAnnounce(unsigned char, ot::Ip6::Address const&, ot::Mle::Mle::AnnounceMode)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendDiagTlv(unsigned char, ot::Message&)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::SendCommand(ot::Uri, ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
</UL>

<P><STRONG><a name="[23a]"></a>ot::Tmf::MessageInfo::SetSockAddrToRloc()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tmf.o(.text._ZN2ot3Tmf11MessageInfo17SetSockAddrToRlocEv))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::PerformNextRegistration()
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::PrepareMessageInfoForDest(ot::Ip6::Address const&, ot::Tmf::MessageInfo&) const
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistrationMessage(otIp6Address const*, unsigned char, unsigned int const*, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
</UL>

<P><STRONG><a name="[442]"></a>ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo(ot::Ip6::Address const&)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tmf.o(.text._ZN2ot3Tmf11MessageInfo27SetSockAddrToRlocPeerAddrToERKNS_3Ip67AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo(ot::Ip6::Address const&) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressQueryResponse(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, unsigned int const*, ot::Ip6::Address const&)
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendDatasetChanged(ot::Ip6::Address const&)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressError(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, ot::Ip6::Address const*)
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::EnergyScanServer::SendReport()
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PanIdQueryServer::SendConflict()
</UL>

<P><STRONG><a name="[240]"></a>ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo(unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tmf.o(.text._ZN2ot3Tmf11MessageInfo27SetSockAddrToRlocPeerAddrToEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::SendAddressNotification(ot::Ip6::Address&, ot::ThreadStatusTlv::DuaStatus, ot::Child const&)
</UL>

<P><STRONG><a name="[2fb]"></a>ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tmf.o(.text._ZN2ot3Tmf11MessageInfo37SetSockAddrToRlocPeerAddrToLeaderAlocEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc() &rArr; ot::Mle::Mle::GetLocatorAddress(ot::Ip6::Address&, unsigned short) const &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::GetLocatorAddress(ot::Ip6::Address&, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendGetRequest(ot::MeshCoP::Dataset::Components const&, unsigned char const*, unsigned char, otIp6Address const*) const
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSetRequest(ot::MeshCoP::Dataset::Info const&, unsigned char const*, unsigned char, void (*)(otError, void*), void*)
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSet()
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::SendServerDataNotification(unsigned short, ot::NetworkData::NetworkData const*)
</UL>

<P><STRONG><a name="[7ac]"></a>ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderRloc()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tmf.o(.text._ZN2ot3Tmf11MessageInfo37SetSockAddrToRlocPeerAddrToLeaderRlocEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderRloc() &rArr; ot::Mle::Mle::GetLeaderAddress(ot::Ip6::Address&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::GetLeaderAddress(ot::Ip6::Address&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressSolicit(ot::ThreadStatusTlv::Status)
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressRelease()
</UL>

<P><STRONG><a name="[443]"></a>ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToRealmLocalAllRoutersMulticast()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tmf.o(.text._ZN2ot3Tmf11MessageInfo56SetSockAddrToRlocPeerAddrToRealmLocalAllRoutersMulticastEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToRealmLocalAllRoutersMulticast() &rArr; ot::Ip6::Address::SetToRealmLocalAllRoutersMulticast() &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToRealmLocalAllRoutersMulticast()
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressError(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, ot::Ip6::Address const*)
</UL>

<P><STRONG><a name="[73]"></a>ot::Tmf::SecureAgent::HandleResource(ot::Coap::CoapBase&, char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tmf.o(.text._ZN2ot3Tmf11SecureAgent14HandleResourceERNS_4Coap8CoapBaseEPKcRNS2_7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ot::Tmf::SecureAgent::HandleResource(ot::Coap::CoapBase&, char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::UriFromPath(char const*) &rArr; ot::BinarySearch::Find(void const*, void const*, unsigned short, unsigned short, int (&)(void const*, void const*))
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::UriFromPath(char const*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tmf.o(.text._ZN2ot3Tmf11SecureAgentC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[7da]"></a>ot::Tmf::SecureAgent::SecureAgent(ot::Instance&)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tmf.o(.text._ZN2ot3Tmf11SecureAgentC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::CoapSecure__sub_object(ot::Instance&, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[be6]"></a>ot::Tmf::SecureAgent::SecureAgent__sub_object(ot::Instance&)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tmf.o(.text._ZN2ot3Tmf11SecureAgentC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[3af]"></a>ot::Tmf::Agent::DscpToPriority(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tmf.o(.text._ZN2ot3Tmf5Agent14DscpToPriorityEh))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::GetFramePriority(ot::FrameData const&, ot::Mac::Addresses const&, ot::Message::Priority&)
</UL>

<P><STRONG><a name="[7dc]"></a>ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 680 bytes, Stack size 16 bytes, tmf.o(.text._ZN2ot3Tmf5Agent14HandleResourceEPKcRNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 2336 + Unknown Stack Size
<LI>Call Chain = ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; void ot::MeshCoP::Joiner::HandleTmf&lang;(ot::Uri)20&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset::Info const&) &rArr; ot::MeshCoP::DatasetManager::HandleDatasetUpdated() &rArr; ot::MeshCoP::DatasetManager::SendSet() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Leader::HandleTmf&lang;(ot::Uri)23&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Leader::HandleTmf&lang;(ot::Uri)22&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::JoinerRouter::HandleTmf&lang;(ot::Uri)29&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Joiner::HandleTmf&lang;(ot::Uri)20&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::PendingDatasetManager::HandleTmf&lang;(ot::Uri)27&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::ActiveDatasetManager::HandleTmf&lang;(ot::Uri)12&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::PendingDatasetManager::HandleTmf&lang;(ot::Uri)25&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::ActiveDatasetManager::HandleTmf&lang;(ot::Uri)11&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::DuaManager::HandleTmf&lang;(ot::Uri)36&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AnnounceBeginServer::HandleTmf&lang;(ot::Uri)10&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)2&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)1&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)0&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)4&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)3&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::EnergyScanServer::HandleTmf&lang;(ot::Uri)19&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::UriFromPath(char const*)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::PanIdQueryServer::HandleTmf&lang;(ot::Uri)26&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)35&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)34&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)33&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Client::HandleTmf&lang;(ot::Uri)32&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)5&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)16&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)14&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(ot::Coap::CoapBase&, char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[75]"></a>ot::Tmf::Agent::HandleResource(ot::Coap::CoapBase&, char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tmf.o(.text._ZN2ot3Tmf5Agent14HandleResourceERNS_4Coap8CoapBaseEPKcRNS2_7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 2336 + Unknown Stack Size
<LI>Call Chain = ot::Tmf::Agent::HandleResource(ot::Coap::CoapBase&, char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; void ot::MeshCoP::Joiner::HandleTmf&lang;(ot::Uri)20&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset::Info const&) &rArr; ot::MeshCoP::DatasetManager::HandleDatasetUpdated() &rArr; ot::MeshCoP::DatasetManager::SendSet() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tmf.o(.text._ZN2ot3Tmf5AgentC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[622]"></a>ot::Tmf::Agent::PriorityToDscp(ot::Message::Priority)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tmf.o(.text._ZN2ot3Tmf5Agent14PriorityToDscpENS_7Message8PriorityE))
<BR><BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
</UL>

<P><STRONG><a name="[318]"></a>ot::Tmf::Agent::Start()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tmf.o(.text._ZN2ot3Tmf5Agent5StartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = ot::Tmf::Agent::Start() &rArr; ot::Coap::Coap::Start(unsigned short, ot::Ip6::NetifIdentifier) &rArr; ot::Ip6::Udp::Socket::Bind(unsigned short, ot::Ip6::NetifIdentifier) &rArr; ot::Ip6::Udp::Bind(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&, ot::Ip6::NetifIdentifier) &rArr; ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Address const&) const &rArr; bool ot::LinkedList&lang;ot::Ip6::Netif::UnicastAddress&rang;::ContainsMatching&lang;ot::Ip6::Address&rang;(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Coap::Start(unsigned short, ot::Ip6::NetifIdentifier)
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ThreadNetif::Up()
</UL>

<P><STRONG><a name="[74]"></a>ot::Tmf::Agent::Filter(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, void*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tmf.o(.text._ZN2ot3Tmf5Agent6FilterERKNS_4Coap7MessageERKNS_3Ip611MessageInfoEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ot::Tmf::Agent::Filter(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, void*) &rArr; ot::Tmf::Agent::IsTmfMessage(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned short) const &rArr; ot::Mle::Mle::IsMeshLocalAddress(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::IsTmfMessage(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned short) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tmf.o(.text._ZN2ot3Tmf5AgentC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[7e6]"></a>ot::Tmf::Agent::Agent(ot::Instance&)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tmf.o(.text._ZN2ot3Tmf5AgentC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Coap::Coap__sub_object(ot::Instance&)
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[be7]"></a>ot::Tmf::Agent::Agent__sub_object(ot::Instance&)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tmf.o(.text._ZN2ot3Tmf5AgentC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[7e8]"></a>ot::Coap::CoapSecure::SendMessage(ot::Coap::Message&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, coap_secure.o(.text._ZN2ot4Coap10CoapSecure11SendMessageERNS0_7MessageEPFvPvP9otMessagePK13otMessageInfo7otErrorES4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapSecure::SendMessage(ot::Coap::Message&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SendJoinerFinalize()
</UL>

<P><STRONG><a name="[79]"></a>ot::Coap::CoapSecure::HandleTransmit(ot::Tasklet&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, coap_secure.o(.text._ZN2ot4Coap10CoapSecure14HandleTransmitERNS_7TaskletE))
<BR>[Address Reference Count : 1]<UL><LI> coap_secure.o(.text._ZN2ot4Coap10CoapSecureC2ERNS_8InstanceEb)
</UL>
<P><STRONG><a name="[7e9]"></a>ot::Coap::CoapSecure::HandleTransmit()</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, coap_secure.o(.text._ZN2ot4Coap10CoapSecure14HandleTransmitEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::Dequeue(ot::Message&)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Send(ot::Message&, unsigned short)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
</UL>

<P><STRONG><a name="[7eb]"></a>ot::Coap::CoapSecure::HandleDtlsReceive(unsigned char*, unsigned short)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, coap_secure.o(.text._ZN2ot4Coap10CoapSecure17HandleDtlsReceiveEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapSecure::HandleDtlsReceive(unsigned char*, unsigned short) &rArr; ot::Coap::CoapBase::Receive(ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::ProcessReceivedRequest(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendHeaderResponse(ot::Coap::Code, ot::Coap::Message const&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::Allocate(ot::Message::Type, unsigned short)
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::Receive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::HandleDtlsReceive(void*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[76]"></a>ot::Coap::CoapSecure::HandleDtlsReceive(void*, unsigned char*, unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, coap_secure.o(.text._ZN2ot4Coap10CoapSecure17HandleDtlsReceiveEPvPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapSecure::HandleDtlsReceive(void*, unsigned char*, unsigned short) &rArr; ot::Coap::CoapSecure::HandleDtlsReceive(unsigned char*, unsigned short) &rArr; ot::Coap::CoapBase::Receive(ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::ProcessReceivedRequest(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendHeaderResponse(ot::Coap::Code, ot::Coap::Message const&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::HandleDtlsReceive(unsigned char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coap_secure.o(.text._ZN2ot4Coap10CoapSecure5StartEt)
</UL>
<P><STRONG><a name="[77]"></a>ot::Coap::CoapSecure::HandleDtlsConnected(void*, bool)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, coap_secure.o(.text._ZN2ot4Coap10CoapSecure19HandleDtlsConnectedEPvb))
<BR>[Address Reference Count : 1]<UL><LI> coap_secure.o(.text._ZN2ot4Coap10CoapSecure5StartEt)
</UL>
<P><STRONG><a name="[78]"></a>ot::Coap::CoapSecure::Send(ot::Coap::CoapBase&, ot::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, coap_secure.o(.text._ZN2ot4Coap10CoapSecure4SendERNS0_8CoapBaseERNS_7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapSecure::Send(ot::Coap::CoapBase&, ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::Enqueue(ot::Message&, ot::MessageQueue::QueuePosition)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coap_secure.o(.text._ZN2ot4Coap10CoapSecureC2ERNS_8InstanceEb)
</UL>
<P><STRONG><a name="[31a]"></a>ot::Coap::CoapSecure::Stop()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, coap_secure.o(.text._ZN2ot4Coap10CoapSecure4StopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapSecure::Stop() &rArr; ot::MeshCoP::Dtls::Close() &rArr; ot::MeshCoP::Dtls::Disconnect() &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt_ext &rArr; mbedtls_cipher_aead_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Close()
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ClearRequestsAndResponses()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::DequeueAndFreeAll()
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ThreadNetif::Down()
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Finish(otError)
</UL>

<P><STRONG><a name="[7ef]"></a>ot::Coap::CoapSecure::Start(unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, coap_secure.o(.text._ZN2ot4Coap10CoapSecure5StartEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapSecure::Start(unsigned short) &rArr; ot::MeshCoP::Dtls::Open(void (*)(void*, unsigned char*, unsigned short), void (*)(void*, bool), void*) &rArr; ot::Ip6::Udp::Socket::Open(void (*)(void*, otMessage*, otMessageInfo const*), void*) &rArr; ot::Ip6::Udp::Open(ot::Ip6::Udp::SocketHandle&, void (*)(void*, otMessage*, otMessageInfo const*), void*) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Open(void (*)(void*, unsigned char*, unsigned short), void (*)(void*, bool), void*)
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Bind(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Start(char const*, char const*, char const*, char const*, char const*, char const*, void (*)(otError, void*), void*)
</UL>

<P><STRONG><a name="[7f2]"></a>ot::Coap::CoapSecure::SetPsk(ot::MeshCoP::JoinerPskd const&)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, coap_secure.o(.text._ZN2ot4Coap10CoapSecure6SetPskERKNS_7MeshCoP10JoinerPskdE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapSecure::SetPsk(ot::MeshCoP::JoinerPskd const&) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::SetPsk(unsigned char const*, unsigned char)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringLength(char const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Start(char const*, char const*, char const*, char const*, char const*, char const*, void (*)(otError, void*), void*)
</UL>

<P><STRONG><a name="[7f4]"></a>ot::Coap::CoapSecure::Connect(ot::Ip6::SockAddr const&, void (*)(bool, void*), void*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, coap_secure.o(.text._ZN2ot4Coap10CoapSecure7ConnectERKNS_3Ip68SockAddrEPFvbPvES6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapSecure::Connect(ot::Ip6::SockAddr const&, void (*)(bool, void*), void*) &rArr; ot::MeshCoP::Dtls::Connect(ot::Ip6::SockAddr const&) &rArr; ot::MeshCoP::Dtls::Setup(bool) &rArr; ot::MeshCoP::Dtls::Process() &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ecjpake_read_round_two &rArr; ecjpake_kkp_read &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Connect(ot::Ip6::SockAddr const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Connect(ot::MeshCoP::Joiner::JoinerRouter&)
</UL>

<P><STRONG><a name="[7f6]"></a>ot::Coap::CoapSecure::CoapSecure(ot::Instance&, bool)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, coap_secure.o(.text._ZN2ot4Coap10CoapSecureC2ERNS_8InstanceEb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Dtls(ot::Instance&, bool)
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::CoapBase__sub_object(ot::Instance&, otError (*)(ot::Coap::CoapBase&, ot::Message&, ot::Ip6::MessageInfo const&))
</UL>

<P><STRONG><a name="[7db]"></a>ot::Coap::CoapSecure::CoapSecure__sub_object(ot::Instance&, bool)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, coap_secure.o(.text._ZN2ot4Coap10CoapSecureC2ERNS_8InstanceEb), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::SecureAgent::SecureAgent(ot::Instance&)
</UL>

<P><STRONG><a name="[7f9]"></a>ot::Coap::MessageQueue::begin()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, coap_message.o(.text._ZN2ot4Coap12MessageQueue5beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Coap::MessageQueue::begin()
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetNext() const
</UL>
<BR>[Called By]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::HandleRetransmissionTimer()
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::FindRelatedRequest(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::Coap::CoapBase::Metadata&)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::AbortTransaction(void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ClearRequests(ot::Ip6::Address const*)
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::UpdateQueue()
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::HandleTimer()
</UL>

<P><STRONG><a name="[7c]"></a>ot::Coap::ResponsesQueue::HandleTimer(ot::Timer&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, coap.o(.text._ZN2ot4Coap14ResponsesQueue11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ot::Coap::ResponsesQueue::HandleTimer(ot::Timer&) &rArr; ot::Coap::ResponsesQueue::HandleTimer() &rArr; ot::Coap::ResponsesQueue::ResponseMetadata::ReadFrom(ot::Coap::Message const&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::HandleTimer()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> coap.o(.text._ZN2ot4Coap8CoapBaseC2ERNS_8InstanceEPF7otErrorRS1_RNS_7MessageERKNS_3Ip611MessageInfoEE)
<LI> coap.o(.text._ZN2ot4Coap4CoapC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[7fa]"></a>ot::Coap::ResponsesQueue::HandleTimer()</STRONG> (Thumb, 120 bytes, Stack size 96 bytes, coap.o(.text._ZN2ot4Coap14ResponsesQueue11HandleTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ot::Coap::ResponsesQueue::HandleTimer() &rArr; ot::Coap::ResponsesQueue::ResponseMetadata::ReadFrom(ot::Coap::Message const&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Iterator::Advance()
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::ResponseMetadata::ReadFrom(ot::Coap::Message const&)
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::MessageQueue::begin()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::DequeueAndFree(ot::Message&)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::FireAt(ot::Time)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::HandleTimer(ot::Timer&)
</UL>

<P><STRONG><a name="[7fc]"></a>ot::Coap::ResponsesQueue::UpdateQueue()</STRONG> (Thumb, 118 bytes, Stack size 96 bytes, coap.o(.text._ZN2ot4Coap14ResponsesQueue11UpdateQueueEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ot::Coap::ResponsesQueue::UpdateQueue() &rArr; ot::Coap::ResponsesQueue::ResponseMetadata::ReadFrom(ot::Coap::Message const&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Iterator::Advance()
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::ResponseMetadata::ReadFrom(ot::Coap::Message const&)
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::MessageQueue::begin()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::DequeueAndFree(ot::Message&)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&)
</UL>

<P><STRONG><a name="[7fd]"></a>ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&)</STRONG> (Thumb, 174 bytes, Stack size 80 bytes, coap.o(.text._ZN2ot4Coap14ResponsesQueue15EnqueueResponseERNS0_7MessageERKNS_3Ip611MessageInfoERKNS0_12TxParametersE))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::Enqueue(ot::Message&, ot::MessageQueue::QueuePosition)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Clone(unsigned short) const
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::FindMatchedResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) const
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::UpdateQueue()
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::FireAtIfEarlier(ot::Time)
</UL>
<BR>[Called By]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
</UL>

<P><STRONG><a name="[7fb]"></a>ot::Coap::ResponsesQueue::ResponseMetadata::ReadFrom(ot::Coap::Message const&)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, coap.o(.text._ZN2ot4Coap14ResponsesQueue16ResponseMetadata8ReadFromERKNS0_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::Coap::ResponsesQueue::ResponseMetadata::ReadFrom(ot::Coap::Message const&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::FindMatchedResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) const
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::UpdateQueue()
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::HandleTimer()
</UL>

<P><STRONG><a name="[800]"></a>ot::Coap::ResponsesQueue::GetMatchedResponseCopy(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::Coap::Message**)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, coap.o(.text._ZN2ot4Coap14ResponsesQueue22GetMatchedResponseCopyERKNS0_7MessageERKNS_3Ip611MessageInfoEPPS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = ot::Coap::ResponsesQueue::GetMatchedResponseCopy(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::Coap::Message**) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Clone(unsigned short) const
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::FindMatchedResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ProcessReceivedRequest(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[7a]"></a>ot::Coap::Coap::HandleUdpReceive(void*, otMessage*, otMessageInfo const*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, coap.o(.text._ZN2ot4Coap4Coap16HandleUdpReceiveEPvP9otMessagePK13otMessageInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = ot::Coap::Coap::HandleUdpReceive(void*, otMessage*, otMessageInfo const*) &rArr; ot::Coap::CoapBase::Receive(ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::ProcessReceivedRequest(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendHeaderResponse(ot::Coap::Code, ot::Coap::Message const&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::Receive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coap.o(.text._ZN2ot4Coap4Coap5StartEtNS_3Ip615NetifIdentifierE)
</UL>
<P><STRONG><a name="[7d]"></a>ot::Coap::Coap::Send(ot::Coap::CoapBase&, ot::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, coap.o(.text._ZN2ot4Coap4Coap4SendERNS0_8CoapBaseERNS_7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = ot::Coap::Coap::Send(ot::Coap::CoapBase&, ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::Socket::SendTo(ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::SendTo(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coap.o(.text._ZN2ot4Coap4CoapC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[31b]"></a>ot::Coap::Coap::Stop()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, coap.o(.text._ZN2ot4Coap4Coap4StopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ot::Coap::Coap::Stop() &rArr; ot::Coap::CoapBase::ClearRequests(ot::Ip6::Address const*) &rArr; ot::Coap::CoapBase::Metadata::ReadFrom(ot::Coap::Message const&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ClearRequests(ot::Ip6::Address const*)
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::Close()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::DequeueAndFreeAll()
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ThreadNetif::Down()
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapStop
</UL>

<P><STRONG><a name="[7e5]"></a>ot::Coap::Coap::Start(unsigned short, ot::Ip6::NetifIdentifier)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, coap.o(.text._ZN2ot4Coap4Coap5StartEtNS_3Ip615NetifIdentifierE))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = ot::Coap::Coap::Start(unsigned short, ot::Ip6::NetifIdentifier) &rArr; ot::Ip6::Udp::Socket::Bind(unsigned short, ot::Ip6::NetifIdentifier) &rArr; ot::Ip6::Udp::Bind(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&, ot::Ip6::NetifIdentifier) &rArr; ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Address const&) const &rArr; bool ot::LinkedList&lang;ot::Ip6::Netif::UnicastAddress&rang;::ContainsMatching&lang;ot::Ip6::Address&rang;(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::Close()
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::Open(void (*)(void*, otMessage*, otMessageInfo const*), void*)
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::Bind(unsigned short, ot::Ip6::NetifIdentifier)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapStart
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::Start()
</UL>

<P><STRONG><a name="[802]"></a>ot::Coap::Coap::Coap(ot::Instance&)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, coap.o(.text._ZN2ot4Coap4CoapC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::Manager::NonCryptoGetUint32()
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::Socket(ot::Instance&)
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[7e7]"></a>ot::Coap::Coap::Coap__sub_object(ot::Instance&)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, coap.o(.text._ZN2ot4Coap4CoapC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::Agent(ot::Instance&)
</UL>

<P><STRONG><a name="[803]"></a>ot::Coap::Option::Iterator::InitOrAdvance(ot::Coap::Message const*, unsigned short)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, coap_message.o(.text._ZN2ot4Coap6Option8Iterator13InitOrAdvanceEPKNS0_7MessageEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = ot::Coap::Option::Iterator::InitOrAdvance(ot::Coap::Message const*, unsigned short) &rArr; ot::Coap::Option::Iterator::Advance() &rArr; ot::Coap::Option::Iterator::ReadExtendedOptionField(unsigned short&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Option::Iterator::Advance()
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Option::Iterator::Init(ot::Coap::Message const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::ReadUriPathOptions(char (&) [33]) const
</UL>

<P><STRONG><a name="[806]"></a>ot::Coap::Option::Iterator::ReadExtendedOptionField(unsigned short&)</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, coap_message.o(.text._ZN2ot4Coap6Option8Iterator23ReadExtendedOptionFieldERt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ot::Coap::Option::Iterator::ReadExtendedOptionField(unsigned short&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Option::Iterator::Advance()
</UL>

<P><STRONG><a name="[804]"></a>ot::Coap::Option::Iterator::Init(ot::Coap::Message const&)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, coap_message.o(.text._ZN2ot4Coap6Option8Iterator4InitERKNS0_7MessageE))
<BR><BR>[Called By]<UL><LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Option::Iterator::InitOrAdvance(ot::Coap::Message const*, unsigned short)
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::ParseHeader()
</UL>

<P><STRONG><a name="[805]"></a>ot::Coap::Option::Iterator::Advance()</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, coap_message.o(.text._ZN2ot4Coap6Option8Iterator7AdvanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ot::Coap::Option::Iterator::Advance() &rArr; ot::Coap::Option::Iterator::ReadExtendedOptionField(unsigned short&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Option::Iterator::ReadExtendedOptionField(unsigned short&)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Option::Iterator::InitOrAdvance(ot::Coap::Message const*, unsigned short)
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::ParseHeader()
</UL>

<P><STRONG><a name="[807]"></a>ot::Coap::Message::ParseHeader()</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, coap_message.o(.text._ZN2ot4Coap7Message11ParseHeaderEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ot::Coap::Message::ParseHeader() &rArr; ot::Coap::Option::Iterator::Advance() &rArr; ot::Coap::Option::Iterator::ReadExtendedOptionField(unsigned short&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Option::Iterator::Advance()
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Option::Iterator::Init(ot::Coap::Message const&)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::MoveOffset(int)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::Receive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[808]"></a>ot::Coap::Message::AppendOption(unsigned short, unsigned short, void const*)</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, coap_message.o(.text._ZN2ot4Coap7Message12AppendOptionEttPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = ot::Coap::Message::AppendOption(unsigned short, unsigned short, void const*) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::AppendUriPathOptions(char const*)
</UL>

<P><STRONG><a name="[441]"></a>ot::Coap::Message::SetPayloadMarker()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, coap_message.o(.text._ZN2ot4Coap7Message16SetPayloadMarkerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = ot::Coap::Message::SetPayloadMarker() &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetOffset(unsigned short)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageSetPayloadMarker
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::InitResponse(ot::Coap::Message*, ot::Coap::Message const&)
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressError(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, ot::Ip6::Address const*)
</UL>

<P><STRONG><a name="[809]"></a>ot::Coap::Message::GenerateRandomToken(unsigned char)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, coap_message.o(.text._ZN2ot4Coap7Message19GenerateRandomTokenEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = ot::Coap::Message::GenerateRandomToken(unsigned char) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoRandomGet
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::SetToken(unsigned char const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageGenerateToken
</UL>

<P><STRONG><a name="[80b]"></a>ot::Coap::Message::SetTokenFromMessage(ot::Coap::Message const&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, coap_message.o(.text._ZN2ot4Coap7Message19SetTokenFromMessageERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = ot::Coap::Message::SetTokenFromMessage(ot::Coap::Message const&) &rArr; ot::Coap::Message::SetToken(unsigned char const*, unsigned char) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::SetToken(unsigned char const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageInitResponse
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendHeaderResponse(ot::Coap::Code, ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[440]"></a>ot::Coap::Message::AppendUriPathOptions(char const*)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, coap_message.o(.text._ZN2ot4Coap7Message20AppendUriPathOptionsEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = ot::Coap::Message::AppendUriPathOptions(char const*) &rArr; ot::Coap::Message::AppendOption(unsigned short, unsigned short, void const*) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::AppendOption(unsigned short, unsigned short, void const*)
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringFind(char const*, char)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageAppendUriPathOptions
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressError(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, ot::Ip6::Address const*)
</UL>

<P><STRONG><a name="[80d]"></a>ot::Coap::Message::SetDefaultResponseHeader(ot::Coap::Message const&)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, coap_message.o(.text._ZN2ot4Coap7Message24SetDefaultResponseHeaderERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = ot::Coap::Message::SetDefaultResponseHeader(ot::Coap::Message const&) &rArr; ot::Coap::Message::SetToken(unsigned char const*, unsigned char) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::SetToken(unsigned char const*, unsigned char)
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::InitResponse(ot::Coap::Message*, ot::Coap::Message const&)
</UL>

<P><STRONG><a name="[43f]"></a>ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, coap_message.o(.text._ZN2ot4Coap7Message4InitENS0_4TypeENS0_4CodeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code) &rArr; ot::Coap::Message::Init() &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageInitResponse
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageInit
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendHeaderResponse(ot::Coap::Code, ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendEmptyMessage(ot::Coap::Type, ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressError(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, ot::Ip6::Address const*)
</UL>

<P><STRONG><a name="[80f]"></a>ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri)</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, coap_message.o(.text._ZN2ot4Coap7Message4InitENS0_4TypeENS0_4CodeENS_3UriE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504 + Unknown Stack Size
<LI>Call Chain = ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoRandomGet
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetLength(unsigned short)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::AppendUriPathOptions(char const*)
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Init()
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PathForUri(ot::Uri)
</UL>
<BR>[Called By]<UL><LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri)
</UL>

<P><STRONG><a name="[80e]"></a>ot::Coap::Message::Init()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, coap_message.o(.text._ZN2ot4Coap7Message4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = ot::Coap::Message::Init() &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetOffset(unsigned short)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetLength(unsigned short)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code)
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri)
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::SetDefaultResponseHeader(ot::Coap::Message const&)
</UL>

<P><STRONG><a name="[810]"></a>ot::Coap::Message::Finish()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, coap_message.o(.text._ZN2ot4Coap7Message6FinishEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = ot::Coap::Message::Finish() &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetLength(unsigned short)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytes(unsigned short, void const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ProcessReceivedRequest(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendEmptyMessage(ot::Coap::Type, ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[80a]"></a>ot::Coap::Message::SetToken(unsigned char const*, unsigned char)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, coap_message.o(.text._ZN2ot4Coap7Message8SetTokenEPKhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = ot::Coap::Message::SetToken(unsigned char const*, unsigned char) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetLength(unsigned short)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::SetTokenFromMessage(ot::Coap::Message const&)
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::GenerateRandomToken(unsigned char)
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::SetDefaultResponseHeader(ot::Coap::Message const&)
</UL>

<P><STRONG><a name="[811]"></a>ot::Coap::CoapBase::NewMessage(ot::Message::Settings const&)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, coap.o(.text._ZN2ot4Coap8CoapBase10NewMessageERKNS_7Message8SettingsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::NewMessage(ot::Message::Settings const&) &rArr; ot::Ip6::Udp::NewMessage(unsigned short, ot::Message::Settings const&) &rArr; ot::Ip6::Ip6::NewMessage(unsigned short, ot::Message::Settings const&) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetOffset(unsigned short)
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::NewMessage(unsigned short, ot::Message::Settings const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapNewMessage
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewNonConfirmablePostMessage(ot::Uri)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityResponseMessage(ot::Coap::Message const&)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewConfirmablePostMessage(ot::Uri)
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendHeaderResponse(ot::Coap::Code, ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewResponseMessage(ot::Coap::Message const&)
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendEmptyMessage(ot::Coap::Type, ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewMessage()
</UL>

<P><STRONG><a name="[43e]"></a>ot::Coap::CoapBase::NewMessage()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, coap.o(.text._ZN2ot4Coap8CoapBase10NewMessageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::NewMessage() &rArr; ot::Coap::CoapBase::NewMessage(ot::Message::Settings const&) &rArr; ot::Ip6::Udp::NewMessage(unsigned short, ot::Message::Settings const&) &rArr; ot::Ip6::Ip6::NewMessage(unsigned short, ot::Message::Settings const&) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewMessage(ot::Message::Settings const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressError(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, ot::Ip6::Address const*)
</UL>

<P><STRONG><a name="[af3]"></a>ot::Coap::CoapBase::AddResource(ot::Coap::Resource&)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, coap.o(.text._ZN2ot4Coap8CoapBase11AddResourceERNS0_8ResourceE))
<BR><BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapAddResource
</UL>

<P><STRONG><a name="[812]"></a>ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, coap.o(.text._ZN2ot4Coap8CoapBase11InitMessageEPNS0_7MessageENS0_4TypeENS_3UriE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::SetPayloadMarker()
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri)
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewNonConfirmablePostMessage(ot::Uri)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewConfirmablePostMessage(ot::Uri)
</UL>

<P><STRONG><a name="[241]"></a>ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, coap.o(.text._ZN2ot4Coap8CoapBase11SendMessageERNS0_7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendGetRequest(ot::MeshCoP::Dataset::Components const&, unsigned char const*, unsigned char, otIp6Address const*) const
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressQueryResponse(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, unsigned int const*, ot::Ip6::Address const&)
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendKeepAliveResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendPetitionResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SendJoinerEntrustResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendDatasetChanged(ot::Ip6::Address const&)
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendGetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, unsigned char*, unsigned char) const
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::SendAddressNotification(ot::Ip6::Address&, ot::ThreadStatusTlv::DuaStatus, ot::Child const&)
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressError(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, ot::Ip6::Address const*)
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressSolicitResponse(ot::Coap::Message const&, ot::ThreadStatusTlv::Status, ot::Router const*, ot::Ip6::MessageInfo const&)
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressRelease()
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::EnergyScanServer::SendReport()
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PanIdQueryServer::SendConflict()
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)34&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)33&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::SendCommissioningSetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::SendCommissioningGetResponse(ot::Coap::Message const&, unsigned short, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[23b]"></a>ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, coap.o(.text._ZN2ot4Coap8CoapBase11SendMessageERNS0_7MessageERKNS_3Ip611MessageInfoEPFvPvP9otMessagePK13otMessageInfo7otErrorES8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSetRequest(ot::MeshCoP::Dataset::Info const&, unsigned char const*, unsigned char, void (*)(otError, void*), void*)
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::SendMessage(ot::Coap::Message&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::SendJoinerEntrust(ot::Ip6::MessageInfo const&)
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSet()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::PerformNextRegistration()
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressSolicit(ot::ThreadStatusTlv::Status)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::SendCommand(ot::Uri, ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::SendServerDataNotification(unsigned short, ot::NetworkData::NetworkData const*)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistrationMessage(otIp6Address const*, unsigned char, unsigned int const*, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
</UL>

<P><STRONG><a name="[813]"></a>ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)</STRONG> (Thumb, 350 bytes, Stack size 96 bytes, coap.o(.text._ZN2ot4Coap8CoapBase11SendMessageERNS0_7MessageERKNS_3Ip611MessageInfoERKNS0_12TxParametersEPFvPvP9otMessagePK13otMessageInfo7otErrorESB_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint32InRange(unsigned int, unsigned int)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::CopyAndEnqueueMessage(ot::Coap::Message const&, unsigned short, ot::Coap::CoapBase::Metadata const&)
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::DequeueMessage(ot::Coap::Message&)
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Finish()
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapSendResponseWithParameters
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapSendRequestWithParameters
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendHeaderResponse(ot::Coap::Code, ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[816]"></a>ot::Coap::CoapBase::InitResponse(ot::Coap::Message*, ot::Coap::Message const&)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, coap.o(.text._ZN2ot4Coap8CoapBase12InitResponseEPNS0_7MessageERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::InitResponse(ot::Coap::Message*, ot::Coap::Message const&) &rArr; ot::Coap::Message::SetPayloadMarker() &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::SetPayloadMarker()
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::SetDefaultResponseHeader(ot::Coap::Message const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityResponseMessage(ot::Coap::Message const&)
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewResponseMessage(ot::Coap::Message const&)
</UL>

<P><STRONG><a name="[24e]"></a>ot::Coap::CoapBase::SendEmptyAck(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, coap.o(.text._ZN2ot4Coap8CoapBase12SendEmptyAckERKNS0_7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::SendEmptyAck(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendHeaderResponse(ot::Coap::Code, ot::Coap::Message const&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendHeaderResponse(ot::Coap::Code, ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::DuaManager::HandleTmf&lang;(ot::Uri)36&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AnnounceBeginServer::HandleTmf&lang;(ot::Uri)10&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)1&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)0&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)3&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::EnergyScanServer::HandleTmf&lang;(ot::Uri)19&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::PanIdQueryServer::HandleTmf&lang;(ot::Uri)26&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)35&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)34&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Client::HandleTmf&lang;(ot::Uri)32&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)5&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[801]"></a>ot::Coap::CoapBase::ClearRequests(ot::Ip6::Address const*)</STRONG> (Thumb, 90 bytes, Stack size 88 bytes, coap.o(.text._ZN2ot4Coap8CoapBase13ClearRequestsEPKNS_3Ip67AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::ClearRequests(ot::Ip6::Address const*) &rArr; ot::Coap::CoapBase::Metadata::ReadFrom(ot::Coap::Message const&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Iterator::Advance()
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::Metadata::ReadFrom(ot::Coap::Message const&)
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::DequeueMessage(ot::Coap::Message&)
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::MessageQueue::begin()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Coap::Stop()
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ClearRequestsAndResponses()
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ClearRequests(ot::Ip6::Address const&)
</UL>

<P><STRONG><a name="[775]"></a>ot::Coap::CoapBase::ClearRequests(ot::Ip6::Address const&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, coap.o(.text._ZN2ot4Coap8CoapBase13ClearRequestsERKNS_3Ip67AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::ClearRequests(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::ClearRequests(ot::Ip6::Address const*) &rArr; ot::Coap::CoapBase::Metadata::ReadFrom(ot::Coap::Message const&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ClearRequests(ot::Ip6::Address const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetRloc16(unsigned short)
</UL>

<P><STRONG><a name="[815]"></a>ot::Coap::CoapBase::DequeueMessage(ot::Coap::Message&)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, coap.o(.text._ZN2ot4Coap8CoapBase14DequeueMessageERNS0_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::DequeueMessage(ot::Coap::Message&) &rArr; ot::Message::Free() &rArr; ot::MessagePool::Free(ot::Message*) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::Dequeue(ot::Message&)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::HandleRetransmissionTimer()
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ProcessReceivedResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::AbortTransaction(void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ClearRequests(ot::Ip6::Address const*)
</UL>

<P><STRONG><a name="[af5]"></a>ot::Coap::CoapBase::RemoveResource(ot::Coap::Resource&)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, coap.o(.text._ZN2ot4Coap8CoapBase14RemoveResourceERNS0_8ResourceE))
<BR><BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapRemoveResource
</UL>

<P><STRONG><a name="[245]"></a>ot::Coap::CoapBase::AbortTransaction(void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)</STRONG> (Thumb, 100 bytes, Stack size 96 bytes, coap.o(.text._ZN2ot4Coap8CoapBase16AbortTransactionEPFvPvP9otMessagePK13otMessageInfo7otErrorES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::AbortTransaction(void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::CoapBase::Metadata::ReadFrom(ot::Coap::Message const&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Iterator::Advance()
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::Metadata::ReadFrom(ot::Coap::Message const&)
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::DequeueMessage(ot::Coap::Message&)
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::MessageQueue::begin()
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::HandleDomainPrefixUpdate(ot::BackboneRouter::Leader::DomainPrefixState)
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::SendJoinerEntrust(ot::Ip6::MessageInfo const&)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::UpdateChildDomainUnicastAddress(ot::Child const&, ot::Mle::ChildDuaState)
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandlePartitionChange()
</UL>

<P><STRONG><a name="[819]"></a>ot::Coap::CoapBase::SendEmptyMessage(ot::Coap::Type, ot::Coap::Message const&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, coap.o(.text._ZN2ot4Coap8CoapBase16SendEmptyMessageENS0_4TypeERKNS0_7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::SendEmptyMessage(ot::Coap::Type, ot::Coap::Message const&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::NewMessage(ot::Message::Settings const&) &rArr; ot::Ip6::Udp::NewMessage(unsigned short, ot::Message::Settings const&) &rArr; ot::Ip6::Ip6::NewMessage(unsigned short, ot::Message::Settings const&) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewMessage(ot::Message::Settings const&)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code)
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Finish()
</UL>
<BR>[Called By]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::Receive(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ProcessReceivedResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[81a]"></a>ot::Coap::CoapBase::FindRelatedRequest(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::Coap::CoapBase::Metadata&)</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, coap.o(.text._ZN2ot4Coap8CoapBase18FindRelatedRequestERKNS0_7MessageERKNS_3Ip611MessageInfoERNS1_8MetadataE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::FindRelatedRequest(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::Coap::CoapBase::Metadata&) &rArr; ot::Coap::CoapBase::Metadata::ReadFrom(ot::Coap::Message const&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::IsTokenEqual(ot::Coap::Message const&) const
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::IsAnycastLocator() const
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Iterator::Advance()
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::Metadata::ReadFrom(ot::Coap::Message const&)
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::MessageQueue::begin()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ProcessReceivedResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[49b]"></a>ot::Coap::CoapBase::NewResponseMessage(ot::Coap::Message const&)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, coap.o(.text._ZN2ot4Coap8CoapBase18NewResponseMessageERKNS0_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::NewResponseMessage(ot::Coap::Message const&) &rArr; ot::Coap::CoapBase::InitResponse(ot::Coap::Message*, ot::Coap::Message const&) &rArr; ot::Coap::Message::SetPayloadMarker() &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewMessage(ot::Message::Settings const&)
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::InitResponse(ot::Coap::Message*, ot::Coap::Message const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)33&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[817]"></a>ot::Coap::CoapBase::SendHeaderResponse(ot::Coap::Code, ot::Coap::Message const&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, coap.o(.text._ZN2ot4Coap8CoapBase18SendHeaderResponseENS0_4CodeERKNS0_7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::SendHeaderResponse(ot::Coap::Code, ot::Coap::Message const&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewMessage(ot::Message::Settings const&)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code)
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::SetTokenFromMessage(ot::Coap::Message const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ProcessReceivedRequest(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendEmptyAck(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[814]"></a>ot::Coap::CoapBase::CopyAndEnqueueMessage(ot::Coap::Message const&, unsigned short, ot::Coap::CoapBase::Metadata const&)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, coap.o(.text._ZN2ot4Coap8CoapBase21CopyAndEnqueueMessageERKNS0_7MessageEtRKNS1_8MetadataE))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::CopyAndEnqueueMessage(ot::Coap::Message const&, unsigned short, ot::Coap::CoapBase::Metadata const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::Enqueue(ot::Message&, ot::MessageQueue::QueuePosition)
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Clone(unsigned short) const
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::FireAtIfEarlier(ot::Time)
</UL>
<BR>[Called By]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
</UL>

<P><STRONG><a name="[81d]"></a>ot::Coap::CoapBase::ProcessReceivedRequest(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 216 bytes, Stack size 64 bytes, coap.o(.text._ZN2ot4Coap8CoapBase22ProcessReceivedRequestERNS0_7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::ProcessReceivedRequest(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendHeaderResponse(ot::Coap::Code, ot::Coap::Message const&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::ReadUriPathOptions(char (&) [33]) const
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendHeaderResponse(ot::Coap::Code, ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Finish()
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::GetMatchedResponseCopy(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::Coap::Message**)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::Receive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[81f]"></a>ot::Coap::CoapBase::ProcessReceivedResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 228 bytes, Stack size 80 bytes, coap.o(.text._ZN2ot4Coap8CoapBase23ProcessReceivedResponseERNS0_7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::ProcessReceivedResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendEmptyMessage(ot::Coap::Type, ot::Coap::Message const&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::NewMessage(ot::Message::Settings const&) &rArr; ot::Ip6::Udp::NewMessage(unsigned short, ot::Message::Settings const&) &rArr; ot::Ip6::Ip6::NewMessage(unsigned short, ot::Message::Settings const&) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::IsTokenEqual(ot::Coap::Message const&) const
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::FindRelatedRequest(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::Coap::CoapBase::Metadata&)
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendEmptyMessage(ot::Coap::Type, ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::DequeueMessage(ot::Coap::Message&)
</UL>
<BR>[Called By]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::Receive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[7ee]"></a>ot::Coap::CoapBase::ClearRequestsAndResponses()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, coap.o(.text._ZN2ot4Coap8CoapBase25ClearRequestsAndResponsesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::ClearRequestsAndResponses() &rArr; ot::Coap::CoapBase::ClearRequests(ot::Ip6::Address const*) &rArr; ot::Coap::CoapBase::Metadata::ReadFrom(ot::Coap::Message const&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ClearRequests(ot::Ip6::Address const*)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::DequeueAndFreeAll()
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::Stop()
</UL>

<P><STRONG><a name="[7b]"></a>ot::Coap::CoapBase::HandleRetransmissionTimer(ot::Timer&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, coap.o(.text._ZN2ot4Coap8CoapBase25HandleRetransmissionTimerERNS_5TimerE))
<BR>[Address Reference Count : 2]<UL><LI> coap.o(.text._ZN2ot4Coap8CoapBaseC2ERNS_8InstanceEPF7otErrorRS1_RNS_7MessageERKNS_3Ip611MessageInfoEE)
<LI> coap.o(.text._ZN2ot4Coap4CoapC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[820]"></a>ot::Coap::CoapBase::HandleRetransmissionTimer()</STRONG> (Thumb, 274 bytes, Stack size 152 bytes, coap.o(.text._ZN2ot4Coap8CoapBase25HandleRetransmissionTimerEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Iterator::Advance()
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendCopy(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::Metadata::ReadFrom(ot::Coap::Message const&)
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::DequeueMessage(ot::Coap::Message&)
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::MessageQueue::begin()
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::FireAt(ot::Time)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[285]"></a>ot::Coap::CoapBase::NewConfirmablePostMessage(ot::Uri)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, coap.o(.text._ZN2ot4Coap8CoapBase25NewConfirmablePostMessageENS_3UriE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::NewConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewMessage(ot::Message::Settings const&)
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri)
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)34&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::SendCommand(ot::Uri, ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistrationMessage(otIp6Address const*, unsigned char, unsigned int const*, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
</UL>

<P><STRONG><a name="[2db]"></a>ot::Coap::CoapBase::NewPriorityResponseMessage(ot::Coap::Message const&)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, coap.o(.text._ZN2ot4Coap8CoapBase26NewPriorityResponseMessageERKNS0_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::NewPriorityResponseMessage(ot::Coap::Message const&) &rArr; ot::Coap::CoapBase::InitResponse(ot::Coap::Message*, ot::Coap::Message const&) &rArr; ot::Coap::Message::SetPayloadMarker() &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewMessage(ot::Message::Settings const&)
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Settings::Settings(ot::Message::LinkSecurityMode, ot::Message::Priority)
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::InitResponse(ot::Coap::Message*, ot::Coap::Message const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendKeepAliveResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendPetitionResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SendJoinerEntrustResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendGetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, unsigned char*, unsigned char) const
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressSolicitResponse(ot::Coap::Message const&, ot::ThreadStatusTlv::Status, ot::Router const*, ot::Ip6::MessageInfo const&)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::SendCommissioningSetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::SendCommissioningGetResponse(ot::Coap::Message const&, unsigned short, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[47d]"></a>ot::Coap::CoapBase::NewNonConfirmablePostMessage(ot::Uri)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, coap.o(.text._ZN2ot4Coap8CoapBase28NewNonConfirmablePostMessageENS_3UriE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::NewNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewMessage(ot::Message::Settings const&)
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri)
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::SendCommand(ot::Uri, ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
</UL>

<P><STRONG><a name="[233]"></a>ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, coap.o(.text._ZN2ot4Coap8CoapBase33NewPriorityConfirmablePostMessageENS_3UriE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewMessage(ot::Message::Settings const&)
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Settings::Settings(ot::Message::LinkSecurityMode, ot::Message::Priority)
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri)
</UL>
<BR>[Called By]<UL><LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendGetRequest(ot::MeshCoP::Dataset::Components const&, unsigned char const*, unsigned char, otIp6Address const*) const
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSetRequest(ot::MeshCoP::Dataset::Info const&, unsigned char const*, unsigned char, void (*)(otError, void*), void*)
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressQueryResponse(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, unsigned int const*, ot::Ip6::Address const&)
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::PrepareJoinerEntrustMessage()
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::PrepareJoinerFinalizeMessage(char const*, char const*, char const*, char const*, char const*)
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendDatasetChanged(ot::Ip6::Address const&)
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSet()
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::SendAddressNotification(ot::Ip6::Address&, ot::ThreadStatusTlv::DuaStatus, ot::Child const&)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::PerformNextRegistration()
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressSolicit(ot::ThreadStatusTlv::Status)
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressRelease()
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::EnergyScanServer::HandleTmf&lang;(ot::Uri)19&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PanIdQueryServer::SendConflict()
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::SendServerDataNotification(unsigned short, ot::NetworkData::NetworkData const*)
</UL>

<P><STRONG><a name="[446]"></a>ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, coap.o(.text._ZN2ot4Coap8CoapBase36NewPriorityNonConfirmablePostMessageENS_3UriE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewMessage(ot::Message::Settings const&)
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Settings::Settings(ot::Message::LinkSecurityMode, ot::Message::Priority)
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri)
</UL>
<BR>[Called By]<UL><LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&)
</UL>

<P><STRONG><a name="[7ec]"></a>ot::Coap::CoapBase::Receive(ot::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, coap.o(.text._ZN2ot4Coap8CoapBase7ReceiveERNS_7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::Receive(ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::ProcessReceivedRequest(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendHeaderResponse(ot::Coap::Code, ot::Coap::Message const&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ProcessReceivedResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ProcessReceivedRequest(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendEmptyMessage(ot::Coap::Type, ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::ParseHeader()
</UL>
<BR>[Called By]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::HandleDtlsReceive(unsigned char*, unsigned short)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Coap::HandleUdpReceive(void*, otMessage*, otMessageInfo const*)
</UL>

<P><STRONG><a name="[818]"></a>ot::Coap::CoapBase::Metadata::ReadFrom(ot::Coap::Message const&)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, coap.o(.text._ZN2ot4Coap8CoapBase8Metadata8ReadFromERKNS0_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::Coap::CoapBase::Metadata::ReadFrom(ot::Coap::Message const&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::HandleRetransmissionTimer()
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::FindRelatedRequest(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::Coap::CoapBase::Metadata&)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::AbortTransaction(void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ClearRequests(ot::Ip6::Address const*)
</UL>

<P><STRONG><a name="[821]"></a>ot::Coap::CoapBase::SendCopy(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, coap.o(.text._ZN2ot4Coap8CoapBase8SendCopyERKNS0_7MessageERKNS_3Ip611MessageInfoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Clone(unsigned short) const
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::HandleRetransmissionTimer()
</UL>

<P><STRONG><a name="[822]"></a>ot::Coap::CoapBase::CoapBase(ot::Instance&, otError (*)(ot::Coap::CoapBase&, ot::Message&, ot::Ip6::MessageInfo const&))</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, coap.o(.text._ZN2ot4Coap8CoapBaseC2ERNS_8InstanceEPF7otErrorRS1_RNS_7MessageERKNS_3Ip611MessageInfoEE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::Manager::NonCryptoGetUint32()
</UL>

<P><STRONG><a name="[7f7]"></a>ot::Coap::CoapBase::CoapBase__sub_object(ot::Instance&, otError (*)(ot::Coap::CoapBase&, ot::Message&, ot::Ip6::MessageInfo const&))</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, coap.o(.text._ZN2ot4Coap8CoapBaseC2ERNS_8InstanceEPF7otErrorRS1_RNS_7MessageERKNS_3Ip611MessageInfoEE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::CoapSecure(ot::Instance&, bool)
</UL>

<P><STRONG><a name="[81]"></a>ot::Heap::Free(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, heap.o(.text._ZN2ot4Heap4FreeEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ot::Heap::Free(void*) &rArr; otPlatFree &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbedtls.o(.text._ZN2ot6Crypto7MbedTlsC2Ev)
</UL>
<P><STRONG><a name="[80]"></a>ot::Heap::CAlloc(unsigned int, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, heap.o(.text._ZN2ot4Heap6CAllocEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = ot::Heap::CAlloc(unsigned int, unsigned int) &rArr; otPlatCAlloc &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbedtls.o(.text._ZN2ot6Crypto7MbedTlsC2Ev)
</UL>
<P><STRONG><a name="[7ce]"></a>ot::Child::AddIp6Address(ot::Ip6::Address const&)</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, topology.o(.text._ZN2ot5Child13AddIp6AddressERKNS_3Ip67AddressE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsUnspecified() const
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::IsUnspecified() const
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsMeshLocalAddress(ot::Ip6::Address const&) const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
</UL>

<P><STRONG><a name="[214]"></a>ot::Child::SetDeviceMode(ot::Mle::DeviceMode)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, topology.o(.text._ZN2ot5Child13SetDeviceModeENS_3Mle10DeviceModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = ot::Child::SetDeviceMode(ot::Mle::DeviceMode) &rArr; ot::NeighborTable::Signal(ot::NeighborTable::Event, ot::Neighbor const&) &rArr; ot::DuaManager::UpdateChildDomainUnicastAddress(ot::Child const&, ot::Mle::ChildDuaState) &rArr; ot::DuaManager::UpdateCheckDelay(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::Signal(ot::NeighborTable::Event, ot::Neighbor const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Restore()
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleParentRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[279]"></a>ot::Child::AddressIterator::Update()</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, topology.o(.text._ZN2ot5Child15AddressIterator6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ot::Child::AddressIterator::Update() &rArr; ot::Child::GetMeshLocalIp6Address(ot::Ip6::Address&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsUnspecified() const
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::MatchesFilter(ot::Ip6::Address::TypeFilter) const
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::GetMeshLocalIp6Address(ot::Ip6::Address&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetChildNextIp6Address
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::UpdateProxiedSubscriptions(ot::Child&, ot::Ip6::Address const*, unsigned short)
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Child&)
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::HasMlrRegisteredAddress(ot::Ip6::Address const&) const
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::FinishMulticastListenerRegistration(bool, ot::Ip6::Address const*, unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistration()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SetMulticastAddressMlrState(ot::MlrState, ot::MlrState)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::LogMulticastAddresses()
</UL>

<P><STRONG><a name="[22d]"></a>ot::Child::RemoveIp6Address(ot::Ip6::Address const&)</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, topology.o(.text._ZN2ot5Child16RemoveIp6AddressERKNS_3Ip67AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ot::Child::RemoveIp6Address(ot::Ip6::Address const&) &rArr; ot::Mle::Mle::IsMeshLocalAddress(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsUnspecified() const
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsMeshLocalAddress(ot::Ip6::Address const&) const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::ProcessDuaResponse(ot::Coap::Message&)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)0&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
</UL>

<P><STRONG><a name="[7cc]"></a>ot::Child::ClearIp6Addresses()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, topology.o(.text._ZN2ot5Child17ClearIp6AddressesEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
</UL>

<P><STRONG><a name="[7ae]"></a>ot::Child::GenerateChallenge()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, topology.o(.text._ZN2ot5Child17GenerateChallengeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = ot::Child::GenerateChallenge() &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoRandomGet
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendParentResponse(ot::Child*, ot::Mle::Mle::Challenge const&, bool)
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child&)
</UL>

<P><STRONG><a name="[281]"></a>ot::Child::SetAddressMlrState(ot::Ip6::Address const&, ot::MlrState)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, topology.o(.text._ZN2ot5Child18SetAddressMlrStateERKNS_3Ip67AddressENS_8MlrStateE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ot::Child::SetAddressMlrState(ot::Ip6::Address const&, ot::MlrState) &rArr; ot::BitVector&lang;(unsigned short)3&rang;::Set(unsigned short, bool) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BitVector&lang;(unsigned short)3&rang;::Set(unsigned short, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::UpdateProxiedSubscriptions(ot::Child&, ot::Ip6::Address const*, unsigned short)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::FinishMulticastListenerRegistration(bool, ot::Ip6::Address const*, unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistration()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SetMulticastAddressMlrState(ot::MlrState, ot::MlrState)
</UL>

<P><STRONG><a name="[208]"></a>ot::Child::Info::SetFrom(ot::Child const&)</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, topology.o(.text._ZN2ot5Child4Info7SetFromERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ot::Child::Info::SetFrom(ot::Child const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RssAverager::GetAverage() const
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::GetChildInfoByIndex(unsigned short, ot::Child::Info&)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::GetChildInfoById(unsigned short, ot::Child::Info&)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::Signal(ot::NeighborTable::Event, ot::Neighbor const&)
</UL>

<P><STRONG><a name="[205]"></a>ot::Child::Clear()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, topology.o(.text._ZN2ot5Child5ClearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Child::Clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::ChildTable(ot::Instance&)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Restore()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::GetNewChild()
</UL>

<P><STRONG><a name="[89c]"></a>ot::Crc16::Update(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, crc16.o(.text._ZN2ot5Crc166UpdateEh))
<BR><BR>[Called By]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SteeringData::CalculateHashBitIndexes(ot::Mac::ExtAddress const&, ot::MeshCoP::SteeringData::HashBitIndexes&)
</UL>

<P><STRONG><a name="[89b]"></a>ot::Crc16::Crc16(ot::Crc16::Polynomial)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, crc16.o(.text._ZN2ot5Crc16C2ENS0_10PolynomialE))
<BR><BR>[Called By]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SteeringData::CalculateHashBitIndexes(ot::Mac::ExtAddress const&, ot::MeshCoP::SteeringData::HashBitIndexes&)
</UL>

<P><STRONG><a name="[be8]"></a>ot::Crc16::Crc16__sub_object(ot::Crc16::Polynomial)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, crc16.o(.text._ZN2ot5Crc16C2ENS0_10PolynomialE), UNUSED)

<P><STRONG><a name="[6d0]"></a>ot::Radio::SetShortAddress(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, radio.o(.text._ZN2ot5Radio15SetShortAddressEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ot::Radio::SetShortAddress(unsigned short) &rArr; otPlatRadioSetShortAddress &rArr; lmac15p4_address_filter_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSetShortAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetShortAddress(unsigned short)
</UL>

<P><STRONG><a name="[6cd]"></a>ot::Radio::SetExtendedAddress(ot::Mac::ExtAddress const&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, radio.o(.text._ZN2ot5Radio18SetExtendedAddressERKNS_3Mac10ExtAddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ot::Radio::SetExtendedAddress(ot::Mac::ExtAddress const&) &rArr; otPlatRadioSetExtendedAddress &rArr; lmac15p4_address_filter_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSetExtendedAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetExtAddress(ot::Mac::ExtAddress const&)
</UL>

<P><STRONG><a name="[6cc]"></a>ot::Radio::Transmit(ot::Mac::TxFrame&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, radio.o(.text._ZN2ot5Radio8TransmitERNS_3Mac7TxFrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ot::Radio::Transmit(ot::Mac::TxFrame&) &rArr; otPlatRadioTransmit &rArr; lmac15p4_tx_data_send &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioTransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::BeginTransmit()
</UL>

<P><STRONG><a name="[82a]"></a>ot::Radio::Callbacks::HandleReceiveDone(ot::Mac::RxFrame*, otError)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, radio_callbacks.o(.text._ZN2ot5Radio9Callbacks17HandleReceiveDoneEPNS_3Mac7RxFrameE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264 + Unknown Stack Size
<LI>Call Chain = ot::Radio::Callbacks::HandleReceiveDone(ot::Mac::RxFrame*, otError) &rArr; ot::Mac::SubMac::HandleReceiveDone(ot::Mac::RxFrame*, otError) &rArr; ot::Mac::SubMac::Callbacks::ReceiveDone(ot::Mac::RxFrame*, otError) &rArr; ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError) &rArr; ot::MeshForwarder::HandleReceivedFrame(ot::Mac::RxFrame&) &rArr; ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&) &rArr; ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&) &rArr; ot::MeshForwarder::UpdateRoutes(ot::FrameData const&, ot::Mac::Addresses const&) &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleReceiveDone(ot::Mac::RxFrame*, otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioReceiveDone
</UL>

<P><STRONG><a name="[82b]"></a>ot::Radio::Callbacks::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, radio_callbacks.o(.text._ZN2ot5Radio9Callbacks18HandleTransmitDoneERNS_3Mac7TxFrameEPNS2_7RxFrameE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856 + Unknown Stack Size
<LI>Call Chain = ot::Radio::Callbacks::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr; ot::Mac::SubMac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr; ot::Mac::SubMac::Callbacks::TransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr; ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr;  ot::Mac::Links::Send() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioTxDone
</UL>

<P><STRONG><a name="[82c]"></a>ot::Radio::Callbacks::HandleEnergyScanDone(signed char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, radio_callbacks.o(.text._ZN2ot5Radio9Callbacks20HandleEnergyScanDoneEa))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ot::Radio::Callbacks::HandleEnergyScanDone(signed char) &rArr; ot::Mac::SubMac::HandleEnergyScanDone(signed char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleEnergyScanDone(signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioEnergyScanDone
</UL>

<P><STRONG><a name="[82d]"></a>ot::Radio::Callbacks::HandleTransmitStarted(ot::Mac::TxFrame&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, radio_callbacks.o(.text._ZN2ot5Radio9Callbacks21HandleTransmitStartedERNS_3Mac7TxFrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::Radio::Callbacks::HandleTransmitStarted(ot::Mac::TxFrame&) &rArr; ot::Mac::SubMac::HandleTransmitStarted(ot::Mac::TxFrame&) &rArr; ot::TimerMilli::Start(unsigned int) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleTransmitStarted(ot::Mac::TxFrame&)
</UL>
<BR>[Called By]<UL><LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioTxStarted
</UL>

<P><STRONG><a name="[82e]"></a>ot::Timer::Scheduler::ProcessTimers(ot::Timer::Scheduler::AlarmApi const&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timer.o(.text._ZN2ot5Timer9Scheduler13ProcessTimersERKNS1_8AlarmApiE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ot::Timer::Scheduler::ProcessTimers(ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliFired
</UL>

<P><STRONG><a name="[297]"></a>ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&)</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, timer.o(.text._ZN2ot5Timer9Scheduler3AddERS0_RKNS1_8AlarmApiE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::FireAt(ot::Time)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::FireAtIfEarlier(ot::Time)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::StartAt(ot::Time, unsigned int)
</UL>

<P><STRONG><a name="[298]"></a>ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, timer.o(.text._ZN2ot5Timer9Scheduler6RemoveERS0_RKNS1_8AlarmApiE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&)
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Timer::Scheduler::ProcessTimers(ot::Timer::Scheduler::AlarmApi const&)
</UL>

<P><STRONG><a name="[82f]"></a>ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, timer.o(.text._ZN2ot5Timer9Scheduler8SetAlarmERKNS1_8AlarmApiE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&)
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Timer::Scheduler::ProcessTimers(ot::Timer::Scheduler::AlarmApi const&)
</UL>

<P><STRONG><a name="[342]"></a>ot::Utils::PingSender::HandleTimer()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ping_sender.o(.text._ZN2ot5Utils10PingSender11HandleTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = ot::Utils::PingSender::HandleTimer() &rArr; ot::Utils::PingSender::SendPing() &rArr; ot::Ip6::Icmp::SendEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&, unsigned short) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::PingSender::SendPing()
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilliIn&lang;ot::Utils::PingSender, &(ot::Utils::PingSender::HandleTimer())&rang;::HandleTimer(ot::Timer&)
</UL>

<P><STRONG><a name="[7f]"></a>ot::Utils::PingSender::HandleIcmpReceive(void*, otMessage*, otMessageInfo const*, otIcmp6Header const*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ping_sender.o(.text._ZN2ot5Utils10PingSender17HandleIcmpReceiveEPvP9otMessagePK13otMessageInfoPK13otIcmp6Header))
<BR>[Address Reference Count : 1]<UL><LI> ping_sender.o(.text._ZN2ot5Utils10PingSenderC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[831]"></a>ot::Utils::PingSender::HandleIcmpReceive(ot::Message const&, ot::Ip6::MessageInfo const&, ot::Ip6::Icmp::Header const&)</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, ping_sender.o(.text._ZN2ot5Utils10PingSender17HandleIcmpReceiveERKNS_7MessageERKNS_3Ip611MessageInfoERKNS5_4Icmp6HeaderE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
</UL>

<P><STRONG><a name="[832]"></a>ot::Utils::PingSender::Ping(ot::Utils::PingSender::Config const&)</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, ping_sender.o(.text._ZN2ot5Utils10PingSender4PingERKNS1_6ConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + Unknown Stack Size
<LI>Call Chain = ot::Utils::PingSender::Ping(ot::Utils::PingSender::Config const&) &rArr; ot::Utils::PingSender::SendPing() &rArr; ot::Ip6::Icmp::SendEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&, unsigned short) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::PingSender::SendPing()
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPingSenderPing
</UL>

<P><STRONG><a name="[833]"></a>ot::Utils::PingSender::Stop()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ping_sender.o(.text._ZN2ot5Utils10PingSender4StopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ot::Utils::PingSender::Stop() &rArr; ot::TimerMilli::Stop() &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPingSenderStop
</UL>

<P><STRONG><a name="[830]"></a>ot::Utils::PingSender::SendPing()</STRONG> (Thumb, 190 bytes, Stack size 72 bytes, ping_sender.o(.text._ZN2ot5Utils10PingSender8SendPingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = ot::Utils::PingSender::SendPing() &rArr; ot::Ip6::Icmp::SendEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&, unsigned short) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetLength(unsigned short)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::SendEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&, unsigned short)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::NewMessage(unsigned short)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::PingSender::Ping(ot::Utils::PingSender::Config const&)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::PingSender::HandleTimer()
</UL>

<P><STRONG><a name="[834]"></a>ot::Utils::PingSender::PingSender(ot::Instance&)</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ping_sender.o(.text._ZN2ot5Utils10PingSenderC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::RegisterHandler(ot::Ip6::Icmp::Handler&)
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[be9]"></a>ot::Utils::PingSender::PingSender__sub_object(ot::Instance&)</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ping_sender.o(.text._ZN2ot5Utils10PingSenderC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[53c]"></a>ot::Utils::CmdLineParser::ParseAsBool(char const*, bool&)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, parse_cmdline.o(.text._ZN2ot5Utils13CmdLineParser11ParseAsBoolEPKcRb))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ot::Utils::CmdLineParser::ParseAsBool(char const*, bool&) &rArr; ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1495474164342561146ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4f6]"></a>ot::Utils::CmdLineParser::ParseAsInt8(char const*, signed char&)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, parse_cmdline.o(.text._ZN2ot5Utils13CmdLineParser11ParseAsInt8EPKcRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ot::Utils::CmdLineParser::ParseAsInt8(char const*, signed char&) &rArr; ot::Utils::CmdLineParser::ParseAsInt32(char const*, int&) &rArr; ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
</UL>
<BR>[Calls]<UL><LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsInt32(char const*, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7113582ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;31452791250048641ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;16244709273642014994ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1495474164342561146ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;11512677311266953430ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterAddress(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterRss(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[835]"></a>ot::Utils::CmdLineParser::ParseAsInt32(char const*, int&)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, parse_cmdline.o(.text._ZN2ot5Utils13CmdLineParser12ParseAsInt32EPKcRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ot::Utils::CmdLineParser::ParseAsInt32(char const*, int&) &rArr; ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsInt8(char const*, signed char&)
</UL>

<P><STRONG><a name="[4f4]"></a>ot::Utils::CmdLineParser::ParseAsUint8(char const*, unsigned char&)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, parse_cmdline.o(.text._ZN2ot5Utils13CmdLineParser12ParseAsUint8EPKcRh))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ot::Utils::CmdLineParser::ParseAsUint8(char const*, unsigned char&) &rArr; ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Coap::Process&lang;16542423019117308726ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8228328825147909356ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8020460690342608375ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;6725988ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;6462319ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;5255620471931187573ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;5126223071761830632ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;5021455550522604481ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;3200263406431374201ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;30907139684939619ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;29803101196888419ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1830284035ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1715061262ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;15712178869698907848ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;15073379119283750636ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;14765126478273032447ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;13738210911291060331ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;10320315516056133487ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ParseJoinerDiscerner(ot::Utils::CmdLineParser::Arg&, otJoinerDiscerner&)
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterRss(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4ce]"></a>ot::Utils::CmdLineParser::ParseAsUint16(char const*, unsigned short&)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, parse_cmdline.o(.text._ZN2ot5Utils13CmdLineParser13ParseAsUint16EPKcRt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ot::Utils::CmdLineParser::ParseAsUint16(char const*, unsigned short&) &rArr; ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;32000442710786154ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;1665317123ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;1665316120ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;424573284472ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;29803101196888419ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;12771032504430052662ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Dataset::ParseSecurityPolicy(otSecurityPolicy&, ot::Utils::CmdLineParser::Arg*&)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8440012427400342744ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;807264858141456911ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8059602322220575993ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;424622705244ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;424573284472ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;30913625955023990ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1830284035ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1715061262ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1366262738558941672ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;123344230057719ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[530]"></a>ot::Utils::CmdLineParser::ParseAsUint32(char const*, unsigned int&)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, parse_cmdline.o(.text._ZN2ot5Utils13CmdLineParser13ParseAsUint32EPKcRj))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ot::Utils::CmdLineParser::ParseAsUint32(char const*, unsigned int&) &rArr; ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;513233767555ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;12771032504430052662ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;11734141454226389327ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Coap::Process&lang;16542423019117308726ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8846784157991210846ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;5345021259271145584ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;303229889220393947ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1998604769390126437ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;16863212019509908256ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;14182804244553304960ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[503]"></a>ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)</STRONG> (Thumb, 214 bytes, Stack size 28 bytes, parse_cmdline.o(.text._ZN2ot5Utils13CmdLineParser13ParseAsUint64EPKcRy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ot::Utils::CmdLineParser::ParseAsUint64(char const*, unsigned long long&)
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint32(char const*, unsigned int&)
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint16(char const*, unsigned short&)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsUint8(char const*, unsigned char&)
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsInt32(char const*, int&)
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsBool(char const*, bool&)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;17991946006187835024ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;13154242556027051009ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;12771032504430052662ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ParseJoinerDiscerner(ot::Utils::CmdLineParser::Arg&, otJoinerDiscerner&)
</UL>

<P><STRONG><a name="[4fa]"></a>ot::Utils::CmdLineParser::ParseAsHexString(char const*, unsigned char*, unsigned short)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, parse_cmdline.o(.text._ZN2ot5Utils13CmdLineParser16ParseAsHexStringEPKcPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ot::Utils::CmdLineParser::ParseAsHexString(char const*, unsigned char*, unsigned short) &rArr; ot::Utils::CmdLineParser::ParseHexString(char const*&, unsigned short&, unsigned char*, ot::Utils::CmdLineParser::HexStringParseMode)
</UL>
<BR>[Calls]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseHexString(char const*&, unsigned short&, unsigned char*, ot::Utils::CmdLineParser::HexStringParseMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::NetworkData::Process&lang;3328099188798998309ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;7040008844819482601ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;2882870027264844783ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;1648543237ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;12771032504430052662ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7040008844819482601ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;424572962149ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;31451632477498226ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;2882870027264844783ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1681701387ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1648543237ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterAddress(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterRss(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[605]"></a>ot::Utils::CmdLineParser::ParseAsHexString(char const*, unsigned short&, unsigned char*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, parse_cmdline.o(.text._ZN2ot5Utils13CmdLineParser16ParseAsHexStringEPKcRtPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ot::Utils::CmdLineParser::ParseAsHexString(char const*, unsigned short&, unsigned char*) &rArr; ot::Utils::CmdLineParser::ParseHexString(char const*&, unsigned short&, unsigned char*, ot::Utils::CmdLineParser::HexStringParseMode)
</UL>
<BR>[Calls]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseHexString(char const*&, unsigned short&, unsigned char*, ot::Utils::CmdLineParser::HexStringParseMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;7568770ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;1930295280ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;12771032504430052662ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;12771032453691045162ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4ed]"></a>ot::Utils::CmdLineParser::ParseAsIp4Address(char const*, otIp4Address&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, parse_cmdline.o(.text._ZN2ot5Utils13CmdLineParser17ParseAsIp4AddressEPKcR12otIp4Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::Utils::CmdLineParser::ParseAsIp4Address(char const*, otIp4Address&) &rArr; otIp4AddressFromString &rArr; ot::Ip4::Address::FromString(char const*, char)
</UL>
<BR>[Calls]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp4AddressFromString
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ParseToIp6Address(otInstance*, ot::Utils::CmdLineParser::Arg const&, otIp6Address&, bool&)
</UL>

<P><STRONG><a name="[4d3]"></a>ot::Utils::CmdLineParser::ParseAsIp6Address(char const*, otIp6Address&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, parse_cmdline.o(.text._ZN2ot5Utils13CmdLineParser17ParseAsIp6AddressEPKcR12otIp6Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ot::Utils::CmdLineParser::ParseAsIp6Address(char const*, otIp6Address&) &rArr; otIp6AddressFromString &rArr; ot::Ip6::Address::FromString(char const*) &rArr; ot::Ip4::Address::FromString(char const*, char)
</UL>
<BR>[Calls]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6AddressFromString
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;1665317123ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;13879157579010930576ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;12771032504430052662ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;12771032453691045162ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::ProcessRequest(ot::Utils::CmdLineParser::Arg*, otCoapCode)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;5255620471931187573ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;31451632477041015ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1715061262ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1681701387ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;123339735204840ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ParseToIp6Address(otInstance*, ot::Utils::CmdLineParser::Arg const&, otIp6Address&, bool&)
</UL>

<P><STRONG><a name="[4c5]"></a>ot::Utils::CmdLineParser::ParseAsHexStringSegment(char const*&, unsigned short&, unsigned char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, parse_cmdline.o(.text._ZN2ot5Utils13CmdLineParser23ParseAsHexStringSegmentERPKcRtPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::Utils::CmdLineParser::ParseAsHexStringSegment(char const*&, unsigned short&, unsigned char*) &rArr; ot::Utils::CmdLineParser::ParseHexString(char const*&, unsigned short&, unsigned char*, ot::Utils::CmdLineParser::HexStringParseMode)
</UL>
<BR>[Calls]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseHexString(char const*&, unsigned short&, unsigned char*, ot::Utils::CmdLineParser::HexStringParseMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::UdpExample::PrepareHexStringPayload(otMessage&, char const*)
</UL>

<P><STRONG><a name="[4fe]"></a>ot::Utils::CmdLineParser::Arg::GetArgsLength(ot::Utils::CmdLineParser::Arg*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, parse_cmdline.o(.text._ZN2ot5Utils13CmdLineParser3Arg13GetArgsLengthEPS2_))
<BR><BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessUserCommands(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4fd]"></a>ot::Utils::CmdLineParser::Arg::CopyArgsToStringArray(ot::Utils::CmdLineParser::Arg*, char**)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, parse_cmdline.o(.text._ZN2ot5Utils13CmdLineParser3Arg21CopyArgsToStringArrayEPS2_PPc))
<BR><BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessUserCommands(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4e2]"></a>ot::Utils::CmdLineParser::ParseCmd(char*, ot::Utils::CmdLineParser::Arg*, unsigned char)</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, parse_cmdline.o(.text._ZN2ot5Utils13CmdLineParser8ParseCmdEPcPNS1_3ArgEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ot::Utils::CmdLineParser::ParseCmd(char*, ot::Utils::CmdLineParser::Arg*, unsigned char) &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessLine(char*)
</UL>

<P><STRONG><a name="[839]"></a>ot::Utils::Slaac::HandleNotifierEvents(ot::Events)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, slaac_address.o(.text._ZN2ot5Utils5Slaac20HandleNotifierEventsENS_6EventsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896 + Unknown Stack Size
<LI>Call Chain = ot::Utils::Slaac::HandleNotifierEvents(ot::Events) &rArr; ot::Utils::Slaac::Update(unsigned char) &rArr; ot::Utils::Slaac::GenerateIid(ot::Ip6::Netif::UnicastAddress&, unsigned char*, unsigned char, unsigned char*) const &rArr; ot::Utils::Slaac::GetIidSecretKey(ot::Utils::Slaac::IidSecretKey&) const &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::Update(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::EmitEvents()
</UL>

<P><STRONG><a name="[83b]"></a>ot::Utils::Slaac::DoesConfigMatchNetifAddr(ot::NetworkData::OnMeshPrefixConfig const&, ot::Ip6::Netif::UnicastAddress const&)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, slaac_address.o(.text._ZN2ot5Utils5Slaac24DoesConfigMatchNetifAddrERKNS_11NetworkData18OnMeshPrefixConfigERKNS_3Ip65Netif14UnicastAddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ot::Utils::Slaac::DoesConfigMatchNetifAddr(ot::NetworkData::OnMeshPrefixConfig const&, ot::Ip6::Netif::UnicastAddress const&) &rArr; ot::Ip6::Address::MatchesPrefix(ot::Ip6::Prefix const&) const &rArr; ot::Ip6::Prefix::MatchLength(unsigned char const*, unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::MatchesPrefix(ot::Ip6::Prefix const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::Update(unsigned char)
</UL>

<P><STRONG><a name="[83a]"></a>ot::Utils::Slaac::Update(unsigned char)</STRONG> (Thumb, 468 bytes, Stack size 128 bytes, slaac_address.o(.text._ZN2ot5Utils5Slaac6UpdateEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896 + Unknown Stack Size
<LI>Call Chain = ot::Utils::Slaac::Update(unsigned char) &rArr; ot::Utils::Slaac::GenerateIid(ot::Ip6::Netif::UnicastAddress&, unsigned char*, unsigned char, unsigned char*) const &rArr; ot::Utils::Slaac::GetIidSecretKey(ot::Utils::Slaac::IidSecretKey&) const &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::GetNextOnMeshPrefix(unsigned int&, ot::NetworkData::OnMeshPrefixConfig&) const
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString() const
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::RemoveUnicastAddress(ot::Ip6::Netif::UnicastAddress const&)
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::AddUnicastAddress(ot::Ip6::Netif::UnicastAddress&)
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::UnicastAddress::InitAsSlaacOrigin(unsigned char, bool)
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetPrefix(ot::Ip6::Prefix const&)
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::GenerateIid(ot::Ip6::Netif::UnicastAddress&, unsigned char*, unsigned char, unsigned char*) const
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::DoesConfigMatchNetifAddr(ot::NetworkData::OnMeshPrefixConfig const&, ot::Ip6::Netif::UnicastAddress const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::HandleNotifierEvents(ot::Events)
</UL>

<P><STRONG><a name="[83e]"></a>ot::Utils::Slaac::Slaac(ot::Instance&)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, slaac_address.o(.text._ZN2ot5Utils5SlaacC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bea]"></a>ot::Utils::Slaac::Slaac__sub_object(ot::Instance&)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, slaac_address.o(.text._ZN2ot5Utils5SlaacC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[83f]"></a>ot::Crypto::HmacSha256::Start(ot::Crypto::Key const&)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hmac_sha256.o(.text._ZN2ot6Crypto10HmacSha2565StartERKNS0_3KeyE))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = ot::Crypto::HmacSha256::Start(ot::Crypto::Key const&) &rArr; otPlatCryptoHmacSha256Start &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoHmacSha256Start
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::ComputeKeys(unsigned int, ot::KeyManager::HashKeys&) const
</UL>

<P><STRONG><a name="[841]"></a>ot::Crypto::HmacSha256::Finish(ot::Crypto::Sha256::Hash&)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hmac_sha256.o(.text._ZN2ot6Crypto10HmacSha2566FinishERNS0_6Sha2564HashE))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ot::Crypto::HmacSha256::Finish(ot::Crypto::Sha256::Hash&) &rArr; otPlatCryptoHmacSha256Finish &rArr; mbedtls_md_hmac_finish &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoHmacSha256Finish
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::ComputeKeys(unsigned int, ot::KeyManager::HashKeys&) const
</UL>

<P><STRONG><a name="[843]"></a>ot::Crypto::HmacSha256::Update(void const*, unsigned short)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hmac_sha256.o(.text._ZN2ot6Crypto10HmacSha2566UpdateEPKvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = ot::Crypto::HmacSha256::Update(void const*, unsigned short) &rArr; otPlatCryptoHmacSha256Update &rArr; mbedtls_md_hmac_update &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoHmacSha256Update
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::ComputeKeys(unsigned int, ot::KeyManager::HashKeys&) const
</UL>

<P><STRONG><a name="[845]"></a>ot::Crypto::HmacSha256::HmacSha256()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hmac_sha256.o(.text._ZN2ot6Crypto10HmacSha256C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ot::Crypto::HmacSha256::HmacSha256() &rArr; otPlatCryptoHmacSha256Init &rArr; mbedtls_md_setup &rArr; mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoHmacSha256Init
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::ComputeKeys(unsigned int, ot::KeyManager::HashKeys&) const
</UL>

<P><STRONG><a name="[beb]"></a>ot::Crypto::HmacSha256::HmacSha256__sub_object()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hmac_sha256.o(.text._ZN2ot6Crypto10HmacSha256C2Ev), UNUSED)

<P><STRONG><a name="[847]"></a>ot::Crypto::HmacSha256::~HmacSha256()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hmac_sha256.o(.text._ZN2ot6Crypto10HmacSha256D2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::Crypto::HmacSha256::~HmacSha256() &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoHmacSha256Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::ComputeKeys(unsigned int, ot::KeyManager::HashKeys&) const
</UL>

<P><STRONG><a name="[bec]"></a>ot::Crypto::HmacSha256::~HmacSha256__sub_object()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hmac_sha256.o(.text._ZN2ot6Crypto10HmacSha256D2Ev), UNUSED)

<P><STRONG><a name="[b09]"></a>ot::Crypto::LiteralKey::LiteralKey(ot::Crypto::Key const&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, storage.o(.text._ZN2ot6Crypto10LiteralKeyC2ERKNS0_3KeyE))
<BR><BR>[Called By]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoHmacSha256Start
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoAesSetKey
</UL>

<P><STRONG><a name="[bed]"></a>ot::Crypto::LiteralKey::LiteralKey__sub_object(ot::Crypto::Key const&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, storage.o(.text._ZN2ot6Crypto10LiteralKeyC2ERKNS0_3KeyE), UNUSED)

<P><STRONG><a name="[6e7]"></a>ot::Crypto::AesCcm::GenerateNonce(ot::Mac::ExtAddress const&, unsigned int, unsigned char, unsigned char*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, aes_ccm.o(.text._ZN2ot6Crypto6AesCcm13GenerateNonceERKNS_3Mac10ExtAddressEjhPh))
<BR><BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::TxFrame::ProcessTransmitAesCcm(ot::Mac::ExtAddress const&)
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::RxFrame::ProcessReceiveAesCcm(ot::Mac::ExtAddress const&, ot::Mac::KeyMaterial const&)
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&)
</UL>

<P><STRONG><a name="[6e9]"></a>ot::Crypto::AesCcm::Init(unsigned int, unsigned int, unsigned char, void const*, unsigned char)</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, aes_ccm.o(.text._ZN2ot6Crypto6AesCcm4InitEjjhPKvh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ot::Crypto::AesCcm::Init(unsigned int, unsigned int, unsigned char, void const*, unsigned char) &rArr; ot::Crypto::AesEcb::Encrypt(unsigned char const*, unsigned char*) &rArr; otPlatCryptoAesEncrypt &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesEcb::Encrypt(unsigned char const*, unsigned char*)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::TxFrame::ProcessTransmitAesCcm(ot::Mac::ExtAddress const&)
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::RxFrame::ProcessReceiveAesCcm(ot::Mac::ExtAddress const&, ot::Mac::KeyMaterial const&)
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&)
</UL>

<P><STRONG><a name="[6ea]"></a>ot::Crypto::AesCcm::Header(void const*, unsigned int)</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, aes_ccm.o(.text._ZN2ot6Crypto6AesCcm6HeaderEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = ot::Crypto::AesCcm::Header(void const*, unsigned int) &rArr; ot::Crypto::AesEcb::Encrypt(unsigned char const*, unsigned char*) &rArr; otPlatCryptoAesEncrypt &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesEcb::Encrypt(unsigned char const*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::TxFrame::ProcessTransmitAesCcm(ot::Mac::ExtAddress const&)
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::RxFrame::ProcessReceiveAesCcm(ot::Mac::ExtAddress const&, ot::Mac::KeyMaterial const&)
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&)
</UL>

<P><STRONG><a name="[6e8]"></a>ot::Crypto::AesCcm::SetKey(ot::Mac::KeyMaterial const&)</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, aes_ccm.o(.text._ZN2ot6Crypto6AesCcm6SetKeyERKNS_3Mac11KeyMaterialE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::Crypto::AesCcm::SetKey(ot::Mac::KeyMaterial const&) &rArr; ot::Crypto::AesEcb::SetKey(ot::Crypto::Key const&) &rArr; otPlatCryptoAesSetKey &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesEcb::SetKey(ot::Crypto::Key const&)
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::KeyMaterial::ConvertToCryptoKey(ot::Crypto::Key&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::TxFrame::ProcessTransmitAesCcm(ot::Mac::ExtAddress const&)
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::RxFrame::ProcessReceiveAesCcm(ot::Mac::ExtAddress const&, ot::Mac::KeyMaterial const&)
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&)
</UL>

<P><STRONG><a name="[6eb]"></a>ot::Crypto::AesCcm::Payload(void*, void*, unsigned int, ot::Crypto::AesCcm::Mode)</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, aes_ccm.o(.text._ZN2ot6Crypto6AesCcm7PayloadEPvS2_jNS1_4ModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ot::Crypto::AesCcm::Payload(void*, void*, unsigned int, ot::Crypto::AesCcm::Mode) &rArr; ot::Crypto::AesEcb::Encrypt(unsigned char const*, unsigned char*) &rArr; otPlatCryptoAesEncrypt &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesEcb::Encrypt(unsigned char const*, unsigned char*)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::TxFrame::ProcessTransmitAesCcm(ot::Mac::ExtAddress const&)
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::RxFrame::ProcessReceiveAesCcm(ot::Mac::ExtAddress const&, ot::Mac::KeyMaterial const&)
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Payload(ot::Message&, unsigned short, unsigned short, ot::Crypto::AesCcm::Mode)
</UL>

<P><STRONG><a name="[758]"></a>ot::Crypto::AesCcm::Payload(ot::Message&, unsigned short, unsigned short, ot::Crypto::AesCcm::Mode)</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, aes_ccm.o(.text._ZN2ot6Crypto6AesCcm7PayloadERNS_7MessageEttNS1_4ModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ot::Crypto::AesCcm::Payload(ot::Message&, unsigned short, unsigned short, ot::Crypto::AesCcm::Mode) &rArr; ot::Crypto::AesCcm::Payload(void*, void*, unsigned int, ot::Crypto::AesCcm::Mode) &rArr; ot::Crypto::AesEcb::Encrypt(unsigned char const*, unsigned char*) &rArr; otPlatCryptoAesEncrypt &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Payload(void*, void*, unsigned int, ot::Crypto::AesCcm::Mode)
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetNextChunk(unsigned short&, ot::Message::Chunk&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&)
</UL>

<P><STRONG><a name="[6ec]"></a>ot::Crypto::AesCcm::Finalize(void*)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, aes_ccm.o(.text._ZN2ot6Crypto6AesCcm8FinalizeEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ot::Crypto::AesCcm::Finalize(void*) &rArr; ot::Crypto::AesEcb::Encrypt(unsigned char const*, unsigned char*) &rArr; otPlatCryptoAesEncrypt &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesEcb::Encrypt(unsigned char const*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::TxFrame::ProcessTransmitAesCcm(ot::Mac::ExtAddress const&)
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::RxFrame::ProcessReceiveAesCcm(ot::Mac::ExtAddress const&, ot::Mac::KeyMaterial const&)
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&)
</UL>

<P><STRONG><a name="[84b]"></a>ot::Crypto::AesEcb::SetKey(ot::Crypto::Key const&)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, aes_ecb.o(.text._ZN2ot6Crypto6AesEcb6SetKeyERKNS0_3KeyE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ot::Crypto::AesEcb::SetKey(ot::Crypto::Key const&) &rArr; otPlatCryptoAesSetKey &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoAesSetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::SetKey(ot::Mac::KeyMaterial const&)
</UL>

<P><STRONG><a name="[849]"></a>ot::Crypto::AesEcb::Encrypt(unsigned char const*, unsigned char*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, aes_ecb.o(.text._ZN2ot6Crypto6AesEcb7EncryptEPKhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ot::Crypto::AesEcb::Encrypt(unsigned char const*, unsigned char*) &rArr; otPlatCryptoAesEncrypt &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoAesEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Finalize(void*)
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Payload(void*, void*, unsigned int, ot::Crypto::AesCcm::Mode)
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Header(void const*, unsigned int)
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Init(unsigned int, unsigned int, unsigned char, void const*, unsigned char)
</UL>

<P><STRONG><a name="[6e6]"></a>ot::Crypto::AesEcb::AesEcb()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, aes_ecb.o(.text._ZN2ot6Crypto6AesEcbC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::Crypto::AesEcb::AesEcb() &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoAesInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::TxFrame::ProcessTransmitAesCcm(ot::Mac::ExtAddress const&)
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::RxFrame::ProcessReceiveAesCcm(ot::Mac::ExtAddress const&, ot::Mac::KeyMaterial const&)
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&)
</UL>

<P><STRONG><a name="[bee]"></a>ot::Crypto::AesEcb::AesEcb__sub_object()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, aes_ecb.o(.text._ZN2ot6Crypto6AesEcbC2Ev), UNUSED)

<P><STRONG><a name="[6ed]"></a>ot::Crypto::AesEcb::~AesEcb()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, aes_ecb.o(.text._ZN2ot6Crypto6AesEcbD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::Crypto::AesEcb::~AesEcb() &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoAesFree
</UL>
<BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::TxFrame::ProcessTransmitAesCcm(ot::Mac::ExtAddress const&)
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::RxFrame::ProcessReceiveAesCcm(ot::Mac::ExtAddress const&, ot::Mac::KeyMaterial const&)
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&)
</UL>

<P><STRONG><a name="[bef]"></a>ot::Crypto::AesEcb::~AesEcb__sub_object()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, aes_ecb.o(.text._ZN2ot6Crypto6AesEcbD2Ev), UNUSED)

<P><STRONG><a name="[852]"></a>ot::Crypto::Sha256::Start()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sha256.o(.text._ZN2ot6Crypto6Sha2565StartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = ot::Crypto::Sha256::Start() &rArr; otPlatCryptoSha256Start &rArr; mbedtls_sha256_starts_ret
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoSha256Start
</UL>
<BR>[Called By]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ComputeJoinerId(ot::Mac::ExtAddress const&, ot::Mac::ExtAddress&)
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsExportKeys(unsigned char const*, unsigned char const*, unsigned int, unsigned int, unsigned int)
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::GenerateIid(ot::Ip6::Netif::UnicastAddress&, unsigned char*, unsigned char, unsigned char*) const
</UL>

<P><STRONG><a name="[854]"></a>ot::Crypto::Sha256::Finish(ot::Crypto::Sha256::Hash&)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sha256.o(.text._ZN2ot6Crypto6Sha2566FinishERNS1_4HashE))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = ot::Crypto::Sha256::Finish(ot::Crypto::Sha256::Hash&) &rArr; otPlatCryptoSha256Finish &rArr; mbedtls_sha256_finish_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoSha256Finish
</UL>
<BR>[Called By]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ComputeJoinerId(ot::Mac::ExtAddress const&, ot::Mac::ExtAddress&)
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsExportKeys(unsigned char const*, unsigned char const*, unsigned int, unsigned int, unsigned int)
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::GenerateIid(ot::Ip6::Netif::UnicastAddress&, unsigned char*, unsigned char, unsigned char*) const
</UL>

<P><STRONG><a name="[856]"></a>ot::Crypto::Sha256::Update(void const*, unsigned short)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sha256.o(.text._ZN2ot6Crypto6Sha2566UpdateEPKvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = ot::Crypto::Sha256::Update(void const*, unsigned short) &rArr; otPlatCryptoSha256Update &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoSha256Update
</UL>
<BR>[Called By]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ComputeJoinerId(ot::Mac::ExtAddress const&, ot::Mac::ExtAddress&)
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsExportKeys(unsigned char const*, unsigned char const*, unsigned int, unsigned int, unsigned int)
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::GenerateIid(ot::Ip6::Netif::UnicastAddress&, unsigned char*, unsigned char, unsigned char*) const
</UL>

<P><STRONG><a name="[858]"></a>ot::Crypto::Sha256::Sha256()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sha256.o(.text._ZN2ot6Crypto6Sha256C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::Crypto::Sha256::Sha256() &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoSha256Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ComputeJoinerId(ot::Mac::ExtAddress const&, ot::Mac::ExtAddress&)
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsExportKeys(unsigned char const*, unsigned char const*, unsigned int, unsigned int, unsigned int)
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::GenerateIid(ot::Ip6::Netif::UnicastAddress&, unsigned char*, unsigned char, unsigned char*) const
</UL>

<P><STRONG><a name="[bf0]"></a>ot::Crypto::Sha256::Sha256__sub_object()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sha256.o(.text._ZN2ot6Crypto6Sha256C2Ev), UNUSED)

<P><STRONG><a name="[85a]"></a>ot::Crypto::Sha256::~Sha256()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sha256.o(.text._ZN2ot6Crypto6Sha256D2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::Crypto::Sha256::~Sha256() &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoSha256Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ComputeJoinerId(ot::Mac::ExtAddress const&, ot::Mac::ExtAddress&)
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsExportKeys(unsigned char const*, unsigned char const*, unsigned int, unsigned int, unsigned int)
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::GenerateIid(ot::Ip6::Netif::UnicastAddress&, unsigned char*, unsigned char, unsigned char*) const
</UL>

<P><STRONG><a name="[bf1]"></a>ot::Crypto::Sha256::~Sha256__sub_object()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sha256.o(.text._ZN2ot6Crypto6Sha256D2Ev), UNUSED)

<P><STRONG><a name="[8a]"></a>ot::Crypto::MbedTls::CryptoSecurePrng(void*, unsigned char*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mbedtls.o(.text._ZN2ot6Crypto7MbedTls16CryptoSecurePrngEPvPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = ot::Crypto::MbedTls::CryptoSecurePrng(void*, unsigned char*, unsigned int) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoRandomGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtls.o(.text._ZN2ot7MeshCoP4Dtls5SetupEb)
</UL>
<P><STRONG><a name="[8dc]"></a>ot::Crypto::MbedTls::MapError(int)</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, mbedtls.o(.text._ZN2ot6Crypto7MbedTls8MapErrorEi))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoRandomGet
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Send(ot::Message&, unsigned short)
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Setup(bool)
</UL>

<P><STRONG><a name="[85c]"></a>ot::Crypto::MbedTls::MbedTls()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mbedtls.o(.text._ZN2ot6Crypto7MbedTlsC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_set_calloc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bf2]"></a>ot::Crypto::MbedTls::MbedTls__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mbedtls.o(.text._ZN2ot6Crypto7MbedTlsC2Ev), UNUSED)

<P><STRONG><a name="[85e]"></a>void ot::Logger::LogAtLevel&lang;(ot::LogLevel)1&rang;(char const*, char const*, ...)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, log.o(.text._ZN2ot6Logger10LogAtLevelILNS_8LogLevelE1EEEvPKcS4_z), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsDebug(int, char const*, int, char const*)
</UL>

<P><STRONG><a name="[243]"></a>void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, log.o(.text._ZN2ot6Logger10LogAtLevelILNS_8LogLevelE2EEEvPKcS4_z))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::SendDataPoll()
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Restore()
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendCopy(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Receive(unsigned char)
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Sleep()
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::Log(ot::SettingsBase::Action, otError, ot::SettingsBase::Key, void const*)
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsTransmit(unsigned char const*, unsigned int)
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsDebug(int, char const*, int, char const*)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::LogError(char const*, otError)
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ApplyConfiguration(ot::Instance&, bool*) const
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::SendAddressNotification(ot::Ip6::Address&, ot::ThreadStatusTlv::DuaStatus, ot::Child const&)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::HandleTimer()
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)0&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&)
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendIcmpError(ot::Message&, ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code)
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::PassToHost(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo const&, unsigned char, bool, ot::Message::Ownership)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogError(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, otError)
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TlvList::Add(unsigned char)
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::InformPreviousParent()
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::DecrementMessageCount(ot::Child&)
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::GenerateIid(ot::Ip6::Netif::UnicastAddress&, unsigned char*, unsigned char, unsigned char*) const
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::Update(unsigned char)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::LogMlrResponse(otError, otError, unsigned char, ot::Ip6::Address const*, unsigned char)
</UL>

<P><STRONG><a name="[256]"></a>void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, log.o(.text._ZN2ot6Logger10LogAtLevelILNS_8LogLevelE3EEEvPKcS4_z))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::HandleTransmit()
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::UpdateBackboneRouterPrimary()
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Release(unsigned char)
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetDeviceMode(ot::Mle::DeviceMode)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFrameRequest(ot::Mac::TxFrames&)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetSecurityPolicy(ot::SecurityPolicy const&)
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::RouteLookup(ot::Ip6::Address const&, ot::Ip6::Address const&) const
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::UpdateReassemblyList()
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandlePayload(ot::Ip6::Header&, ot::Message&, ot::Ip6::MessageInfo&, unsigned char, ot::Message::Ownership)
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Allocate(unsigned char)
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::GetAttachStartDelay() const
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::Mle::RxInfo&, unsigned short, ot::Mle::LeaderData const&)
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetRloc16(unsigned short)
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetRole(ot::Mle::DeviceRole)
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::InformPreviousParent()
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAttachTimer()
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ProcessAnnounce()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::GetForwardFramePriority(ot::FrameData const&, ot::Mac::Addresses const&, ot::Message::Priority&)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogFrame(char const*, ot::Mac::Frame const&, otError)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogLowpanHcFrameDrop(otError, unsigned short, ot::Mac::Addresses const&, bool)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogFragmentFrameDrop(otError, unsigned short, ot::Mac::Addresses const&, ot::Lowpan::FragmentHeader const&, bool)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RegisterNetworkData(unsigned short, ot::NetworkData::NetworkData const&)
</UL>

<P><STRONG><a name="[226]"></a>void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, log.o(.text._ZN2ot6Logger10LogAtLevelILNS_8LogLevelE4EEEvPKcS4_z))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Start(char const*, char const*, char const*, char const*, char const*, char const*, void (*)(otError, void*), void*)
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Stop()
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Filter::UpdateUnsecurePorts(ot::Ip6::Filter::Action, unsigned short)
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::SendEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&, unsigned short)
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendGetRequest(ot::MeshCoP::Dataset::Components const&, unsigned char const*, unsigned char, otIp6Address const*) const
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSetRequest(ot::MeshCoP::Dataset::Info const&, unsigned char const*, unsigned char, void (*)(otError, void*), void*)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::SetInterval(unsigned short)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::SetTimeout(unsigned short)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::NewBuffer(ot::Message::Priority)
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::Wipe()
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ProcessReceivedRequest(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::LogBackboneRouterPrimary(ot::BackboneRouter::Leader::State, otBackboneRouterConfig const&) const
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::UpdateDomainPrefixConfig()
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeRouter(ot::ThreadStatusTlv::Status)
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressQueryResponse(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, unsigned int const*, ot::Ip6::Address const&)
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::LogFrameTxFailure(ot::Mac::TxFrame const&, otError, unsigned char, bool) const
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ConvertBeaconToActiveScanResult(ot::Mac::RxFrame const*, otActiveScanResult&)
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessEnhAckSecurity(ot::Mac::TxFrame&, ot::Mac::RxFrame&)
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PrepareBeaconRequest()
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleMacCommand(ot::Mac::RxFrame&)
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PrepareBeacon()
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleReceivedFrame(ot::Mac::RxFrame&)
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::HandlePollTimeout()
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::HandlePollSent(ot::Mac::TxFrame&, otError)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::HandleSentFrame(ot::Mac::TxFrame const&, otError, ot::Child&)
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::HandleDataPoll(ot::Mac::RxFrame&)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::HandleTimeTick()
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SettingsBase::ChildInfo::Log(ot::SettingsBase::Action) const
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SettingsBase::NetworkInfo::Log(ot::SettingsBase::Action) const
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SettingsBase::ParentInfo::Log(ot::SettingsBase::Action) const
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::Log(ot::SettingsBase::Action, otError, ot::SettingsBase::Key, void const*)
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::LogEvents(ot::Events) const
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Leader::HandleTmf&lang;(ot::Uri)23&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Leader::HandleTmf&lang;(ot::Uri)22&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendKeepAliveResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendPetitionResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::ResignCommissioner()
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::JoinerRouter::HandleTmf&lang;(ot::Uri)29&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::Start()
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::HandleJoinerEntrustResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::SendJoinerEntrust(ot::Ip6::MessageInfo const&)
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Joiner::HandleTmf&lang;(ot::Uri)20&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SetState(ot::MeshCoP::Joiner::State)
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Connect(ot::MeshCoP::Joiner::JoinerRouter&)
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleJoinerFinalizeResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SaveDiscoveredJoinerRouter(otActiveScanResult const&)
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SendJoinerEntrustResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SendJoinerFinalize()
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Setup(bool)
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsDebug(int, char const*, int, char const*)
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendDatasetChanged(ot::Ip6::Address const&)
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::GenerateLocal()
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendGetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, unsigned char*, unsigned char) const
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::HandleDelayTimer()
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::StartDelayTimer()
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSet()
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleMgmtSetResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Save(ot::MeshCoP::Dataset const&)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::DuaManager::HandleTmf&lang;(ot::Uri)36&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::SendAddressNotification(ot::Ip6::Address&, ot::ThreadStatusTlv::DuaStatus, ot::Child const&)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::PerformNextRegistration()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::HandleDuaResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::HandleSentFrame(ot::Mac::TxFrame const&, otError, ot::Child&)
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildSupervisor::SendMessage(ot::Child&)
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildSupervisor::CheckState()
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AnnounceBeginServer::HandleTmf&lang;(ot::Uri)10&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)2&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)1&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)0&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::LogCacheEntryChange(ot::AddressResolver::EntryChange, ot::AddressResolver::Reason, ot::AddressResolver::CacheEntry const&, ot::AddressResolver::CacheEntryList*)
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressError(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, ot::Ip6::Address const*)
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Ip6::Headers const&)
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::HandleEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)4&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDataResponse(ot::Ip6::Address const&, ot::Mle::Mle::TlvList const&, unsigned short, ot::Message const*)
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::Mle::RxInfo&, unsigned short, ot::Mle::LeaderData const&)
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Reattach()
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogError(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, otError)
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Attach(ot::Mle::Mle::AttachMode)
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildIdRequest()
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAttachTimer()
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetStateDetached()
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetAttachState(ot::Mle::Mle::AttachState)
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetStateChild(unsigned short)
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendAnnounce(unsigned char, ot::Ip6::Address const&, ot::Mle::Mle::AnnounceMode)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogFrame(char const*, ot::Mac::Frame const&, otError)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateSendMessage(otError, ot::Mac::Address&, ot::Neighbor*)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::EnergyScanServer::HandleTmf&lang;(ot::Uri)19&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::EnergyScanServer::SendReport()
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::GetIidSecretKey(ot::Utils::Slaac::IidSecretKey&) const
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::Update(unsigned char)
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::LogRouteTable() const
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::PanIdQueryServer::HandleTmf&lang;(ot::Uri)26&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PanIdQueryServer::SendConflict()
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)35&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)34&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)33&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Client::HandleTmf&lang;(ot::Uri)32&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::SendCommand(ot::Uri, ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::SendServerDataNotification(unsigned short, ot::NetworkData::NetworkData const*)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AllocateServiceId(unsigned char&) const
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)5&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::SendCommissioningSetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::SendCommissioningGetResponse(ot::Coap::Message const&, unsigned short, ot::Ip6::MessageInfo const&)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::HandleTimer()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistrationMessage(otIp6Address const*, unsigned char, unsigned int const*, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::LogMlrResponse(otError, otError, unsigned char, ot::Ip6::Address const*, unsigned char)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::Reregister()
</UL>

<P><STRONG><a name="[21f]"></a>void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, log.o(.text._ZN2ot6Logger10LogAtLevelILNS_8LogLevelE5EEEvPKcS4_z))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetExtAddress(ot::Mac::ExtAddress const&)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::SendDataPoll()
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendEmptyMessage()
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::HandleTransmit()
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::Receive(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetPanId(unsigned short)
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Receive(unsigned char)
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Enable()
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Sleep()
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetShortAddress(unsigned short)
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::EnergyScan(unsigned char, unsigned short)
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessReceiveSecurity(ot::Mac::RxFrame&, ot::Mac::Address const&, ot::Neighbor*)
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessEnhAckSecurity(ot::Mac::TxFrame&, ot::Mac::RxFrame&)
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformNextOperation()
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformEnergyScan()
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformActiveScan()
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetRxOnWhenIdle(bool)
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::UpdateIdleMode()
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleTimer()
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessCsl(ot::Mac::RxFrame const&, ot::Mac::Address const&)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleSentFrame(ot::Mac::TxFrame&, otError)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::HandleTimeTick()
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsExportKeys(unsigned char const*, unsigned char const*, unsigned int, unsigned int, unsigned int)
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsTransmit(unsigned char const*, unsigned int)
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsSetTimer(unsigned int, unsigned int)
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsGetTimer()
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsReceive(unsigned char*, unsigned int)
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsDebug(int, char const*, int, char const*)
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::StartTimerForBackoff(unsigned char)
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleEnergyScanDone(signed char)
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::StartCsmaBackoff()
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::BeginTransmit()
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleTimer()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::UpdateReregistrationDelay()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::UpdateCheckDelay(unsigned char)
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&)
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::HandleEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilliIn&lang;ot::MeshForwarder, &(ot::MeshForwarder::HandleTxDelayTimer())&rang;::HandleTimer(ot::Timer&)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Store()
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::AddEntry(ot::Child&)
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::ClearTable()
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::ClearEntry(ot::Child&)
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::AddAddress(ot::Child const&)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::UpdateReregistrationDelay(bool)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::LogMulticastAddresses()
</UL>

<P><STRONG><a name="[85f]"></a>ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list)</STRONG> (Thumb, 144 bytes, Stack size 200 bytes, log.o(.text._ZN2ot6Logger10LogVarArgsEPKcNS_8LogLevelES2_St9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatLog
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::StringWriter__sub_object(char*, unsigned short)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::Append(char const*, ...)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::AppendVarArgs(char const*, std::__va_list)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringLength(char const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLogWarnPlat
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLogDebgPlat
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...)
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)1&rang;(char const*, char const*, ...)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
</UL>

<P><STRONG><a name="[2a3]"></a>void ot::Logger::DumpAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, void const*, unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, log.o(.text._ZN2ot6Logger11DumpAtLevelILNS_8LogLevelE5EEEvPKcS4_PKvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = void ot::Logger::DumpAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, void const*, unsigned short) &rArr; ot::Logger::DumpInModule(char const*, ot::LogLevel, char const*, void const*, unsigned short) &rArr; ot::Logger::DumpLine(char const*, ot::LogLevel, unsigned char const*, unsigned short) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::DumpInModule(char const*, ot::LogLevel, char const*, void const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::RecordFrameTransmitStatus(ot::Mac::TxFrame const&, ot::Mac::RxFrame*, otError, unsigned char, bool)
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SetNetworkData(unsigned char, unsigned char, ot::NetworkData::Type, ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RegisterNetworkData(unsigned short, ot::NetworkData::NetworkData const&)
</UL>

<P><STRONG><a name="[375]"></a>ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, log.o(.text._ZN2ot6Logger11LogInModuleEPKcNS_8LogLevelES2_z))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::DumpInModule(char const*, ot::LogLevel, char const*, void const*, unsigned short)
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::DumpLine(char const*, ot::LogLevel, unsigned char const*, unsigned short)
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::LogFrameRxFailure(ot::Mac::RxFrame const*, otError) const
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::HandleJoinerEntrustResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::SendJoinerEntrust(ot::Ip6::MessageInfo const&)
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Joiner::HandleTmf&lang;(ot::Uri)20&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SendJoinerEntrustResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMeshIpHeader(ot::Message const&, unsigned short, ot::Mac::Addresses const&, ot::LogLevel)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogIp6SourceDestAddresses(ot::Ip6::Headers const&, ot::LogLevel)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogIp6Message(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel)
</UL>

<P><STRONG><a name="[861]"></a>ot::Logger::DumpInModule(char const*, ot::LogLevel, char const*, void const*, unsigned short)</STRONG> (Thumb, 288 bytes, Stack size 144 bytes, log.o(.text._ZN2ot6Logger12DumpInModuleEPKcNS_8LogLevelES2_PKvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = ot::Logger::DumpInModule(char const*, ot::LogLevel, char const*, void const*, unsigned short) &rArr; ot::Logger::DumpLine(char const*, ot::LogLevel, unsigned char const*, unsigned short) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLoggingGetLevel
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::DumpLine(char const*, ot::LogLevel, unsigned char const*, unsigned short)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...)
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::StringWriter__sub_object(char*, unsigned short)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::Append(char const*, ...)
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::Clear()
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringLength(char const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::DumpAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, void const*, unsigned short)
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::LogCertMessage(char const*, ot::Coap::Message const&) const
</UL>

<P><STRONG><a name="[862]"></a>ot::Logger::DumpLine(char const*, ot::LogLevel, unsigned char const*, unsigned short)</STRONG> (Thumb, 196 bytes, Stack size 136 bytes, log.o(.text._ZN2ot6Logger8DumpLineEPKcNS_8LogLevelEPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = ot::Logger::DumpLine(char const*, ot::LogLevel, unsigned char const*, unsigned short) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...)
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::StringWriter__sub_object(char*, unsigned short)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::Append(char const*, ...)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::DumpInModule(char const*, ot::LogLevel, char const*, void const*, unsigned short)
</UL>

<P><STRONG><a name="[3d7]"></a>ot::Lowpan::MeshHeader::IsMeshHeader(ot::FrameData const&)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lowpan.o(.text._ZN2ot6Lowpan10MeshHeader12IsMeshHeaderERKNS_9FrameDataE))
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleReceivedFrame(ot::Mac::RxFrame&)
</UL>

<P><STRONG><a name="[357]"></a>ot::Lowpan::MeshHeader::DecrementHopsLeft()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lowpan.o(.text._ZN2ot6Lowpan10MeshHeader17DecrementHopsLeftEv))
<BR><BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[3b7]"></a>ot::Lowpan::MeshHeader::Init(unsigned short, unsigned short, unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lowpan.o(.text._ZN2ot6Lowpan10MeshHeader4InitEtth))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool)
</UL>

<P><STRONG><a name="[864]"></a>ot::Lowpan::MeshHeader::ParseFrom(unsigned char const*, unsigned short, unsigned short&)</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lowpan.o(.text._ZN2ot6Lowpan10MeshHeader9ParseFromEPKhtRt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Lowpan::MeshHeader::ParseFrom(unsigned char const*, unsigned short, unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::MeshHeader::ParseFrom(ot::FrameData&)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::MeshHeader::ParseFrom(ot::Message const&, unsigned short&)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::MeshHeader::ParseFrom(ot::Message const&)
</UL>

<P><STRONG><a name="[38f]"></a>ot::Lowpan::MeshHeader::ParseFrom(ot::Message const&)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lowpan.o(.text._ZN2ot6Lowpan10MeshHeader9ParseFromERKNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ot::Lowpan::MeshHeader::ParseFrom(ot::Message const&) &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ReadBytes(unsigned short, void*, unsigned short) const
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::MeshHeader::ParseFrom(unsigned char const*, unsigned short, unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessages(ot::Child&, ot::Message::SubType)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateMeshRoute(ot::Message&)
</UL>

<P><STRONG><a name="[3a8]"></a>ot::Lowpan::MeshHeader::ParseFrom(ot::Message const&, unsigned short&)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lowpan.o(.text._ZN2ot6Lowpan10MeshHeader9ParseFromERKNS_7MessageERt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ot::Lowpan::MeshHeader::ParseFrom(ot::Message const&, unsigned short&) &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ReadBytes(unsigned short, void*, unsigned short) const
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::MeshHeader::ParseFrom(unsigned char const*, unsigned short, unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateEcnOrDrop(ot::Message&, bool)
</UL>

<P><STRONG><a name="[34d]"></a>ot::Lowpan::MeshHeader::ParseFrom(ot::FrameData&)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lowpan.o(.text._ZN2ot6Lowpan10MeshHeader9ParseFromERNS_9FrameDataE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ot::Lowpan::MeshHeader::ParseFrom(ot::FrameData&) &rArr; ot::Lowpan::MeshHeader::ParseFrom(unsigned char const*, unsigned short, unsigned short&)
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameData::SkipOver(unsigned short)
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::MeshHeader::ParseFrom(unsigned char const*, unsigned short, unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[352]"></a>ot::Lowpan::FragmentHeader::IsFragmentHeader(ot::FrameData const&)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lowpan.o(.text._ZN2ot6Lowpan14FragmentHeader16IsFragmentHeaderERKNS_9FrameDataE))
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleReceivedFrame(ot::Mac::RxFrame&)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[866]"></a>ot::Lowpan::FragmentHeader::ParseFrom(unsigned char const*, unsigned short, unsigned short&)</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, lowpan.o(.text._ZN2ot6Lowpan14FragmentHeader9ParseFromEPKhtRt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Lowpan::FragmentHeader::ParseFrom(unsigned char const*, unsigned short, unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::FragmentHeader::ParseFrom(ot::FrameData&)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::FragmentHeader::ParseFrom(ot::Message const&, unsigned short, unsigned short&)
</UL>

<P><STRONG><a name="[3a9]"></a>ot::Lowpan::FragmentHeader::ParseFrom(ot::Message const&, unsigned short, unsigned short&)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lowpan.o(.text._ZN2ot6Lowpan14FragmentHeader9ParseFromERKNS_7MessageEtRt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ot::Lowpan::FragmentHeader::ParseFrom(ot::Message const&, unsigned short, unsigned short&) &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ReadBytes(unsigned short, void*, unsigned short) const
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::FragmentHeader::ParseFrom(unsigned char const*, unsigned short, unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateEcnOrDrop(ot::Message&, bool)
</UL>

<P><STRONG><a name="[37f]"></a>ot::Lowpan::FragmentHeader::ParseFrom(ot::FrameData&)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lowpan.o(.text._ZN2ot6Lowpan14FragmentHeader9ParseFromERNS_9FrameDataE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ot::Lowpan::FragmentHeader::ParseFrom(ot::FrameData&) &rArr; ot::Lowpan::FragmentHeader::ParseFrom(unsigned char const*, unsigned short, unsigned short&)
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameData::SkipOver(unsigned short)
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::FragmentHeader::ParseFrom(unsigned char const*, unsigned short, unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Headers::DecompressFrom(ot::FrameData const&, ot::Mac::Addresses const&, ot::Instance&)
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::GetForwardFramePriority(ot::FrameData const&, ot::Mac::Addresses const&, ot::Message::Priority&)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[867]"></a>ot::Lowpan::Lowpan::ComputeIid(ot::Mac::Address const&, ot::Lowpan::Context const&, ot::Ip6::InterfaceIdentifier&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lowpan.o(.text._ZN2ot6Lowpan6Lowpan10ComputeIidERKNS_3Mac7AddressERKNS0_7ContextERNS_3Ip619InterfaceIdentifierE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ot::Lowpan::Lowpan::ComputeIid(ot::Mac::Address const&, ot::Lowpan::Context const&, ot::Ip6::InterfaceIdentifier&) &rArr; ot::Ip6::InterfaceIdentifier::ApplyPrefix(ot::Ip6::Prefix const&) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::SetFromExtAddress(ot::Mac::ExtAddress const&)
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::SetToLocator(unsigned short)
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::ApplyPrefix(ot::Ip6::Prefix const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressBaseHeader(ot::Ip6::Header&, bool&, ot::Mac::Addresses const&, ot::FrameData&)
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressDestinationIid(ot::Mac::Address const&, ot::Ip6::Address const&, ot::Lowpan::Context const&, unsigned short&, ot::FrameBuilder&)
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressSourceIid(ot::Mac::Address const&, ot::Ip6::Address const&, ot::Lowpan::Context const&, unsigned short&, ot::FrameBuilder&)
</UL>

<P><STRONG><a name="[37b]"></a>ot::Lowpan::Lowpan::Decompress(ot::Message&, ot::Mac::Addresses const&, ot::FrameData&, unsigned short)</STRONG> (Thumb, 216 bytes, Stack size 80 bytes, lowpan.o(.text._ZN2ot6Lowpan6Lowpan10DecompressERNS_7MessageERKNS_3Mac9AddressesERNS_9FrameDataEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = ot::Lowpan::Lowpan::Decompress(ot::Message&, ot::Mac::Addresses const&, ot::FrameData&, unsigned short) &rArr;  ot::Lowpan::Lowpan::Decompress(ot::Message&, ot::Mac::Addresses const&, ot::FrameData&, unsigned short) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameData::SkipOver(unsigned short)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::MoveOffset(int)
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressBaseHeader(ot::Ip6::Header&, bool&, ot::Mac::Addresses const&, ot::FrameData&)
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressExtensionHeader(ot::Message&, ot::FrameData&)
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressUdpHeader(ot::Message&, ot::FrameData&, unsigned short)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Decompress(ot::Message&, ot::Mac::Addresses const&, ot::FrameData&, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::FrameToMessage(ot::FrameData const&, unsigned short, ot::Mac::Addresses const&, ot::Message*&)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Decompress(ot::Message&, ot::Mac::Addresses const&, ot::FrameData&, unsigned short)
</UL>

<P><STRONG><a name="[86a]"></a>ot::Lowpan::Lowpan::CompressUdp(ot::Message&, ot::FrameBuilder&)</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, lowpan.o(.text._ZN2ot6Lowpan6Lowpan11CompressUdpERNS_7MessageERNS_12FrameBuilderE))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ot::Lowpan::Lowpan::CompressUdp(ot::Message&, ot::FrameBuilder&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetOffset(unsigned short)
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::AppendBigEndianUint16(unsigned short)
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::AppendUint8(unsigned char)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::AppendBytes(void const*, unsigned short)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::MoveOffset(int)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&)
</UL>

<P><STRONG><a name="[86c]"></a>ot::Lowpan::Lowpan::CompressMulticast(ot::Ip6::Address const&, unsigned short&, ot::FrameBuilder&)</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, lowpan.o(.text._ZN2ot6Lowpan6Lowpan17CompressMulticastERKNS_3Ip67AddressERtRNS_12FrameBuilderE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ot::Lowpan::Lowpan::CompressMulticast(ot::Ip6::Address const&, unsigned short&, ot::FrameBuilder&) &rArr; ot::NetworkData::LeaderBase::GetContext(unsigned char, ot::Lowpan::Context&) const &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::AppendUint8(unsigned char)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::AppendBytes(void const*, unsigned short)
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetContext(unsigned char, ot::Lowpan::Context&) const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&)
</UL>

<P><STRONG><a name="[86d]"></a>ot::Lowpan::Lowpan::CompressSourceIid(ot::Mac::Address const&, ot::Ip6::Address const&, ot::Lowpan::Context const&, unsigned short&, ot::FrameBuilder&)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lowpan.o(.text._ZN2ot6Lowpan6Lowpan17CompressSourceIidERKNS_3Mac7AddressERKNS_3Ip67AddressERKNS0_7ContextERtRNS_12FrameBuilderE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ot::Lowpan::Lowpan::CompressSourceIid(ot::Mac::Address const&, ot::Ip6::Address const&, ot::Lowpan::Context const&, unsigned short&, ot::FrameBuilder&) &rArr; ot::Lowpan::Lowpan::ComputeIid(ot::Mac::Address const&, ot::Lowpan::Context const&, ot::Ip6::InterfaceIdentifier&) &rArr; ot::Ip6::InterfaceIdentifier::ApplyPrefix(ot::Ip6::Prefix const&) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::AppendBigEndianUint16(unsigned short)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::AppendBytes(void const*, unsigned short)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::IsLocator() const
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::ComputeIid(ot::Mac::Address const&, ot::Lowpan::Context const&, ot::Ip6::InterfaceIdentifier&)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&)
</UL>

<P><STRONG><a name="[67b]"></a>ot::Lowpan::Lowpan::DecompressUdpHeader(ot::Ip6::Udp::Header&, ot::FrameData&)</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, lowpan.o(.text._ZN2ot6Lowpan6Lowpan19DecompressUdpHeaderERNS_3Ip63Udp6HeaderERNS_9FrameDataE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::Lowpan::Lowpan::DecompressUdpHeader(ot::Ip6::Udp::Header&, ot::FrameData&)
</UL>
<BR>[Calls]<UL><LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameData::ReadUint8(unsigned char&)
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameData::ReadBigEndianUint16(unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Headers::DecompressFrom(ot::FrameData const&, ot::Mac::Addresses const&, ot::Instance&)
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressUdpHeader(ot::Message&, ot::FrameData&, unsigned short)
</UL>

<P><STRONG><a name="[869]"></a>ot::Lowpan::Lowpan::DecompressUdpHeader(ot::Message&, ot::FrameData&, unsigned short)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lowpan.o(.text._ZN2ot6Lowpan6Lowpan19DecompressUdpHeaderERNS_7MessageERNS_9FrameDataEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = ot::Lowpan::Lowpan::DecompressUdpHeader(ot::Message&, ot::FrameData&, unsigned short) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::MoveOffset(int)
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressUdpHeader(ot::Ip6::Udp::Header&, ot::FrameData&)
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Decompress(ot::Message&, ot::Mac::Addresses const&, ot::FrameData&, unsigned short)
</UL>

<P><STRONG><a name="[67a]"></a>ot::Lowpan::Lowpan::DecompressBaseHeader(ot::Ip6::Header&, bool&, ot::Mac::Addresses const&, ot::FrameData&)</STRONG> (Thumb, 830 bytes, Stack size 80 bytes, lowpan.o(.text._ZN2ot6Lowpan6Lowpan20DecompressBaseHeaderERNS_3Ip66HeaderERbRKNS_3Mac9AddressesERNS_9FrameDataE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ot::Lowpan::Lowpan::DecompressBaseHeader(ot::Ip6::Header&, bool&, ot::Mac::Addresses const&, ot::FrameData&) &rArr; ot::NetworkData::LeaderBase::GetContext(unsigned char, ot::Lowpan::Context&) const &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameData::ReadUint8(unsigned char&)
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameData::ReadBytes(void*, unsigned short)
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameData::SkipOver(unsigned short)
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameData::ReadBigEndianUint16(unsigned short&)
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetPrefix(ot::Ip6::Prefix const&)
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetContext(unsigned char, ot::Lowpan::Context&) const
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DispatchToNextHeader(unsigned char, unsigned char&)
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::ComputeIid(ot::Mac::Address const&, ot::Lowpan::Context const&, ot::Ip6::InterfaceIdentifier&)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Headers::DecompressFrom(ot::FrameData const&, ot::Mac::Addresses const&, ot::Instance&)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Decompress(ot::Message&, ot::Mac::Addresses const&, ot::FrameData&, unsigned short)
</UL>

<P><STRONG><a name="[870]"></a>ot::Lowpan::Lowpan::DispatchToNextHeader(unsigned char, unsigned char&)</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, lowpan.o(.text._ZN2ot6Lowpan6Lowpan20DispatchToNextHeaderEhRh))
<BR><BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressBaseHeader(ot::Ip6::Header&, bool&, ot::Mac::Addresses const&, ot::FrameData&)
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressExtensionHeader(ot::Message&, ot::FrameData&)
</UL>

<P><STRONG><a name="[871]"></a>ot::Lowpan::Lowpan::CompressDestinationIid(ot::Mac::Address const&, ot::Ip6::Address const&, ot::Lowpan::Context const&, unsigned short&, ot::FrameBuilder&)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lowpan.o(.text._ZN2ot6Lowpan6Lowpan22CompressDestinationIidERKNS_3Mac7AddressERKNS_3Ip67AddressERKNS0_7ContextERtRNS_12FrameBuilderE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ot::Lowpan::Lowpan::CompressDestinationIid(ot::Mac::Address const&, ot::Ip6::Address const&, ot::Lowpan::Context const&, unsigned short&, ot::FrameBuilder&) &rArr; ot::Lowpan::Lowpan::ComputeIid(ot::Mac::Address const&, ot::Lowpan::Context const&, ot::Ip6::InterfaceIdentifier&) &rArr; ot::Ip6::InterfaceIdentifier::ApplyPrefix(ot::Ip6::Prefix const&) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::AppendBigEndianUint16(unsigned short)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::AppendBytes(void const*, unsigned short)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::IsLocator() const
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::ComputeIid(ot::Mac::Address const&, ot::Lowpan::Context const&, ot::Ip6::InterfaceIdentifier&)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&)
</UL>

<P><STRONG><a name="[872]"></a>ot::Lowpan::Lowpan::CompressExtensionHeader(ot::Message&, ot::FrameBuilder&, unsigned char&)</STRONG> (Thumb, 290 bytes, Stack size 56 bytes, lowpan.o(.text._ZN2ot6Lowpan6Lowpan23CompressExtensionHeaderERNS_7MessageERNS_12FrameBuilderERh))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ot::Lowpan::Lowpan::CompressExtensionHeader(ot::Message&, ot::FrameBuilder&, unsigned char&) &rArr; ot::Ip6::Option::ParseFrom(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetOffset(unsigned short)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::AppendUint8(unsigned char)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::MoveOffset(int)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Option::GetSize() const
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Option::ParseFrom(ot::Message const&, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&)
</UL>

<P><STRONG><a name="[868]"></a>ot::Lowpan::Lowpan::DecompressExtensionHeader(ot::Message&, ot::FrameData&)</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, lowpan.o(.text._ZN2ot6Lowpan6Lowpan25DecompressExtensionHeaderERNS_7MessageERNS_9FrameDataE))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = ot::Lowpan::Lowpan::DecompressExtensionHeader(ot::Message&, ot::FrameData&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameData::ReadUint8(unsigned char&)
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameData::SkipOver(unsigned short)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::MoveOffset(int)
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Option::GetSize() const
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::PadOption::InitToPadHeaderWithSize(unsigned short)
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DispatchToNextHeader(unsigned char, unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Decompress(ot::Message&, ot::Mac::Addresses const&, ot::FrameData&, unsigned short)
</UL>

<P><STRONG><a name="[3b9]"></a>ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&)</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, lowpan.o(.text._ZN2ot6Lowpan6Lowpan8CompressERNS_7MessageERKNS_3Mac9AddressesERNS_12FrameBuilderE))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&) &rArr; ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&) &rArr;  ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool)
</UL>

<P><STRONG><a name="[873]"></a>ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&)</STRONG> (Thumb, 836 bytes, Stack size 152 bytes, lowpan.o(.text._ZN2ot6Lowpan6Lowpan8CompressERNS_7MessageERKNS_3Mac9AddressesERNS_12FrameBuilderERh))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&) &rArr;  ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetOffset(unsigned short)
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsUnspecified() const
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::AppendBigEndianUint16(unsigned short)
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::AppendUint8(unsigned char)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::WriteBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::AppendBytes(void const*, unsigned short)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::MoveOffset(int)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsLinkLocal() const
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetContext(ot::Ip6::Address const&, ot::Lowpan::Context&) const
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&)
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressExtensionHeader(ot::Message&, ot::FrameBuilder&, unsigned char&)
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressDestinationIid(ot::Mac::Address const&, ot::Ip6::Address const&, ot::Lowpan::Context const&, unsigned short&, ot::FrameBuilder&)
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressSourceIid(ot::Mac::Address const&, ot::Ip6::Address const&, ot::Lowpan::Context const&, unsigned short&, ot::FrameBuilder&)
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressMulticast(ot::Ip6::Address const&, unsigned short&, ot::FrameBuilder&)
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressUdp(ot::Message&, ot::FrameBuilder&)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&)
</UL>

<P><STRONG><a name="[92a]"></a>ot::Lowpan::Lowpan::Lowpan(ot::Instance&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lowpan.o(.text._ZN2ot6Lowpan6LowpanC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bf3]"></a>ot::Lowpan::Lowpan::Lowpan__sub_object(ot::Instance&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lowpan.o(.text._ZN2ot6Lowpan6LowpanC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[76c]"></a>ot::Parent::Clear()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, topology.o(.text._ZN2ot6Parent5ClearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Parent::Clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Restore()
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Mle(ot::Instance&)
</UL>

<P><STRONG><a name="[2ab]"></a>ot::Random::Manager::NonCryptoGetUint32()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, random.o(.text._ZN2ot6Random7Manager18NonCryptoGetUint32Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::Random::Manager::NonCryptoGetUint32() &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::AddJitter(unsigned int, unsigned short)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint32InRange(unsigned int, unsigned int)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint16InRange(unsigned short, unsigned short)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint8InRange(unsigned char, unsigned char)
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::Leader(ot::Instance&)
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::Mac(ot::Instance&)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::MeshForwarder(ot::Instance&)
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::CoapBase(ot::Instance&, otError (*)(ot::Coap::CoapBase&, ot::Message&, ot::Ip6::MessageInfo const&))
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Coap::Coap(ot::Instance&)
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeLeader()
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::GenerateRandomPanId()
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::RouterTable(ot::Instance&)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::Reset()
</UL>

<P><STRONG><a name="[874]"></a>ot::Random::Manager::Manager()</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, random.o(.text._ZN2ot6Random7ManagerC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoRandomGet
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoRandomInit
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bf4]"></a>ot::Random::Manager::Manager__sub_object()</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, random.o(.text._ZN2ot6Random7ManagerC2Ev), UNUSED)

<P><STRONG><a name="[24b]"></a>ot::Random::NonCrypto::GetUint8InRange(unsigned char, unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, random.o(.text._ZN2ot6Random9NonCrypto15GetUint8InRangeEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ot::Random::NonCrypto::GetUint8InRange(unsigned char, unsigned char) &rArr; ot::Random::Manager::NonCryptoGetUint32() &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::Manager::NonCryptoGetUint32()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otRandomNonCryptoGetUint8InRange
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeLeader()
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ChannelMask::ChooseRandomChannel() const
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::UpdateChildDomainUnicastAddress(ot::Child const&, ot::Mle::ChildDuaState)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Allocate()
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::Mle::RxInfo&, unsigned short, ot::Mle::LeaderData const&)
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildStart(ot::Mle::Mle::AttachMode)
</UL>

<P><STRONG><a name="[247]"></a>ot::Random::NonCrypto::GetUint16InRange(unsigned short, unsigned short)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, random.o(.text._ZN2ot6Random9NonCrypto16GetUint16InRangeEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ot::Random::NonCrypto::GetUint16InRange(unsigned short, unsigned short) &rArr; ot::Random::Manager::NonCryptoGetUint32() &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::Manager::NonCryptoGetUint32()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otRandomNonCryptoGetUint16InRange
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::UpdateReregistrationDelay()
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::HandleRetransmissionTimer()
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::AddBufferedMessage(ot::Message&, unsigned short, unsigned char, bool)
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDiscoveryResponse(ot::Ip6::Address const&, ot::Message const&)
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendParentResponse(ot::Child*, ot::Mle::Mle::Challenge const&, bool)
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkAccept(ot::Ip6::MessageInfo const&, ot::Neighbor*, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::UpdateProxiedSubscriptions(ot::Child&, ot::Ip6::Address const*, unsigned short)
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleNetworkDataUpdateRouter()
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAdvertisement(ot::Mle::Mle::RxInfo&)
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleLeaderData(ot::Mle::Mle::RxInfo&)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::HandleMulticastListenerRegistrationResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::UpdateReregistrationDelay(bool)
</UL>

<P><STRONG><a name="[27e]"></a>ot::Random::NonCrypto::GetUint32InRange(unsigned int, unsigned int)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, random.o(.text._ZN2ot6Random9NonCrypto16GetUint32InRangeEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ot::Random::NonCrypto::GetUint32InRange(unsigned int, unsigned int) &rArr; ot::Random::Manager::NonCryptoGetUint32() &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::Manager::NonCryptoGetUint32()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[b1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otRandomNonCryptoGetUint32InRange
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TrickleTimer::Start(ot::TrickleTimer::Mode, unsigned int, unsigned int, unsigned short)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TrickleTimer::StartNewInterval()
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TrickleTimer::HandleTimer()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::RegisterReceiver(ot::TimeTicker::Receiver)
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::StartTimerForBackoff(unsigned char)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AnnounceSenderBase::SendAnnounce(unsigned char)
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::GetAttachStartDelay() const
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Reattach()
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ScheduleMessageTransmissionTimer()
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::UpdateReregistrationDelay(bool)
</UL>

<P><STRONG><a name="[28d]"></a>ot::Random::NonCrypto::AddJitter(unsigned int, unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, random.o(.text._ZN2ot6Random9NonCrypto9AddJitterEjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ot::Random::NonCrypto::AddJitter(unsigned int, unsigned short) &rArr; ot::Random::Manager::NonCryptoGetUint32() &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::Manager::NonCryptoGetUint32()
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::HandleTimer()
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AnnounceSenderBase::HandleTimer()
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::GetAttachStartDelay() const
</UL>

<P><STRONG><a name="[302]"></a>ot::Router::SetNextHopAndCost(unsigned char, unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, topology.o(.text._ZN2ot6Router17SetNextHopAndCostEhh))
<BR><BR>[Called By]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::UpdateRoutesOnFed(ot::Mle::RouteTlv const&, unsigned char)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::UpdateRoutes(ot::Mle::RouteTlv const&, unsigned char)
</UL>

<P><STRONG><a name="[303]"></a>ot::Router::SetNextHopToInvalid()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, topology.o(.text._ZN2ot6Router19SetNextHopToInvalidEv))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Release(unsigned char)
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::UpdateRouterIdSet(unsigned char, ot::Mle::RouterIdSet const&)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::RemoveRouterLink(ot::Router&)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::UpdateRoutes(ot::Mle::RouteTlv const&, unsigned char)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ResolveRoutingLoops(unsigned short, unsigned short)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::AddRouter(unsigned char)
</UL>

<P><STRONG><a name="[975]"></a>ot::Router::Info::SetFrom(ot::Parent const&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, topology.o(.text._ZN2ot6Router4Info7SetFromERKNS_6ParentE))
<BR><BR>[Called By]<UL><LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::GetParentInfo(ot::Router::Info&) const
</UL>

<P><STRONG><a name="[306]"></a>ot::Router::Info::SetFrom(ot::Router const&)</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, topology.o(.text._ZN2ot6Router4Info7SetFromERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ot::Router::Info::SetFrom(ot::Router const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetRouterInfo(unsigned short, ot::Router::Info&)
</UL>

<P><STRONG><a name="[312]"></a>ot::Router::Clear()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, topology.o(.text._ZN2ot6Router5ClearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Router::Clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::AddRouter(unsigned char)
</UL>

<P><STRONG><a name="[7ca]"></a>ot::Router::SetFrom(ot::Parent const&)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, topology.o(.text._ZN2ot6Router7SetFromERKNS_6ParentE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::Router::SetFrom(ot::Parent const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
</UL>

<P><STRONG><a name="[8bc]"></a>ot::MeshCoP::ChannelTlv::SetChannel(unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, meshcop_tlvs.o(.text._ZN2ot7MeshCoP10ChannelTlv10SetChannelEt))
<BR><BR>[Called By]<UL><LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetFrom(ot::MeshCoP::Dataset::Info const&)
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::GenerateLocal()
</UL>

<P><STRONG><a name="[876]"></a>ot::MeshCoP::JoinerPskd::IsPskdValid(char const*)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, meshcop.o(.text._ZN2ot7MeshCoP10JoinerPskd11IsPskdValidEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::MeshCoP::JoinerPskd::IsPskdValid(char const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringLength(char const*, unsigned short)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerPskd::SetFrom(char const*)
</UL>

<P><STRONG><a name="[877]"></a>ot::MeshCoP::JoinerPskd::SetFrom(char const*)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, meshcop.o(.text._ZN2ot7MeshCoP10JoinerPskd7SetFromEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ot::MeshCoP::JoinerPskd::SetFrom(char const*) &rArr; ot::MeshCoP::JoinerPskd::IsPskdValid(char const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringLength(char const*, unsigned short)
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerPskd::IsPskdValid(char const*)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Start(char const*, char const*, char const*, char const*, char const*, char const*, void (*)(otError, void*), void*)
</UL>

<P><STRONG><a name="[878]"></a>ot::MeshCoP::NetworkName::Set(char const*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, network_name.o(.text._ZN2ot7MeshCoP11NetworkName3SetEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ot::MeshCoP::NetworkName::Set(char const*) &rArr; ot::MeshCoP::NetworkName::Set(ot::MeshCoP::NameData const&) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IsValidUtf8String(char const*)
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkName::Set(ot::MeshCoP::NameData const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otNetworkNameFromString
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkNameManager::NetworkNameManager(ot::Instance&)
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkNameManager::SetNetworkName(char const*)
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkNameManager::SetDomainName(char const*)
</UL>

<P><STRONG><a name="[879]"></a>ot::MeshCoP::NetworkName::Set(ot::MeshCoP::NameData const&)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, network_name.o(.text._ZN2ot7MeshCoP11NetworkName3SetERKNS0_8NameDataE))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ot::MeshCoP::NetworkName::Set(ot::MeshCoP::NameData const&) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringLength(char const*, unsigned short)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkName::Set(char const*)
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkNameManager::SetNetworkName(ot::MeshCoP::NameData const&)
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoveryResponse(ot::Mle::Mle::RxInfo&) const
</UL>

<P><STRONG><a name="[87a]"></a>ot::MeshCoP::DatasetLocal::Save(otOperationalDatasetTlvs const&)</STRONG> (Thumb, 34 bytes, Stack size 280 bytes, dataset_local.o(.text._ZN2ot7MeshCoP12DatasetLocal4SaveERK24otOperationalDatasetTlvs))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetLocal::Save(otOperationalDatasetTlvs const&) &rArr; ot::MeshCoP::DatasetLocal::Save(ot::MeshCoP::Dataset const&) &rArr; ot::Settings::DeleteOperationalDataset(ot::MeshCoP::Dataset::Type) &rArr; otPlatSettingsDelete &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Dataset()
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetFrom(otOperationalDatasetTlvs const&)
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Save(ot::MeshCoP::Dataset const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::Save(otOperationalDatasetTlvs const&)
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Save(otOperationalDatasetTlvs const&)
</UL>

<P><STRONG><a name="[87e]"></a>ot::MeshCoP::DatasetLocal::Save(ot::MeshCoP::Dataset::Info const&)</STRONG> (Thumb, 34 bytes, Stack size 280 bytes, dataset_local.o(.text._ZN2ot7MeshCoP12DatasetLocal4SaveERKNS0_7Dataset4InfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetLocal::Save(ot::MeshCoP::Dataset::Info const&) &rArr; ot::MeshCoP::DatasetLocal::Save(ot::MeshCoP::Dataset const&) &rArr; ot::Settings::DeleteOperationalDataset(ot::MeshCoP::Dataset::Type) &rArr; otPlatSettingsDelete &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Dataset()
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetFrom(ot::MeshCoP::Dataset::Info const&)
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Save(ot::MeshCoP::Dataset const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset::Info const&)
</UL>

<P><STRONG><a name="[87d]"></a>ot::MeshCoP::DatasetLocal::Save(ot::MeshCoP::Dataset const&)</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, dataset_local.o(.text._ZN2ot7MeshCoP12DatasetLocal4SaveERKNS0_7DatasetE))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetLocal::Save(ot::MeshCoP::Dataset const&) &rArr; ot::Settings::DeleteOperationalDataset(ot::MeshCoP::Dataset::Type) &rArr; otPlatSettingsDelete &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::DeleteOperationalDataset(ot::MeshCoP::Dataset::Type)
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::SaveOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset const&)
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::GetTimestamp(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Timestamp&) const
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::TypeToString(ot::MeshCoP::Dataset::Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::GenerateLocal()
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset const&)
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Save(ot::MeshCoP::Dataset::Info const&)
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Save(otOperationalDatasetTlvs const&)
</UL>

<P><STRONG><a name="[884]"></a>ot::MeshCoP::DatasetLocal::Clear()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dataset_local.o(.text._ZN2ot7MeshCoP12DatasetLocal5ClearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetLocal::Clear() &rArr; ot::Settings::DeleteOperationalDataset(ot::MeshCoP::Dataset::Type) &rArr; otPlatSettingsDelete &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::DeleteOperationalDataset(ot::MeshCoP::Dataset::Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Clear()
</UL>

<P><STRONG><a name="[885]"></a>ot::MeshCoP::DatasetLocal::Restore(ot::MeshCoP::Dataset&)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dataset_local.o(.text._ZN2ot7MeshCoP12DatasetLocal7RestoreERNS0_7DatasetE))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetLocal::Restore(ot::MeshCoP::Dataset&) &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::GetTimestamp(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Timestamp&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Restore()
</UL>

<P><STRONG><a name="[8c2]"></a>ot::MeshCoP::DatasetLocal::DatasetLocal(ot::Instance&, ot::MeshCoP::Dataset::Type)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dataset_local.o(.text._ZN2ot7MeshCoP12DatasetLocalC2ERNS_8InstanceENS0_7Dataset4TypeE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::PendingDatasetManager(ot::Instance&)
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::ActiveDatasetManager(ot::Instance&)
</UL>

<P><STRONG><a name="[bf5]"></a>ot::MeshCoP::DatasetLocal::DatasetLocal__sub_object(ot::Instance&, ot::MeshCoP::Dataset::Type)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dataset_local.o(.text._ZN2ot7MeshCoP12DatasetLocalC2ERNS_8InstanceENS0_7Dataset4TypeE), UNUSED)

<P><STRONG><a name="[887]"></a>ot::MeshCoP::GeneratePskc(char const*, ot::MeshCoP::NetworkName const&, ot::MeshCoP::ExtendedPanId const&, ot::Pskc&)</STRONG> (Thumb, 170 bytes, Stack size 80 bytes, meshcop.o(.text._ZN2ot7MeshCoP12GeneratePskcEPKcRKNS0_11NetworkNameERKNS0_13ExtendedPanIdERNS_4PskcE))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::GeneratePskc(char const*, ot::MeshCoP::NetworkName const&, ot::MeshCoP::ExtendedPanId const&, ot::Pskc&) &rArr; otPlatCryptoPbkdf2GenerateKey &rArr; mbedtls_aes_cmac_prf_128 &rArr; mbedtls_cipher_cmac &rArr; mbedtls_cipher_cmac_finish &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringLength(char const*, unsigned short)
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoPbkdf2GenerateKey
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IsValidUtf8String(char const*)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetGeneratePskc
</UL>

<P><STRONG><a name="[7c0]"></a>ot::MeshCoP::JoinerRouter::GetJoinerUdpPort()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, joiner_router.o(.text._ZN2ot7MeshCoP12JoinerRouter16GetJoinerUdpPortEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ot::MeshCoP::JoinerRouter::GetJoinerUdpPort() &rArr; ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(ot::MeshCoP::Tlv::Type) const &rArr; ot::MeshCoP::Tlv::FindTlv(unsigned char const*, unsigned short, ot::MeshCoP::Tlv::Type)
</UL>
<BR>[Calls]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(ot::MeshCoP::Tlv::Type) const
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetJoinerUdpPort
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::Start()
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::ShouldUsePlatformUdp(unsigned short) const
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDiscoveryResponse(ot::Ip6::Address const&, ot::Message const&)
</UL>

<P><STRONG><a name="[83]"></a>ot::MeshCoP::JoinerRouter::HandleUdpReceive(void*, otMessage*, otMessageInfo const*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, joiner_router.o(.text._ZN2ot7MeshCoP12JoinerRouter16HandleUdpReceiveEPvP9otMessagePK13otMessageInfo))
<BR>[Address Reference Count : 1]<UL><LI> joiner_router.o(.text._ZN2ot7MeshCoP12JoinerRouter5StartEv)
</UL>
<P><STRONG><a name="[889]"></a>ot::MeshCoP::JoinerRouter::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, joiner_router.o(.text._ZN2ot7MeshCoP12JoinerRouter16HandleUdpReceiveERNS_7MessageERKNS_3Ip611MessageInfoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned short&rang;(ot::Message&, unsigned char, unsigned short)
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::GetBorderAgentRloc(ot::ThreadNetif&, unsigned short&)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo(unsigned short)
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)28&rang;()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[88b]"></a>ot::MeshCoP::JoinerRouter::SetJoinerUdpPort(unsigned short)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, joiner_router.o(.text._ZN2ot7MeshCoP12JoinerRouter16SetJoinerUdpPortEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::JoinerRouter::SetJoinerUdpPort(unsigned short) &rArr; ot::MeshCoP::JoinerRouter::Start() &rArr; ot::Ip6::Filter::UpdateUnsecurePorts(ot::Ip6::Filter::Action, unsigned short) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::Start()
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetJoinerUdpPort
</UL>

<P><STRONG><a name="[88d]"></a>ot::MeshCoP::JoinerRouter::SendJoinerEntrust(ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, joiner_router.o(.text._ZN2ot7MeshCoP12JoinerRouter17SendJoinerEntrustERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::JoinerRouter::SendJoinerEntrust(ot::Ip6::MessageInfo const&) &rArr; ot::MeshCoP::JoinerRouter::PrepareJoinerEntrustMessage() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::AbortTransaction(void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::PrepareJoinerEntrustMessage()
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)20&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::SendDelayedJoinerEntrust()
</UL>

<P><STRONG><a name="[890]"></a>ot::MeshCoP::JoinerRouter::HandleNotifierEvents(ot::Events)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, joiner_router.o(.text._ZN2ot7MeshCoP12JoinerRouter20HandleNotifierEventsENS_6EventsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::JoinerRouter::HandleNotifierEvents(ot::Events) &rArr; ot::MeshCoP::JoinerRouter::Start() &rArr; ot::Ip6::Filter::UpdateUnsecurePorts(ot::Ip6::Filter::Action, unsigned short) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::Start()
</UL>
<BR>[Called By]<UL><LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::EmitEvents()
</UL>

<P><STRONG><a name="[891]"></a>ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata::ReadFrom(ot::Message const&)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, joiner_router.o(.text._ZN2ot7MeshCoP12JoinerRouter21JoinerEntrustMetadata8ReadFromERKNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata::ReadFrom(ot::Message const&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::SendDelayedJoinerEntrust()
</UL>

<P><STRONG><a name="[343]"></a>ot::MeshCoP::JoinerRouter::SendDelayedJoinerEntrust()</STRONG> (Thumb, 128 bytes, Stack size 88 bytes, joiner_router.o(.text._ZN2ot7MeshCoP12JoinerRouter24SendDelayedJoinerEntrustEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::JoinerRouter::SendDelayedJoinerEntrust() &rArr; ot::MeshCoP::JoinerRouter::SendJoinerEntrust(ot::Ip6::MessageInfo const&) &rArr; ot::MeshCoP::JoinerRouter::PrepareJoinerEntrustMessage() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::DequeueAndFree(ot::Message&)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::FireAt(ot::Time)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata::ReadFrom(ot::Message const&)
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::SendJoinerEntrust(ot::Ip6::MessageInfo const&)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetKek(ot::Mac::Key const&)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::HandleJoinerEntrustResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilliIn&lang;ot::MeshCoP::JoinerRouter, &(ot::MeshCoP::JoinerRouter::HandleTimer())&rang;::HandleTimer(ot::Timer&)
</UL>

<P><STRONG><a name="[892]"></a>ot::MeshCoP::JoinerRouter::DelaySendingJoinerEntrust(ot::Ip6::MessageInfo const&, ot::Mac::Key const&)</STRONG> (Thumb, 164 bytes, Stack size 96 bytes, joiner_router.o(.text._ZN2ot7MeshCoP12JoinerRouter25DelaySendingJoinerEntrustERKNS_3Ip611MessageInfoERKNS_3Mac3KeyE))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::JoinerRouter::DelaySendingJoinerEntrust(ot::Ip6::MessageInfo const&, ot::Mac::Key const&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::Enqueue(ot::Message&, ot::MessageQueue::QueuePosition)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::Allocate(ot::Message::Type)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::FireAt(ot::Time)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::LogError(char const*, otError)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::JoinerRouter::HandleTmf&lang;(ot::Uri)29&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[893]"></a>ot::MeshCoP::JoinerRouter::HandleJoinerEntrustResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, joiner_router.o(.text._ZN2ot7MeshCoP12JoinerRouter27HandleJoinerEntrustResponseEPNS_4Coap7MessageEPKNS_3Ip611MessageInfoE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::JoinerRouter::HandleJoinerEntrustResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError) &rArr; ot::MeshCoP::JoinerRouter::SendDelayedJoinerEntrust() &rArr; ot::MeshCoP::JoinerRouter::SendJoinerEntrust(ot::Ip6::MessageInfo const&) &rArr; ot::MeshCoP::JoinerRouter::PrepareJoinerEntrustMessage() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::SendDelayedJoinerEntrust()
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)20&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::HandleJoinerEntrustResponse(void*, otMessage*, otMessageInfo const*, otError)
</UL>

<P><STRONG><a name="[82]"></a>ot::MeshCoP::JoinerRouter::HandleJoinerEntrustResponse(void*, otMessage*, otMessageInfo const*, otError)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, joiner_router.o(.text._ZN2ot7MeshCoP12JoinerRouter27HandleJoinerEntrustResponseEPvP9otMessagePK13otMessageInfo7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::JoinerRouter::HandleJoinerEntrustResponse(void*, otMessage*, otMessageInfo const*, otError) &rArr; ot::MeshCoP::JoinerRouter::HandleJoinerEntrustResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError) &rArr; ot::MeshCoP::JoinerRouter::SendDelayedJoinerEntrust() &rArr; ot::MeshCoP::JoinerRouter::SendJoinerEntrust(ot::Ip6::MessageInfo const&) &rArr; ot::MeshCoP::JoinerRouter::PrepareJoinerEntrustMessage() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::HandleJoinerEntrustResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> joiner_router.o(.text._ZN2ot7MeshCoP12JoinerRouter17SendJoinerEntrustERKNS_3Ip611MessageInfoE)
</UL>
<P><STRONG><a name="[88e]"></a>ot::MeshCoP::JoinerRouter::PrepareJoinerEntrustMessage()</STRONG> (Thumb, 330 bytes, Stack size 344 bytes, joiner_router.o(.text._ZN2ot7MeshCoP12JoinerRouter27PrepareJoinerEntrustMessageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::JoinerRouter::PrepareJoinerEntrustMessage() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Dataset()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri)
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::GetNetworkKey(ot::NetworkKey&) const
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTo(ot::Message&) const
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned int&rang;(ot::Message&, unsigned char, unsigned int)
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkNameTlv::SetNetworkName(ot::MeshCoP::NameData const&)
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::GetTlv(ot::MeshCoP::Tlv::Type) const
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkName::GetAsData() const
</UL>
<BR>[Called By]<UL><LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::SendJoinerEntrust(ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[88c]"></a>ot::MeshCoP::JoinerRouter::Start()</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, joiner_router.o(.text._ZN2ot7MeshCoP12JoinerRouter5StartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::JoinerRouter::Start() &rArr; ot::Ip6::Filter::UpdateUnsecurePorts(ot::Ip6::Filter::Action, unsigned short) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Filter::UpdateUnsecurePorts(ot::Ip6::Filter::Action, unsigned short)
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::Close()
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::Open(void (*)(void*, otMessage*, otMessageInfo const*), void*)
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::Bind(unsigned short, ot::Ip6::NetifIdentifier)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::GetJoinerUdpPort()
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::IsJoiningEnabled() const
</UL>
<BR>[Called By]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::SetJoinerUdpPort(unsigned short)
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::HandleNotifierEvents(ot::Events)
</UL>

<P><STRONG><a name="[7e4]"></a>void ot::MeshCoP::JoinerRouter::HandleTmf&lang;(ot::Uri)29&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 224 bytes, Stack size 104 bytes, joiner_router.o(.text._ZN2ot7MeshCoP12JoinerRouter9HandleTmfILNS_3UriE29EEEvRNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = void ot::MeshCoP::JoinerRouter::HandleTmf&lang;(ot::Uri)29&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::Socket::SendTo(ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::IsNonConfirmablePostRequest() const
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Settings::Settings(ot::Message::LinkSecurityMode, ot::Message::Priority)
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::SendTo(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, void*, unsigned char)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlvValueOffset(ot::Message const&, unsigned char, unsigned short&, unsigned short&)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::DelaySendingJoinerEntrust(ot::Ip6::MessageInfo const&, ot::Mac::Key const&)
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLinkLocalAddress(ot::Ip6::InterfaceIdentifier const&)
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)29&rang;()
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::NewMessage(unsigned short, ot::Message::Settings const&)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[898]"></a>ot::MeshCoP::JoinerRouter::JoinerRouter(ot::Instance&)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, joiner_router.o(.text._ZN2ot7MeshCoP12JoinerRouterC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::Socket(ot::Instance&)
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bf6]"></a>ot::MeshCoP::JoinerRouter::JoinerRouter__sub_object(ot::Instance&)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, joiner_router.o(.text._ZN2ot7MeshCoP12JoinerRouterC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[899]"></a>ot::MeshCoP::SteeringData::CalculateHashBitIndexes(ot::MeshCoP::JoinerDiscerner const&, ot::MeshCoP::SteeringData::HashBitIndexes&)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, meshcop.o(.text._ZN2ot7MeshCoP12SteeringData23CalculateHashBitIndexesERKNS0_15JoinerDiscernerERNS1_14HashBitIndexesE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::SteeringData::CalculateHashBitIndexes(ot::MeshCoP::JoinerDiscerner const&, ot::MeshCoP::SteeringData::HashBitIndexes&) &rArr; ot::MeshCoP::SteeringData::CalculateHashBitIndexes(ot::Mac::ExtAddress const&, ot::MeshCoP::SteeringData::HashBitIndexes&)
</UL>
<BR>[Calls]<UL><LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerDiscerner::CopyTo(ot::Mac::ExtAddress&) const
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SteeringData::CalculateHashBitIndexes(ot::Mac::ExtAddress const&, ot::MeshCoP::SteeringData::HashBitIndexes&)
</UL>
<BR>[Called By]<UL><LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SteeringDataCheckJoiner(ot::MeshCoP::JoinerDiscerner const&) const
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Start(char const*, char const*, char const*, char const*, char const*, char const*, void (*)(otError, void*), void*)
</UL>

<P><STRONG><a name="[6f3]"></a>ot::MeshCoP::SteeringData::CalculateHashBitIndexes(ot::Mac::ExtAddress const&, ot::MeshCoP::SteeringData::HashBitIndexes&)</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, meshcop.o(.text._ZN2ot7MeshCoP12SteeringData23CalculateHashBitIndexesERKNS_3Mac10ExtAddressERNS1_14HashBitIndexesE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ot::MeshCoP::SteeringData::CalculateHashBitIndexes(ot::Mac::ExtAddress const&, ot::MeshCoP::SteeringData::HashBitIndexes&)
</UL>
<BR>[Calls]<UL><LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crc16::Crc16(ot::Crc16::Polynomial)
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crc16::Update(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SteeringDataCheckJoiner(ot::Mac::ExtAddress const&) const
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Start(char const*, char const*, char const*, char const*, char const*, char const*, void (*)(otError, void*), void*)
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::Discover(ot::Mac::ChannelMask const&, unsigned short, bool, bool, ot::MeshCoP::SteeringData::HashBitIndexes const*, void (*)(otActiveScanResult*, void*), void*)
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SteeringData::CalculateHashBitIndexes(ot::MeshCoP::JoinerDiscerner const&, ot::MeshCoP::SteeringData::HashBitIndexes&)
</UL>

<P><STRONG><a name="[89d]"></a>ot::MeshCoP::SteeringData::Init(unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, meshcop.o(.text._ZN2ot7MeshCoP12SteeringData4InitEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::SteeringData::Init(unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SteeringDataTlv::CopyTo(ot::MeshCoP::SteeringData&) const
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoveryResponse(ot::Mle::Mle::RxInfo&) const
</UL>

<P><STRONG><a name="[471]"></a>ot::MeshCoP::ChannelMaskTlv::GetChannelMask(ot::Message const&)</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, meshcop_tlvs.o(.text._ZN2ot7MeshCoP14ChannelMaskTlv14GetChannelMaskERKNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::ChannelMaskTlv::GetChannelMask(ot::Message const&) &rArr; ot::Tlv::FindTlvValueOffset(ot::Message const&, unsigned char, unsigned short&, unsigned short&) &rArr; ot::Tlv::ParsedInfo::FindIn(ot::Message const&, unsigned char) &rArr; ot::Tlv::ParsedInfo::ParseFrom(ot::Message const&, unsigned short) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlvValueOffset(ot::Message const&, unsigned char, unsigned short&, unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AnnounceBeginServer::HandleTmf&lang;(ot::Uri)10&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::EnergyScanServer::HandleTmf&lang;(ot::Uri)19&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::PanIdQueryServer::HandleTmf&lang;(ot::Uri)26&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[472]"></a>ot::MeshCoP::ChannelMaskTlv::SetChannelMask(unsigned int)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, meshcop_tlvs.o(.text._ZN2ot7MeshCoP14ChannelMaskTlv14SetChannelMaskEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::ChannelMaskTlv::SetChannelMask(unsigned int) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::GetValue() const
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ChannelMaskEntry::SetMask(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetFrom(ot::MeshCoP::Dataset::Info const&)
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::GenerateLocal()
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::EnergyScanServer::HandleTmf&lang;(ot::Uri)19&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PanIdQueryServer::SendConflict()
</UL>

<P><STRONG><a name="[8a0]"></a>ot::MeshCoP::DatasetManager::DatasetTlv::ReadFromMessage(ot::Message const&, unsigned short)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dataset_manager_ftd.o(.text._ZN2ot7MeshCoP14DatasetManager10DatasetTlv15ReadFromMessageERKNS_7MessageEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetManager::DatasetTlv::ReadFromMessage(ot::Message const&, unsigned short) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Tlv::IsValid(ot::MeshCoP::Tlv const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::ApplyActiveDataset(ot::MeshCoP::Timestamp const&, ot::Coap::Message&)
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[70c]"></a>ot::MeshCoP::DatasetManager::HandleDetach()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP14DatasetManager12HandleDetachEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetManager::HandleDetach() &rArr; ot::MeshCoP::DatasetManager::Restore() &rArr; ot::MeshCoP::DatasetLocal::Restore(ot::MeshCoP::Dataset&) &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Restore()
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Stop(ot::Mle::Mle::StopMode)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::BecomeDetached()
</UL>

<P><STRONG><a name="[8a2]"></a>ot::MeshCoP::DatasetManager::SendSetRequest(ot::MeshCoP::Dataset::Info const&, unsigned char const*, unsigned char, void (*)(otError, void*), void*)</STRONG> (Thumb, 192 bytes, Stack size 80 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP14DatasetManager14SendSetRequestERKNS0_7Dataset4InfoEPKhhPFv7otErrorPvES9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetManager::SendSetRequest(ot::MeshCoP::Dataset::Info const&, unsigned char const*, unsigned char, void (*)(otError, void*), void*) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::AppendDatasetToMessage(ot::MeshCoP::Dataset::Info const&, ot::Message&) const
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetSendMgmtPendingSet
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetSendMgmtActiveSet
</UL>

<P><STRONG><a name="[8a4]"></a>ot::MeshCoP::DatasetManager::SendSetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, dataset_manager_ftd.o(.text._ZN2ot7MeshCoP14DatasetManager15SendSetResponseERKNS_4Coap7MessageERKNS_3Ip611MessageInfoENS0_8StateTlv5StateE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetManager::SendSetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityResponseMessage(ot::Coap::Message const&)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned char&rang;(ot::Message&, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[8a5]"></a>ot::MeshCoP::DatasetManager::HandleDatasetUpdated()</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP14DatasetManager20HandleDatasetUpdatedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetManager::HandleDatasetUpdated() &rArr; ot::MeshCoP::DatasetManager::SendSet() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSet()
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Restore()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::IncrementVersionAndStableVersion()
</UL>
<BR>[Called By]<UL><LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::Save(otOperationalDatasetTlvs const&)
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset::Info const&)
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Save(otOperationalDatasetTlvs const&)
</UL>

<P><STRONG><a name="[8a7]"></a>ot::MeshCoP::DatasetManager::HandleMgmtSetResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP14DatasetManager21HandleMgmtSetResponseEPNS_4Coap7MessageEPKNS_3Ip611MessageInfoE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetManager::HandleMgmtSetResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned char&rang;(ot::Message const&, unsigned char, unsigned char&)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleMgmtSetResponse(void*, otMessage*, otMessageInfo const*, otError)
</UL>

<P><STRONG><a name="[85]"></a>ot::MeshCoP::DatasetManager::HandleMgmtSetResponse(void*, otMessage*, otMessageInfo const*, otError)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP14DatasetManager21HandleMgmtSetResponseEPvP9otMessagePK13otMessageInfo7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetManager::HandleMgmtSetResponse(void*, otMessage*, otMessageInfo const*, otError) &rArr; ot::MeshCoP::DatasetManager::HandleMgmtSetResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleMgmtSetResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dataset_manager.o(.text._ZN2ot7MeshCoP14DatasetManager7SendSetEv)
<LI> dataset_manager.o(.text._ZN2ot7MeshCoP14DatasetManager14SendSetRequestERKNS0_7Dataset4InfoEPKhhPFv7otErrorPvES9_)
</UL>
<P><STRONG><a name="[8a8]"></a>ot::MeshCoP::DatasetManager::Save(otOperationalDatasetTlvs const&)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP14DatasetManager4SaveERK24otOperationalDatasetTlvs))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetManager::Save(otOperationalDatasetTlvs const&) &rArr; ot::MeshCoP::DatasetManager::HandleDatasetUpdated() &rArr; ot::MeshCoP::DatasetManager::SendSet() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleDatasetUpdated()
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Save(otOperationalDatasetTlvs const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetSetActiveTlvs
</UL>

<P><STRONG><a name="[8a9]"></a>ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset::Info const&)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP14DatasetManager4SaveERKNS0_7Dataset4InfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset::Info const&) &rArr; ot::MeshCoP::DatasetManager::HandleDatasetUpdated() &rArr; ot::MeshCoP::DatasetManager::SendSet() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleDatasetUpdated()
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Save(ot::MeshCoP::Dataset::Info const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetSetActive
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Joiner::HandleTmf&lang;(ot::Uri)20&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[8aa]"></a>ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset const&)</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP14DatasetManager4SaveERKNS0_7DatasetE))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset const&) &rArr; ot::MeshCoP::Dataset::ApplyConfiguration(ot::Instance&, bool*) const &rArr; ot::KeyManager::SetNetworkKey(ot::NetworkKey const&) &rArr; ot::KeyManager::UpdateKeyMaterial() &rArr; ot::KeyManager::ComputeKeys(unsigned int, ot::KeyManager::HashKeys&) const &rArr; ot::Crypto::HmacSha256::Start(ot::Crypto::Key const&) &rArr; otPlatCryptoHmacSha256Start &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Timestamp::Compare(ot::MeshCoP::Timestamp const*, ot::MeshCoP::Timestamp const*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::IncrementVersionAndStableVersion()
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Save(ot::MeshCoP::Dataset const&)
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ApplyConfiguration(ot::Instance&, bool*) const
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::GetTimestamp(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Timestamp&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::ApplyActiveDataset(ot::MeshCoP::Timestamp const&, ot::Coap::Message&)
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::Save(ot::MeshCoP::Timestamp const&, ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::HandleDelayTimer()
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::ClearNetwork()
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::Save(ot::MeshCoP::Timestamp const&, ot::Message const&, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[772]"></a>ot::MeshCoP::DatasetManager::Clear()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP14DatasetManager5ClearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetManager::Clear() &rArr; ot::MeshCoP::DatasetLocal::Clear() &rArr; ot::Settings::DeleteOperationalDataset(ot::MeshCoP::Dataset::Type) &rArr; otPlatSettingsDelete &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkSetPanId
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkSetChannel
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::Clear()
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetPskc
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetNetworkName
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetNetworkKey
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetExtendedPanId
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::HandleDelayTimer()
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Reattach()
</UL>

<P><STRONG><a name="[767]"></a>ot::MeshCoP::DatasetManager::Restore()</STRONG> (Thumb, 126 bytes, Stack size 280 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP14DatasetManager7RestoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetManager::Restore() &rArr; ot::MeshCoP::DatasetLocal::Restore(ot::MeshCoP::Dataset&) &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Dataset()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Restore(ot::MeshCoP::Dataset&)
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ApplyConfiguration(ot::Instance&, bool*) const
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::GetTimestamp(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Timestamp&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Restore()
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::GenerateLocal()
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleDatasetUpdated()
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleDetach()
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode)
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Reattach()
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Attach(ot::Mle::Mle::AttachMode)
</UL>

<P><STRONG><a name="[8a6]"></a>ot::MeshCoP::DatasetManager::SendSet()</STRONG> (Thumb, 356 bytes, Stack size 608 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP14DatasetManager7SendSetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetManager::SendSet() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Dataset()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Timestamp::Compare(ot::MeshCoP::Timestamp const*, ot::MeshCoP::Timestamp const*)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::LogError(char const*, otError)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc()
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::GetTimestamp(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Timestamp&) const
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::TypeToString(ot::MeshCoP::Dataset::Type)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::HandleTimer(ot::Timer&)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::HandleTimer(ot::Timer&)
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleDatasetUpdated()
</UL>

<P><STRONG><a name="[8ac]"></a>ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 800 bytes, Stack size 384 bytes, dataset_manager_ftd.o(.text._ZN2ot7MeshCoP14DatasetManager9HandleSetERNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::MeshCoP::Leader::SendDatasetChanged(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::GetDelayTimerMinimal() const
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Dataset()
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::GetNetworkKey(ot::NetworkKey&) const
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::GetSize() const
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, unsigned short, ot::Tlv&)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, void*, unsigned char)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ChannelTlv::IsValid() const
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::GetLocatorAddress(ot::Ip6::Address&, unsigned short) const
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(ot::MeshCoP::Tlv::Type) const
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendDatasetChanged(ot::Ip6::Address const&)
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::ApplyActiveDataset(ot::MeshCoP::Timestamp const&, ot::Coap::Message&)
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::DatasetTlv::ReadFromMessage(ot::Message const&, unsigned short)
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::GetTimestamp() const
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Timestamp::Compare(ot::MeshCoP::Timestamp const*, ot::MeshCoP::Timestamp const*)
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset const&)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::IncrementVersionAndStableVersion()
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetTlv(ot::MeshCoP::Tlv const&)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::PendingDatasetManager::HandleTmf&lang;(ot::Uri)27&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::ActiveDatasetManager::HandleTmf&lang;(ot::Uri)12&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[7be]"></a>ot::MeshCoP::NetworkNameTlv::SetNetworkName(ot::MeshCoP::NameData const&)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, meshcop_tlvs.o(.text._ZN2ot7MeshCoP14NetworkNameTlv14SetNetworkNameERKNS0_8NameDataE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ot::MeshCoP::NetworkNameTlv::SetNetworkName(ot::MeshCoP::NameData const&) &rArr; ot::MeshCoP::NameData::CopyTo(char*, unsigned char) const &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NameData::CopyTo(char*, unsigned char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::PrepareJoinerEntrustMessage()
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDiscoveryResponse(ot::Ip6::Address const&, ot::Message const&)
</UL>

<P><STRONG><a name="[6f2]"></a>ot::MeshCoP::ComputeJoinerId(ot::Mac::ExtAddress const&, ot::Mac::ExtAddress&)</STRONG> (Thumb, 62 bytes, Stack size 168 bytes, meshcop.o(.text._ZN2ot7MeshCoP15ComputeJoinerIdERKNS_3Mac10ExtAddressERS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::ComputeJoinerId(ot::Mac::ExtAddress const&, ot::Mac::ExtAddress&) &rArr; ot::Crypto::Sha256::Update(void const*, unsigned short) &rArr; otPlatCryptoSha256Update &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::Sha256::~Sha256()
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::Sha256::Sha256()
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::Sha256::Update(void const*, unsigned short)
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::Sha256::Finish(ot::Crypto::Sha256::Hash&)
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::Sha256::Start()
</UL>
<BR>[Called By]<UL><LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SteeringDataCheckJoiner(ot::Mac::ExtAddress const&) const
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::ClearDiscerner()
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Joiner(ot::Instance&)
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::Discover(ot::Mac::ChannelMask const&, unsigned short, bool, bool, ot::MeshCoP::SteeringData::HashBitIndexes const*, void (*)(otActiveScanResult*, void*), void*)
</UL>

<P><STRONG><a name="[89f]"></a>ot::MeshCoP::ChannelMaskEntry::SetMask(unsigned int)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, meshcop_tlvs.o(.text._ZN2ot7MeshCoP16ChannelMaskEntry7SetMaskEj))
<BR><BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ChannelMaskTlv::SetChannelMask(unsigned int)
</UL>

<P><STRONG><a name="[8b3]"></a>ot::MeshCoP::SecurityPolicyTlv::SetSecurityPolicy(ot::SecurityPolicy const&)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, meshcop_tlvs.o(.text._ZN2ot7MeshCoP17SecurityPolicyTlv17SetSecurityPolicyERKNS_14SecurityPolicyE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::SecurityPolicyTlv::SetSecurityPolicy(ot::SecurityPolicy const&) &rArr; ot::SecurityPolicy::GetFlags(unsigned char*, unsigned char) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SecurityPolicy::GetFlags(unsigned char*, unsigned char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetFrom(ot::MeshCoP::Dataset::Info const&)
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::GenerateLocal()
</UL>

<P><STRONG><a name="[3c8]"></a>ot::MeshCoP::GetBorderAgentRloc(ot::ThreadNetif&, unsigned short&)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, meshcop.o(.text._ZN2ot7MeshCoP18GetBorderAgentRlocERNS_11ThreadNetifERt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ot::MeshCoP::GetBorderAgentRloc(ot::ThreadNetif&, unsigned short&) &rArr; ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(ot::MeshCoP::Tlv::Type) const &rArr; ot::MeshCoP::Tlv::FindTlv(unsigned char const*, unsigned short, ot::MeshCoP::Tlv::Type)
</UL>
<BR>[Calls]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(ot::MeshCoP::Tlv::Type) const
</UL>
<BR>[Called By]<UL><LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateIp6RouteFtd(ot::Ip6::Header&, ot::Message&)
</UL>

<P><STRONG><a name="[8b5]"></a>ot::MeshCoP::NetworkNameManager::SetDomainName(char const*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, network_name.o(.text._ZN2ot7MeshCoP18NetworkNameManager13SetDomainNameEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ot::MeshCoP::NetworkNameManager::SetDomainName(char const*) &rArr; ot::MeshCoP::NetworkName::Set(char const*) &rArr; ot::MeshCoP::NetworkName::Set(ot::MeshCoP::NameData const&) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkName::Set(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetDomainName
</UL>

<P><STRONG><a name="[8b6]"></a>ot::MeshCoP::NetworkNameManager::SetNetworkName(char const*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, network_name.o(.text._ZN2ot7MeshCoP18NetworkNameManager14SetNetworkNameEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::NetworkNameManager::SetNetworkName(char const*) &rArr; ot::MeshCoP::NetworkNameManager::SignalNetworkNameChange(otError) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkName::Set(char const*)
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkNameManager::SignalNetworkNameChange(otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetNetworkName
</UL>

<P><STRONG><a name="[8b8]"></a>ot::MeshCoP::NetworkNameManager::SetNetworkName(ot::MeshCoP::NameData const&)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, network_name.o(.text._ZN2ot7MeshCoP18NetworkNameManager14SetNetworkNameERKNS0_8NameDataE))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ot::MeshCoP::NetworkNameManager::SetNetworkName(ot::MeshCoP::NameData const&) &rArr; ot::MeshCoP::NetworkName::Set(ot::MeshCoP::NameData const&) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkName::Set(ot::MeshCoP::NameData const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ApplyConfiguration(ot::Instance&, bool*) const
</UL>

<P><STRONG><a name="[8b7]"></a>ot::MeshCoP::NetworkNameManager::SignalNetworkNameChange(otError)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, network_name.o(.text._ZN2ot7MeshCoP18NetworkNameManager23SignalNetworkNameChangeE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::NetworkNameManager::SignalNetworkNameChange(otError) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::SignalIfFirst(ot::Event)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkNameManager::NetworkNameManager(ot::Instance&)
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkNameManager::SetNetworkName(char const*)
</UL>

<P><STRONG><a name="[8b9]"></a>ot::MeshCoP::NetworkNameManager::NetworkNameManager(ot::Instance&)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, network_name.o(.text._ZN2ot7MeshCoP18NetworkNameManagerC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkName::Set(char const*)
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkNameManager::SignalNetworkNameChange(otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bf7]"></a>ot::MeshCoP::NetworkNameManager::NetworkNameManager__sub_object(ot::Instance&)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, network_name.o(.text._ZN2ot7MeshCoP18NetworkNameManagerC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[86]"></a>ot::MeshCoP::ActiveDatasetManager::HandleTimer(ot::Timer&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP20ActiveDatasetManager11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::ActiveDatasetManager::HandleTimer(ot::Timer&) &rArr; ot::MeshCoP::DatasetManager::SendSet() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSet()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dataset_manager.o(.text._ZN2ot7MeshCoP20ActiveDatasetManagerC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[7c3]"></a>ot::MeshCoP::ActiveDatasetManager::StartLeader()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dataset_manager_ftd.o(.text._ZN2ot7MeshCoP20ActiveDatasetManager11StartLeaderEv))
<BR><BR>[Called By]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode)
</UL>

<P><STRONG><a name="[8ba]"></a>ot::MeshCoP::ActiveDatasetManager::GenerateLocal()</STRONG> (Thumb, 476 bytes, Stack size 304 bytes, dataset_manager_ftd.o(.text._ZN2ot7MeshCoP20ActiveDatasetManager13GenerateLocalEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoRandomGet
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Dataset()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::GetPskc(ot::Pskc&) const
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsAttached() const
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::GetNetworkKey(ot::NetworkKey&) const
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Restore()
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Save(ot::MeshCoP::Dataset const&)
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::GetTlv(ot::MeshCoP::Tlv::Type) const
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkName::GetAsData() const
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetTlv(ot::MeshCoP::Tlv const&)
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetTlv(ot::MeshCoP::Tlv::Type, void const*, unsigned char)
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SecurityPolicyTlv::SetSecurityPolicy(ot::SecurityPolicy const&)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ChannelMaskTlv::SetChannelMask(unsigned int)
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ChannelTlv::SetChannel(unsigned short)
</UL>

<P><STRONG><a name="[721]"></a>ot::MeshCoP::ActiveDatasetManager::Save(ot::MeshCoP::Timestamp const&, ot::Message const&, unsigned short, unsigned short)</STRONG> (Thumb, 60 bytes, Stack size 288 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP20ActiveDatasetManager4SaveERKNS0_9TimestampERKNS_7MessageEtt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Dataset()
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset const&)
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ReadFromMessage(ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetTimestamp(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Timestamp const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildIdResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleLeaderData(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[7dd]"></a>void ot::MeshCoP::ActiveDatasetManager::HandleTmf&lang;(ot::Uri)11&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP20ActiveDatasetManager9HandleTmfILNS_3UriE11EEEvRNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + Unknown Stack Size
<LI>Call Chain = void ot::MeshCoP::ActiveDatasetManager::HandleTmf&lang;(ot::Uri)11&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::MeshCoP::DatasetManager::HandleGet(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) const &rArr; ot::MeshCoP::DatasetManager::SendGetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, unsigned char*, unsigned char) const &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleGet(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[7de]"></a>void ot::MeshCoP::ActiveDatasetManager::HandleTmf&lang;(ot::Uri)12&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dataset_manager_ftd.o(.text._ZN2ot7MeshCoP20ActiveDatasetManager9HandleTmfILNS_3UriE12EEEvRNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1992 + Unknown Stack Size
<LI>Call Chain = void ot::MeshCoP::ActiveDatasetManager::HandleTmf&lang;(ot::Uri)12&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::MeshCoP::Leader::SendDatasetChanged(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::ApplyConfiguration() const
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[8c1]"></a>ot::MeshCoP::ActiveDatasetManager::ActiveDatasetManager(ot::Instance&)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP20ActiveDatasetManagerC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::DatasetLocal(ot::Instance&, ot::MeshCoP::Dataset::Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bf8]"></a>ot::MeshCoP::ActiveDatasetManager::ActiveDatasetManager__sub_object(ot::Instance&)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP20ActiveDatasetManagerC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[8c3]"></a>ot::MeshCoP::ExtendedPanIdManager::SetExtPanId(ot::MeshCoP::ExtendedPanId const&)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, extended_panid.o(.text._ZN2ot7MeshCoP20ExtendedPanIdManager11SetExtPanIdERKNS0_13ExtendedPanIdE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::ExtendedPanIdManager::SetExtPanId(ot::MeshCoP::ExtendedPanId const&) &rArr; otError ot::Notifier::Update&lang;ot::MeshCoP::ExtendedPanId&rang;(ot::MeshCoP::ExtendedPanId&, ot::MeshCoP::ExtendedPanId const&, ot::Event) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;ot::MeshCoP::ExtendedPanId&rang;(ot::MeshCoP::ExtendedPanId&, ot::MeshCoP::ExtendedPanId const&, ot::Event)
</UL>
<BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetExtendedPanId
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ApplyConfiguration(ot::Instance&, bool*) const
</UL>

<P><STRONG><a name="[8c5]"></a>ot::MeshCoP::ExtendedPanIdManager::ExtendedPanIdManager(ot::Instance&)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, extended_panid.o(.text._ZN2ot7MeshCoP20ExtendedPanIdManagerC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;ot::MeshCoP::ExtendedPanId&rang;(ot::MeshCoP::ExtendedPanId&, ot::MeshCoP::ExtendedPanId const&, ot::Event)
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bf9]"></a>ot::MeshCoP::ExtendedPanIdManager::ExtendedPanIdManager__sub_object(ot::Instance&)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, extended_panid.o(.text._ZN2ot7MeshCoP20ExtendedPanIdManagerC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[87]"></a>ot::MeshCoP::PendingDatasetManager::HandleTimer(ot::Timer&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP21PendingDatasetManager11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::PendingDatasetManager::HandleTimer(ot::Timer&) &rArr; ot::MeshCoP::DatasetManager::SendSet() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSet()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dataset_manager.o(.text._ZN2ot7MeshCoP21PendingDatasetManagerC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[7c4]"></a>ot::MeshCoP::PendingDatasetManager::StartLeader()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dataset_manager_ftd.o(.text._ZN2ot7MeshCoP21PendingDatasetManager11StartLeaderEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::PendingDatasetManager::StartLeader() &rArr; ot::MeshCoP::PendingDatasetManager::StartDelayTimer() &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::StartDelayTimer()
</UL>
<BR>[Called By]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode)
</UL>

<P><STRONG><a name="[755]"></a>ot::MeshCoP::PendingDatasetManager::ClearNetwork()</STRONG> (Thumb, 40 bytes, Stack size 280 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP21PendingDatasetManager12ClearNetworkEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Dataset()
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildIdResponse(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[8c6]"></a>ot::MeshCoP::PendingDatasetManager::StartDelayTimer()</STRONG> (Thumb, 88 bytes, Stack size 280 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP21PendingDatasetManager15StartDelayTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::PendingDatasetManager::StartDelayTimer() &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Dataset()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::StartAt(ot::Time, unsigned int)
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::GetTlv(ot::MeshCoP::Tlv::Type) const
</UL>
<BR>[Called By]<UL><LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::Save(otOperationalDatasetTlvs const&)
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::PendingDatasetManager::HandleTmf&lang;(ot::Uri)27&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::ApplyActiveDataset(ot::MeshCoP::Timestamp const&, ot::Coap::Message&)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::StartLeader()
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::Save(ot::MeshCoP::Timestamp const&, ot::Message const&, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[344]"></a>ot::MeshCoP::PendingDatasetManager::HandleDelayTimer()</STRONG> (Thumb, 120 bytes, Stack size 280 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP21PendingDatasetManager16HandleDelayTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::PendingDatasetManager::HandleDelayTimer() &rArr; ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset const&) &rArr; ot::MeshCoP::Dataset::ApplyConfiguration(ot::Instance&, bool*) const &rArr; ot::KeyManager::SetNetworkKey(ot::NetworkKey const&) &rArr; ot::KeyManager::UpdateKeyMaterial() &rArr; ot::KeyManager::ComputeKeys(unsigned int, ot::KeyManager::HashKeys&) const &rArr; ot::Crypto::HmacSha256::Start(ot::Crypto::Key const&) &rArr; otPlatCryptoHmacSha256Start &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Clear()
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Dataset()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::StartAt(ot::Time, unsigned int)
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset const&)
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::GetTlv(ot::MeshCoP::Tlv::Type) const
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ConvertToActive()
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilliIn&lang;ot::MeshCoP::PendingDatasetManager, &(ot::MeshCoP::PendingDatasetManager::HandleDelayTimer())&rang;::HandleTimer(ot::Timer&)
</UL>

<P><STRONG><a name="[8ae]"></a>ot::MeshCoP::PendingDatasetManager::ApplyActiveDataset(ot::MeshCoP::Timestamp const&, ot::Coap::Message&)</STRONG> (Thumb, 146 bytes, Stack size 320 bytes, dataset_manager_ftd.o(.text._ZN2ot7MeshCoP21PendingDatasetManager18ApplyActiveDatasetERKNS0_9TimestampERNS_4Coap7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::PendingDatasetManager::ApplyActiveDataset(ot::MeshCoP::Timestamp const&, ot::Coap::Message&) &rArr; ot::MeshCoP::PendingDatasetManager::StartDelayTimer() &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::GetDelayTimerMinimal() const
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Dataset()
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsAttached() const
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::GetSize() const
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::DatasetTlv::ReadFromMessage(ot::Message const&, unsigned short)
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::StartDelayTimer()
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset const&)
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetTlv(ot::MeshCoP::Tlv const&)
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetTlv(ot::MeshCoP::Tlv::Type, void const*, unsigned char)
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetTimestamp(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Timestamp const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[8c8]"></a>ot::MeshCoP::PendingDatasetManager::Save(otOperationalDatasetTlvs const&)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP21PendingDatasetManager4SaveERK24otOperationalDatasetTlvs))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::PendingDatasetManager::Save(otOperationalDatasetTlvs const&) &rArr; ot::MeshCoP::DatasetManager::HandleDatasetUpdated() &rArr; ot::MeshCoP::DatasetManager::SendSet() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::StartDelayTimer()
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleDatasetUpdated()
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Save(otOperationalDatasetTlvs const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetSetPendingTlvs
</UL>

<P><STRONG><a name="[722]"></a>ot::MeshCoP::PendingDatasetManager::Save(ot::MeshCoP::Timestamp const&, ot::Message const&, unsigned short, unsigned short)</STRONG> (Thumb, 70 bytes, Stack size 288 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP21PendingDatasetManager4SaveERKNS0_9TimestampERKNS_7MessageEtt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Dataset()
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::StartDelayTimer()
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset const&)
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ReadFromMessage(ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetTimestamp(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Timestamp const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildIdResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleLeaderData(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[754]"></a>ot::MeshCoP::PendingDatasetManager::Clear()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP21PendingDatasetManager5ClearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::PendingDatasetManager::Clear() &rArr; ot::MeshCoP::DatasetManager::Clear() &rArr; ot::MeshCoP::DatasetLocal::Clear() &rArr; ot::Settings::DeleteOperationalDataset(ot::MeshCoP::Dataset::Type) &rArr; otPlatSettingsDelete &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Clear()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkSetPanId
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkSetChannel
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetPskc
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetNetworkName
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetNetworkKey
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetExtendedPanId
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildIdResponse(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[7e2]"></a>void ot::MeshCoP::PendingDatasetManager::HandleTmf&lang;(ot::Uri)25&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP21PendingDatasetManager9HandleTmfILNS_3UriE25EEEvRNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + Unknown Stack Size
<LI>Call Chain = void ot::MeshCoP::PendingDatasetManager::HandleTmf&lang;(ot::Uri)25&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::MeshCoP::DatasetManager::HandleGet(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) const &rArr; ot::MeshCoP::DatasetManager::SendGetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, unsigned char*, unsigned char) const &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleGet(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[7e3]"></a>void ot::MeshCoP::PendingDatasetManager::HandleTmf&lang;(ot::Uri)27&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dataset_manager_ftd.o(.text._ZN2ot7MeshCoP21PendingDatasetManager9HandleTmfILNS_3UriE27EEEvRNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1992 + Unknown Stack Size
<LI>Call Chain = void ot::MeshCoP::PendingDatasetManager::HandleTmf&lang;(ot::Uri)27&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::MeshCoP::Leader::SendDatasetChanged(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::StartDelayTimer()
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[8c9]"></a>ot::MeshCoP::PendingDatasetManager::PendingDatasetManager(ot::Instance&)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP21PendingDatasetManagerC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::DatasetLocal(ot::Instance&, ot::MeshCoP::Dataset::Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bfa]"></a>ot::MeshCoP::PendingDatasetManager::PendingDatasetManager__sub_object(ot::Instance&)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, dataset_manager.o(.text._ZN2ot7MeshCoP21PendingDatasetManagerC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[8ca]"></a>ot::MeshCoP::Tlv::FindTlv(unsigned char const*, unsigned short, ot::MeshCoP::Tlv::Type)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, meshcop_tlvs.o(.text._ZN2ot7MeshCoP3Tlv7FindTlvEPKhtNS1_4TypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::MeshCoP::Tlv::FindTlv(unsigned char const*, unsigned short, ot::MeshCoP::Tlv::Type)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::GetSize() const
</UL>
<BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(ot::MeshCoP::Tlv::Type) const
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::GetTlv(ot::MeshCoP::Tlv::Type) const
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::GetTimestamp(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Timestamp&) const
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::RemoveTlv(ot::MeshCoP::Tlv::Type)
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetTlv(ot::MeshCoP::Tlv::Type, void const*, unsigned char)
</UL>

<P><STRONG><a name="[8a1]"></a>ot::MeshCoP::Tlv::IsValid(ot::MeshCoP::Tlv const&)</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, meshcop_tlvs.o(.text._ZN2ot7MeshCoP3Tlv7IsValidERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::MeshCoP::Tlv::IsValid(ot::MeshCoP::Tlv const&) &rArr; ot::IsValidUtf8String(char const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IsValidUtf8String(char const*, unsigned int)
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ChannelMaskBaseTlv::IsValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::IsValid() const
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::DatasetTlv::ReadFromMessage(ot::Message const&, unsigned short)
</UL>

<P><STRONG><a name="[8cc]"></a>ot::MeshCoP::Dtls::Disconnect()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls10DisconnectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Dtls::Disconnect() &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt_ext &rArr; mbedtls_cipher_aead_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::Connect(unsigned short)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Close()
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Finish(otError)
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleJoinerFinalizeResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Process()
</UL>

<P><STRONG><a name="[91]"></a>ot::MeshCoP::Dtls::HandleTimer(ot::Timer&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls11HandleTimerERNS_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Dtls::HandleTimer(ot::Timer&) &rArr; ot::MeshCoP::Dtls::HandleTimer() &rArr; ot::MeshCoP::Dtls::Process() &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ecjpake_read_round_two &rArr; ecjpake_kkp_read &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleTimer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtls.o(.text._ZN2ot7MeshCoP4DtlsC2ERNS_8InstanceEb)
</UL>
<P><STRONG><a name="[8d0]"></a>ot::MeshCoP::Dtls::HandleTimer()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls11HandleTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Dtls::HandleTimer() &rArr; ot::MeshCoP::Dtls::Process() &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ecjpake_read_round_two &rArr; ecjpake_kkp_read &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Process()
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleTimer(ot::Timer&)
</UL>

<P><STRONG><a name="[8d2]"></a>ot::MeshCoP::Dtls::HandleDtlsSend(unsigned char const*, unsigned short, ot::Message::SubType)</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls14HandleDtlsSendEPKhtNS_7Message7SubTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Dtls::HandleDtlsSend(unsigned char const*, unsigned short, ot::Message::SubType) &rArr; ot::Ip6::Udp::Socket::SendTo(ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::SendTo(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::NewMessage(unsigned short, ot::Message::Settings const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsTransmit(unsigned char const*, unsigned int)
</UL>

<P><STRONG><a name="[89]"></a>ot::MeshCoP::Dtls::HandleUdpReceive(void*, otMessage*, otMessageInfo const*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls16HandleUdpReceiveEPvP9otMessagePK13otMessageInfo))
<BR>[Address Reference Count : 1]<UL><LI> dtls.o(.text._ZN2ot7MeshCoP4Dtls4OpenEPFvPvPhtEPFvS2_bES2_)
</UL>
<P><STRONG><a name="[8d3]"></a>ot::MeshCoP::Dtls::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls16HandleUdpReceiveERNS_7MessageERKNS_3Ip611MessageInfoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Process()
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Setup(bool)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[8c]"></a>ot::MeshCoP::Dtls::HandleMbedtlsDebug(void*, int, char const*, int, char const*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls18HandleMbedtlsDebugEPviPKciS4_))
<BR>[Address Reference Count : 1]<UL><LI> dtls.o(.text._ZN2ot7MeshCoP4Dtls5SetupEb)
</UL>
<P><STRONG><a name="[8d5]"></a>ot::MeshCoP::Dtls::HandleMbedtlsDebug(int, char const*, int, char const*)</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls18HandleMbedtlsDebugEiPKciS3_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)1&rang;(char const*, char const*, ...)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
</UL>

<P><STRONG><a name="[8d6]"></a>ot::MeshCoP::Dtls::HandleMbedtlsReceive(unsigned char*, unsigned int)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls20HandleMbedtlsReceiveEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Dtls::HandleMbedtlsReceive(unsigned char*, unsigned int) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ReadBytes(unsigned short, void*, unsigned short) const
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::MoveOffset(int)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsReceive(void*, unsigned char*, unsigned int)
</UL>

<P><STRONG><a name="[8e]"></a>ot::MeshCoP::Dtls::HandleMbedtlsReceive(void*, unsigned char*, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls20HandleMbedtlsReceiveEPvPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Dtls::HandleMbedtlsReceive(void*, unsigned char*, unsigned int) &rArr; ot::MeshCoP::Dtls::HandleMbedtlsReceive(unsigned char*, unsigned int) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsReceive(unsigned char*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtls.o(.text._ZN2ot7MeshCoP4Dtls5SetupEb)
</UL>
<P><STRONG><a name="[90]"></a>ot::MeshCoP::Dtls::HandleMbedtlsGetTimer(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls21HandleMbedtlsGetTimerEPv))
<BR>[Address Reference Count : 1]<UL><LI> dtls.o(.text._ZN2ot7MeshCoP4Dtls5SetupEb)
</UL>
<P><STRONG><a name="[8d7]"></a>ot::MeshCoP::Dtls::HandleMbedtlsGetTimer()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls21HandleMbedtlsGetTimerEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
</UL>

<P><STRONG><a name="[8f]"></a>ot::MeshCoP::Dtls::HandleMbedtlsSetTimer(void*, unsigned int, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls21HandleMbedtlsSetTimerEPvjj))
<BR>[Address Reference Count : 1]<UL><LI> dtls.o(.text._ZN2ot7MeshCoP4Dtls5SetupEb)
</UL>
<P><STRONG><a name="[8d8]"></a>ot::MeshCoP::Dtls::HandleMbedtlsSetTimer(unsigned int, unsigned int)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls21HandleMbedtlsSetTimerEjj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
</UL>

<P><STRONG><a name="[8d9]"></a>ot::MeshCoP::Dtls::HandleMbedtlsTransmit(unsigned char const*, unsigned int)</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls21HandleMbedtlsTransmitEPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Dtls::HandleMbedtlsTransmit(unsigned char const*, unsigned int) &rArr; ot::MeshCoP::Dtls::HandleDtlsSend(unsigned char const*, unsigned short, ot::Message::SubType) &rArr; ot::Ip6::Udp::Socket::SendTo(ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleDtlsSend(unsigned char const*, unsigned short, ot::Message::SubType)
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsTransmit(void*, unsigned char const*, unsigned int)
</UL>

<P><STRONG><a name="[8d]"></a>ot::MeshCoP::Dtls::HandleMbedtlsTransmit(void*, unsigned char const*, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls21HandleMbedtlsTransmitEPvPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Dtls::HandleMbedtlsTransmit(void*, unsigned char const*, unsigned int) &rArr; ot::MeshCoP::Dtls::HandleMbedtlsTransmit(unsigned char const*, unsigned int) &rArr; ot::MeshCoP::Dtls::HandleDtlsSend(unsigned char const*, unsigned short, ot::Message::SubType) &rArr; ot::Ip6::Udp::Socket::SendTo(ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsTransmit(unsigned char const*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtls.o(.text._ZN2ot7MeshCoP4Dtls5SetupEb)
</UL>
<P><STRONG><a name="[8da]"></a>ot::MeshCoP::Dtls::HandleMbedtlsExportKeys(unsigned char const*, unsigned char const*, unsigned int, unsigned int, unsigned int)</STRONG> (Thumb, 116 bytes, Stack size 176 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls23HandleMbedtlsExportKeysEPKhS3_jjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Dtls::HandleMbedtlsExportKeys(unsigned char const*, unsigned char const*, unsigned int, unsigned int, unsigned int) &rArr; ot::Crypto::Sha256::Update(void const*, unsigned short) &rArr; otPlatCryptoSha256Update &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...)
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::Sha256::~Sha256()
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::Sha256::Sha256()
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::Sha256::Update(void const*, unsigned short)
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::Sha256::Finish(ot::Crypto::Sha256::Hash&)
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::Sha256::Start()
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetKek(ot::Mac::Key const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsExportKeys(void*, unsigned char const*, unsigned char const*, unsigned int, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[8b]"></a>ot::MeshCoP::Dtls::HandleMbedtlsExportKeys(void*, unsigned char const*, unsigned char const*, unsigned int, unsigned int, unsigned int)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls23HandleMbedtlsExportKeysEPvPKhS4_jjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Dtls::HandleMbedtlsExportKeys(void*, unsigned char const*, unsigned char const*, unsigned int, unsigned int, unsigned int) &rArr; ot::MeshCoP::Dtls::HandleMbedtlsExportKeys(unsigned char const*, unsigned char const*, unsigned int, unsigned int, unsigned int) &rArr; ot::Crypto::Sha256::Update(void const*, unsigned short) &rArr; otPlatCryptoSha256Update &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsExportKeys(unsigned char const*, unsigned char const*, unsigned int, unsigned int, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dtls.o(.text._ZN2ot7MeshCoP4Dtls5SetupEb)
</UL>
<P><STRONG><a name="[7f1]"></a>ot::MeshCoP::Dtls::Bind(unsigned short)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls4BindEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ot::MeshCoP::Dtls::Bind(unsigned short) &rArr; ot::Ip6::Udp::Socket::Bind(unsigned short, ot::Ip6::NetifIdentifier) &rArr; ot::Ip6::Udp::Bind(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&, ot::Ip6::NetifIdentifier) &rArr; ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Address const&) const &rArr; bool ot::LinkedList&lang;ot::Ip6::Netif::UnicastAddress&rang;::ContainsMatching&lang;ot::Ip6::Address&rang;(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::Bind(unsigned short, ot::Ip6::NetifIdentifier)
</UL>
<BR>[Called By]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::Start(unsigned short)
</UL>

<P><STRONG><a name="[7f0]"></a>ot::MeshCoP::Dtls::Open(void (*)(void*, unsigned char*, unsigned short), void (*)(void*, bool), void*)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls4OpenEPFvPvPhtEPFvS2_bES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Dtls::Open(void (*)(void*, unsigned char*, unsigned short), void (*)(void*, bool), void*) &rArr; ot::Ip6::Udp::Socket::Open(void (*)(void*, otMessage*, otMessageInfo const*), void*) &rArr; ot::Ip6::Udp::Open(ot::Ip6::Udp::SocketHandle&, void (*)(void*, otMessage*, otMessageInfo const*), void*) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::Open(void (*)(void*, otMessage*, otMessageInfo const*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::Start(unsigned short)
</UL>

<P><STRONG><a name="[7ea]"></a>ot::MeshCoP::Dtls::Send(ot::Message&, unsigned short)</STRONG> (Thumb, 82 bytes, Stack size 1176 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls4SendERNS_7MessageEt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ReadBytes(unsigned short, void*, unsigned short) const
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::MbedTls::MapError(int)
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
</UL>
<BR>[Called By]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::HandleTransmit()
</UL>

<P><STRONG><a name="[7ed]"></a>ot::MeshCoP::Dtls::Close()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls5CloseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Dtls::Close() &rArr; ot::MeshCoP::Dtls::Disconnect() &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt_ext &rArr; mbedtls_cipher_aead_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::Close()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Disconnect()
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::Stop()
</UL>

<P><STRONG><a name="[8d4]"></a>ot::MeshCoP::Dtls::Setup(bool)</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls5SetupEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Dtls::Setup(bool) &rArr; ot::MeshCoP::Dtls::Process() &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ecjpake_read_round_two &rArr; ecjpake_kkp_read &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::MbedTls::MapError(int)
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_timer_cb
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hs_ecjpake_password
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_bio
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_rng
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_min_version
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_max_version
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_handshake_timeout
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_export_keys_cb
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_dbg
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_curves
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_ciphersuites
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Process()
</UL>
<BR>[Called By]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Connect(ot::Ip6::SockAddr const&)
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[7f3]"></a>ot::MeshCoP::Dtls::SetPsk(unsigned char const*, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls6SetPskEPKhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::MeshCoP::Dtls::SetPsk(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::SetPsk(ot::MeshCoP::JoinerPskd const&)
</UL>

<P><STRONG><a name="[7f5]"></a>ot::MeshCoP::Dtls::Connect(ot::Ip6::SockAddr const&)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls7ConnectERKNS_3Ip68SockAddrE))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Dtls::Connect(ot::Ip6::SockAddr const&) &rArr; ot::MeshCoP::Dtls::Setup(bool) &rArr; ot::MeshCoP::Dtls::Process() &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ecjpake_read_round_two &rArr; ecjpake_kkp_read &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Setup(bool)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::Connect(ot::Ip6::SockAddr const&, void (*)(bool, void*), void*)
</UL>

<P><STRONG><a name="[8d1]"></a>ot::MeshCoP::Dtls::Process()</STRONG> (Thumb, 244 bytes, Stack size 792 bytes, dtls.o(.text._ZN2ot7MeshCoP4Dtls7ProcessEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2224 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Dtls::Process() &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ecjpake_read_round_two &rArr; ecjpake_kkp_read &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hs_ecjpake_password
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_reset
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Disconnect()
</UL>
<BR>[Called By]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Setup(bool)
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleTimer()
</UL>

<P><STRONG><a name="[7f8]"></a>ot::MeshCoP::Dtls::Dtls(ot::Instance&, bool)</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, dtls.o(.text._ZN2ot7MeshCoP4DtlsC2ERNS_8InstanceEb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Socket::Socket(ot::Instance&)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::CoapSecure(ot::Instance&, bool)
</UL>

<P><STRONG><a name="[bfb]"></a>ot::MeshCoP::Dtls::Dtls__sub_object(ot::Instance&, bool)</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, dtls.o(.text._ZN2ot7MeshCoP4DtlsC2ERNS_8InstanceEb), UNUSED)

<P><STRONG><a name="[345]"></a>ot::MeshCoP::Joiner::HandleTimer()</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, joiner.o(.text._ZN2ot7MeshCoP6Joiner11HandleTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Joiner::HandleTimer() &rArr; ot::Mac::ExtAddress::GenerateRandom() &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::UpdateLinkLocalAddress()
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetExtAddress(ot::Mac::ExtAddress const&)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::GenerateRandom()
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Finish(otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilliIn&lang;ot::MeshCoP::Joiner, &(ot::MeshCoP::Joiner::HandleTimer())&rang;::HandleTimer(ot::Timer&)
</UL>

<P><STRONG><a name="[8f1]"></a>ot::MeshCoP::Joiner::SetDiscerner(ot::MeshCoP::JoinerDiscerner const&)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, joiner.o(.text._ZN2ot7MeshCoP6Joiner12SetDiscernerERKNS0_15JoinerDiscernerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Joiner::SetDiscerner(ot::MeshCoP::JoinerDiscerner const&) &rArr; ot::MeshCoP::JoinerDiscerner::GenerateJoinerId(ot::Mac::ExtAddress&) const &rArr; ot::Mac::ExtAddress::GenerateRandom() &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerDiscerner::GenerateJoinerId(ot::Mac::ExtAddress&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otJoinerSetDiscerner
</UL>

<P><STRONG><a name="[afc]"></a>ot::MeshCoP::Joiner::StateToString(ot::MeshCoP::Joiner::State)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, joiner.o(.text._ZN2ot7MeshCoP6Joiner13StateToStringENS1_5StateE))
<BR><BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otJoinerStateToString
</UL>

<P><STRONG><a name="[8f3]"></a>ot::MeshCoP::Joiner::ClearDiscerner()</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, joiner.o(.text._ZN2ot7MeshCoP6Joiner14ClearDiscernerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Joiner::ClearDiscerner() &rArr; ot::MeshCoP::ComputeJoinerId(ot::Mac::ExtAddress const&, ot::Mac::ExtAddress&) &rArr; ot::Crypto::Sha256::Update(void const*, unsigned short) &rArr; otPlatCryptoSha256Update &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetIeeeEui64
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ComputeJoinerId(ot::Mac::ExtAddress const&, ot::Mac::ExtAddress&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otJoinerSetDiscerner
</UL>

<P><STRONG><a name="[8f4]"></a>ot::MeshCoP::Joiner::SendJoinerFinalize()</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, joiner.o(.text._ZN2ot7MeshCoP6Joiner18SendJoinerFinalizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Joiner::SendJoinerFinalize() &rArr; ot::Coap::CoapSecure::SendMessage(ot::Coap::Message&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::SendMessage(ot::Coap::Message&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::LogCertMessage(char const*, ot::Coap::Message const&) const
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)21&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleSecureCoapClientConnect(bool)
</UL>

<P><STRONG><a name="[8f7]"></a>ot::MeshCoP::Joiner::TryNextJoinerRouter(otError)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, joiner.o(.text._ZN2ot7MeshCoP6Joiner19TryNextJoinerRouterE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 2352 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Joiner::TryNextJoinerRouter(otError) &rArr; ot::MeshCoP::Joiner::Connect(ot::MeshCoP::Joiner::JoinerRouter&) &rArr; ot::Coap::CoapSecure::Connect(ot::Ip6::SockAddr const&, void (*)(bool, void*), void*) &rArr; ot::MeshCoP::Dtls::Connect(ot::Ip6::SockAddr const&) &rArr; ot::MeshCoP::Dtls::Setup(bool) &rArr; ot::MeshCoP::Dtls::Process() &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ecjpake_read_round_two &rArr; ecjpake_kkp_read &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Connect(ot::MeshCoP::Joiner::JoinerRouter&)
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Finish(otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleSecureCoapClientConnect(bool)
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleDiscoverResult(otActiveScanResult*)
</UL>

<P><STRONG><a name="[8f9]"></a>ot::MeshCoP::Joiner::HandleDiscoverResult(otActiveScanResult*)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, joiner.o(.text._ZN2ot7MeshCoP6Joiner20HandleDiscoverResultEP18otActiveScanResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 2368 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Joiner::HandleDiscoverResult(otActiveScanResult*) &rArr; ot::MeshCoP::Joiner::TryNextJoinerRouter(otError) &rArr; ot::MeshCoP::Joiner::Connect(ot::MeshCoP::Joiner::JoinerRouter&) &rArr; ot::Coap::CoapSecure::Connect(ot::Ip6::SockAddr const&, void (*)(bool, void*), void*) &rArr; ot::MeshCoP::Dtls::Connect(ot::Ip6::SockAddr const&) &rArr; ot::MeshCoP::Dtls::Setup(bool) &rArr; ot::MeshCoP::Dtls::Process() &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ecjpake_read_round_two &rArr; ecjpake_kkp_read &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::UpdateLinkLocalAddress()
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetExtAddress(ot::Mac::ExtAddress const&)
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SaveDiscoveredJoinerRouter(otActiveScanResult const&)
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::TryNextJoinerRouter(otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleDiscoverResult(otActiveScanResult*, void*)
</UL>

<P><STRONG><a name="[93]"></a>ot::MeshCoP::Joiner::HandleDiscoverResult(otActiveScanResult*, void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, joiner.o(.text._ZN2ot7MeshCoP6Joiner20HandleDiscoverResultEP18otActiveScanResultPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2368 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Joiner::HandleDiscoverResult(otActiveScanResult*, void*) &rArr; ot::MeshCoP::Joiner::HandleDiscoverResult(otActiveScanResult*) &rArr; ot::MeshCoP::Joiner::TryNextJoinerRouter(otError) &rArr; ot::MeshCoP::Joiner::Connect(ot::MeshCoP::Joiner::JoinerRouter&) &rArr; ot::Coap::CoapSecure::Connect(ot::Ip6::SockAddr const&, void (*)(bool, void*), void*) &rArr; ot::MeshCoP::Dtls::Connect(ot::Ip6::SockAddr const&) &rArr; ot::MeshCoP::Dtls::Setup(bool) &rArr; ot::MeshCoP::Dtls::Process() &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ecjpake_read_round_two &rArr; ecjpake_kkp_read &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleDiscoverResult(otActiveScanResult*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> joiner.o(.text._ZN2ot7MeshCoP6Joiner5StartEPKcS3_S3_S3_S3_S3_PFv7otErrorPvES5_)
</UL>
<P><STRONG><a name="[8fb]"></a>ot::MeshCoP::Joiner::SendJoinerEntrustResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, joiner.o(.text._ZN2ot7MeshCoP6Joiner25SendJoinerEntrustResponseERKNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Joiner::SendJoinerEntrustResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityResponseMessage(ot::Coap::Message const&)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SetState(ot::MeshCoP::Joiner::State)
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)20&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Joiner::HandleTmf&lang;(ot::Uri)20&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[8fa]"></a>ot::MeshCoP::Joiner::SaveDiscoveredJoinerRouter(otActiveScanResult const&)</STRONG> (Thumb, 226 bytes, Stack size 96 bytes, joiner.o(.text._ZN2ot7MeshCoP6Joiner26SaveDiscoveredJoinerRouterERK18otActiveScanResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Joiner::SaveDiscoveredJoinerRouter(otActiveScanResult const&) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ToYesNo(bool)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::ToString() const
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SteeringData::DoesAllMatch(unsigned char) const
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleDiscoverResult(otActiveScanResult*)
</UL>

<P><STRONG><a name="[8fe]"></a>ot::MeshCoP::Joiner::HandleJoinerFinalizeResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, joiner.o(.text._ZN2ot7MeshCoP6Joiner28HandleJoinerFinalizeResponseEPNS_4Coap7MessageEPKNS_3Ip611MessageInfoE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Joiner::HandleJoinerFinalizeResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError) &rArr; ot::MeshCoP::Joiner::LogCertMessage(char const*, ot::Coap::Message const&) const &rArr; ot::Logger::DumpInModule(char const*, ot::LogLevel, char const*, void const*, unsigned short) &rArr; ot::Logger::DumpLine(char const*, ot::LogLevel, unsigned char const*, unsigned short) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Filter::UpdateUnsecurePorts(ot::Ip6::Filter::Action, unsigned short)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned char&rang;(ot::Message const&, unsigned char, unsigned char&)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::LogCertMessage(char const*, ot::Coap::Message const&) const
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SetState(ot::MeshCoP::Joiner::State)
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)21&rang;()
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Disconnect()
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleJoinerFinalizeResponse(void*, otMessage*, otMessageInfo const*, otError)
</UL>

<P><STRONG><a name="[92]"></a>ot::MeshCoP::Joiner::HandleJoinerFinalizeResponse(void*, otMessage*, otMessageInfo const*, otError)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, joiner.o(.text._ZN2ot7MeshCoP6Joiner28HandleJoinerFinalizeResponseEPvP9otMessagePK13otMessageInfo7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Joiner::HandleJoinerFinalizeResponse(void*, otMessage*, otMessageInfo const*, otError) &rArr; ot::MeshCoP::Joiner::HandleJoinerFinalizeResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError) &rArr; ot::MeshCoP::Joiner::LogCertMessage(char const*, ot::Coap::Message const&) const &rArr; ot::Logger::DumpInModule(char const*, ot::LogLevel, char const*, void const*, unsigned short) &rArr; ot::Logger::DumpLine(char const*, ot::LogLevel, unsigned char const*, unsigned short) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleJoinerFinalizeResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> joiner.o(.text._ZN2ot7MeshCoP6Joiner18SendJoinerFinalizeEv)
</UL>
<P><STRONG><a name="[8ff]"></a>ot::MeshCoP::Joiner::PrepareJoinerFinalizeMessage(char const*, char const*, char const*, char const*, char const*)</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, joiner.o(.text._ZN2ot7MeshCoP6Joiner28PrepareJoinerFinalizeMessageEPKcS3_S3_S3_S3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Joiner::PrepareJoinerFinalizeMessage(char const*, char const*, char const*, char const*, char const*) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetOffset(unsigned short)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTo(ot::Message&) const
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendStringTlv(ot::Message&, unsigned char, unsigned char, char const*)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned char&rang;(ot::Message&, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Start(char const*, char const*, char const*, char const*, char const*, char const*, void (*)(otError, void*), void*)
</UL>

<P><STRONG><a name="[900]"></a>ot::MeshCoP::Joiner::HandleSecureCoapClientConnect(bool)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, joiner.o(.text._ZN2ot7MeshCoP6Joiner29HandleSecureCoapClientConnectEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 2360 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Joiner::HandleSecureCoapClientConnect(bool) &rArr; ot::MeshCoP::Joiner::TryNextJoinerRouter(otError) &rArr; ot::MeshCoP::Joiner::Connect(ot::MeshCoP::Joiner::JoinerRouter&) &rArr; ot::Coap::CoapSecure::Connect(ot::Ip6::SockAddr const&, void (*)(bool, void*), void*) &rArr; ot::MeshCoP::Dtls::Connect(ot::Ip6::SockAddr const&) &rArr; ot::MeshCoP::Dtls::Setup(bool) &rArr; ot::MeshCoP::Dtls::Process() &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ecjpake_read_round_two &rArr; ecjpake_kkp_read &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SetState(ot::MeshCoP::Joiner::State)
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::TryNextJoinerRouter(otError)
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SendJoinerFinalize()
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleSecureCoapClientConnect(bool, void*)
</UL>

<P><STRONG><a name="[94]"></a>ot::MeshCoP::Joiner::HandleSecureCoapClientConnect(bool, void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, joiner.o(.text._ZN2ot7MeshCoP6Joiner29HandleSecureCoapClientConnectEbPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2360 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Joiner::HandleSecureCoapClientConnect(bool, void*) &rArr; ot::MeshCoP::Joiner::HandleSecureCoapClientConnect(bool) &rArr; ot::MeshCoP::Joiner::TryNextJoinerRouter(otError) &rArr; ot::MeshCoP::Joiner::Connect(ot::MeshCoP::Joiner::JoinerRouter&) &rArr; ot::Coap::CoapSecure::Connect(ot::Ip6::SockAddr const&, void (*)(bool, void*), void*) &rArr; ot::MeshCoP::Dtls::Connect(ot::Ip6::SockAddr const&) &rArr; ot::MeshCoP::Dtls::Setup(bool) &rArr; ot::MeshCoP::Dtls::Process() &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ecjpake_read_round_two &rArr; ecjpake_kkp_read &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleSecureCoapClientConnect(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> joiner.o(.text._ZN2ot7MeshCoP6Joiner7ConnectERNS1_12JoinerRouterE)
</UL>
<P><STRONG><a name="[901]"></a>ot::MeshCoP::Joiner::Stop()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, joiner.o(.text._ZN2ot7MeshCoP6Joiner4StopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Joiner::Stop() &rArr; ot::MeshCoP::Joiner::Finish(otError) &rArr; ot::Coap::CoapSecure::Stop() &rArr; ot::MeshCoP::Dtls::Close() &rArr; ot::MeshCoP::Dtls::Disconnect() &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt_ext &rArr; mbedtls_cipher_aead_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Finish(otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otJoinerStop
</UL>

<P><STRONG><a name="[902]"></a>ot::MeshCoP::Joiner::Start(char const*, char const*, char const*, char const*, char const*, char const*, void (*)(otError, void*), void*)</STRONG> (Thumb, 356 bytes, Stack size 104 bytes, joiner.o(.text._ZN2ot7MeshCoP6Joiner5StartEPKcS3_S3_S3_S3_S3_PFv7otErrorPvES5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Joiner::Start(char const*, char const*, char const*, char const*, char const*, char const*, void (*)(otError, void*), void*) &rArr; ot::MeshCoP::Joiner::PrepareJoinerFinalizeMessage(char const*, char const*, char const*, char const*, char const*) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::UpdateLinkLocalAddress()
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetExtAddress(ot::Mac::ExtAddress const&)
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::SetPsk(ot::MeshCoP::JoinerPskd const&)
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::Start(unsigned short)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::Discover(ot::Mac::ChannelMask const&, unsigned short, bool, bool, ot::MeshCoP::SteeringData::HashBitIndexes const*, void (*)(otActiveScanResult*, void*), void*)
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::GenerateRandom()
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IsValidUtf8String(char const*)
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SetState(ot::MeshCoP::Joiner::State)
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::PrepareJoinerFinalizeMessage(char const*, char const*, char const*, char const*, char const*)
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SteeringData::CalculateHashBitIndexes(ot::Mac::ExtAddress const&, ot::MeshCoP::SteeringData::HashBitIndexes&)
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SteeringData::CalculateHashBitIndexes(ot::MeshCoP::JoinerDiscerner const&, ot::MeshCoP::SteeringData::HashBitIndexes&)
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerPskd::SetFrom(char const*)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::LogError(char const*, otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otJoinerStart
</UL>

<P><STRONG><a name="[8f0]"></a>ot::MeshCoP::Joiner::Finish(otError)</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, joiner.o(.text._ZN2ot7MeshCoP6Joiner6FinishE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Joiner::Finish(otError) &rArr; ot::Coap::CoapSecure::Stop() &rArr; ot::MeshCoP::Dtls::Close() &rArr; ot::MeshCoP::Dtls::Disconnect() &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt_ext &rArr; mbedtls_cipher_aead_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Filter::UpdateUnsecurePorts(ot::Ip6::Filter::Action, unsigned short)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::Stop()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SetState(ot::MeshCoP::Joiner::State)
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Disconnect()
</UL>
<BR>[Called By]<UL><LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Stop()
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::TryNextJoinerRouter(otError)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleTimer()
</UL>

<P><STRONG><a name="[8f8]"></a>ot::MeshCoP::Joiner::Connect(ot::MeshCoP::Joiner::JoinerRouter&)</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, joiner.o(.text._ZN2ot7MeshCoP6Joiner7ConnectERNS1_12JoinerRouterE))
<BR><BR>[Stack]<UL><LI>Max Depth = 2336 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Joiner::Connect(ot::MeshCoP::Joiner::JoinerRouter&) &rArr; ot::Coap::CoapSecure::Connect(ot::Ip6::SockAddr const&, void (*)(bool, void*), void*) &rArr; ot::MeshCoP::Dtls::Connect(ot::Ip6::SockAddr const&) &rArr; ot::MeshCoP::Dtls::Setup(bool) &rArr; ot::MeshCoP::Dtls::Process() &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ecjpake_read_round_two &rArr; ecjpake_kkp_read &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetPanId(unsigned short)
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetPanChannel(unsigned char)
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Filter::UpdateUnsecurePorts(ot::Ip6::Filter::Action, unsigned short)
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::Connect(ot::Ip6::SockAddr const&, void (*)(bool, void*), void*)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::ToString() const
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SetState(ot::MeshCoP::Joiner::State)
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLinkLocalAddress(ot::Mac::ExtAddress const&)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::LogError(char const*, otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::TryNextJoinerRouter(otError)
</UL>

<P><STRONG><a name="[8fc]"></a>ot::MeshCoP::Joiner::SetState(ot::MeshCoP::Joiner::State)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, joiner.o(.text._ZN2ot7MeshCoP6Joiner8SetStateENS1_5StateE))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Joiner::SetState(ot::MeshCoP::Joiner::State) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;ot::MeshCoP::Joiner::State&rang;(ot::MeshCoP::Joiner::State&, ot::MeshCoP::Joiner::State const&, ot::Event)
</UL>
<BR>[Called By]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Start(char const*, char const*, char const*, char const*, char const*, char const*, void (*)(otError, void*), void*)
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Connect(ot::MeshCoP::Joiner::JoinerRouter&)
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Finish(otError)
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleSecureCoapClientConnect(bool)
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleJoinerFinalizeResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SendJoinerEntrustResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[7df]"></a>void ot::MeshCoP::Joiner::HandleTmf&lang;(ot::Uri)20&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 212 bytes, Stack size 144 bytes, joiner.o(.text._ZN2ot7MeshCoP6Joiner9HandleTmfILNS_3UriE20EEEvRNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 2320 + Unknown Stack Size
<LI>Call Chain = void ot::MeshCoP::Joiner::HandleTmf&lang;(ot::Uri)20&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset::Info const&) &rArr; ot::MeshCoP::DatasetManager::HandleDatasetUpdated() &rArr; ot::MeshCoP::DatasetManager::SendSet() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset::Info const&)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::IsConfirmablePostRequest() const
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, void*, unsigned char)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SendJoinerEntrustResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)20&rang;()
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::LogError(char const*, otError)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[904]"></a>ot::MeshCoP::Joiner::Joiner(ot::Instance&)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, joiner.o(.text._ZN2ot7MeshCoP6JoinerC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetIeeeEui64
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ComputeJoinerId(ot::Mac::ExtAddress const&, ot::Mac::ExtAddress&)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bfc]"></a>ot::MeshCoP::Joiner::Joiner__sub_object(ot::Instance&)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, joiner.o(.text._ZN2ot7MeshCoP6JoinerC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[346]"></a>ot::MeshCoP::Leader::ResignCommissioner()</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, meshcop_leader.o(.text._ZN2ot7MeshCoP6Leader18ResignCommissionerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Leader::ResignCommissioner() &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Stop()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SetCommissioningData(unsigned char const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Leader::HandleTmf&lang;(ot::Uri)23&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Leader::HandleTmf&lang;(ot::Uri)22&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilliIn&lang;ot::MeshCoP::Leader, &(ot::MeshCoP::Leader::HandleTimer())&rang;::HandleTimer(ot::Timer&)
</UL>

<P><STRONG><a name="[8af]"></a>ot::MeshCoP::Leader::SendDatasetChanged(ot::Ip6::Address const&)</STRONG> (Thumb, 120 bytes, Stack size 64 bytes, meshcop_leader.o(.text._ZN2ot7MeshCoP6Leader18SendDatasetChangedERKNS_3Ip67AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Leader::SendDatasetChanged(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrTo(ot::Ip6::Address const&)
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)17&rang;()
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::LogError(char const*, otError)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[906]"></a>ot::MeshCoP::Leader::SendPetitionResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, meshcop_leader.o(.text._ZN2ot7MeshCoP6Leader20SendPetitionResponseERKNS_4Coap7MessageERKNS_3Ip611MessageInfoENS0_8StateTlv5StateE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Leader::SendPetitionResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityResponseMessage(ot::Coap::Message const&)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTo(ot::Message&) const
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned short&rang;(ot::Message&, unsigned char, unsigned short)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned char&rang;(ot::Message&, unsigned char, unsigned char)
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)23&rang;()
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::LogError(char const*, otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Leader::HandleTmf&lang;(ot::Uri)23&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[af8]"></a>ot::MeshCoP::Leader::SetDelayTimerMinimal(unsigned int)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, meshcop_leader.o(.text._ZN2ot7MeshCoP6Leader20SetDelayTimerMinimalEj))
<BR><BR>[Called By]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetSetDelayTimerMinimal
</UL>

<P><STRONG><a name="[908]"></a>ot::MeshCoP::Leader::SendKeepAliveResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, meshcop_leader.o(.text._ZN2ot7MeshCoP6Leader21SendKeepAliveResponseERKNS_4Coap7MessageERKNS_3Ip611MessageInfoENS0_8StateTlv5StateE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Leader::SendKeepAliveResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityResponseMessage(ot::Coap::Message const&)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::AppendUintTlv&lang;unsigned char&rang;(ot::Message&, unsigned char, unsigned char)
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)22&rang;()
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::LogError(char const*, otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Leader::HandleTmf&lang;(ot::Uri)22&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[797]"></a>ot::MeshCoP::Leader::SetEmptyCommissionerData()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, meshcop_leader.o(.text._ZN2ot7MeshCoP6Leader24SetEmptyCommissionerDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Leader::SetEmptyCommissionerData() &rArr; ot::NetworkData::LeaderBase::SetCommissioningData(unsigned char const*, unsigned char) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SetCommissioningData(unsigned char const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeLeader()
</UL>

<P><STRONG><a name="[7e0]"></a>void ot::MeshCoP::Leader::HandleTmf&lang;(ot::Uri)22&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, meshcop_leader.o(.text._ZN2ot7MeshCoP6Leader9HandleTmfILNS_3UriE22EEEvRNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = void ot::MeshCoP::Leader::HandleTmf&lang;(ot::Uri)22&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::MeshCoP::Leader::SendKeepAliveResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned char, unsigned short&)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned char&rang;(ot::Message const&, unsigned char, unsigned char&)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendKeepAliveResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::ResignCommissioner()
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)22&rang;()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::IncrementVersion()
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(ot::MeshCoP::Tlv::Type) const
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[7e1]"></a>void ot::MeshCoP::Leader::HandleTmf&lang;(ot::Uri)23&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)</STRONG> (Thumb, 276 bytes, Stack size 128 bytes, meshcop_leader.o(.text._ZN2ot7MeshCoP6Leader9HandleTmfILNS_3UriE23EEEvRNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = void ot::MeshCoP::Leader::HandleTmf&lang;(ot::Uri)23&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::MeshCoP::Leader::SendPetitionResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, unsigned short, ot::Tlv&)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsRoutingLocator(ot::Ip6::Address const&) const
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendPetitionResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::ResignCommissioner()
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char const* ot::UriToString&lang;(ot::Uri)23&rang;()
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SetCommissioningData(unsigned char const*, unsigned char)
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::HandleResource(char const*, ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[90b]"></a>ot::MeshCoP::Leader::Leader(ot::Instance&)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, meshcop_leader.o(.text._ZN2ot7MeshCoP6LeaderC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::Manager::NonCryptoGetUint32()
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bfd]"></a>ot::MeshCoP::Leader::Leader__sub_object(ot::Instance&)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, meshcop_leader.o(.text._ZN2ot7MeshCoP6LeaderC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[8bf]"></a>ot::MeshCoP::Dataset::SetTimestamp(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Timestamp const&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dataset.o(.text._ZN2ot7MeshCoP7Dataset12SetTimestampENS1_4TypeERKNS0_9TimestampE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Dataset::SetTimestamp(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Timestamp const&) &rArr; ot::MeshCoP::Dataset::SetTlv(ot::MeshCoP::Tlv::Type, void const*, unsigned char) &rArr; ot::MeshCoP::Tlv::FindTlv(unsigned char const*, unsigned short, ot::MeshCoP::Tlv::Type)
</UL>
<BR>[Calls]<UL><LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetTlv(ot::MeshCoP::Tlv::Type, void const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::ApplyActiveDataset(ot::MeshCoP::Timestamp const&, ot::Coap::Message&)
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::Save(ot::MeshCoP::Timestamp const&, ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::Save(ot::MeshCoP::Timestamp const&, ot::Message const&, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[882]"></a>ot::MeshCoP::Dataset::TypeToString(ot::MeshCoP::Dataset::Type)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dataset.o(.text._ZN2ot7MeshCoP7Dataset12TypeToStringENS1_4TypeE))
<BR><BR>[Called By]<UL><LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSet()
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Save(ot::MeshCoP::Dataset const&)
</UL>

<P><STRONG><a name="[8c7]"></a>ot::MeshCoP::Dataset::ConvertToActive()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dataset.o(.text._ZN2ot7MeshCoP7Dataset15ConvertToActiveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ot::MeshCoP::Dataset::ConvertToActive() &rArr; ot::MeshCoP::Dataset::RemoveTlv(ot::MeshCoP::Tlv::Type) &rArr; ot::MeshCoP::Tlv::FindTlv(unsigned char const*, unsigned short, ot::MeshCoP::Tlv::Type)
</UL>
<BR>[Calls]<UL><LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::RemoveTlv(ot::MeshCoP::Tlv::Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::HandleDelayTimer()
</UL>

<P><STRONG><a name="[8be]"></a>ot::MeshCoP::Dataset::ReadFromMessage(ot::Message const&, unsigned short, unsigned short)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dataset.o(.text._ZN2ot7MeshCoP7Dataset15ReadFromMessageERKNS_7MessageEtt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::IsValid() const
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::Save(ot::MeshCoP::Timestamp const&, ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::Save(ot::MeshCoP::Timestamp const&, ot::Message const&, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[90e]"></a>ot::MeshCoP::Dataset::Info::GenerateRandom(ot::Instance&)</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, dataset.o(.text._ZN2ot7MeshCoP7Dataset4Info14GenerateRandomERNS_8InstanceE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Dataset::Info::GenerateRandom(ot::Instance&) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoRandomGet
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ChannelMask::ChooseRandomChannel() const
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetPreferredChannelMask
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::NetworkPrefix::GenerateRandomUla()
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SecurityPolicy::SetToDefault()
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::GenerateRandomPanId()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetCreateNewNetwork
</UL>

<P><STRONG><a name="[8bb]"></a>ot::MeshCoP::Dataset::SetTlv(ot::MeshCoP::Tlv::Type, void const*, unsigned char)</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, dataset.o(.text._ZN2ot7MeshCoP7Dataset6SetTlvENS0_3Tlv4TypeEPKvh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Dataset::SetTlv(ot::MeshCoP::Tlv::Type, void const*, unsigned char) &rArr; ot::MeshCoP::Tlv::FindTlv(unsigned char const*, unsigned short, ot::MeshCoP::Tlv::Type)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Tlv::FindTlv(unsigned char const*, unsigned short, ot::MeshCoP::Tlv::Type)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetFrom(ot::MeshCoP::Dataset::Info const&)
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::ApplyActiveDataset(ot::MeshCoP::Timestamp const&, ot::Coap::Message&)
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::GenerateLocal()
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetTlv(ot::MeshCoP::Tlv const&)
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetTimestamp(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Timestamp const&)
</UL>

<P><STRONG><a name="[8b1]"></a>ot::MeshCoP::Dataset::SetTlv(ot::MeshCoP::Tlv const&)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dataset.o(.text._ZN2ot7MeshCoP7Dataset6SetTlvERKNS0_3TlvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Dataset::SetTlv(ot::MeshCoP::Tlv const&) &rArr; ot::MeshCoP::Dataset::SetTlv(ot::MeshCoP::Tlv::Type, void const*, unsigned char) &rArr; ot::MeshCoP::Tlv::FindTlv(unsigned char const*, unsigned short, ot::MeshCoP::Tlv::Type)
</UL>
<BR>[Calls]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::GetValue() const
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetTlv(ot::MeshCoP::Tlv::Type, void const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::ApplyActiveDataset(ot::MeshCoP::Timestamp const&, ot::Coap::Message&)
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::GenerateLocal()
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[87c]"></a>ot::MeshCoP::Dataset::SetFrom(otOperationalDatasetTlvs const&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dataset.o(.text._ZN2ot7MeshCoP7Dataset7SetFromERK24otOperationalDatasetTlvs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::MeshCoP::Dataset::SetFrom(otOperationalDatasetTlvs const&) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetUpdateTlvs
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetParseTlvs
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Save(otOperationalDatasetTlvs const&)
</UL>

<P><STRONG><a name="[87f]"></a>ot::MeshCoP::Dataset::SetFrom(ot::MeshCoP::Dataset::Info const&)</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, dataset.o(.text._ZN2ot7MeshCoP7Dataset7SetFromERKNS1_4InfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Dataset::SetFrom(ot::MeshCoP::Dataset::Info const&) &rArr; ot::MeshCoP::Dataset::SetTlv(ot::MeshCoP::Tlv::Type, void const*, unsigned char) &rArr; ot::MeshCoP::Tlv::FindTlv(unsigned char const*, unsigned short, ot::MeshCoP::Tlv::Type)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::GetValue() const
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkName::GetAsData() const
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Timestamp::SetFromTimestamp(otTimestamp const&)
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetTlv(ot::MeshCoP::Tlv::Type, void const*, unsigned char)
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SecurityPolicyTlv::SetSecurityPolicy(ot::SecurityPolicy const&)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ChannelMaskTlv::SetChannelMask(unsigned int)
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ChannelTlv::SetChannel(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetUpdateTlvs
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetConvertToTlvs
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::AppendDatasetToMessage(ot::MeshCoP::Dataset::Info const&, ot::Message&) const
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Save(ot::MeshCoP::Dataset::Info const&)
</UL>

<P><STRONG><a name="[90c]"></a>ot::MeshCoP::Dataset::RemoveTlv(ot::MeshCoP::Tlv::Type)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dataset.o(.text._ZN2ot7MeshCoP7Dataset9RemoveTlvENS0_3Tlv4TypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ot::MeshCoP::Dataset::RemoveTlv(ot::MeshCoP::Tlv::Type) &rArr; ot::MeshCoP::Tlv::FindTlv(unsigned char const*, unsigned short, ot::MeshCoP::Tlv::Type)
</UL>
<BR>[Calls]<UL><LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Tlv::FindTlv(unsigned char const*, unsigned short, ot::MeshCoP::Tlv::Type)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ConvertToActive()
</UL>

<P><STRONG><a name="[87b]"></a>ot::MeshCoP::Dataset::Dataset()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dataset.o(.text._ZN2ot7MeshCoP7DatasetC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::MeshCoP::Dataset::Dataset()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetUpdateTlvs
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetParseTlvs
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetConvertToTlvs
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset::Info&) const
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(otOperationalDatasetTlvs&) const
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::PrepareJoinerEntrustMessage()
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::AppendMleDatasetTlv(ot::Message&) const
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::ApplyActiveDataset(ot::MeshCoP::Timestamp const&, ot::Coap::Message&)
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::GenerateLocal()
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::AppendDatasetToMessage(ot::MeshCoP::Dataset::Info const&, ot::Message&) const
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::ApplyConfiguration() const
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendGetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, unsigned char*, unsigned char) const
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::GetChannelMask(ot::Mac::ChannelMask&) const
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::Save(ot::MeshCoP::Timestamp const&, ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::HandleDelayTimer()
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::StartDelayTimer()
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::ClearNetwork()
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::Save(ot::MeshCoP::Timestamp const&, ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSet()
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Restore()
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Save(ot::MeshCoP::Dataset::Info const&)
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Save(otOperationalDatasetTlvs const&)
</UL>

<P><STRONG><a name="[bfe]"></a>ot::MeshCoP::Dataset::Dataset__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dataset.o(.text._ZN2ot7MeshCoP7DatasetC2Ev), UNUSED)

<P><STRONG><a name="[46c]"></a>ot::MeshCoP::LogError(char const*, otError)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, meshcop.o(.text._ZN2ot7MeshCoP8LogErrorEPKc7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::LogError(char const*, otError) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Start(char const*, char const*, char const*, char const*, char const*, char const*, void (*)(otError, void*), void*)
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendKeepAliveResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendPetitionResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::DelaySendingJoinerEntrust(ot::Ip6::MessageInfo const&, ot::Mac::Key const&)
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Joiner::HandleTmf&lang;(ot::Uri)20&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Connect(ot::MeshCoP::Joiner::JoinerRouter&)
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendDatasetChanged(ot::Ip6::Address const&)
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSet()
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::EnergyScanServer::SendReport()
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PanIdQueryServer::SendConflict()
</UL>

<P><STRONG><a name="[912]"></a>ot::MeshCoP::Timestamp::SetFromTimestamp(otTimestamp const&)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timestamp.o(.text._ZN2ot7MeshCoP9Timestamp16SetFromTimestampERK11otTimestamp))
<BR><BR>[Called By]<UL><LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetFrom(ot::MeshCoP::Dataset::Info const&)
</UL>

<P><STRONG><a name="[710]"></a>ot::MeshCoP::Timestamp::Compare(ot::MeshCoP::Timestamp const*, ot::MeshCoP::Timestamp const*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timestamp.o(.text._ZN2ot7MeshCoP9Timestamp7CompareEPKS1_S3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ot::MeshCoP::Timestamp::Compare(ot::MeshCoP::Timestamp const*, ot::MeshCoP::Timestamp const*) &rArr; ot::MeshCoP::Timestamp::Compare(ot::MeshCoP::Timestamp const&, ot::MeshCoP::Timestamp const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Timestamp::Compare(ot::MeshCoP::Timestamp const&, ot::MeshCoP::Timestamp const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSet()
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset const&)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleDataRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleLeaderData(ot::Mle::Mle::RxInfo&)
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAnnounce(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[913]"></a>ot::MeshCoP::Timestamp::Compare(ot::MeshCoP::Timestamp const&, ot::MeshCoP::Timestamp const&)</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, timestamp.o(.text._ZN2ot7MeshCoP9Timestamp7CompareERKS1_S3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ot::MeshCoP::Timestamp::Compare(ot::MeshCoP::Timestamp const&, ot::MeshCoP::Timestamp const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Timestamp::Compare(ot::MeshCoP::Timestamp const*, ot::MeshCoP::Timestamp const*)
</UL>

<P><STRONG><a name="[37c]"></a>ot::Message::MoveOffset(int)</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, message.o(.text._ZN2ot7Message10MoveOffsetEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::Message::MoveOffset(int) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::ParseHeader()
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsReceive(unsigned char*, unsigned int)
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::HandleMessage(ot::Message&, ot::Ip6::MessageInfo&)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&)
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::HandleMessage(ot::Message&, ot::Ip6::MessageInfo&)
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::FrameToMessage(ot::FrameData const&, unsigned short, ot::Mac::Addresses const&, ot::Message*&)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&)
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressExtensionHeader(ot::Message&, ot::FrameData&)
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressExtensionHeader(ot::Message&, ot::FrameBuilder&, unsigned char&)
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressUdpHeader(ot::Message&, ot::FrameData&, unsigned short)
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressUdp(ot::Message&, ot::FrameBuilder&)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Decompress(ot::Message&, ot::Mac::Addresses const&, ot::FrameData&, unsigned short)
</UL>

<P><STRONG><a name="[382]"></a>ot::Message::WriteBytes(unsigned short, void const*, unsigned short)</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, message.o(.text._ZN2ot7Message10WriteBytesEtPKvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ot::Message::WriteBytes(unsigned short, void const*, unsigned short) &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::PrependBytes(void const*, unsigned short)
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::HandleRetransmissionTimer()
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ProcessReceivedResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Finish()
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytesFromMessage(unsigned short, ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Checksum::UpdateMessageChecksum(ot::Message&, ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned char)
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::HandleRetransmissionTimer()
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::AddBufferedMessage(ot::Message&, unsigned short, unsigned char, bool)
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char)
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::RemoveMplOption(ot::Message&)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool)
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDiscoveryResponse(ot::Ip6::Address const&, ot::Message const&)
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Child&)
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Mle::Mle::AddressRegistrationMode)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Decompress(ot::Message&, ot::Mac::Addresses const&, ot::FrameData&, unsigned short)
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::EnergyScanServer::SendReport()
</UL>

<P><STRONG><a name="[286]"></a>ot::Message::AppendBytes(void const*, unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, message.o(.text._ZN2ot7Message11AppendBytesEPKvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetLength(unsigned short)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytes(unsigned short, void const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageAppend
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendGetRequest(ot::MeshCoP::Dataset::Components const&, unsigned char const*, unsigned char, otIp6Address const*) const
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSetRequest(ot::MeshCoP::Dataset::Info const&, unsigned char const*, unsigned char, void (*)(otError, void*), void*)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::SetPayloadMarker()
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::AppendOption(unsigned short, unsigned short, void const*)
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::HandleDtlsReceive(unsigned char*, unsigned short)
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::CopyAndEnqueueMessage(ot::Coap::Message const&, unsigned short, ot::Coap::CoapBase::Metadata const&)
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&)
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::Discover(ot::Mac::ChannelMask const&, unsigned short, bool, bool, ot::MeshCoP::SteeringData::HashBitIndexes const*, void (*)(otActiveScanResult*, void*), void*)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTo(ot::Message&) const
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::DelaySendingJoinerEntrust(ot::Ip6::MessageInfo const&, ot::Mac::Key const&)
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleDtlsSend(unsigned char const*, unsigned short, ot::Message::SubType)
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::AppendDatasetToMessage(ot::MeshCoP::Dataset::Info const&, ot::Message&) const
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSet()
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::AppendMleDatasetTlv(ot::MeshCoP::Dataset::Type, ot::Message&) const
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::NewMleMessage(ot::Mle::Mle::Command)
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildSupervisor::SendMessage(ot::Child&)
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::AddBufferedMessage(ot::Message&, unsigned short, unsigned char, bool)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Ip6::Headers const&)
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::HandleEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDiscoveryResponse(ot::Ip6::Address const&, ot::Message const&)
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendCompressedAddressEntry(unsigned char, ot::Ip6::Address const&)
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Child&)
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Mle::Mle::AddressRegistrationMode)
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendCslClockAccuracyTlv()
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressEntry(ot::Ip6::Address const&)
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendAfterDelay(ot::Ip6::Address const&, unsigned short)
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::FrameToMessage(ot::FrameData const&, unsigned short, ot::Mac::Addresses const&, ot::Message*&)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::MeshHeader::AppendTo(ot::Message&) const
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressExtensionHeader(ot::Message&, ot::FrameData&)
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressUdpHeader(ot::Message&, ot::FrameData&, unsigned short)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Decompress(ot::Message&, ot::Mac::Addresses const&, ot::FrameData&, unsigned short)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::EnergyScanServer::HandleTmf&lang;(ot::Uri)19&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::EnergyScanServer::HandleScanResult(otEnergyScanResult*)
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::PingSender::SendPing()
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendIp6AddressList(ot::Message&)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendChildTable(ot::Message&)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::SendServerDataNotification(unsigned short, ot::NetworkData::NetworkData const*)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::SendCommissioningGetResponse(ot::Coap::Message const&, unsigned short, ot::Ip6::MessageInfo const&)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistrationMessage(otIp6Address const*, unsigned char, unsigned int const*, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
</UL>

<P><STRONG><a name="[35b]"></a>ot::Message::SetLinkInfo(ot::ThreadLinkInfo const&)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, message.o(.text._ZN2ot7Message11SetLinkInfoERKNS_14ThreadLinkInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Message::SetLinkInfo(ot::ThreadLinkInfo const&) &rArr; ot::RssAverager::Add(signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RssAverager::Add(signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleLowpanHC(ot::FrameData const&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[29d]"></a>ot::Message::SetPriority(ot::Message::Priority)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, message.o(.text._ZN2ot7Message11SetPriorityENS0_8PriorityE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ot::Message::SetPriority(ot::Message::Priority) &rArr; ot::PriorityQueue::Enqueue(ot::Message&) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::Enqueue(ot::Message&)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::Dequeue(ot::Message&)
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&)
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char)
</UL>

<P><STRONG><a name="[620]"></a>ot::Message::PrependBytes(void const*, unsigned short)</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, message.o(.text._ZN2ot7Message12PrependBytesEPKvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = ot::Message::PrependBytes(void const*, unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::NewBuffer(ot::Message::Priority)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::SendEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&, unsigned short)
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::AddTunneledMplOption(ot::Message&, ot::Ip6::Header&)
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::AddMplOption(ot::Message&, ot::Ip6::Header&)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
</UL>

<P><STRONG><a name="[637]"></a>ot::Message::RemoveHeader(unsigned short)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, message.o(.text._ZN2ot7Message12RemoveHeaderEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::Message::RemoveHeader(unsigned short) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::HandlePayload(ot::Message&, ot::Ip6::MessageInfo&)
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::RemoveHeader(unsigned short, unsigned short)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool)
</UL>

<P><STRONG><a name="[63e]"></a>ot::Message::RemoveHeader(unsigned short, unsigned short)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, message.o(.text._ZN2ot7Message12RemoveHeaderEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ot::Message::RemoveHeader(unsigned short, unsigned short) &rArr; ot::Message::WriteBytesFromMessage(unsigned short, ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::RemoveHeader(unsigned short)
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytesFromMessage(unsigned short, ot::Message const&, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::RemoveMplOption(ot::Message&)
</UL>

<P><STRONG><a name="[42d]"></a>ot::Message::SetChildMask(unsigned short)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, message.o(.text._ZN2ot7Message12SetChildMaskEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::Message::SetChildMask(unsigned short) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::AddMessageForSleepyChild(ot::Message&, ot::Child&)
</UL>

<P><STRONG><a name="[914]"></a>ot::Message::ResizeMessage(unsigned short)</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, message.o(.text._ZN2ot7Message13ResizeMessageEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::NewBuffer(ot::Message::Priority)
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetLength(unsigned short)
</UL>

<P><STRONG><a name="[426]"></a>ot::Message::ClearChildMask(unsigned short)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, message.o(.text._ZN2ot7Message14ClearChildMaskEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::Message::ClearChildMask(unsigned short) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleSentFrameToChild(ot::Mac::TxFrame const&, ot::IndirectSenderBase::FrameContext const&, otError, ot::Child&)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::ClearAllMessagesForSleepyChild(ot::Child&)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleChildModeChange(ot::Child&, ot::Mle::DeviceMode)
</UL>

<P><STRONG><a name="[373]"></a>ot::Message::PriorityToString(ot::Message::Priority)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, message.o(.text._ZN2ot7Message16PriorityToStringENS0_8PriorityE))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::MessagePriorityToString(ot::Message const&)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogIp6Message(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel)
</UL>

<P><STRONG><a name="[639]"></a>ot::Message::WriteBytesFromMessage(unsigned short, ot::Message const&, unsigned short, unsigned short)</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, message.o(.text._ZN2ot7Message21WriteBytesFromMessageEtRKS0_tt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ot::Message::WriteBytesFromMessage(unsigned short, ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ReadBytes(unsigned short, void*, unsigned short) const
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::RemoveHeader(unsigned short, unsigned short)
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&)
</UL>

<P><STRONG><a name="[63a]"></a>ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short)</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, message.o(.text._ZN2ot7Message22AppendBytesFromMessageERKS0_tt))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetLength(unsigned short)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Clone(unsigned short) const
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::JoinerRouter::HandleTmf&lang;(ot::Uri)29&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&)
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::HandleEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[232]"></a>ot::Message::Free()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, message.o(.text._ZN2ot7Message4FreeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::Message::Free() &rArr; ot::MessagePool::Free(ot::Message*) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::Free(ot::Message*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageFree
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendEmptyMessage()
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Start(char const*, char const*, char const*, char const*, char const*, char const*, void (*)(otError, void*), void*)
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendGetRequest(ot::MeshCoP::Dataset::Components const&, unsigned char const*, unsigned char, otIp6Address const*) const
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSetRequest(ot::MeshCoP::Dataset::Info const&, unsigned char const*, unsigned char, void (*)(otError, void*), void*)
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Send(ot::Message&, unsigned short)
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::HandleDtlsReceive(unsigned char*, unsigned short)
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::HandleTransmit()
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendCopy(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ProcessReceivedRequest(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::CopyAndEnqueueMessage(ot::Coap::Message const&, unsigned short, ot::Coap::CoapBase::Metadata const&)
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendHeaderResponse(ot::Coap::Code, ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendEmptyMessage(ot::Coap::Type, ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::DequeueMessage(ot::Coap::Message&)
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::InitResponse(ot::Coap::Message*, ot::Coap::Message const&)
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri)
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&)
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressQueryResponse(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, unsigned int const*, ot::Ip6::Address const&)
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::Discover(ot::Mac::ChannelMask const&, unsigned short, bool, bool, ot::MeshCoP::SteeringData::HashBitIndexes const*, void (*)(otActiveScanResult*, void*), void*)
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::EnergyScanServer::HandleNotifierEvents(ot::Events)
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendKeepAliveResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendPetitionResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::JoinerRouter::HandleTmf&lang;(ot::Uri)29&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::PrepareJoinerEntrustMessage()
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::DelaySendingJoinerEntrust(ot::Ip6::MessageInfo const&, ot::Mac::Key const&)
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::SendJoinerEntrust(ot::Ip6::MessageInfo const&)
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Finish(otError)
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::PrepareJoinerFinalizeMessage(char const*, char const*, char const*, char const*, char const*)
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SendJoinerEntrustResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleDtlsSend(unsigned char const*, unsigned short, ot::Message::SubType)
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendDatasetChanged(ot::Ip6::Address const&)
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendGetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, unsigned char*, unsigned char) const
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSet()
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::SendAddressNotification(ot::Ip6::Address&, ot::ThreadStatusTlv::DuaStatus, ot::Child const&)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::PerformNextRegistration()
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::NewMleMessage(ot::Mle::Mle::Command)
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildSupervisor::SendMessage(ot::Child&)
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressError(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, ot::Ip6::Address const*)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::HandleRetransmissionTimer()
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::AddBufferedMessage(ot::Message&, unsigned short, unsigned char, bool)
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool)
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandlePayload(ot::Ip6::Header&, ot::Message&, ot::Ip6::MessageInfo&, unsigned char, ot::Message::Ownership)
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::PassToHost(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo const&, unsigned char, bool, ot::Message::Ownership)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Ip6::Headers const&)
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::HandleEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressSolicitResponse(ot::Coap::Message const&, ot::ThreadStatusTlv::Status, ot::Router const*, ot::Ip6::MessageInfo const&)
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateResponse(ot::Child*, ot::Ip6::MessageInfo const&, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDiscoveryResponse(ot::Ip6::Address const&, ot::Message const&)
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildIdResponse(ot::Child&)
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendParentResponse(ot::Child*, ot::Mle::Mle::Challenge const&, bool)
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressSolicit(ot::ThreadStatusTlv::Status)
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAdvertisement()
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDataResponse(ot::Ip6::Address const&, ot::Mle::Mle::TlvList const&, unsigned short, ot::Message const*)
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkAccept(ot::Ip6::MessageInfo const&, ot::Neighbor*, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child&)
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressRelease()
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor*)
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateResponse(ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::InformPreviousParent()
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendDelayedResponse(ot::Mle::Mle::TxMessage&, ot::Mle::Mle::DelayedResponseMetadata const&)
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildIdRequest()
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendParentRequest(ot::Mle::Mle::ParentRequestType)
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendDataRequest(ot::Ip6::Address const&, unsigned char const*, unsigned char, unsigned short)
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendAnnounce(unsigned char, ot::Ip6::Address const&, ot::Mle::Mle::AnnounceMode)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleLowpanHC(ot::FrameData const&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::EnergyScanServer::HandleTmf&lang;(ot::Uri)19&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::EnergyScanServer::HandleScanResult(otEnergyScanResult*)
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::EnergyScanServer::SendReport()
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::PingSender::SendPing()
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PanIdQueryServer::SendConflict()
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)34&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)33&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::SendCommand(ot::Uri, ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::SendServerDataNotification(unsigned short, ot::NetworkData::NetworkData const*)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::SendCommissioningSetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::SendCommissioningGetResponse(ot::Coap::Message const&, unsigned short, ot::Ip6::MessageInfo const&)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistrationMessage(otIp6Address const*, unsigned char, unsigned int const*, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
</UL>

<P><STRONG><a name="[380]"></a>ot::Message::Iterator::Advance()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, message.o(.text._ZN2ot7Message8Iterator7AdvanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Message::Iterator::Advance()
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetNext() const
</UL>
<BR>[Called By]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::HandleRetransmissionTimer()
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::FindRelatedRequest(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::Coap::CoapBase::Metadata&)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::AbortTransaction(void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ClearRequests(ot::Ip6::Address const*)
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::UpdateQueue()
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::HandleTimer()
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::HandleRetransmissionTimer()
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::UpdateReassemblyList()
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleDelayedResponseTimer()
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RemoveDelayedMessage(ot::Message::SubType, ot::Mle::Mle::MessageType, ot::Ip6::Address const*)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveDataResponseMessages()
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessages(ot::Child&, ot::Message::SubType)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateReassemblyList()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::ClearReassemblyList()
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::ClearAllMessagesForSleepyChild(ot::Child&)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleChildModeChange(ot::Child&, ot::Mle::DeviceMode)
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::FindIndirectMessage(ot::Child&, bool)
</UL>

<P><STRONG><a name="[af4]"></a>ot::Message::Settings::From(otMessageSettings const*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, message.o(.text._ZN2ot7Message8Settings4FromEPK17otMessageSettings))
<BR><BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapNewMessage
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otUdpNewMessage
</UL>

<P><STRONG><a name="[65e]"></a>ot::Message::Settings::Settings(ot::Message::LinkSecurityMode, ot::Message::Priority)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, message.o(.text._ZN2ot7Message8SettingsC2ENS0_16LinkSecurityModeENS0_8PriorityE))
<BR><BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityResponseMessage(ot::Coap::Message const&)
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::JoinerRouter::HandleTmf&lang;(ot::Uri)29&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::NewMleMessage(ot::Mle::Mle::Command)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::SendError(ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code, ot::Ip6::MessageInfo const&, ot::Ip6::Headers const&)
</UL>

<P><STRONG><a name="[359]"></a>ot::Message::Settings::Settings__sub_object(ot::Message::LinkSecurityMode, ot::Message::Priority)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, message.o(.text._ZN2ot7Message8SettingsC2ENS0_16LinkSecurityModeENS0_8PriorityE))
<BR><BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::FrameToMessage(ot::FrameData const&, unsigned short, ot::Mac::Addresses const&, ot::Message*&)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[29e]"></a>ot::Message::SetLength(unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, message.o(.text._ZN2ot7Message9SetLengthEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ResizeMessage(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::SetToken(unsigned char const*, unsigned char)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&)
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Init()
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Finish()
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri)
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::Metadata::RemoveFrom(ot::Message&) const
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&)
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::DelayedResponseMetadata::RemoveFrom(ot::Message&) const
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&)
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::InformPreviousParent()
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::PingSender::SendPing()
</UL>

<P><STRONG><a name="[2ea]"></a>ot::Message::SetOffset(unsigned short)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, message.o(.text._ZN2ot7Message9SetOffsetEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::Message::SetOffset(unsigned short) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::SendEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&, unsigned short)
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewMessage(ot::Message::Settings const&)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::SetPayloadMarker()
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Init()
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::PrepareJoinerFinalizeMessage(char const*, char const*, char const*, char const*, char const*)
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool)
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleOptions(ot::Message&, ot::Ip6::Header&, bool, bool&)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMessage(ot::Message&)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateSendMessage(otError, ot::Mac::Address&, ot::Neighbor*)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&)
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressExtensionHeader(ot::Message&, ot::FrameBuilder&, unsigned char&)
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressUdp(ot::Message&, ot::FrameBuilder&)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::PrepareDataFrame(ot::Mac::TxFrame&, ot::Child&, ot::Message&)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)14&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[220]"></a>ot::Tasklet::Post()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tasklet.o(.text._ZN2ot7Tasklet4PostEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otTaskletsSignalPending
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::Send(ot::Coap::CoapBase&, ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::HandleTransmit()
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetRxOnWhenIdle(bool)
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::HandleTimeTick()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::SignalIfFirst(ot::Event)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::HandleDuaResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoverComplete()
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::ResumeMessageTransmissions()
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError)
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char)
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::EnqueueDatagram(ot::Message&)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMessage(ot::Message&)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::RouterTable(ot::Instance&)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Clear()
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::UpdateRoutesOnFed(ot::Mle::RouteTlv const&, unsigned char)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::RemoveRouterLink(ot::Router&)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::ClearNeighbors()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::UpdateRoutes(ot::Mle::RouteTlv const&, unsigned char)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateSendMessage(otError, ot::Mac::Address&, ot::Neighbor*)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilliIn&lang;ot::MeshForwarder, &(ot::MeshForwarder::HandleTxDelayTimer())&rang;::HandleTimer(ot::Timer&)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::AddRouter(unsigned char)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::RemoveRouter(ot::Router&)
</UL>

<P><STRONG><a name="[b2a]"></a>ot::Tasklet::Scheduler::ProcessQueuedTasklets()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tasklet.o(.text._ZN2ot7Tasklet9Scheduler21ProcessQueuedTaskletsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::Tasklet::Scheduler::ProcessQueuedTasklets()
</UL>
<BR>[Called By]<UL><LI><a href="#[b29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otTaskletsProcess
</UL>

<P><STRONG><a name="[34f]"></a>ot::ToYesNo(bool)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, string.o(.text._ZN2ot7ToYesNoEb))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::ToInfoString() const
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SaveDiscoveredJoinerRouter(otActiveScanResult const&)
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DeviceMode::ToString() const
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogLowpanHcFrameDrop(otError, unsigned short, ot::Mac::Addresses const&, bool)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogFragmentFrameDrop(otError, unsigned short, ot::Mac::Addresses const&, ot::Lowpan::FragmentHeader const&, bool)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogIp6Message(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[626]"></a>ot::Checksum::UpdateMessageChecksum(ot::Message&, ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned char)</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, checksum.o(.text._ZN2ot8Checksum21UpdateMessageChecksumERNS_7MessageERKNS_3Ip67AddressES6_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ot::Checksum::UpdateMessageChecksum(ot::Message&, ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned char) &rArr; ot::Checksum::Calculate(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned char, ot::Message const&) &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Checksum::Calculate(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned char, ot::Message const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
</UL>

<P><STRONG><a name="[64b]"></a>ot::Checksum::VerifyMessageChecksum(ot::Message const&, ot::Ip6::MessageInfo const&, unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, checksum.o(.text._ZN2ot8Checksum21VerifyMessageChecksumERKNS_7MessageERKNS_3Ip611MessageInfoEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::Checksum::VerifyMessageChecksum(ot::Message const&, ot::Ip6::MessageInfo const&, unsigned char) &rArr; ot::Checksum::Calculate(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned char, ot::Message const&) &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Checksum::Calculate(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned char, ot::Message const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::HandleMessage(ot::Message&, ot::Ip6::MessageInfo&)
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::HandleMessage(ot::Message&, ot::Ip6::MessageInfo&)
</UL>

<P><STRONG><a name="[917]"></a>ot::Checksum::AddData(unsigned char const*, unsigned short)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, checksum.o(.text._ZN2ot8Checksum7AddDataEPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Checksum::AddData(unsigned char const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Checksum::Calculate(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned char, ot::Message const&)
</UL>

<P><STRONG><a name="[916]"></a>ot::Checksum::Calculate(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned char, ot::Message const&)</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, checksum.o(.text._ZN2ot8Checksum9CalculateERKNS_3Ip67AddressES4_hRKNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ot::Checksum::Calculate(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned char, ot::Message const&) &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetNextChunk(unsigned short&, ot::Message::Chunk&) const
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Checksum::AddData(unsigned char const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Checksum::VerifyMessageChecksum(ot::Message const&, ot::Ip6::MessageInfo const&, unsigned char)
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Checksum::UpdateMessageChecksum(ot::Message&, ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned char)
</UL>

<P><STRONG><a name="[918]"></a>ot::Instance::InitSingle()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, instance.o(.text._ZN2ot8Instance10InitSingleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112 + Unknown Stack Size
<LI>Call Chain = ot::Instance::InitSingle() &rArr; ot::Mle::Mle::Restore() &rArr; ot::MeshCoP::DatasetManager::Restore() &rArr; ot::MeshCoP::DatasetLocal::Restore(ot::MeshCoP::Dataset&) &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::Init()
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance__sub_object()
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Restore()
</UL>
<BR>[Called By]<UL><LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otInstanceInitSingle
</UL>

<P><STRONG><a name="[91b]"></a>ot::Instance::SetLogLevel(ot::LogLevel)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, instance.o(.text._ZN2ot8Instance11SetLogLevelENS_8LogLevelE))
<BR><BR>[Calls]<UL><LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatLogHandleLevelChanged
</UL>
<BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLoggingSetLevel
</UL>

<P><STRONG><a name="[91d]"></a>ot::Instance::FactoryReset()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, instance.o(.text._ZN2ot8Instance12FactoryResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = ot::Instance::FactoryReset() &rArr; ot::Settings::Wipe() &rArr; otPlatSettingsWipe &rArr; efd_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatReset
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::Wipe()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otInstanceFactoryReset
</UL>

<P><STRONG><a name="[920]"></a>ot::Instance::GetBufferInfo(ot::Instance::BufferInfo&)</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, instance.o(.text._ZN2ot8Instance13GetBufferInfoERNS0_10BufferInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ot::Instance::GetBufferInfo(ot::Instance::BufferInfo&) &rArr; ot::PriorityQueue::GetInfo(otMessageQueueInfo&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::GetInfo(otMessageQueueInfo&) const
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::GetInfo(otMessageQueueInfo&) const
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::GetTotalBufferCount() const
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::GetFreeBufferCount() const
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageGetBufferInfo
</UL>

<P><STRONG><a name="[b05]"></a>ot::Instance::ResetBufferInfo()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, instance.o(.text._ZN2ot8Instance15ResetBufferInfoEv))
<BR><BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageResetBufferInfo
</UL>

<P><STRONG><a name="[925]"></a>ot::Instance::Reset()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, instance.o(.text._ZN2ot8Instance5ResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ot::Instance::Reset() &rArr; otPlatReset &rArr; Wdt_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatReset
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otInstanceReset
</UL>

<P><STRONG><a name="[926]"></a>ot::Instance::Instance()</STRONG> (Thumb, 464 bytes, Stack size 16 bytes, instance.o(.text._ZN2ot8InstanceC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Notifier(ot::Instance&)
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::Leader(ot::Instance&)
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Joiner(ot::Instance&)
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::PendingDatasetManager(ot::Instance&)
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ExtendedPanIdManager::ExtendedPanIdManager(ot::Instance&)
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::ActiveDatasetManager(ot::Instance&)
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkNameManager::NetworkNameManager(ot::Instance&)
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::JoinerRouter(ot::Instance&)
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::Manager::Manager()
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Lowpan(ot::Instance&)
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::MbedTls::MbedTls()
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::Slaac(ot::Instance&)
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::PingSender::PingSender(ot::Instance&)
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::Agent(ot::Instance&)
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::SecureAgent::SecureAgent(ot::Instance&)
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::MleRouter(ot::Instance&)
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::DiscoverScanner(ot::Instance&)
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::Mac(ot::Instance&)
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::Ip6(ot::Instance&)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::SupervisionListener(ot::Instance&)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AnnounceBeginServer::AnnounceBeginServer(ot::Instance&)
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::Server(ot::Instance&)
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::Client(ot::Instance&)
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PanIdQueryServer::PanIdQueryServer(ot::Instance&)
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::EnergyScanServer::EnergyScanServer(ot::Instance&)
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildSupervisor::ChildSupervisor(ot::Instance&)
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::AddressResolver(ot::Instance&)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::MeshForwarder(ot::Instance&)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ThreadNetif::ThreadNetif(ot::Instance&)
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::Notifier(ot::Instance&)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::Leader(ot::Instance&)
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::MessagePool(ot::Instance&)
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimeTicker::TimeTicker(ot::Instance&)
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::MlrManager(ot::Instance&)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::KeyManager(ot::Instance&)
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::DuaManager(ot::Instance&)
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Coap::Coap(ot::Instance&)
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::Leader(ot::Instance&)
</UL>

<P><STRONG><a name="[919]"></a>ot::Instance::Instance__sub_object()</STRONG> (Thumb, 464 bytes, Stack size 16 bytes, instance.o(.text._ZN2ot8InstanceC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::Instance::Instance__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::InitSingle()
</UL>

<P><STRONG><a name="[7a1]"></a>ot::Neighbor::GenerateChallenge()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, topology.o(.text._ZN2ot8Neighbor17GenerateChallengeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = ot::Neighbor::GenerateChallenge() &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoRandomGet
</UL>
<BR>[Called By]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkAccept(ot::Ip6::MessageInfo const&, ot::Neighbor*, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor*)
</UL>

<P><STRONG><a name="[3f4]"></a>ot::Neighbor::Info::SetFrom(ot::Neighbor const&)</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, topology.o(.text._ZN2ot8Neighbor4Info7SetFromERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = ot::Neighbor::Info::SetFrom(ot::Neighbor const&) &rArr; ot::LinkQualityInfo::GetLinkMargin() const
</UL>
<BR>[Calls]<UL><LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RssAverager::GetAverage() const
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::LinkFrameCounters::GetMaximum() const
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::LinkQualityInfo::GetLinkMargin() const
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::GetNextNeighborInfo(short&, ot::Neighbor::Info&)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::Signal(ot::NeighborTable::Event, ot::Neighbor const&)
</UL>

<P><STRONG><a name="[21d]"></a>ot::Neighbor::Init(ot::Instance&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, topology.o(.text._ZN2ot8Neighbor4InitERNS_8InstanceE))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::ChildTable(ot::Instance&)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::RouterTable(ot::Instance&)
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Mle(ot::Instance&)
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Attach(ot::Mle::Mle::AttachMode)
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildIdResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAttachTimer()
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ParentCandidate::Clear()
</UL>

<P><STRONG><a name="[935]"></a>ot::Notifier::EmitEvents()</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, notifier.o(.text._ZN2ot8Notifier10EmitEventsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912 + Unknown Stack Size
<LI>Call Chain = ot::Notifier::EmitEvents() &rArr; ot::Utils::Slaac::HandleNotifierEvents(ot::Events) &rArr; ot::Utils::Slaac::Update(unsigned char) &rArr; ot::Utils::Slaac::GenerateIid(ot::Ip6::Netif::UnicastAddress&, unsigned char*, unsigned char, unsigned char*) const &rArr; ot::Utils::Slaac::GetIidSecretKey(ot::Utils::Slaac::IidSecretKey&) const &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::LogEvents(ot::Events) const
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::HandleNotifierEvents(ot::Events)
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::HandleNotifierEvents(ot::Events)
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleNotifierEvents(ot::Events)
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::EnergyScanServer::HandleNotifierEvents(ot::Events)
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildSupervisor::HandleNotifierEvents(ot::Events)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::HandleNotifierEvents(ot::Events)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::HandleNotifierEvents(ot::Events)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::HandleNotifierEvents(ot::Events)
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TaskletIn&lang;ot::Notifier, &(ot::Notifier::EmitEvents())&rang;::HandleTasklet(ot::Tasklet&)
</UL>

<P><STRONG><a name="[25f]"></a>ot::Notifier::SignalIfFirst(ot::Event)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, notifier.o(.text._ZN2ot8Notifier13SignalIfFirstENS_5EventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ot::Notifier::SignalIfFirst(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
</UL>
<BR>[Called By]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetMeshLocalPrefix(ot::Ip6::NetworkPrefix const&)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetCurrentKeySequence(unsigned int)
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;unsigned short&rang;(unsigned short&, unsigned short const&, ot::Event)
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;unsigned char&rang;(unsigned char&, unsigned char const&, ot::Event)
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkNameManager::SignalNetworkNameChange(otError)
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;ot::MeshCoP::Joiner::State&rang;(ot::MeshCoP::Joiner::State&, ot::MeshCoP::Joiner::State const&, ot::Event)
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;ot::MeshCoP::ExtendedPanId&rang;(ot::MeshCoP::ExtendedPanId&, ot::MeshCoP::ExtendedPanId const&, ot::Event)
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;ot::Mle::DeviceRole&rang;(ot::Mle::DeviceRole&, ot::Mle::DeviceRole const&, ot::Event)
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetLeaderData(unsigned int, unsigned char, unsigned char)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;ot::Pskc&rang;(ot::Pskc&, ot::Pskc const&, ot::Event)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;ot::SecurityPolicy&rang;(ot::SecurityPolicy&, ot::SecurityPolicy const&, ot::Event)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;ot::NetworkKey&rang;(ot::NetworkKey&, ot::NetworkKey const&, ot::Event)
</UL>

<P><STRONG><a name="[b22]"></a>ot::Notifier::RegisterCallback(void (*)(unsigned int, void*), void*)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, notifier.o(.text._ZN2ot8Notifier16RegisterCallbackEPFvjPvES1_))
<BR><BR>[Called By]<UL><LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otSetStateChangedCallback
</UL>

<P><STRONG><a name="[251]"></a>ot::Notifier::Signal(ot::Event)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, notifier.o(.text._ZN2ot8Notifier6SignalENS_5EventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Clear()
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::UpdateLinkLocalAddress()
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::UnsubscribeExternalMulticast(ot::Ip6::Address const&)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::RemoveExternalUnicastAddress(ot::Ip6::Address const&)
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::SubscribeExternalMulticast(ot::Ip6::Address const&)
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::AddExternalUnicastAddress(ot::Ip6::Netif::UnicastAddress const&)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ThreadNetif::Down()
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ThreadNetif::Up()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetCurrentKeySequence(unsigned int)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetNetworkKey(ot::NetworkKey const&)
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;unsigned short&rang;(unsigned short&, unsigned short const&, ot::Event)
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;unsigned char&rang;(unsigned char&, unsigned char const&, ot::Event)
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleNotifierEvents(ot::Events)
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkNameManager::SignalNetworkNameChange(otError)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SetCommissioningData(unsigned char const*, unsigned char)
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;ot::MeshCoP::Joiner::State&rang;(ot::MeshCoP::Joiner::State&, ot::MeshCoP::Joiner::State const&, ot::Event)
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;ot::MeshCoP::ExtendedPanId&rang;(ot::MeshCoP::ExtendedPanId&, ot::MeshCoP::ExtendedPanId const&, ot::Event)
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Restore()
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset const&)
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleDatasetUpdated()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::Signal(ot::NeighborTable::Event, ot::Neighbor const&)
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::SignalMulticastAddressChange(ot::Ip6::Netif::AddressEvent, ot::Ip6::Netif::MulticastAddress const*, ot::Ip6::Netif::MulticastAddress const*)
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::UnsubscribeMulticast(ot::Ip6::Netif::MulticastAddress const&)
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::RemoveUnicastAddress(ot::Ip6::Netif::UnicastAddress const&)
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::SubscribeMulticast(ot::Ip6::Netif::MulticastAddress&)
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::AddUnicastAddress(ot::Ip6::Netif::UnicastAddress&)
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;ot::Mle::DeviceRole&rang;(ot::Mle::DeviceRole&, ot::Mle::DeviceRole const&, ot::Event)
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ApplyMeshLocalPrefix()
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetLeaderData(unsigned int, unsigned char, unsigned char)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SetNetworkData(unsigned char, unsigned char, ot::NetworkData::Type, ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;ot::Pskc&rang;(ot::Pskc&, ot::Pskc const&, ot::Event)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;ot::SecurityPolicy&rang;(ot::SecurityPolicy&, ot::SecurityPolicy const&, ot::Event)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Notifier::Update&lang;ot::NetworkKey&rang;(ot::NetworkKey&, ot::NetworkKey const&, ot::Event)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::Reset()
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SignalNetDataChanged()
</UL>

<P><STRONG><a name="[250]"></a>otError ot::Notifier::Update&lang;ot::NetworkKey&rang;(ot::NetworkKey&, ot::NetworkKey const&, ot::Event)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, key_manager.o(.text._ZN2ot8Notifier6UpdateINS_10NetworkKeyEEE7otErrorRT_RKS4_NS_5EventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = otError ot::Notifier::Update&lang;ot::NetworkKey&rang;(ot::NetworkKey&, ot::NetworkKey const&, ot::Event) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::SignalIfFirst(ot::Event)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetNetworkKey(ot::NetworkKey const&)
</UL>

<P><STRONG><a name="[255]"></a>otError ot::Notifier::Update&lang;ot::SecurityPolicy&rang;(ot::SecurityPolicy&, ot::SecurityPolicy const&, ot::Event)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, key_manager.o(.text._ZN2ot8Notifier6UpdateINS_14SecurityPolicyEEE7otErrorRT_RKS4_NS_5EventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = otError ot::Notifier::Update&lang;ot::SecurityPolicy&rang;(ot::SecurityPolicy&, ot::SecurityPolicy const&, ot::Event) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::SignalIfFirst(ot::Event)
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetSecurityPolicy(ot::SecurityPolicy const&)
</UL>

<P><STRONG><a name="[76d]"></a>otError ot::Notifier::Update&lang;ot::Mle::DeviceRole&rang;(ot::Mle::DeviceRole&, ot::Mle::DeviceRole const&, ot::Event)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mle.o(.text._ZN2ot8Notifier6UpdateINS_3Mle10DeviceRoleEEE7otErrorRT_RKS5_NS_5EventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = otError ot::Notifier::Update&lang;ot::Mle::DeviceRole&rang;(ot::Mle::DeviceRole&, ot::Mle::DeviceRole const&, ot::Event) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::SignalIfFirst(ot::Event)
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetRole(ot::Mle::DeviceRole)
</UL>

<P><STRONG><a name="[26b]"></a>otError ot::Notifier::Update&lang;ot::Pskc&rang;(ot::Pskc&, ot::Pskc const&, ot::Event)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, key_manager.o(.text._ZN2ot8Notifier6UpdateINS_4PskcEEE7otErrorRT_RKS4_NS_5EventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = otError ot::Notifier::Update&lang;ot::Pskc&rang;(ot::Pskc&, ot::Pskc const&, ot::Event) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::SignalIfFirst(ot::Event)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetPskc(ot::Pskc const&)
</UL>

<P><STRONG><a name="[8c4]"></a>otError ot::Notifier::Update&lang;ot::MeshCoP::ExtendedPanId&rang;(ot::MeshCoP::ExtendedPanId&, ot::MeshCoP::ExtendedPanId const&, ot::Event)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, extended_panid.o(.text._ZN2ot8Notifier6UpdateINS_7MeshCoP13ExtendedPanIdEEE7otErrorRT_RKS5_NS_5EventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = otError ot::Notifier::Update&lang;ot::MeshCoP::ExtendedPanId&rang;(ot::MeshCoP::ExtendedPanId&, ot::MeshCoP::ExtendedPanId const&, ot::Event) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::SignalIfFirst(ot::Event)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ExtendedPanIdManager::ExtendedPanIdManager(ot::Instance&)
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ExtendedPanIdManager::SetExtPanId(ot::MeshCoP::ExtendedPanId const&)
</UL>

<P><STRONG><a name="[903]"></a>otError ot::Notifier::Update&lang;ot::MeshCoP::Joiner::State&rang;(ot::MeshCoP::Joiner::State&, ot::MeshCoP::Joiner::State const&, ot::Event)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, joiner.o(.text._ZN2ot8Notifier6UpdateINS_7MeshCoP6Joiner5StateEEE7otErrorRT_RKS6_NS_5EventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = otError ot::Notifier::Update&lang;ot::MeshCoP::Joiner::State&rang;(ot::MeshCoP::Joiner::State&, ot::MeshCoP::Joiner::State const&, ot::Event) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::SignalIfFirst(ot::Event)
</UL>
<BR>[Called By]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SetState(ot::MeshCoP::Joiner::State)
</UL>

<P><STRONG><a name="[68c]"></a>otError ot::Notifier::Update&lang;unsigned char&rang;(unsigned char&, unsigned char const&, ot::Event)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mac.o(.text._ZN2ot8Notifier6UpdateIhEE7otErrorRT_RKS3_NS_5EventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = otError ot::Notifier::Update&lang;unsigned char&rang;(unsigned char&, unsigned char const&, ot::Event) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::SignalIfFirst(ot::Event)
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetPanChannel(unsigned char)
</UL>

<P><STRONG><a name="[6b0]"></a>otError ot::Notifier::Update&lang;unsigned short&rang;(unsigned short&, unsigned short const&, ot::Event)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mac.o(.text._ZN2ot8Notifier6UpdateItEE7otErrorRT_RKS3_NS_5EventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = otError ot::Notifier::Update&lang;unsigned short&rang;(unsigned short&, unsigned short const&, ot::Event) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::Signal(ot::Event)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::SignalIfFirst(ot::Event)
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetPanId(unsigned short)
</UL>

<P><STRONG><a name="[927]"></a>ot::Notifier::Notifier(ot::Instance&)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, notifier.o(.text._ZN2ot8NotifierC2ERNS_8InstanceE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Instance()
</UL>

<P><STRONG><a name="[bff]"></a>ot::Notifier::Notifier__sub_object(ot::Instance&)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, notifier.o(.text._ZN2ot8NotifierC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[202]"></a>ot::Settings::AddChildInfo(ot::SettingsBase::ChildInfo const&)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, settings.o(.text._ZN2ot8Settings12AddChildInfoERKNS_12SettingsBase9ChildInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = ot::Settings::AddChildInfo(ot::SettingsBase::ChildInfo const&) &rArr; otPlatSettingsAdd &rArr; [Anonymous Symbol] &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsAdd
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::Log(ot::SettingsBase::Action, otError, ot::SettingsBase::Key, void const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::StoreChild(ot::Child const&)
</UL>

<P><STRONG><a name="[939]"></a>ot::Settings::ChildInfoIterator::Read()</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, settings.o(.text._ZN2ot8Settings17ChildInfoIterator4ReadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ot::Settings::ChildInfoIterator::Read() &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsGet
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SettingsBase::ChildInfo::Log(ot::SettingsBase::Action) const
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::ChildInfoIterator::ChildInfoIterator(ot::Instance&)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::ChildInfoIterator::Advance()
</UL>

<P><STRONG><a name="[20b]"></a>ot::Settings::ChildInfoIterator::Delete()</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, settings.o(.text._ZN2ot8Settings17ChildInfoIterator6DeleteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = ot::Settings::ChildInfoIterator::Delete() &rArr; otPlatSettingsDelete &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsDelete
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::Log(ot::SettingsBase::Action, otError, ot::SettingsBase::Key, void const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::RemoveStoredChild(ot::Child const&)
</UL>

<P><STRONG><a name="[20a]"></a>ot::Settings::ChildInfoIterator::Advance()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, settings.o(.text._ZN2ot8Settings17ChildInfoIterator7AdvanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ot::Settings::ChildInfoIterator::Advance() &rArr; ot::Settings::ChildInfoIterator::Read() &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::ChildInfoIterator::Read()
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Restore()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::RemoveStoredChild(ot::Child const&)
</UL>

<P><STRONG><a name="[209]"></a>ot::Settings::ChildInfoIterator::ChildInfoIterator(ot::Instance&)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, settings.o(.text._ZN2ot8Settings17ChildInfoIteratorC2ERNS_8InstanceE))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ot::Settings::ChildInfoIterator::ChildInfoIterator(ot::Instance&) &rArr; ot::Settings::ChildInfoIterator::Read() &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::ChildInfoIterator::Read()
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Restore()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::RemoveStoredChild(ot::Child const&)
</UL>

<P><STRONG><a name="[c00]"></a>ot::Settings::ChildInfoIterator::ChildInfoIterator__sub_object(ot::Instance&)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, settings.o(.text._ZN2ot8Settings17ChildInfoIteratorC2ERNS_8InstanceE), UNUSED)

<P><STRONG><a name="[20e]"></a>ot::Settings::DeleteAllChildInfo()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, settings.o(.text._ZN2ot8Settings18DeleteAllChildInfoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = ot::Settings::DeleteAllChildInfo() &rArr; otPlatSettingsDelete &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsDelete
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::Log(ot::SettingsBase::Action, otError, ot::SettingsBase::Key, void const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::RefreshStoredChildren()
</UL>

<P><STRONG><a name="[880]"></a>ot::Settings::SaveOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset const&)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, settings.o(.text._ZN2ot8Settings22SaveOperationalDatasetENS_7MeshCoP7Dataset4TypeERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = ot::Settings::SaveOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset const&) &rArr; otPlatSettingsSet &rArr; [Anonymous Symbol] &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsSet
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::Log(ot::SettingsBase::Action, otError, ot::SettingsBase::Key, void const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Save(ot::MeshCoP::Dataset const&)
</UL>

<P><STRONG><a name="[881]"></a>ot::Settings::DeleteOperationalDataset(ot::MeshCoP::Dataset::Type)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, settings.o(.text._ZN2ot8Settings24DeleteOperationalDatasetENS_7MeshCoP7Dataset4TypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = ot::Settings::DeleteOperationalDataset(ot::MeshCoP::Dataset::Type) &rArr; otPlatSettingsDelete &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsDelete
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::Log(ot::SettingsBase::Action, otError, ot::SettingsBase::Key, void const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Clear()
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Save(ot::MeshCoP::Dataset const&)
</UL>

<P><STRONG><a name="[938]"></a>ot::Settings::Log(ot::SettingsBase::Action, otError, ot::SettingsBase::Key, void const*)</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, settings.o(.text._ZN2ot8Settings3LogENS_12SettingsBase6ActionE7otErrorNS1_3KeyEPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = ot::Settings::Log(ot::SettingsBase::Action, otError, ot::SettingsBase::Key, void const*) &rArr; ot::SettingsBase::NetworkInfo::Log(ot::SettingsBase::Action) const &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SettingsBase::ChildInfo::Log(ot::SettingsBase::Action) const
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SettingsBase::NetworkInfo::Log(ot::SettingsBase::Action) const
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SettingsBase::ParentInfo::Log(ot::SettingsBase::Action) const
</UL>
<BR>[Called By]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::ReadEntry(ot::SettingsBase::Key, void*, unsigned short) const
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::SaveEntry(ot::SettingsBase::Key, void const*, void*, unsigned short)
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::DeleteOperationalDataset(ot::MeshCoP::Dataset::Type)
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::SaveOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset const&)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::DeleteAllChildInfo()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::ChildInfoIterator::Delete()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::AddChildInfo(ot::SettingsBase::ChildInfo const&)
</UL>

<P><STRONG><a name="[91a]"></a>ot::Settings::Init()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, settings.o(.text._ZN2ot8Settings4InitEv))
<BR><BR>[Calls]<UL><LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsInit
</UL>
<BR>[Called By]<UL><LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::InitSingle()
</UL>

<P><STRONG><a name="[91e]"></a>ot::Settings::Wipe()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, settings.o(.text._ZN2ot8Settings4WipeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = ot::Settings::Wipe() &rArr; otPlatSettingsWipe &rArr; efd_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsWipe
</UL>
<BR>[Called By]<UL><LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::FactoryReset()
</UL>

<P><STRONG><a name="[765]"></a>ot::Settings::SaveEntry(ot::SettingsBase::Key, void const*, void*, unsigned short)</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, settings.o(.text._ZN2ot8Settings9SaveEntryENS_12SettingsBase3KeyEPKvPvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ot::Settings::SaveEntry(ot::SettingsBase::Key, void const*, void*, unsigned short) &rArr; otPlatSettingsSet &rArr; [Anonymous Symbol] &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsSet
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsGet
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::Log(ot::SettingsBase::Action, otError, ot::SettingsBase::Key, void const*)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Store()
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::GetIidSecretKey(ot::Utils::Slaac::IidSecretKey&) const
</UL>

<P><STRONG><a name="[825]"></a>ot::BitVector&lang;(unsigned short)3&rang;::Set(unsigned short, bool)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, topology.o(.text._ZN2ot9BitVectorILt3EE3SetEtb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::BitVector&lang;(unsigned short)3&rang;::Set(unsigned short, bool) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::SetAddressMlrState(ot::Ip6::Address const&, ot::MlrState)
</UL>

<P><STRONG><a name="[942]"></a>ot::DataUtils::MatchBytes(unsigned char const*, unsigned char const*, unsigned short, bool (*)(unsigned char, unsigned char))</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, data.o(.text._ZN2ot9DataUtils10MatchBytesEPKhS2_tPFbhhE))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ot::DataUtils::MatchBytes(unsigned char const*, unsigned char const*, unsigned short, bool (*)(unsigned char, unsigned char)) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::CompareBytes(unsigned short, void const*, unsigned short, bool (*)(unsigned char, unsigned char)) const
</UL>

<P><STRONG><a name="[86f]"></a>ot::FrameData::ReadBigEndianUint16(unsigned short&)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, frame_data.o(.text._ZN2ot9FrameData19ReadBigEndianUint16ERt))
<BR><BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressBaseHeader(ot::Ip6::Header&, bool&, ot::Mac::Addresses const&, ot::FrameData&)
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressUdpHeader(ot::Ip6::Udp::Header&, ot::FrameData&)
</UL>

<P><STRONG><a name="[865]"></a>ot::FrameData::SkipOver(unsigned short)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, frame_data.o(.text._ZN2ot9FrameData8SkipOverEt))
<BR><BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressBaseHeader(ot::Ip6::Header&, bool&, ot::Mac::Addresses const&, ot::FrameData&)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::FragmentHeader::ParseFrom(ot::FrameData&)
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressExtensionHeader(ot::Message&, ot::FrameData&)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Decompress(ot::Message&, ot::Mac::Addresses const&, ot::FrameData&, unsigned short)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::MeshHeader::ParseFrom(ot::FrameData&)
</UL>

<P><STRONG><a name="[67c]"></a>ot::FrameData::ReadBytes(void*, unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, frame_data.o(.text._ZN2ot9FrameData9ReadBytesEPvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::FrameData::ReadBytes(void*, unsigned short) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressBaseHeader(ot::Ip6::Header&, bool&, ot::Mac::Addresses const&, ot::FrameData&)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Headers::DecompressFrom(ot::FrameData const&, ot::Mac::Addresses const&, ot::Instance&)
</UL>

<P><STRONG><a name="[86e]"></a>ot::FrameData::ReadUint8(unsigned char&)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, frame_data.o(.text._ZN2ot9FrameData9ReadUint8ERh))
<BR><BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressBaseHeader(ot::Ip6::Header&, bool&, ot::Mac::Addresses const&, ot::FrameData&)
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressUdpHeader(ot::Ip6::Udp::Header&, ot::FrameData&)
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressExtensionHeader(ot::Message&, ot::FrameData&)
</UL>

<P><STRONG><a name="[3b]"></a>ot::TaskletIn&lang;ot::DuaManager, &(ot::DuaManager::PerformNextRegistration())&rang;::HandleTasklet(ot::Tasklet&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dua_manager.o(.text._ZN2ot9TaskletInINS_10DuaManagerEXadL_ZNS1_23PerformNextRegistrationEvEEE13HandleTaskletERNS_7TaskletE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688 + Unknown Stack Size
<LI>Call Chain = ot::TaskletIn&lang;ot::DuaManager, &(ot::DuaManager::PerformNextRegistration())&rang;::HandleTasklet(ot::Tasklet&) &rArr; ot::DuaManager::PerformNextRegistration() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::PerformNextRegistration()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dua_manager.o(.text._ZN2ot10DuaManagerC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[42]"></a>ot::TaskletIn&lang;ot::NetworkData::Notifier, &(ot::NetworkData::Notifier::SynchronizeServerData())&rang;::HandleTasklet(ot::Tasklet&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, network_data_notifier.o(.text._ZN2ot9TaskletInINS_11NetworkData8NotifierEXadL_ZNS2_21SynchronizeServerDataEvEEE13HandleTaskletERNS_7TaskletE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = ot::TaskletIn&lang;ot::NetworkData::Notifier, &(ot::NetworkData::Notifier::SynchronizeServerData())&rang;::HandleTasklet(ot::Tasklet&) &rArr; ot::NetworkData::Notifier::SynchronizeServerData() &rArr; ot::NetworkData::Notifier::RemoveStaleChildEntries() &rArr; ot::NetworkData::Notifier::SendServerDataNotification(unsigned short, ot::NetworkData::NetworkData const*) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::SynchronizeServerData()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_data_notifier.o(.text._ZN2ot11NetworkData8NotifierC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[43]"></a>ot::TaskletIn&lang;ot::RouterTable, &(ot::RouterTable::HandleTableChanged())&rang;::HandleTasklet(ot::Tasklet&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, router_table.o(.text._ZN2ot9TaskletInINS_11RouterTableEXadL_ZNS1_18HandleTableChangedEvEEE13HandleTaskletERNS_7TaskletE))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = ot::TaskletIn&lang;ot::RouterTable, &(ot::RouterTable::HandleTableChanged())&rang;::HandleTasklet(ot::Tasklet&) &rArr; ot::RouterTable::LogRouteTable() const &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::LogRouteTable() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> router_table.o(.text._ZN2ot11RouterTableC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[48]"></a>ot::TaskletIn&lang;ot::MeshForwarder, &(ot::MeshForwarder::ScheduleTransmissionTask())&rang;::HandleTasklet(ot::Tasklet&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mesh_forwarder.o(.text._ZN2ot9TaskletInINS_13MeshForwarderEXadL_ZNS1_24ScheduleTransmissionTaskEvEEE13HandleTaskletERNS_7TaskletE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832 + Unknown Stack Size
<LI>Call Chain = ot::TaskletIn&lang;ot::MeshForwarder, &(ot::MeshForwarder::ScheduleTransmissionTask())&rang;::HandleTasklet(ot::Tasklet&) &rArr; ot::MeshForwarder::ScheduleTransmissionTask() &rArr; ot::MeshForwarder::PrepareNextDirectTransmission() &rArr; ot::MeshForwarder::UpdateIp6Route(ot::Message&) &rArr; ot::MeshForwarder::UpdateIp6RouteFtd(ot::Ip6::Header&, ot::Message&) &rArr; ot::AddressResolver::Resolve(ot::Ip6::Address const&, unsigned short&, bool) &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::ScheduleTransmissionTask()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_forwarder.o(.text._ZN2ot13MeshForwarderC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[65]"></a>ot::TaskletIn&lang;ot::Ip6::Ip6, &(ot::Ip6::Ip6::HandleSendQueue())&rang;::HandleTasklet(ot::Tasklet&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ip6.o(.text._ZN2ot9TaskletInINS_3Ip63Ip6EXadL_ZNS2_15HandleSendQueueEvEEE13HandleTaskletERNS_7TaskletE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352 + Unknown Stack Size
<LI>Call Chain = ot::TaskletIn&lang;ot::Ip6::Ip6, &(ot::Ip6::Ip6::HandleSendQueue())&rang;::HandleTasklet(ot::Tasklet&) &rArr; ot::Ip6::Ip6::HandleSendQueue() &rArr; ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool) &rArr; ot::Ip6::Ip6::HandlePayload(ot::Ip6::Header&, ot::Message&, ot::Ip6::MessageInfo&, unsigned char, ot::Message::Ownership) &rArr; ot::Ip6::Icmp::HandleMessage(ot::Message&, ot::Ip6::MessageInfo&) &rArr; ot::Ip6::Icmp::HandleEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleSendQueue()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip6.o(.text._ZN2ot3Ip63Ip6C2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[67]"></a>ot::TaskletIn&lang;ot::Mac::Mac, &(ot::Mac::Mac::PerformNextOperation())&rang;::HandleTasklet(ot::Tasklet&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mac.o(.text._ZN2ot9TaskletInINS_3Mac3MacEXadL_ZNS2_20PerformNextOperationEvEEE13HandleTaskletERNS_7TaskletE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880 + Unknown Stack Size
<LI>Call Chain = ot::TaskletIn&lang;ot::Mac::Mac, &(ot::Mac::Mac::PerformNextOperation())&rang;::HandleTasklet(ot::Tasklet&) &rArr; ot::Mac::Mac::PerformNextOperation() &rArr; ot::Mac::Mac::PerformActiveScan() &rArr;  ot::Mac::Mac::PerformNextOperation() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformNextOperation()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mac.o(.text._ZN2ot3Mac3MacC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[6a]"></a>ot::TaskletIn&lang;ot::Mle::DiscoverScanner, &(ot::Mle::DiscoverScanner::HandleScanDoneTask())&rang;::HandleTasklet(ot::Tasklet&)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, discover_scanner.o(.text._ZN2ot9TaskletInINS_3Mle15DiscoverScannerEXadL_ZNS2_18HandleScanDoneTaskEvEEE13HandleTaskletERNS_7TaskletE))
<BR>[Address Reference Count : 1]<UL><LI> discover_scanner.o(.text._ZN2ot3Mle15DiscoverScannerC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[97]"></a>ot::TaskletIn&lang;ot::Notifier, &(ot::Notifier::EmitEvents())&rang;::HandleTasklet(ot::Tasklet&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, notifier.o(.text._ZN2ot9TaskletInINS_8NotifierEXadL_ZNS1_10EmitEventsEvEEE13HandleTaskletERNS_7TaskletE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912 + Unknown Stack Size
<LI>Call Chain = ot::TaskletIn&lang;ot::Notifier, &(ot::Notifier::EmitEvents())&rang;::HandleTasklet(ot::Tasklet&) &rArr; ot::Notifier::EmitEvents() &rArr; ot::Utils::Slaac::HandleNotifierEvents(ot::Events) &rArr; ot::Utils::Slaac::Update(unsigned char) &rArr; ot::Utils::Slaac::GenerateIid(ot::Ip6::Netif::UnicastAddress&, unsigned char*, unsigned char, unsigned char*) const &rArr; ot::Utils::Slaac::GetIidSecretKey(ot::Utils::Slaac::IidSecretKey&) const &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::EmitEvents()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> notifier.o(.text._ZN2ot8NotifierC2ERNS_8InstanceE)
</UL>
<P><STRONG><a name="[210]"></a>ot::ChildTable::HasChildren(ot::Neighbor::StateFilter) const</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, child_table.o(.text._ZNK2ot10ChildTable11HasChildrenENS_8Neighbor11StateFilterE))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ot::ChildTable::HasChildren(ot::Neighbor::StateFilter) const &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::SetMaxChildrenAllowed(unsigned short)
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildSupervisor::CheckState()
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildStart(ot::Mle::Mle::AttachMode)
</UL>

<P><STRONG><a name="[498]"></a>ot::ChildTable::GetNumChildren(ot::Neighbor::StateFilter) const</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, child_table.o(.text._ZNK2ot10ChildTable14GetNumChildrenENS_8Neighbor11StateFilterE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::ChildTable::GetNumChildren(ot::Neighbor::StateFilter) const
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::MatchesFilter(ot::Neighbor::StateFilter) const
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeRouter(ot::ThreadStatusTlv::Status)
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ShouldDowngrade(unsigned char, ot::Mle::RouteTlv const&) const
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::FillConnectivityTlv(ot::Mle::ConnectivityTlv&)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendChildTable(ot::Message&)
</UL>

<P><STRONG><a name="[627]"></a>ot::ChildTable::HasSleepyChildWithAddress(ot::Ip6::Address const&) const</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, child_table.o(.text._ZNK2ot10ChildTable25HasSleepyChildWithAddressERKNS_3Ip67AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ot::ChildTable::HasSleepyChildWithAddress(ot::Ip6::Address const&) const &rArr; ot::Child::HasIp6Address(ot::Ip6::Address const&) const &rArr; ot::Mle::Mle::IsMeshLocalAddress(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::HasIp6Address(ot::Ip6::Address const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
</UL>

<P><STRONG><a name="[3f0]"></a>ot::ChildTable::FindChild(ot::Neighbor::AddressMatcher const&) const</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, child_table.o(.text._ZNK2ot10ChildTable9FindChildERKNS_8Neighbor14AddressMatcherE))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ot::ChildTable::FindChild(ot::Neighbor::AddressMatcher const&) const &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindChildOrRouter(ot::Neighbor::AddressMatcher const&)
</UL>

<P><STRONG><a name="[257]"></a>ot::KeyManager::ComputeKeys(unsigned int, ot::KeyManager::HashKeys&) const</STRONG> (Thumb, 82 bytes, Stack size 64 bytes, key_manager.o(.text._ZNK2ot10KeyManager11ComputeKeysEjRNS0_8HashKeysE))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = ot::KeyManager::ComputeKeys(unsigned int, ot::KeyManager::HashKeys&) const &rArr; ot::Crypto::HmacSha256::Start(ot::Crypto::Key const&) &rArr; otPlatCryptoHmacSha256Start &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::HmacSha256::~HmacSha256()
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::HmacSha256::HmacSha256()
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::HmacSha256::Update(void const*, unsigned short)
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::HmacSha256::Finish(ot::Crypto::Sha256::Hash&)
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::HmacSha256::Start(ot::Crypto::Key const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::UpdateKeyMaterial()
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::GetTemporaryMleKey(unsigned int)
</UL>

<P><STRONG><a name="[894]"></a>ot::KeyManager::GetNetworkKey(ot::NetworkKey&) const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, key_manager.o(.text._ZNK2ot10KeyManager13GetNetworkKeyERNS_10NetworkKeyE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::KeyManager::GetNetworkKey(ot::NetworkKey&) const &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetNetworkKey
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::PrepareJoinerEntrustMessage()
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::GenerateLocal()
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ApplyConfiguration(ot::Instance&, bool*) const
</UL>

<P><STRONG><a name="[8bd]"></a>ot::KeyManager::GetPskc(ot::Pskc&) const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, key_manager.o(.text._ZNK2ot10KeyManager7GetPskcERNS_4PskcE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::KeyManager::GetPskc(ot::Pskc&) const &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetPskc
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::GenerateLocal()
</UL>

<P><STRONG><a name="[439]"></a>ot::AddressResolver::CacheEntry const* ot::LinkedList&lang;ot::AddressResolver::CacheEntry&rang;::FindMatching&lang;ot::Ip6::Address&rang;(ot::AddressResolver::CacheEntry const*, ot::AddressResolver::CacheEntry const*, ot::Ip6::Address const&, ot::AddressResolver::CacheEntry const*&) const</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, address_resolver.o(.text._ZNK2ot10LinkedListINS_15AddressResolver10CacheEntryEE12FindMatchingINS_3Ip67AddressEEEPKS2_S8_S8_RKT_RS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ot::AddressResolver::CacheEntry const* ot::LinkedList&lang;ot::AddressResolver::CacheEntry&rang;::FindMatching&lang;ot::Ip6::Address&rang;(ot::AddressResolver::CacheEntry const*, ot::AddressResolver::CacheEntry const*, ot::Ip6::Address const&, ot::AddressResolver::CacheEntry const*&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::FindCacheEntry(ot::Ip6::Address const&, ot::AddressResolver::CacheEntryList*&, ot::AddressResolver::CacheEntry*&)
</UL>

<P><STRONG><a name="[944]"></a>bool ot::LinkedList&lang;ot::Ip6::Netif::UnicastAddress&rang;::ContainsMatching&lang;ot::Ip6::Address&rang;(ot::Ip6::Address const&) const</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, netif.o(.text._ZNK2ot10LinkedListINS_3Ip65Netif14UnicastAddressEE16ContainsMatchingINS1_7AddressEEEbRKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bool ot::LinkedList&lang;ot::Ip6::Netif::UnicastAddress&rang;::ContainsMatching&lang;ot::Ip6::Address&rang;(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Address const&) const
</UL>

<P><STRONG><a name="[66b]"></a>bool ot::LinkedList&lang;ot::Ip6::Netif::MulticastAddress&rang;::ContainsMatching&lang;ot::Ip6::Address&rang;(ot::Ip6::Address const&) const</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, netif.o(.text._ZNK2ot10LinkedListINS_3Ip65Netif16MulticastAddressEE16ContainsMatchingINS1_7AddressEEEbRKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bool ot::LinkedList&lang;ot::Ip6::Netif::MulticastAddress&rang;::ContainsMatching&lang;ot::Ip6::Address&rang;(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::SubscribeExternalMulticast(ot::Ip6::Address const&)
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::IsMulticastSubscribed(ot::Ip6::Address const&) const
</UL>

<P><STRONG><a name="[280]"></a>ot::MlrManager::IsAddressMlrRegisteredByAnyChildExcept(ot::Ip6::Address const&, ot::Child const*) const</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, mlr_manager.o(.text._ZNK2ot10MlrManager38IsAddressMlrRegisteredByAnyChildExceptERKNS_3Ip67AddressEPKNS_5ChildE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ot::MlrManager::IsAddressMlrRegisteredByAnyChildExcept(ot::Ip6::Address const&, ot::Child const*) const &rArr; ot::Child::HasMlrRegisteredAddress(ot::Ip6::Address const&) const &rArr; ot::Child::AddressIterator::Update() &rArr; ot::Child::GetMeshLocalIp6Address(ot::Ip6::Address&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsMulticastLargerThanRealmLocal() const
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::HasMlrRegisteredAddress(ot::Ip6::Address const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::UpdateProxiedSubscriptions(ot::Child&, ot::Ip6::Address const*, unsigned short)
</UL>

<P><STRONG><a name="[922]"></a>ot::MessagePool::GetFreeBufferCount() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, message.o(.text._ZNK2ot11MessagePool18GetFreeBufferCountEv))
<BR><BR>[Called By]<UL><LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::GetBufferInfo(ot::Instance::BufferInfo&)
</UL>

<P><STRONG><a name="[921]"></a>ot::MessagePool::GetTotalBufferCount() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, message.o(.text._ZNK2ot11MessagePool19GetTotalBufferCountEv))
<BR><BR>[Called By]<UL><LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::GetBufferInfo(ot::Instance::BufferInfo&)
</UL>

<P><STRONG><a name="[78f]"></a>ot::NetworkData::LeaderBase::GetContext(ot::Ip6::Address const&, ot::Lowpan::Context&) const</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, network_data_leader.o(.text._ZNK2ot11NetworkData10LeaderBase10GetContextERKNS_3Ip67AddressERNS_6Lowpan7ContextE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::LeaderBase::GetContext(ot::Ip6::Address const&, ot::Lowpan::Context&) const &rArr; ot::NetworkData::LeaderBase::FindNextMatchingPrefixTlv(ot::Ip6::Address const&, ot::NetworkData::PrefixTlv const*) const &rArr; ot::Ip6::Address::MatchesPrefix(unsigned char const*, unsigned char) const &rArr; ot::Ip6::Prefix::MatchLength(unsigned char const*, unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::Set(unsigned char const*, unsigned char)
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsMeshLocalAddress(ot::Ip6::Address const&) const
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::FindNextMatchingPrefixTlv(ot::Ip6::Address const&, ot::NetworkData::PrefixTlv const*) const
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::PrefixTlv::FindSubTlv(ot::NetworkData::NetworkDataTlv::Type) const
</UL>
<BR>[Called By]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Child&)
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Mle::Mle::AddressRegistrationMode)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&)
</UL>

<P><STRONG><a name="[7cd]"></a>ot::NetworkData::LeaderBase::GetContext(unsigned char, ot::Lowpan::Context&) const</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, network_data_leader.o(.text._ZNK2ot11NetworkData10LeaderBase10GetContextEhRNS_6Lowpan7ContextE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ot::NetworkData::LeaderBase::GetContext(unsigned char, ot::Lowpan::Context&) const &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::Set(unsigned char const*, unsigned char)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::PrefixTlv::FindSubTlv(ot::NetworkData::NetworkDataTlv::Type) const
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::TlvIterator::Iterate(ot::NetworkData::NetworkDataTlv::Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressBaseHeader(ot::Ip6::Header&, bool&, ot::Mac::Addresses const&, ot::FrameData&)
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::AnycastRouteLookup(unsigned char, ot::MeshForwarder::AnycastType, unsigned short&) const
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressMulticast(ot::Ip6::Address const&, unsigned short&, ot::FrameBuilder&)
</UL>

<P><STRONG><a name="[3c7]"></a>ot::NetworkData::LeaderBase::RouteLookup(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned short&) const</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, network_data_leader.o(.text._ZNK2ot11NetworkData10LeaderBase11RouteLookupERKNS_3Ip67AddressES5_Rt))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::LeaderBase::RouteLookup(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned short&) const &rArr; ot::NetworkData::LeaderBase::ExternalRouteLookup(unsigned char, ot::Ip6::Address const&, unsigned short&) const &rArr; int ot::NetworkData::LeaderBase::CompareRouteEntries&lang;ot::NetworkData::HasRouteEntry&rang;(ot::NetworkData::HasRouteEntry const&, ot::NetworkData::HasRouteEntry const&) const &rArr; ot::NetworkData::LeaderBase::CompareRouteEntries(signed char, unsigned short, signed char, unsigned short) const &rArr; ot::RouterTable::GetPathCost(unsigned short) const &rArr; ot::RouterTable::GetNextHopAndPathCost(unsigned short, unsigned short&, unsigned char&) const &rArr; ot::ChildTable::FindChild(unsigned short, ot::Neighbor::StateFilter) &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::FindNextMatchingPrefixTlv(ot::Ip6::Address const&, ot::NetworkData::PrefixTlv const*) const
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::ExternalRouteLookup(unsigned char, ot::Ip6::Address const&, unsigned short&) const
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::DefaultRouteLookup(ot::NetworkData::PrefixTlv const&, unsigned short&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::RouteLookup(ot::Ip6::Address const&, ot::Ip6::Address const&) const
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateIp6RouteFtd(ot::Ip6::Header&, ot::Message&)
</UL>

<P><STRONG><a name="[949]"></a>ot::NetworkData::LeaderBase::GetServiceId(unsigned int, ot::NetworkData::ServiceData const&, bool, unsigned char&) const</STRONG> (Thumb, 124 bytes, Stack size 560 bytes, network_data_leader.o(.text._ZNK2ot11NetworkData10LeaderBase12GetServiceIdEjRKNS0_11ServiceDataEbRh))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = ot::NetworkData::LeaderBase::GetServiceId(unsigned int, ot::NetworkData::ServiceData const&, bool, unsigned char&) const &rArr; ot::NetworkData::NetworkData::GetNextService(unsigned int&, ot::NetworkData::ServiceConfig&) const &rArr; ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const &rArr; ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&) &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::GetNextService(unsigned int&, ot::NetworkData::ServiceConfig&) const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Service::Manager::GetServiceId(void const*, unsigned char, bool, unsigned char&) const
</UL>

<P><STRONG><a name="[7c1]"></a>ot::NetworkData::LeaderBase::IsJoiningEnabled() const</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, network_data_leader.o(.text._ZNK2ot11NetworkData10LeaderBase16IsJoiningEnabledEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ot::NetworkData::LeaderBase::IsJoiningEnabled() const &rArr; ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(ot::MeshCoP::Tlv::Type) const &rArr; ot::MeshCoP::Tlv::FindTlv(unsigned char const*, unsigned short, ot::MeshCoP::Tlv::Type)
</UL>
<BR>[Calls]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::GetValue() const
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(ot::MeshCoP::Tlv::Type) const
</UL>
<BR>[Called By]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::Start()
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleDiscoveryRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[94b]"></a>ot::NetworkData::LeaderBase::SteeringDataCheck(ot::MeshCoP::SteeringData::HashBitIndexes const&) const</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, network_data_leader.o(.text._ZNK2ot11NetworkData10LeaderBase17SteeringDataCheckERKNS_7MeshCoP12SteeringData14HashBitIndexesE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::LeaderBase::SteeringDataCheck(ot::MeshCoP::SteeringData::HashBitIndexes const&) const &rArr; ot::MeshCoP::SteeringDataTlv::CopyTo(ot::MeshCoP::SteeringData&) const &rArr; ot::MeshCoP::SteeringData::Init(unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SteeringDataTlv::CopyTo(ot::MeshCoP::SteeringData&) const
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SteeringData::Contains(ot::MeshCoP::SteeringData::HashBitIndexes const&) const
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(ot::MeshCoP::Tlv::Type) const
</UL>
<BR>[Called By]<UL><LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SteeringDataCheckJoiner(ot::MeshCoP::JoinerDiscerner const&) const
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SteeringDataCheckJoiner(ot::Mac::ExtAddress const&) const
</UL>

<P><STRONG><a name="[948]"></a>ot::NetworkData::LeaderBase::DefaultRouteLookup(ot::NetworkData::PrefixTlv const&, unsigned short&) const</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, network_data_leader.o(.text._ZNK2ot11NetworkData10LeaderBase18DefaultRouteLookupERKNS0_9PrefixTlvERt))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = ot::NetworkData::LeaderBase::DefaultRouteLookup(ot::NetworkData::PrefixTlv const&, unsigned short&) const &rArr; int ot::NetworkData::LeaderBase::CompareRouteEntries&lang;ot::NetworkData::BorderRouterEntry&rang;(ot::NetworkData::BorderRouterEntry const&, ot::NetworkData::BorderRouterEntry const&) const &rArr; ot::NetworkData::LeaderBase::CompareRouteEntries(signed char, unsigned short, signed char, unsigned short) const &rArr; ot::RouterTable::GetPathCost(unsigned short) const &rArr; ot::RouterTable::GetNextHopAndPathCost(unsigned short, unsigned short&, unsigned char&) const &rArr; ot::ChildTable::FindChild(unsigned short, ot::Neighbor::StateFilter) &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int ot::NetworkData::LeaderBase::CompareRouteEntries&lang;ot::NetworkData::BorderRouterEntry&rang;(ot::NetworkData::BorderRouterEntry const&, ot::NetworkData::BorderRouterEntry const&) const
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::TlvIterator::Iterate(ot::NetworkData::NetworkDataTlv::Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::RouteLookup(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned short&) const
</UL>

<P><STRONG><a name="[94f]"></a>ot::NetworkData::LeaderBase::CompareRouteEntries(signed char, unsigned short, signed char, unsigned short) const</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, network_data_leader.o(.text._ZNK2ot11NetworkData10LeaderBase19CompareRouteEntriesEatat))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ot::NetworkData::LeaderBase::CompareRouteEntries(signed char, unsigned short, signed char, unsigned short) const &rArr; ot::RouterTable::GetPathCost(unsigned short) const &rArr; ot::RouterTable::GetNextHopAndPathCost(unsigned short, unsigned short&, unsigned char&) const &rArr; ot::ChildTable::FindChild(unsigned short, ot::Neighbor::StateFilter) &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetPathCost(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int ot::NetworkData::LeaderBase::CompareRouteEntries&lang;ot::NetworkData::BorderRouterEntry&rang;(ot::NetworkData::BorderRouterEntry const&, ot::NetworkData::BorderRouterEntry const&) const
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int ot::NetworkData::LeaderBase::CompareRouteEntries&lang;ot::NetworkData::HasRouteEntry&rang;(ot::NetworkData::HasRouteEntry const&, ot::NetworkData::HasRouteEntry const&) const
</UL>

<P><STRONG><a name="[951]"></a>int ot::NetworkData::LeaderBase::CompareRouteEntries&lang;ot::NetworkData::HasRouteEntry&rang;(ot::NetworkData::HasRouteEntry const&, ot::NetworkData::HasRouteEntry const&) const</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, network_data_leader.o(.text._ZNK2ot11NetworkData10LeaderBase19CompareRouteEntriesINS0_13HasRouteEntryEEEiRKT_S6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = int ot::NetworkData::LeaderBase::CompareRouteEntries&lang;ot::NetworkData::HasRouteEntry&rang;(ot::NetworkData::HasRouteEntry const&, ot::NetworkData::HasRouteEntry const&) const &rArr; ot::NetworkData::LeaderBase::CompareRouteEntries(signed char, unsigned short, signed char, unsigned short) const &rArr; ot::RouterTable::GetPathCost(unsigned short) const &rArr; ot::RouterTable::GetNextHopAndPathCost(unsigned short, unsigned short&, unsigned char&) const &rArr; ot::ChildTable::FindChild(unsigned short, ot::Neighbor::StateFilter) &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Preference::From2BitUint(unsigned char)
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::CompareRouteEntries(signed char, unsigned short, signed char, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::ExternalRouteLookup(unsigned char, ot::Ip6::Address const&, unsigned short&) const
</UL>

<P><STRONG><a name="[94e]"></a>int ot::NetworkData::LeaderBase::CompareRouteEntries&lang;ot::NetworkData::BorderRouterEntry&rang;(ot::NetworkData::BorderRouterEntry const&, ot::NetworkData::BorderRouterEntry const&) const</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, network_data_leader.o(.text._ZNK2ot11NetworkData10LeaderBase19CompareRouteEntriesINS0_17BorderRouterEntryEEEiRKT_S6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = int ot::NetworkData::LeaderBase::CompareRouteEntries&lang;ot::NetworkData::BorderRouterEntry&rang;(ot::NetworkData::BorderRouterEntry const&, ot::NetworkData::BorderRouterEntry const&) const &rArr; ot::NetworkData::LeaderBase::CompareRouteEntries(signed char, unsigned short, signed char, unsigned short) const &rArr; ot::RouterTable::GetPathCost(unsigned short) const &rArr; ot::RouterTable::GetNextHopAndPathCost(unsigned short, unsigned short&, unsigned char&) const &rArr; ot::ChildTable::FindChild(unsigned short, ot::Neighbor::StateFilter) &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Preference::From2BitUint(unsigned char)
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::CompareRouteEntries(signed char, unsigned short, signed char, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::DefaultRouteLookup(ot::NetworkData::PrefixTlv const&, unsigned short&) const
</UL>

<P><STRONG><a name="[947]"></a>ot::NetworkData::LeaderBase::ExternalRouteLookup(unsigned char, ot::Ip6::Address const&, unsigned short&) const</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, network_data_leader.o(.text._ZNK2ot11NetworkData10LeaderBase19ExternalRouteLookupEhRKNS_3Ip67AddressERt))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::LeaderBase::ExternalRouteLookup(unsigned char, ot::Ip6::Address const&, unsigned short&) const &rArr; int ot::NetworkData::LeaderBase::CompareRouteEntries&lang;ot::NetworkData::HasRouteEntry&rang;(ot::NetworkData::HasRouteEntry const&, ot::NetworkData::HasRouteEntry const&) const &rArr; ot::NetworkData::LeaderBase::CompareRouteEntries(signed char, unsigned short, signed char, unsigned short) const &rArr; ot::RouterTable::GetPathCost(unsigned short) const &rArr; ot::RouterTable::GetNextHopAndPathCost(unsigned short, unsigned short&, unsigned char&) const &rArr; ot::ChildTable::FindChild(unsigned short, ot::Neighbor::StateFilter) &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::FindNextMatchingPrefixTlv(ot::Ip6::Address const&, ot::NetworkData::PrefixTlv const*) const
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int ot::NetworkData::LeaderBase::CompareRouteEntries&lang;ot::NetworkData::HasRouteEntry&rang;(ot::NetworkData::HasRouteEntry const&, ot::NetworkData::HasRouteEntry const&) const
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::TlvIterator::Iterate(ot::NetworkData::NetworkDataTlv::Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::RouteLookup(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned short&) const
</UL>

<P><STRONG><a name="[2dc]"></a>ot::NetworkData::LeaderBase::GetCommissioningData() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, network_data_leader.o(.text._ZNK2ot11NetworkData10LeaderBase20GetCommissioningDataEv))
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkDataTlv::Find(ot::NetworkData::NetworkDataTlv const*, ot::NetworkData::NetworkDataTlv const*, ot::NetworkData::NetworkDataTlv::Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::EnergyScanServer::HandleNotifierEvents(ot::Events)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)16&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::SendCommissioningGetResponse(ot::Coap::Message const&, unsigned short, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[952]"></a>ot::NetworkData::LeaderBase::GetPreferredNat64Prefix(ot::NetworkData::ExternalRouteConfig&) const</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, network_data_leader.o(.text._ZNK2ot11NetworkData10LeaderBase23GetPreferredNat64PrefixERNS0_19ExternalRouteConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::LeaderBase::GetPreferredNat64Prefix(ot::NetworkData::ExternalRouteConfig&) const &rArr; ot::NetworkData::NetworkData::GetNextExternalRoute(unsigned int&, ot::NetworkData::ExternalRouteConfig&) const &rArr; ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const &rArr; ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&) &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::GetNextExternalRoute(unsigned int&, ot::NetworkData::ExternalRouteConfig&) const
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::operator&lang;(ot::Ip6::Prefix const&) const
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::IsValidNat64PrefixLength(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otNat64SynthesizeIp6Address
</UL>

<P><STRONG><a name="[956]"></a>ot::NetworkData::LeaderBase::SteeringDataCheckJoiner(ot::Mac::ExtAddress const&) const</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, network_data_leader.o(.text._ZNK2ot11NetworkData10LeaderBase23SteeringDataCheckJoinerERKNS_3Mac10ExtAddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::LeaderBase::SteeringDataCheckJoiner(ot::Mac::ExtAddress const&) const &rArr; ot::MeshCoP::ComputeJoinerId(ot::Mac::ExtAddress const&, ot::Mac::ExtAddress&) &rArr; ot::Crypto::Sha256::Update(void const*, unsigned short) &rArr; otPlatCryptoSha256Update &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ComputeJoinerId(ot::Mac::ExtAddress const&, ot::Mac::ExtAddress&)
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SteeringData::CalculateHashBitIndexes(ot::Mac::ExtAddress const&, ot::MeshCoP::SteeringData::HashBitIndexes&)
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SteeringDataCheck(ot::MeshCoP::SteeringData::HashBitIndexes const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otNetDataSteeringDataCheckJoiner
</UL>

<P><STRONG><a name="[957]"></a>ot::NetworkData::LeaderBase::SteeringDataCheckJoiner(ot::MeshCoP::JoinerDiscerner const&) const</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, network_data_leader.o(.text._ZNK2ot11NetworkData10LeaderBase23SteeringDataCheckJoinerERKNS_7MeshCoP15JoinerDiscernerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::LeaderBase::SteeringDataCheckJoiner(ot::MeshCoP::JoinerDiscerner const&) const &rArr; ot::NetworkData::LeaderBase::SteeringDataCheck(ot::MeshCoP::SteeringData::HashBitIndexes const&) const &rArr; ot::MeshCoP::SteeringDataTlv::CopyTo(ot::MeshCoP::SteeringData&) const &rArr; ot::MeshCoP::SteeringData::Init(unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SteeringData::CalculateHashBitIndexes(ot::MeshCoP::JoinerDiscerner const&, ot::MeshCoP::SteeringData::HashBitIndexes&)
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SteeringDataCheck(ot::MeshCoP::SteeringData::HashBitIndexes const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otNetDataSteeringDataCheckJoinerWithDiscerner
</UL>

<P><STRONG><a name="[946]"></a>ot::NetworkData::LeaderBase::FindNextMatchingPrefixTlv(ot::Ip6::Address const&, ot::NetworkData::PrefixTlv const*) const</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, network_data_leader.o(.text._ZNK2ot11NetworkData10LeaderBase25FindNextMatchingPrefixTlvERKNS_3Ip67AddressEPKNS0_9PrefixTlvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::LeaderBase::FindNextMatchingPrefixTlv(ot::Ip6::Address const&, ot::NetworkData::PrefixTlv const*) const &rArr; ot::Ip6::Address::MatchesPrefix(unsigned char const*, unsigned char) const &rArr; ot::Ip6::Prefix::MatchLength(unsigned char const*, unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::MatchesPrefix(unsigned char const*, unsigned char) const
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::TlvIterator::Iterate(ot::NetworkData::NetworkDataTlv::Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::IsOnMesh(ot::Ip6::Address const&) const
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::RouteLookup(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned short&) const
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetContext(ot::Ip6::Address const&, ot::Lowpan::Context&) const
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::ExternalRouteLookup(unsigned char, ot::Ip6::Address const&, unsigned short&) const
</UL>

<P><STRONG><a name="[7bf]"></a>ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(ot::MeshCoP::Tlv::Type) const</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, network_data_leader.o(.text._ZNK2ot11NetworkData10LeaderBase26GetCommissioningDataSubTlvENS_7MeshCoP3Tlv4TypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(ot::MeshCoP::Tlv::Type) const &rArr; ot::MeshCoP::Tlv::FindTlv(unsigned char const*, unsigned short, ot::MeshCoP::Tlv::Type)
</UL>
<BR>[Calls]<UL><LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Tlv::FindTlv(unsigned char const*, unsigned short, ot::MeshCoP::Tlv::Type)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkDataTlv::Find(ot::NetworkData::NetworkDataTlv const*, ot::NetworkData::NetworkDataTlv const*, ot::NetworkData::NetworkDataTlv::Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::GetJoinerUdpPort()
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Leader::HandleTmf&lang;(ot::Uri)22&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::IsJoiningEnabled() const
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::GetBorderAgentRloc(ot::ThreadNetif&, unsigned short&)
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDiscoveryResponse(ot::Ip6::Address const&, ot::Message const&)
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SteeringDataCheck(ot::MeshCoP::SteeringData::HashBitIndexes const&) const
</UL>

<P><STRONG><a name="[36c]"></a>ot::NetworkData::LeaderBase::IsOnMesh(ot::Ip6::Address const&) const</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, network_data_leader.o(.text._ZNK2ot11NetworkData10LeaderBase8IsOnMeshERKNS_3Ip67AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::LeaderBase::IsOnMesh(ot::Ip6::Address const&) const &rArr; ot::NetworkData::LeaderBase::FindNextMatchingPrefixTlv(ot::Ip6::Address const&, ot::NetworkData::PrefixTlv const*) const &rArr; ot::Ip6::Address::MatchesPrefix(unsigned char const*, unsigned char) const &rArr; ot::Ip6::Prefix::MatchLength(unsigned char const*, unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsMeshLocalAddress(ot::Ip6::Address const&) const
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::FindNextMatchingPrefixTlv(ot::Ip6::Address const&, ot::NetworkData::PrefixTlv const*) const
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::TlvIterator::Iterate(ot::NetworkData::NetworkDataTlv::Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::IsOnLink(ot::Ip6::Address const&) const
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendIcmpErrorIfDstUnreach(ot::Message const&, ot::Mac::Addresses const&)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateIp6RouteFtd(ot::Ip6::Header&, ot::Message&)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateRoutes(ot::FrameData const&, ot::Mac::Addresses const&)
</UL>

<P><STRONG><a name="[2e7]"></a>ot::NetworkData::ServiceTlv::IsValid() const</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, network_data_leader_ftd.o(.text._ZNK2ot11NetworkData10ServiceTlv7IsValidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::NetworkData::ServiceTlv::IsValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::Validate(ot::NetworkData::NetworkData const&, unsigned short)
</UL>

<P><STRONG><a name="[2c4]"></a>ot::NetworkData::NetworkData::FindPrefix(unsigned char const*, unsigned char) const</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, network_data.o(.text._ZNK2ot11NetworkData11NetworkData10FindPrefixEPKhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::NetworkData::FindPrefix(unsigned char const*, unsigned char) const &rArr; ot::Ip6::Prefix::MatchLength(unsigned char const*, unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::MatchLength(unsigned char const*, unsigned char const*, unsigned char)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::TlvIterator::Iterate(ot::NetworkData::NetworkDataTlv::Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddPrefix(ot::NetworkData::PrefixTlv const&, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::Validate(ot::NetworkData::NetworkData const&, unsigned short)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveRloc(unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::NetworkData const&, ot::NetworkData::Leader::ChangedFlags&)
</UL>

<P><STRONG><a name="[2bc]"></a>ot::NetworkData::NetworkData::FindService(unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, network_data.o(.text._ZNK2ot11NetworkData11NetworkData11FindServiceEjRKNS0_11ServiceDataENS1_16ServiceMatchModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ot::NetworkData::NetworkData::FindService(unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const &rArr; ot::NetworkData::NetworkData::MatchService(ot::NetworkData::ServiceTlv const&, unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::TlvIterator::Iterate(ot::NetworkData::NetworkDataTlv::Type)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::MatchService(ot::NetworkData::ServiceTlv const&, unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::Validate(ot::NetworkData::NetworkData const&, unsigned short)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveRloc(unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::NetworkData const&, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddService(ot::NetworkData::ServiceTlv const&, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::FindNextService(ot::NetworkData::ServiceTlv const*, unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const
</UL>

<P><STRONG><a name="[2f8]"></a>ot::NetworkData::NetworkData::GetNextServer(unsigned int&, unsigned short&) const</STRONG> (Thumb, 90 bytes, Stack size 592 bytes, network_data.o(.text._ZNK2ot11NetworkData11NetworkData13GetNextServerERjRt))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::NetworkData::GetNextServer(unsigned int&, unsigned short&) const &rArr; ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const &rArr; ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&) &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::RemoveStaleChildEntries()
</UL>

<P><STRONG><a name="[94a]"></a>ot::NetworkData::NetworkData::GetNextService(unsigned int&, ot::NetworkData::ServiceConfig&) const</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, network_data.o(.text._ZNK2ot11NetworkData11NetworkData14GetNextServiceERjRNS0_13ServiceConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ot::NetworkData::NetworkData::GetNextService(unsigned int&, ot::NetworkData::ServiceConfig&) const &rArr; ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const &rArr; ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&) &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otNetDataGetNextService
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::AnycastRouteLookup(unsigned char, ot::MeshForwarder::AnycastType, unsigned short&) const
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetServiceId(unsigned int, ot::NetworkData::ServiceData const&, bool, unsigned char&) const
</UL>

<P><STRONG><a name="[783]"></a>ot::NetworkData::NetworkData::CopyNetworkData(ot::NetworkData::Type, unsigned char*, unsigned char&) const</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, network_data.o(.text._ZNK2ot11NetworkData11NetworkData15CopyNetworkDataENS0_4TypeEPhRh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::NetworkData::CopyNetworkData(ot::NetworkData::Type, unsigned char*, unsigned char&) const &rArr; ot::NetworkData::MutableNetworkData::RemoveTemporaryData() &rArr; ot::NetworkData::MutableNetworkData::RemoveTemporaryDataIn(ot::NetworkData::PrefixTlv&) &rArr; ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::RemoveTemporaryData()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otNetDataGet
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendNetworkDataTlv(ot::NetworkData::Type)
</UL>

<P><STRONG><a name="[95a]"></a>ot::NetworkData::NetworkData::FindNextService(ot::NetworkData::ServiceTlv const*, unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, network_data.o(.text._ZNK2ot11NetworkData11NetworkData15FindNextServiceEPKNS0_10ServiceTlvEjRKNS0_11ServiceDataENS1_16ServiceMatchModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ot::NetworkData::NetworkData::FindNextService(ot::NetworkData::ServiceTlv const*, unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const &rArr; ot::NetworkData::NetworkData::FindService(unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const &rArr; ot::NetworkData::NetworkData::MatchService(ot::NetworkData::ServiceTlv const&, unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::FindService(unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const
</UL>
<BR>[Called By]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::FindNextThreadService(ot::NetworkData::ServiceTlv const*, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const
</UL>

<P><STRONG><a name="[95b]"></a>ot::NetworkData::NetworkData::FindBorderRouters(ot::NetworkData::RoleFilter, unsigned short*, unsigned char&) const</STRONG> (Thumb, 192 bytes, Stack size 120 bytes, network_data.o(.text._ZNK2ot11NetworkData11NetworkData17FindBorderRoutersENS0_10RoleFilterEPtRh))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ot::NetworkData::NetworkData::FindBorderRouters(ot::NetworkData::RoleFilter, unsigned short*, unsigned char&) const &rArr; ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const &rArr; ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&) &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::FindBorderRouters(ot::NetworkData::RoleFilter, unsigned short*, unsigned char&) const::Rlocs::AddRloc16(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::CountBorderRouters(ot::NetworkData::RoleFilter) const
</UL>

<P><STRONG><a name="[7d1]"></a>ot::NetworkData::NetworkData::CountBorderRouters(ot::NetworkData::RoleFilter) const</STRONG> (Thumb, 50 bytes, Stack size 184 bytes, network_data.o(.text._ZNK2ot11NetworkData11NetworkData18CountBorderRoutersENS0_10RoleFilterE))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::NetworkData::CountBorderRouters(ot::NetworkData::RoleFilter) const &rArr; ot::NetworkData::NetworkData::FindBorderRouters(ot::NetworkData::RoleFilter, unsigned short*, unsigned char&) const &rArr; ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const &rArr; ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&) &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::FindBorderRouters(ot::NetworkData::RoleFilter, unsigned short*, unsigned char&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)4&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[3f8]"></a>ot::NetworkData::NetworkData::GetNextOnMeshPrefix(unsigned int&, ot::NetworkData::OnMeshPrefixConfig&) const</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, network_data.o(.text._ZNK2ot11NetworkData11NetworkData19GetNextOnMeshPrefixERjRNS0_18OnMeshPrefixConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ot::NetworkData::NetworkData::GetNextOnMeshPrefix(unsigned int&, ot::NetworkData::OnMeshPrefixConfig&) const &rArr; ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const &rArr; ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&) &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otNetDataGetNextOnMeshPrefix
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::UpdateDomainPrefixConfig()
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::AnycastRouteLookup(unsigned char, ot::MeshForwarder::AnycastType, unsigned short&) const
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::Update(unsigned char)
</UL>

<P><STRONG><a name="[953]"></a>ot::NetworkData::NetworkData::GetNextExternalRoute(unsigned int&, ot::NetworkData::ExternalRouteConfig&) const</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, network_data.o(.text._ZNK2ot11NetworkData11NetworkData20GetNextExternalRouteERjRNS0_19ExternalRouteConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ot::NetworkData::NetworkData::GetNextExternalRoute(unsigned int&, ot::NetworkData::ExternalRouteConfig&) const &rArr; ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const &rArr; ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&) &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otNetDataGetNextRoute
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetPreferredNat64Prefix(ot::NetworkData::ExternalRouteConfig&) const
</UL>

<P><STRONG><a name="[95d]"></a>ot::NetworkData::NetworkData::FindNextThreadService(ot::NetworkData::ServiceTlv const*, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, network_data.o(.text._ZNK2ot11NetworkData11NetworkData21FindNextThreadServiceEPKNS0_10ServiceTlvERKNS0_11ServiceDataENS1_16ServiceMatchModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ot::NetworkData::NetworkData::FindNextThreadService(ot::NetworkData::ServiceTlv const*, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const &rArr; ot::NetworkData::NetworkData::FindNextService(ot::NetworkData::ServiceTlv const*, unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const &rArr; ot::NetworkData::NetworkData::FindService(unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const &rArr; ot::NetworkData::NetworkData::MatchService(ot::NetworkData::ServiceTlv const&, unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::FindNextService(ot::NetworkData::ServiceTlv const*, unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Service::Manager::GetBackboneRouterPrimary(otBackboneRouterConfig&) const
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Service::Manager::GetNextDnsSrpUnicastInfo(ot::NetworkData::Service::Manager::Iterator&, ot::NetworkData::Service::DnsSrpUnicast::Info&) const
</UL>

<P><STRONG><a name="[95e]"></a>ot::NetworkData::NetworkData::GetNextLowpanContextInfo(unsigned int&, ot::NetworkData::LowpanContextInfo&) const</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, network_data.o(.text._ZNK2ot11NetworkData11NetworkData24GetNextLowpanContextInfoERjRNS0_17LowpanContextInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ot::NetworkData::NetworkData::GetNextLowpanContextInfo(unsigned int&, ot::NetworkData::LowpanContextInfo&) const &rArr; ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const &rArr; ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&) &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otNetDataGetNextLowpanContextInfo
</UL>

<P><STRONG><a name="[959]"></a>ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const</STRONG> (Thumb, 618 bytes, Stack size 48 bytes, network_data.o(.text._ZNK2ot11NetworkData11NetworkData7IterateERjtRNS1_6ConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const &rArr; ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&) &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&)
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::OnMeshPrefixConfig::SetFrom(ot::NetworkData::PrefixTlv const&, ot::NetworkData::BorderRouterTlv const&, ot::NetworkData::BorderRouterEntry const&)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LowpanContextInfo::SetFrom(ot::NetworkData::PrefixTlv const&, ot::NetworkData::ContextTlv const&)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::ServiceConfig::SetFrom(ot::NetworkData::ServiceTlv const&, ot::NetworkData::ServerTlv const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::GetNextLowpanContextInfo(unsigned int&, ot::NetworkData::LowpanContextInfo&) const
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::GetNextExternalRoute(unsigned int&, ot::NetworkData::ExternalRouteConfig&) const
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::GetNextOnMeshPrefix(unsigned int&, ot::NetworkData::OnMeshPrefixConfig&) const
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::GetNextService(unsigned int&, ot::NetworkData::ServiceConfig&) const
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::FindBorderRouters(ot::NetworkData::RoleFilter, unsigned short*, unsigned char&) const
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::GetNextServer(unsigned int&, unsigned short&) const
</UL>

<P><STRONG><a name="[95f]"></a>ot::NetworkData::Leader::FindServiceById(unsigned char) const</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, network_data_leader_ftd.o(.text._ZNK2ot11NetworkData6Leader15FindServiceByIdEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ot::NetworkData::Leader::FindServiceById(unsigned char) const &rArr; ot::NetworkData::TlvIterator::Iterate(ot::NetworkData::NetworkDataTlv::Type)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::TlvIterator::Iterate(ot::NetworkData::NetworkDataTlv::Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AllocateServiceId(unsigned char&) const
</UL>

<P><STRONG><a name="[2bf]"></a>ot::NetworkData::Leader::AllocateServiceId(unsigned char&) const</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, network_data_leader_ftd.o(.text._ZNK2ot11NetworkData6Leader17AllocateServiceIdERh))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ot::NetworkData::Leader::AllocateServiceId(unsigned char&) const &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::FindServiceById(unsigned char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddService(ot::NetworkData::ServiceTlv const&, ot::NetworkData::Leader::ChangedFlags&)
</UL>

<P><STRONG><a name="[960]"></a>ot::NetworkData::Service::Manager::GetServiceId(void const*, unsigned char, bool, unsigned char&) const</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, network_data_service.o(.text._ZNK2ot11NetworkData7Service7Manager12GetServiceIdEPKvhbRh))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = ot::NetworkData::Service::Manager::GetServiceId(void const*, unsigned char, bool, unsigned char&) const &rArr; ot::NetworkData::LeaderBase::GetServiceId(unsigned int, ot::NetworkData::ServiceData const&, bool, unsigned char&) const &rArr; ot::NetworkData::NetworkData::GetNextService(unsigned int&, ot::NetworkData::ServiceConfig&) const &rArr; ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const &rArr; ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&) &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetServiceId(unsigned int, ot::NetworkData::ServiceData const&, bool, unsigned char&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::GetServiceId(unsigned char&) const
</UL>

<P><STRONG><a name="[961]"></a>ot::NetworkData::Service::Manager::IterateToNextServer(ot::NetworkData::Service::Manager::Iterator&) const</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, network_data_service.o(.text._ZNK2ot11NetworkData7Service7Manager19IterateToNextServerERNS2_8IteratorE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::NetworkData::Service::Manager::IterateToNextServer(ot::NetworkData::Service::Manager::Iterator&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkDataTlv::Find(ot::NetworkData::NetworkDataTlv const*, ot::NetworkData::NetworkDataTlv const*, ot::NetworkData::NetworkDataTlv::Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Service::Manager::GetBackboneRouterPrimary(otBackboneRouterConfig&) const
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Service::Manager::GetNextDnsSrpUnicastInfo(ot::NetworkData::Service::Manager::Iterator&, ot::NetworkData::Service::DnsSrpUnicast::Info&) const
</UL>

<P><STRONG><a name="[3fc]"></a>ot::NetworkData::Service::Manager::GetBackboneRouterPrimary(otBackboneRouterConfig&) const</STRONG> (Thumb, 246 bytes, Stack size 64 bytes, network_data_service.o(.text._ZNK2ot11NetworkData7Service7Manager24GetBackboneRouterPrimaryER22otBackboneRouterConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ot::NetworkData::Service::Manager::GetBackboneRouterPrimary(otBackboneRouterConfig&) const &rArr; ot::NetworkData::NetworkData::FindNextThreadService(ot::NetworkData::ServiceTlv const*, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const &rArr; ot::NetworkData::NetworkData::FindNextService(ot::NetworkData::ServiceTlv const*, unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const &rArr; ot::NetworkData::NetworkData::FindService(unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const &rArr; ot::NetworkData::NetworkData::MatchService(ot::NetworkData::ServiceTlv const&, unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Service::Manager::IterateToNextServer(ot::NetworkData::Service::Manager::Iterator&) const
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::FindNextThreadService(ot::NetworkData::ServiceTlv const*, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::UpdateBackboneRouterPrimary()
</UL>

<P><STRONG><a name="[451]"></a>ot::NetworkData::Service::Manager::GetNextDnsSrpUnicastInfo(ot::NetworkData::Service::Manager::Iterator&, ot::NetworkData::Service::DnsSrpUnicast::Info&) const</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, network_data_service.o(.text._ZNK2ot11NetworkData7Service7Manager24GetNextDnsSrpUnicastInfoERNS2_8IteratorERNS1_13DnsSrpUnicast4InfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ot::NetworkData::Service::Manager::GetNextDnsSrpUnicastInfo(ot::NetworkData::Service::Manager::Iterator&, ot::NetworkData::Service::DnsSrpUnicast::Info&) const &rArr; ot::NetworkData::NetworkData::FindNextThreadService(ot::NetworkData::ServiceTlv const*, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const &rArr; ot::NetworkData::NetworkData::FindNextService(ot::NetworkData::ServiceTlv const*, unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const &rArr; ot::NetworkData::NetworkData::FindService(unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const &rArr; ot::NetworkData::NetworkData::MatchService(ot::NetworkData::ServiceTlv const&, unsigned int, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLocator(ot::Ip6::NetworkPrefix const&, unsigned short)
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Service::Manager::IterateToNextServer(ot::NetworkData::Service::Manager::Iterator&) const
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::FindNextThreadService(ot::NetworkData::ServiceTlv const*, ot::NetworkData::ServiceData const&, ot::NetworkData::NetworkData::ServiceMatchMode) const
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::ResolveUsingNetDataServices(ot::Ip6::Address const&, unsigned short&)
</UL>

<P><STRONG><a name="[2b4]"></a>ot::NetworkData::PrefixTlv::FindSubTlv(ot::NetworkData::NetworkDataTlv::Type) const</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, network_data_tlvs.o(.text._ZNK2ot11NetworkData9PrefixTlv10FindSubTlvENS0_14NetworkDataTlv4TypeE))
<BR><BR>[Called By]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetContext(unsigned char, ot::Lowpan::Context&) const
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetContext(ot::Ip6::Address const&, ot::Lowpan::Context&) const
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::RemoveRlocInPrefix(ot::NetworkData::PrefixTlv&, unsigned short, ot::NetworkData::Leader::MatchMode, ot::NetworkData::PrefixTlv const*, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddBorderRouter(ot::NetworkData::BorderRouterTlv const&, ot::NetworkData::PrefixTlv&, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::HandleNetworkDataRestoredAfterReset()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::RemoveTemporaryDataIn(ot::NetworkData::PrefixTlv&)
</UL>

<P><STRONG><a name="[2c8]"></a>ot::NetworkData::PrefixTlv::FindSubTlv(ot::NetworkData::NetworkDataTlv::Type, bool) const</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, network_data_tlvs.o(.text._ZNK2ot11NetworkData9PrefixTlv10FindSubTlvENS0_14NetworkDataTlv4TypeEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::NetworkData::PrefixTlv::FindSubTlv(ot::NetworkData::NetworkDataTlv::Type, bool) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::ContainsMatchingEntry(ot::NetworkData::PrefixTlv const*, bool, ot::NetworkData::BorderRouterEntry const&)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::ContainsMatchingEntry(ot::NetworkData::PrefixTlv const*, bool, ot::NetworkData::HasRouteEntry const&)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddBorderRouter(ot::NetworkData::BorderRouterTlv const&, ot::NetworkData::PrefixTlv&, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddHasRoute(ot::NetworkData::HasRouteTlv const&, ot::NetworkData::PrefixTlv&, ot::NetworkData::Leader::ChangedFlags&)
</UL>

<P><STRONG><a name="[3f1]"></a>ot::RouterTable::FindRouter(ot::Neighbor::AddressMatcher const&) const</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, router_table.o(.text._ZNK2ot11RouterTable10FindRouterERKNS_8Neighbor14AddressMatcherE))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ot::RouterTable::FindRouter(ot::Neighbor::AddressMatcher const&) const &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindChildOrRouter(ot::Neighbor::AddressMatcher const&)
</UL>

<P><STRONG><a name="[399]"></a>ot::RouterTable::GetNextHop(unsigned short) const</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, router_table.o(.text._ZNK2ot11RouterTable10GetNextHopEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ot::RouterTable::GetNextHop(unsigned short) const &rArr; ot::RouterTable::GetNextHopAndPathCost(unsigned short, unsigned short&, unsigned char&) const &rArr; ot::ChildTable::FindChild(unsigned short, ot::Neighbor::StateFilter) &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetNextHopAndPathCost(unsigned short, unsigned short&, unsigned char&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ResolveRoutingLoops(unsigned short, unsigned short)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::CheckReachability(unsigned short, ot::Ip6::Header const&)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateIp6RouteFtd(ot::Ip6::Header&, ot::Message&)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateMeshRoute(ot::Message&)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateIp6Route(ot::Message&)
</UL>

<P><STRONG><a name="[301]"></a>ot::RouterTable::GetLinkCost(ot::Router const&) const</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, router_table.o(.text._ZNK2ot11RouterTable11GetLinkCostERKNS_6RouterE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::RouterTable::GetLinkCost(ot::Router const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Router::GetTwoWayLinkQuality() const
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CostForLinkQuality(ot::LinkQuality)
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetNextHopAndPathCost(unsigned short, unsigned short&, unsigned char&) const
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::RemoveRouterLink(ot::Router&)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::UpdateRoutes(ot::Mle::RouteTlv const&, unsigned char)
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::LogRouteTable() const
</UL>

<P><STRONG><a name="[950]"></a>ot::RouterTable::GetPathCost(unsigned short) const</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, router_table.o(.text._ZNK2ot11RouterTable11GetPathCostEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ot::RouterTable::GetPathCost(unsigned short) const &rArr; ot::RouterTable::GetNextHopAndPathCost(unsigned short, unsigned short&, unsigned char&) const &rArr; ot::ChildTable::FindChild(unsigned short, ot::Neighbor::StateFilter) &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetNextHopAndPathCost(unsigned short, unsigned short&, unsigned char&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::AnycastRouteLookup(unsigned char, ot::MeshForwarder::AnycastType, unsigned short&) const
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::CompareRouteEntries(signed char, unsigned short, signed char, unsigned short) const
</UL>

<P><STRONG><a name="[7c7]"></a>ot::RouterTable::RouterIdMap::GetAsRouterIdSet(ot::Mle::RouterIdSet&) const</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, router_table.o(.text._ZNK2ot11RouterTable11RouterIdMap16GetAsRouterIdSetERNS_3Mle11RouterIdSetE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::RouterTable::RouterIdMap::GetAsRouterIdSet(ot::Mle::RouterIdSet&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressSolicitResponse(ot::Coap::Message const&, ot::ThreadStatusTlv::Status, ot::Router const*, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[492]"></a>ot::RouterTable::FillRouteTlv(ot::Mle::RouteTlv&, ot::Neighbor const*) const</STRONG> (Thumb, 382 bytes, Stack size 56 bytes, router_table.o(.text._ZNK2ot11RouterTable12FillRouteTlvERNS_3Mle8RouteTlvEPKNS_8NeighborE))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = ot::RouterTable::FillRouteTlv(ot::Mle::RouteTlv&, ot::Neighbor const*) const &rArr; ot::RouterTable::GetNextHopAndPathCost(unsigned short, unsigned short&, unsigned char&) const &rArr; ot::ChildTable::FindChild(unsigned short, ot::Neighbor::StateFilter) &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetNextHopAndPathCost(unsigned short, unsigned short&, unsigned char&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendRouteTlv(ot::Neighbor*)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendDiagTlv(unsigned char, ot::Message&)
</UL>

<P><STRONG><a name="[79b]"></a>ot::RouterTable::GetLeaderAge() const</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, router_table.o(.text._ZNK2ot11RouterTable12GetLeaderAgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ot::RouterTable::GetLeaderAge() const
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleParentRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[79c]"></a>ot::RouterTable::FindNextHopOf(ot::Router const&) const</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, router_table.o(.text._ZNK2ot11RouterTable13FindNextHopOfERKNS_6RouterE))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
</UL>

<P><STRONG><a name="[943]"></a>ot::RouterTable::LogRouteTable() const</STRONG> (Thumb, 276 bytes, Stack size 184 bytes, router_table.o(.text._ZNK2ot11RouterTable13LogRouteTableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = ot::RouterTable::LogRouteTable() const &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::StringWriter__sub_object(char*, unsigned short)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::Append(char const*, ...)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetLinkCost(ot::Router const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TaskletIn&lang;ot::RouterTable, &(ot::RouterTable::HandleTableChanged())&rang;::HandleTasklet(ot::Tasklet&)
</UL>

<P><STRONG><a name="[3f3]"></a>ot::RouterTable::FindRouterById(unsigned char) const</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, router_table.o(.text._ZNK2ot11RouterTable14FindRouterByIdEh))
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::GetNextNeighborInfo(short&, ot::Neighbor::Info&)
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::NeighborHasComparableConnectivity(ot::Mle::RouteTlv const&, unsigned char) const
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)3&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::Mle::RxInfo&, unsigned short, ot::Mle::LeaderData const&)
</UL>

<P><STRONG><a name="[7b1]"></a>ot::RouterTable::GetNeighborCount() const</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, router_table.o(.text._ZNK2ot11RouterTable16GetNeighborCountEv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::Mle::RxInfo&, unsigned short, ot::Mle::LeaderData const&)
</UL>

<P><STRONG><a name="[796]"></a>ot::RouterTable::GetRouterIdRange(unsigned char&, unsigned char&) const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, router_table.o(.text._ZNK2ot11RouterTable16GetRouterIdRangeERhS1_))
<BR><BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetRouterIdRange
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeLeader()
</UL>

<P><STRONG><a name="[7aa]"></a>ot::RouterTable::FindRouterByRloc16(unsigned short) const</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, router_table.o(.text._ZNK2ot11RouterTable18FindRouterByRloc16Et))
<BR><BR>[Called By]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ResolveRoutingLoops(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[7b0]"></a>ot::RouterTable::GetPathCostToLeader() const</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, router_table.o(.text._ZNK2ot11RouterTable19GetPathCostToLeaderEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ot::RouterTable::GetPathCostToLeader() const &rArr; ot::RouterTable::GetNextHopAndPathCost(unsigned short, unsigned short&, unsigned char&) const &rArr; ot::ChildTable::FindChild(unsigned short, ot::Neighbor::StateFilter) &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetNextHopAndPathCost(unsigned short, unsigned short&, unsigned char&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleParentRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::FillConnectivityTlv(ot::Mle::ConnectivityTlv&)
</UL>

<P><STRONG><a name="[300]"></a>ot::RouterTable::GetNextHopAndPathCost(unsigned short, unsigned short&, unsigned char&) const</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, router_table.o(.text._ZNK2ot11RouterTable21GetNextHopAndPathCostEtRtRh))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ot::RouterTable::GetNextHopAndPathCost(unsigned short, unsigned short&, unsigned char&) const &rArr; ot::ChildTable::FindChild(unsigned short, ot::Neighbor::StateFilter) &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsAttached() const
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::FindChild(unsigned short, ot::Neighbor::StateFilter)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetLinkCost(ot::Router const&) const
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CostForLinkQuality(ot::LinkQuality)
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetNextHopAndPathCost
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetPathCostToLeader() const
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::UpdateRoutes(ot::Mle::RouteTlv const&, unsigned char)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::FillRouteTlv(ot::Mle::RouteTlv&, ot::Neighbor const*) const
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetPathCost(unsigned short) const
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetNextHop(unsigned short) const
</UL>

<P><STRONG><a name="[7a7]"></a>ot::RouterTable::IsRouteTlvIdSequenceMoreRecent(ot::Mle::RouteTlv const&) const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, router_table.o(.text._ZNK2ot11RouterTable30IsRouteTlvIdSequenceMoreRecentERKNS_3Mle8RouteTlvE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::Mle::RxInfo&, unsigned short, ot::Mle::LeaderData const&)
</UL>

<P><STRONG><a name="[7cb]"></a>ot::RouterTable::GetLeader() const</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, router_table.o(.text._ZNK2ot11RouterTable9GetLeaderEv))
<BR><BR>[Called By]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
</UL>

<P><STRONG><a name="[826]"></a>ot::RssAverager::GetAverage() const</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, link_quality.o(.text._ZNK2ot11RssAverager10GetAverageEv))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::Info::SetFrom(ot::Child const&)
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::Info::SetFrom(ot::Neighbor const&)
</UL>

<P><STRONG><a name="[374]"></a>ot::RssAverager::ToString() const</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, link_quality.o(.text._ZNK2ot11RssAverager8ToStringEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ot::RssAverager::ToString() const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::StringWriter__sub_object(char*, unsigned short)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::Append(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogIp6Message(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel)
</UL>

<P><STRONG><a name="[924]"></a>ot::MessageQueue::GetInfo(otMessageQueueInfo&) const</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, message.o(.text._ZNK2ot12MessageQueue7GetInfoER18otMessageQueueInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::MessageQueue::GetInfo(otMessageQueueInfo&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetNext() const
</UL>
<BR>[Called By]<UL><LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::GetBufferInfo(ot::Instance::BufferInfo&)
</UL>

<P><STRONG><a name="[93f]"></a>ot::SettingsBase::ParentInfo::Log(ot::SettingsBase::Action) const</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, settings.o(.text._ZNK2ot12SettingsBase10ParentInfo3LogENS0_6ActionE))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ot::SettingsBase::ParentInfo::Log(ot::SettingsBase::Action) const &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::ToString() const
</UL>
<BR>[Called By]<UL><LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::Log(ot::SettingsBase::Action, otError, ot::SettingsBase::Key, void const*)
</UL>

<P><STRONG><a name="[93e]"></a>ot::SettingsBase::NetworkInfo::Log(ot::SettingsBase::Action) const</STRONG> (Thumb, 128 bytes, Stack size 88 bytes, settings.o(.text._ZNK2ot12SettingsBase11NetworkInfo3LogENS0_6ActionE))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = ot::SettingsBase::NetworkInfo::Log(ot::SettingsBase::Action) const &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::RoleToString(ot::Mle::DeviceRole)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::ToString() const
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::ToString() const
</UL>
<BR>[Called By]<UL><LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::Log(ot::SettingsBase::Action, otError, ot::SettingsBase::Key, void const*)
</UL>

<P><STRONG><a name="[93b]"></a>ot::SettingsBase::ChildInfo::Log(ot::SettingsBase::Action) const</STRONG> (Thumb, 82 bytes, Stack size 72 bytes, settings.o(.text._ZNK2ot12SettingsBase9ChildInfo3LogENS0_6ActionE))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ot::SettingsBase::ChildInfo::Log(ot::SettingsBase::Action) const &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::ToString() const
</UL>
<BR>[Called By]<UL><LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::Log(ot::SettingsBase::Action, otError, ot::SettingsBase::Key, void const*)
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::ChildInfoIterator::Read()
</UL>

<P><STRONG><a name="[4ac]"></a>ot::MeshForwarder::GetRxOnWhenIdle() const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mesh_forwarder.o(.text._ZNK2ot13MeshForwarder15GetRxOnWhenIdleEv))
<BR><BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::RestartTimer()
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::HandleTimer()
</UL>

<P><STRONG><a name="[3c6]"></a>ot::MeshForwarder::AnycastRouteLookup(unsigned char, ot::MeshForwarder::AnycastType, unsigned short&) const</STRONG> (Thumb, 442 bytes, Stack size 584 bytes, mesh_forwarder_ftd.o(.text._ZNK2ot13MeshForwarder18AnycastRouteLookupEhNS0_11AnycastTypeERt))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ot::MeshForwarder::AnycastRouteLookup(unsigned char, ot::MeshForwarder::AnycastType, unsigned short&) const &rArr; ot::NetworkData::NetworkData::GetNextOnMeshPrefix(unsigned int&, ot::NetworkData::OnMeshPrefixConfig&) const &rArr; ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const &rArr; ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&) &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::GetNextOnMeshPrefix(unsigned int&, ot::NetworkData::OnMeshPrefixConfig&) const
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::GetNextService(unsigned int&, ot::NetworkData::ServiceConfig&) const
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::operator==(ot::Ip6::Prefix const&) const
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetPathCost(unsigned short) const
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetContext(unsigned char, ot::Lowpan::Context&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateIp6RouteFtd(ot::Ip6::Header&, ot::Message&)
</UL>

<P><STRONG><a name="[3db]"></a>ot::MeshForwarder::IsDirectTxQueueOverMaxFrameThreshold() const</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, mesh_forwarder.o(.text._ZNK2ot13MeshForwarder36IsDirectTxQueueOverMaxFrameThresholdEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::MeshForwarder::IsDirectTxQueueOverMaxFrameThreshold() const
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetNext() const
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::begin() const
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::ApplyDirectTxQueueLimit(ot::Message&)
</UL>

<P><STRONG><a name="[367]"></a>ot::PriorityQueue::GetHeadForPriority(ot::Message::Priority) const</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, message.o(.text._ZNK2ot13PriorityQueue18GetHeadForPriorityENS_7Message8PriorityE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::PriorityQueue::GetHeadForPriority(ot::Message::Priority) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::EvictMessage(ot::Message::Priority)
</UL>

<P><STRONG><a name="[7c2]"></a>ot::PriorityQueue::begin() const</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, message.o(.text._ZNK2ot13PriorityQueue5beginEv))
<BR><BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child&)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::IsDirectTxQueueOverMaxFrameThreshold() const
</UL>

<P><STRONG><a name="[3cf]"></a>ot::PriorityQueue::GetHead() const</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, message.o(.text._ZNK2ot13PriorityQueue7GetHeadEv))
<BR><BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleSendQueue()
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareNextDirectTransmission()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveAgedMessages()
</UL>

<P><STRONG><a name="[923]"></a>ot::PriorityQueue::GetInfo(otMessageQueueInfo&) const</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, message.o(.text._ZNK2ot13PriorityQueue7GetInfoER18otMessageQueueInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::PriorityQueue::GetInfo(otMessageQueueInfo&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetNext() const
</UL>
<BR>[Called By]<UL><LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::GetBufferInfo(ot::Instance::BufferInfo&)
</UL>

<P><STRONG><a name="[238]"></a>ot::BackboneRouter::Leader::GetServiceId(unsigned char&) const</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bbr_leader.o(.text._ZNK2ot14BackboneRouter6Leader12GetServiceIdERh))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = ot::BackboneRouter::Leader::GetServiceId(unsigned char&) const &rArr; ot::NetworkData::Service::Manager::GetServiceId(void const*, unsigned char, bool, unsigned char&) const &rArr; ot::NetworkData::LeaderBase::GetServiceId(unsigned int, ot::NetworkData::ServiceData const&, bool, unsigned char&) const &rArr; ot::NetworkData::NetworkData::GetNextService(unsigned int&, ot::NetworkData::ServiceConfig&) const &rArr; ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const &rArr; ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&) &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Service::Manager::GetServiceId(void const*, unsigned char, bool, unsigned char&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::PerformNextRegistration()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistrationMessage(otIp6Address const*, unsigned char, unsigned int const*, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
</UL>

<P><STRONG><a name="[22a]"></a>ot::BackboneRouter::Leader::IsDomainUnicast(ot::Ip6::Address const&) const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bbr_leader.o(.text._ZNK2ot14BackboneRouter6Leader15IsDomainUnicastERKNS_3Ip67AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ot::BackboneRouter::Leader::IsDomainUnicast(ot::Ip6::Address const&) const &rArr; ot::Ip6::Address::MatchesPrefix(ot::Ip6::Prefix const&) const &rArr; ot::Ip6::Prefix::MatchLength(unsigned char const*, unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::MatchesPrefix(ot::Ip6::Prefix const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::ProcessDuaResponse(ot::Coap::Message&)
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::GetDomainUnicastAddress() const
</UL>

<P><STRONG><a name="[3fd]"></a>ot::BackboneRouter::Leader::LogBackboneRouterPrimary(ot::BackboneRouter::Leader::State, otBackboneRouterConfig const&) const</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, bbr_leader.o(.text._ZNK2ot14BackboneRouter6Leader24LogBackboneRouterPrimaryENS1_5StateERK22otBackboneRouterConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ot::BackboneRouter::Leader::LogBackboneRouterPrimary(ot::BackboneRouter::Leader::State, otBackboneRouterConfig const&) const &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::UpdateBackboneRouterPrimary()
</UL>

<P><STRONG><a name="[246]"></a>ot::BackboneRouter::Leader::GetConfig(otBackboneRouterConfig&) const</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bbr_leader.o(.text._ZNK2ot14BackboneRouter6Leader9GetConfigER22otBackboneRouterConfig))
<BR><BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otBackboneRouterGetPrimary
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::UpdateReregistrationDelay()
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::HandleMulticastListenerRegistrationResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::UpdateReregistrationDelay(bool)
</UL>

<P><STRONG><a name="[405]"></a>ot::CslTxScheduler::GetNextCslTransmissionDelay(ot::Child const&, unsigned int&, unsigned int) const</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, csl_tx_scheduler.o(.text._ZNK2ot14CslTxScheduler27GetNextCslTransmissionDelayERKNS_5ChildERjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::CslTxScheduler::GetNextCslTransmissionDelay(ot::Child const&, unsigned int&, unsigned int) const &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetNow
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::HandleFrameRequest(ot::Mac::TxFrames&)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::RescheduleCslTx()
</UL>

<P><STRONG><a name="[417]"></a>ot::DataPollSender::CalculatePollPeriod() const</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, data_poll_sender.o(.text._ZNK2ot14DataPollSender19CalculatePollPeriodEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::DataPollSender::CalculatePollPeriod() const
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::ScheduleNextPoll(ot::DataPollSender::PollPeriodSelector)
</UL>

<P><STRONG><a name="[b03]"></a>ot::DataPollSender::GetKeepAlivePollPeriod() const</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, data_poll_sender.o(.text._ZNK2ot14DataPollSender22GetKeepAlivePollPeriodEv))
<BR><BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkGetPollPeriod
</UL>

<P><STRONG><a name="[8b4]"></a>ot::SecurityPolicy::GetFlags(unsigned char*, unsigned char) const</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, key_manager.o(.text._ZNK2ot14SecurityPolicy8GetFlagsEPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ot::SecurityPolicy::GetFlags(unsigned char*, unsigned char) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SecurityPolicyTlv::SetSecurityPolicy(ot::SecurityPolicy const&)
</UL>

<P><STRONG><a name="[964]"></a>ot::AddressResolver::GetNextCacheEntry(ot::AddressResolver::EntryInfo&, ot::AddressResolver::Iterator&) const</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, address_resolver.o(.text._ZNK2ot15AddressResolver17GetNextCacheEntryERNS0_9EntryInfoERNS0_8IteratorE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ot::AddressResolver::GetNextCacheEntry(ot::AddressResolver::EntryInfo&, ot::AddressResolver::Iterator&) const &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetPrefix(ot::Ip6::NetworkPrefix const&)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetNextCacheEntry
</UL>

<P><STRONG><a name="[362]"></a>ot::ChildSupervisor::GetDestination(ot::Message const&) const</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, child_supervision.o(.text._ZNK2ot15ChildSupervisor14GetDestinationERKNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ot::ChildSupervisor::GetDestination(ot::Message const&) const &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::GetChildAtIndex(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMessage(ot::Message&)
</UL>

<P><STRONG><a name="[469]"></a>ot::LinkQualityInfo::GetLinkMargin() const</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, link_quality.o(.text._ZNK2ot15LinkQualityInfo13GetLinkMarginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ot::LinkQualityInfo::GetLinkMargin() const
</UL>
<BR>[Calls]<UL><LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::GetNoiseFloor() const
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::LinkQualityInfo::AddRss(signed char)
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendParentResponse(ot::Child*, ot::Mle::Mle::Challenge const&, bool)
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::Info::SetFrom(ot::Neighbor const&)
</UL>

<P><STRONG><a name="[489]"></a>ot::NetworkDiagnostic::ConnectivityTlv::GetConnectivity(otNetworkDiagConnectivity&) const</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, network_diagnostic.o(.text._ZNK2ot17NetworkDiagnostic15ConnectivityTlv15GetConnectivityER25otNetworkDiagConnectivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::NetworkDiagnostic::ConnectivityTlv::GetConnectivity(otNetworkDiagConnectivity&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::ConnectivityTlv::GetParentPriority() const
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::GetNextDiagTlv(ot::Coap::Message const&, unsigned short&, otNetworkDiagTlv&)
</UL>

<P><STRONG><a name="[47e]"></a>ot::NetworkDiagnostic::Server::PrepareMessageInfoForDest(ot::Ip6::Address const&, ot::Tmf::MessageInfo&) const</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, network_diagnostic.o(.text._ZNK2ot17NetworkDiagnostic6Server25PrepareMessageInfoForDestERKNS_3Ip67AddressERNS_3Tmf11MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::NetworkDiagnostic::Server::PrepareMessageInfoForDest(ot::Ip6::Address const&, ot::Tmf::MessageInfo&) const &rArr; ot::Ip6::Address::IsLinkLocalMulticast() const
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::MessageInfo::SetSockAddrToRloc()
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsLinkLocalMulticast() const
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsLinkLocal() const
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)34&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::SendCommand(ot::Uri, ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
</UL>

<P><STRONG><a name="[97a]"></a>ot::Ip6::InterfaceIdentifier::IsReserved() const</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, ip6_address.o(.text._ZNK2ot3Ip619InterfaceIdentifier10IsReservedEv))
<BR><BR>[Called By]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::GenerateIid(ot::Ip6::Netif::UnicastAddress&, unsigned char*, unsigned char, unsigned char*) const
</UL>

<P><STRONG><a name="[823]"></a>ot::Ip6::InterfaceIdentifier::IsUnspecified() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ip6_address.o(.text._ZNK2ot3Ip619InterfaceIdentifier13IsUnspecifiedEv))
<BR><BR>[Called By]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddIp6Address(ot::Ip6::Address const&)
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::GetMeshLocalIp6Address(ot::Ip6::Address&) const
</UL>

<P><STRONG><a name="[81b]"></a>ot::Ip6::InterfaceIdentifier::IsAnycastLocator() const</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ip6_address.o(.text._ZNK2ot3Ip619InterfaceIdentifier16IsAnycastLocatorEv))
<BR><BR>[Called By]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::FindRelatedRequest(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::Coap::CoapBase::Metadata&)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsAnycastLocator(ot::Ip6::Address const&) const
</UL>

<P><STRONG><a name="[2ef]"></a>ot::Ip6::InterfaceIdentifier::IsRoutingLocator() const</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ip6_address.o(.text._ZNK2ot3Ip619InterfaceIdentifier16IsRoutingLocatorEv))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsRoutingLocator(ot::Ip6::Address const&) const
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)5&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[454]"></a>ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(ot::Mac::ExtAddress&) const</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ip6_address.o(.text._ZNK2ot3Ip619InterfaceIdentifier19ConvertToExtAddressERNS_3Mac10ExtAddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(ot::Mac::ExtAddress&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::CopyAddress(unsigned char*, unsigned char const*, ot::Mac::ExtAddress::CopyByteOrder)
</UL>
<BR>[Called By]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoveryResponse(ot::Mle::Mle::RxInfo&) const
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)0&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleDiscoveryRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleParentRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&)
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleParentResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::InitNeighbor(ot::Neighbor&, ot::Mle::Mle::RxInfo const&)
</UL>

<P><STRONG><a name="[3d0]"></a>ot::Ip6::InterfaceIdentifier::ConvertToMacAddress(ot::Mac::Address&) const</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ip6_address.o(.text._ZNK2ot3Ip619InterfaceIdentifier19ConvertToMacAddressERNS_3Mac7AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Ip6::InterfaceIdentifier::ConvertToMacAddress(ot::Mac::Address&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::CopyAddress(unsigned char*, unsigned char const*, ot::Mac::ExtAddress::CopyByteOrder)
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Ip6::Address const&, ot::Neighbor::StateFilter)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::GetMacDestinationAddress(ot::Ip6::Address const&, ot::Mac::Address&)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::GetMacSourceAddress(ot::Ip6::Address const&, ot::Mac::Address&)
</UL>

<P><STRONG><a name="[616]"></a>ot::Ip6::InterfaceIdentifier::IsAnycastServiceLocator() const</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ip6_address.o(.text._ZNK2ot3Ip619InterfaceIdentifier23IsAnycastServiceLocatorEv))
<BR><BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::PassToHost(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo const&, unsigned char, bool, ot::Message::Ownership)
</UL>

<P><STRONG><a name="[963]"></a>ot::Ip6::InterfaceIdentifier::ToString() const</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ip6_address.o(.text._ZNK2ot3Ip619InterfaceIdentifier8ToStringEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::InterfaceIdentifier::ToString() const &rArr; ot::StringWriter::AppendHexBytes(unsigned char const*, unsigned short) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::StringWriter__sub_object(char*, unsigned short)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::AppendHexBytes(unsigned char const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SettingsBase::NetworkInfo::Log(ot::SettingsBase::Action) const
</UL>

<P><STRONG><a name="[36b]"></a>ot::Ip6::InterfaceIdentifier::IsLocator() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ip6_address.o(.text._ZNK2ot3Ip619InterfaceIdentifier9IsLocatorEv))
<BR><BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::ProcessOption(ot::Message&, unsigned short, ot::Ip6::Address const&, bool, bool&)
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::PassToHost(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo const&, unsigned char, bool, ot::Message::Ownership)
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::HandleEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateRoutes(ot::FrameData const&, ot::Mac::Addresses const&)
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressDestinationIid(ot::Mac::Address const&, ot::Ip6::Address const&, ot::Lowpan::Context const&, unsigned short&, ot::FrameBuilder&)
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressSourceIid(ot::Mac::Address const&, ot::Ip6::Address const&, ot::Lowpan::Context const&, unsigned short&, ot::FrameBuilder&)
</UL>

<P><STRONG><a name="[635]"></a>ot::Ip6::Ip6::RouteLookup(ot::Ip6::Address const&, ot::Ip6::Address const&) const</STRONG> (Thumb, 88 bytes, Stack size 72 bytes, ip6.o(.text._ZNK2ot3Ip63Ip611RouteLookupERKNS0_7AddressES4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Ip6::RouteLookup(ot::Ip6::Address const&, ot::Ip6::Address const&) const &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString() const
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::RouteLookup(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned short&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool)
</UL>

<P><STRONG><a name="[624]"></a>ot::Ip6::Ip6::SelectSourceAddress(ot::Ip6::Address const&) const</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, ip6.o(.text._ZNK2ot3Ip63Ip619SelectSourceAddressERKNS0_7AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ot::Ip6::Ip6::SelectSourceAddress(ot::Ip6::Address const&) const &rArr; ot::Mle::Mle::IsRoutingLocator(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::PrefixMatch(ot::Ip6::Address const&) const
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsRoutingLocator(ot::Ip6::Address const&) const
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsAnycastLocator(ot::Ip6::Address const&) const
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::GetScope() const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::AddTunneledMplOption(ot::Message&, ot::Ip6::Header&)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
</UL>

<P><STRONG><a name="[633]"></a>ot::Ip6::Ip6::IsOnLink(ot::Ip6::Address const&) const</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ip6.o(.text._ZNK2ot3Ip63Ip68IsOnLinkERKNS0_7AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Ip6::IsOnLink(ot::Ip6::Address const&) const &rArr; ot::NetworkData::LeaderBase::IsOnMesh(ot::Ip6::Address const&) const &rArr; ot::NetworkData::LeaderBase::FindNextMatchingPrefixTlv(ot::Ip6::Address const&, ot::NetworkData::PrefixTlv const*) const &rArr; ot::Ip6::Address::MatchesPrefix(unsigned char const*, unsigned char) const &rArr; ot::Ip6::Prefix::MatchLength(unsigned char const*, unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::PrefixMatch(ot::Ip6::Address const&) const
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::IsOnMesh(ot::Ip6::Address const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool)
</UL>

<P><STRONG><a name="[648]"></a>ot::Ip6::Mpl::Metadata::RemoveFrom(ot::Message&) const</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ip6_mpl.o(.text._ZNK2ot3Ip63Mpl8Metadata10RemoveFromERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Mpl::Metadata::RemoveFrom(ot::Message&) const &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetLength(unsigned short)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::HandleRetransmissionTimer()
</UL>

<P><STRONG><a name="[619]"></a>ot::Ip6::Udp::IsPortInUse(unsigned short) const</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, udp6.o(.text._ZNK2ot3Ip63Udp11IsPortInUseEt))
<BR><BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::PassToHost(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo const&, unsigned char, bool, ot::Message::Ownership)
</UL>

<P><STRONG><a name="[64d]"></a>ot::Ip6::Udp::SocketHandle::Matches(ot::Ip6::MessageInfo const&) const</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, udp6.o(.text._ZNK2ot3Ip63Udp12SocketHandle7MatchesERKNS0_11MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ot::Ip6::Udp::SocketHandle::Matches(ot::Ip6::MessageInfo const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsUnspecified() const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::HandlePayload(ot::Message&, ot::Ip6::MessageInfo&)
</UL>

<P><STRONG><a name="[618]"></a>ot::Ip6::Udp::ShouldUsePlatformUdp(unsigned short) const</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, udp6.o(.text._ZNK2ot3Ip63Udp20ShouldUsePlatformUdpEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ot::Ip6::Udp::ShouldUsePlatformUdp(unsigned short) const &rArr; ot::MeshCoP::JoinerRouter::GetJoinerUdpPort() &rArr; ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(ot::MeshCoP::Tlv::Type) const &rArr; ot::MeshCoP::Tlv::FindTlv(unsigned char const*, unsigned short, ot::MeshCoP::Tlv::Type)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::GetJoinerUdpPort()
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::PassToHost(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo const&, unsigned char, bool, ot::Message::Ownership)
</UL>

<P><STRONG><a name="[3a7]"></a>ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Address const&) const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, netif.o(.text._ZNK2ot3Ip65Netif17HasUnicastAddressERKNS0_7AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Address const&) const &rArr; bool ot::LinkedList&lang;ot::Ip6::Netif::UnicastAddress&rang;::ContainsMatching&lang;ot::Ip6::Address&rang;(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ot::LinkedList&lang;ot::Ip6::Netif::UnicastAddress&rang;::ContainsMatching&lang;ot::Ip6::Address&rang;(ot::Ip6::Address const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Bind(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&, ot::Ip6::NetifIdentifier)
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleNotifierEvents(ot::Events)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)2&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool)
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::CheckReachability(unsigned short, ot::Ip6::Header const&)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::CheckReachability(unsigned short, ot::Ip6::Header const&)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateEcnOrDrop(ot::Message&, bool)
</UL>

<P><STRONG><a name="[634]"></a>ot::Ip6::Netif::IsMulticastSubscribed(ot::Ip6::Address const&) const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(.text._ZNK2ot3Ip65Netif21IsMulticastSubscribedERKNS0_7AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ot::Ip6::Netif::IsMulticastSubscribed(ot::Ip6::Address const&) const &rArr; bool ot::LinkedList&lang;ot::Ip6::Netif::MulticastAddress&rang;::ContainsMatching&lang;ot::Ip6::Address&rang;(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ot::LinkedList&lang;ot::Ip6::Netif::MulticastAddress&rang;::ContainsMatching&lang;ot::Ip6::Address&rang;(ot::Ip6::Address const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool)
</UL>

<P><STRONG><a name="[385]"></a>ot::Ip6::Filter::Accept(ot::Message&) const</STRONG> (Thumb, 128 bytes, Stack size 80 bytes, ip6_filter.o(.text._ZNK2ot3Ip66Filter6AcceptERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Filter::Accept(ot::Message&) const &rArr; ot::Ip6::Headers::ParseFrom(ot::Message const&) &rArr; ot::Ip6::Header::ParseFrom(ot::Message const&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsLinkLocalMulticast() const
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Headers::GetDestinationPort() const
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsLinkLocal() const
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Headers::ParseFrom(ot::Message const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleLowpanHC(ot::FrameData const&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[61e]"></a>ot::Ip6::Option::GetSize() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ip6_headers.o(.text._ZNK2ot3Ip66Option7GetSizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::RemoveMplOption(ot::Message&)
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleOptions(ot::Message&, ot::Ip6::Header&, bool, bool&)
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::AddMplOption(ot::Message&, ot::Ip6::Header&)
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressExtensionHeader(ot::Message&, ot::FrameData&)
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressExtensionHeader(ot::Message&, ot::FrameBuilder&, unsigned char&)
</UL>

<P><STRONG><a name="[967]"></a>ot::Ip6::Prefix::ToString(char*, unsigned short) const</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ip6_address.o(.text._ZNK2ot3Ip66Prefix8ToStringEPct))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Prefix::ToString(char*, unsigned short) const &rArr; ot::Ip6::Prefix::ToString(ot::StringWriter&) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::StringWriter(char*, unsigned short)
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::ToString(ot::StringWriter&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6PrefixToString
</UL>

<P><STRONG><a name="[968]"></a>ot::Ip6::Prefix::ToString(ot::StringWriter&) const</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ip6_address.o(.text._ZNK2ot3Ip66Prefix8ToStringERNS_12StringWriterE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Prefix::ToString(ot::StringWriter&) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::Append(char const*, ...)
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::ToString(char*, unsigned short) const
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::ToString() const
</UL>

<P><STRONG><a name="[3fa]"></a>ot::Ip6::Prefix::ToString() const</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ip6_address.o(.text._ZNK2ot3Ip66Prefix8ToStringEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Prefix::ToString() const &rArr; ot::Ip6::Prefix::ToString(ot::StringWriter&) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::StringWriter__sub_object(char*, unsigned short)
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::ToString(ot::StringWriter&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::UpdateDomainPrefixConfig()
</UL>

<P><STRONG><a name="[3f9]"></a>ot::Ip6::Prefix::operator==(ot::Ip6::Prefix const&) const</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ip6_address.o(.text._ZNK2ot3Ip66PrefixeqERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Prefix::operator==(ot::Ip6::Prefix const&) const &rArr; ot::Ip6::Prefix::MatchLength(unsigned char const*, unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::MatchLength(unsigned char const*, unsigned char const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::UpdateDomainPrefixConfig()
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::AnycastRouteLookup(unsigned char, ot::MeshForwarder::AnycastType, unsigned short&) const
</UL>

<P><STRONG><a name="[955]"></a>ot::Ip6::Prefix::operator&lang;(ot::Ip6::Prefix const&) const</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ip6_address.o(.text._ZNK2ot3Ip66PrefixltERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Prefix::operator&lang;(ot::Ip6::Prefix const&) const &rArr; ot::Ip6::Prefix::MatchLength(unsigned char const*, unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::MatchLength(unsigned char const*, unsigned char const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetPreferredNat64Prefix(ot::NetworkData::ExternalRouteConfig&) const
</UL>

<P><STRONG><a name="[394]"></a>ot::Ip6::Address::IsLinkLocal() const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ip6_address.o(.text._ZNK2ot3Ip67Address11IsLinkLocalEv))
<BR><BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::AddExternalUnicastAddress(ot::Ip6::Netif::UnicastAddress const&)
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Filter::Accept(ot::Message&) const
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::IsTmfMessage(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned short) const
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool)
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Mle::Mle::AddressRegistrationMode)
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HasUnregisteredAddress()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Ip6::Address const&, ot::Neighbor::StateFilter)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateIp6Route(ot::Message&)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::PrepareDataFrame(ot::Mac::TxFrame&, ot::Child&, ot::Message&)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::PrepareMessageInfoForDest(ot::Ip6::Address const&, ot::Tmf::MessageInfo&) const
</UL>

<P><STRONG><a name="[966]"></a>ot::Ip6::Address::PrefixMatch(ot::Ip6::Address const&) const</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ip6_address.o(.text._ZNK2ot3Ip67Address11PrefixMatchERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Ip6::Address::PrefixMatch(ot::Ip6::Address const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::IsOnLink(ot::Ip6::Address const&) const
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SelectSourceAddress(ot::Ip6::Address const&) const
</UL>

<P><STRONG><a name="[623]"></a>ot::Ip6::Address::IsUnspecified() const</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ip6_address.o(.text._ZNK2ot3Ip67Address13IsUnspecifiedEv))
<BR><BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Bind(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&, ot::Ip6::NetifIdentifier)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddressIterator::Update()
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::HasIp6Address(ot::Ip6::Address const&) const
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::RemoveIp6Address(ot::Ip6::Address const&)
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::SocketHandle::Matches(ot::Ip6::MessageInfo const&) const
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddIp6Address(ot::Ip6::Address const&)
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::GetDomainUnicastAddress() const
</UL>

<P><STRONG><a name="[666]"></a>ot::Ip6::Address::MatchesFilter(ot::Ip6::Address::TypeFilter) const</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ip6_address.o(.text._ZNK2ot3Ip67Address13MatchesFilterENS1_10TypeFilterE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Ip6::Address::MatchesFilter(ot::Ip6::Address::TypeFilter) const
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::GetScope() const
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddressIterator::Update()
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::ExternalMulticastAddress::Iterator::AdvanceFrom(ot::Ip6::Netif::MulticastAddress const*)
</UL>

<P><STRONG><a name="[958]"></a>ot::Ip6::Address::MatchesPrefix(unsigned char const*, unsigned char) const</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ip6_address.o(.text._ZNK2ot3Ip67Address13MatchesPrefixEPKhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Address::MatchesPrefix(unsigned char const*, unsigned char) const &rArr; ot::Ip6::Prefix::MatchLength(unsigned char const*, unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::MatchLength(unsigned char const*, unsigned char const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::FindNextMatchingPrefixTlv(ot::Ip6::Address const&, ot::NetworkData::PrefixTlv const*) const
</UL>

<P><STRONG><a name="[83c]"></a>ot::Ip6::Address::MatchesPrefix(ot::Ip6::Prefix const&) const</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ip6_address.o(.text._ZNK2ot3Ip67Address13MatchesPrefixERKNS0_6PrefixE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Address::MatchesPrefix(ot::Ip6::Prefix const&) const &rArr; ot::Ip6::Prefix::MatchLength(unsigned char const*, unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::MatchLength(unsigned char const*, unsigned char const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::IsDomainUnicast(ot::Ip6::Address const&) const
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::DoesConfigMatchNetifAddr(ot::NetworkData::OnMeshPrefixConfig const&, ot::Ip6::Netif::UnicastAddress const&)
</UL>

<P><STRONG><a name="[969]"></a>ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ip6_address.o(.text._ZNK2ot3Ip67Address14AppendHexWordsERNS_12StringWriterEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::Append(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString(char*, unsigned short) const
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString() const
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::ToString(ot::StringWriter&) const
</UL>

<P><STRONG><a name="[395]"></a>ot::Ip6::Address::IsLinkLocalMulticast() const</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ip6_address.o(.text._ZNK2ot3Ip67Address20IsLinkLocalMulticastEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Ip6::Address::IsLinkLocalMulticast() const
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::GetScope() const
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Filter::Accept(ot::Message&) const
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::IsTmfMessage(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned short) const
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateIp6Route(ot::Message&)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::PrepareMessageInfoForDest(ot::Ip6::Address const&, ot::Tmf::MessageInfo&) const
</UL>

<P><STRONG><a name="[625]"></a>ot::Ip6::Address::IsRealmLocalMulticast() const</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ip6_address.o(.text._ZNK2ot3Ip67Address21IsRealmLocalMulticastEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Ip6::Address::IsRealmLocalMulticast() const
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::GetScope() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::IsTmfMessage(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned short) const
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
</UL>

<P><STRONG><a name="[364]"></a>ot::Ip6::Address::IsMulticastLargerThanRealmLocal() const</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ip6_address.o(.text._ZNK2ot3Ip67Address31IsMulticastLargerThanRealmLocalEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Ip6::Address::IsMulticastLargerThanRealmLocal() const
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::GetScope() const
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMessage(ot::Message&)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Mle::Mle::AddressRegistrationMode)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::IsAddressMlrRegisteredByAnyChildExcept(ot::Ip6::Address const&, ot::Child const*) const
</UL>

<P><STRONG><a name="[60e]"></a>ot::Ip6::Address::GetScope() const</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ip6_address.o(.text._ZNK2ot3Ip67Address8GetScopeEv))
<BR><BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::SignalMulticastAddressChange(ot::Ip6::Netif::AddressEvent, ot::Ip6::Netif::MulticastAddress const*, ot::Ip6::Netif::MulticastAddress const*)
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::UnsubscribeMulticast(ot::Ip6::Netif::MulticastAddress const&)
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::SubscribeMulticast(ot::Ip6::Netif::MulticastAddress&)
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::AddressInfo::AddressInfo__sub_object(ot::Ip6::Netif::UnicastAddress const&)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsLinkLocalMulticast() const
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::MatchesFilter(ot::Ip6::Address::TypeFilter) const
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsMulticastLargerThanRealmLocal() const
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsRealmLocalMulticast() const
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SelectSourceAddress(ot::Ip6::Address const&) const
</UL>

<P><STRONG><a name="[96a]"></a>ot::Ip6::Address::ToString(char*, unsigned short) const</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ip6_address.o(.text._ZNK2ot3Ip67Address8ToStringEPct))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Address::ToString(char*, unsigned short) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::StringWriter(char*, unsigned short)
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6AddressToString
</UL>

<P><STRONG><a name="[23d]"></a>ot::Ip6::Address::ToString() const</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ip6_address.o(.text._ZNK2ot3Ip67Address8ToStringEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::Address::ToString() const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::StringWriter__sub_object(char*, unsigned short)
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::SockAddr::ToString(char*, unsigned short) const
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressQueryResponse(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, unsigned int const*, ot::Ip6::Address const&)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::HandleTimeTick()
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendGetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, unsigned char*, unsigned char) const
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::SendAddressNotification(ot::Ip6::Address&, ot::ThreadStatusTlv::DuaStatus, ot::Child const&)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::PerformNextRegistration()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)2&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)1&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::LogCacheEntryChange(ot::AddressResolver::EntryChange, ot::AddressResolver::Reason, ot::AddressResolver::CacheEntry const&, ot::AddressResolver::CacheEntryList*)
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressError(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, ot::Ip6::Address const*)
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::RouteLookup(ot::Ip6::Address const&, ot::Ip6::Address const&) const
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&, unsigned short)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogIp6SourceDestAddresses(ot::Ip6::Headers const&, ot::LogLevel)
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::Update(unsigned char)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)35&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)34&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)33&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Client::HandleTmf&lang;(ot::Uri)32&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::SendCommand(ot::Uri, ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::LogMulticastAddresses()
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::LogMlrResponse(otError, otError, unsigned char, ot::Ip6::Address const*, unsigned char)
</UL>

<P><STRONG><a name="[371]"></a>ot::Ip6::Headers::GetChecksum() const</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ip6.o(.text._ZNK2ot3Ip67Headers11GetChecksumEv))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMeshIpHeader(ot::Message const&, unsigned short, ot::Mac::Addresses const&, ot::LogLevel)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogIp6Message(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel)
</UL>

<P><STRONG><a name="[3df]"></a>ot::Ip6::Headers::GetSourcePort() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ip6.o(.text._ZNK2ot3Ip67Headers13GetSourcePortEv))
<BR><BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogIp6SourceDestAddresses(ot::Ip6::Headers const&, ot::LogLevel)
</UL>

<P><STRONG><a name="[3e0]"></a>ot::Ip6::Headers::GetDestinationPort() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ip6.o(.text._ZNK2ot3Ip67Headers18GetDestinationPortEv))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Filter::Accept(ot::Message&) const
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogIp6SourceDestAddresses(ot::Ip6::Headers const&, ot::LogLevel)
</UL>

<P><STRONG><a name="[96b]"></a>ot::Ip6::SockAddr::ToString(char*, unsigned short) const</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, socket.o(.text._ZNK2ot3Ip68SockAddr8ToStringEPct))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ot::Ip6::SockAddr::ToString(char*, unsigned short) const &rArr; ot::Ip6::Address::ToString() const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::Append(char const*, ...)
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::StringWriter(char*, unsigned short)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString() const
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6SockAddrToString
</UL>

<P><STRONG><a name="[4b2]"></a>ot::Mac::ExtAddress::ToString() const</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mac_types.o(.text._ZNK2ot3Mac10ExtAddress8ToStringEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::Mac::ExtAddress::ToString() const &rArr; ot::StringWriter::AppendHexBytes(unsigned char const*, unsigned short) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::StringWriter__sub_object(char*, unsigned short)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::AppendHexBytes(unsigned char const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetExtAddress(ot::Mac::ExtAddress const&)
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SettingsBase::ChildInfo::Log(ot::SettingsBase::Action) const
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SettingsBase::NetworkInfo::Log(ot::SettingsBase::Action) const
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SettingsBase::ParentInfo::Log(ot::SettingsBase::Action) const
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Connect(ot::MeshCoP::Joiner::JoinerRouter&)
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SaveDiscoveredJoinerRouter(otActiveScanResult const&)
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)4&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::ClearEntry(ot::Child&)
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::AddAddress(ot::Child const&)
</UL>

<P><STRONG><a name="[4a1]"></a>ot::Mac::ChannelMask::GetNextChannel(unsigned char&) const</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, channel_mask.o(.text._ZNK2ot3Mac11ChannelMask14GetNextChannelERh))
<BR><BR>[Called By]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::Discover(ot::Mac::ChannelMask const&, unsigned short, bool, bool, ot::MeshCoP::SteeringData::HashBitIndexes const*, void (*)(otActiveScanResult*, void*), void*)
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformEnergyScan()
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformActiveScan()
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleTimer()
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AnnounceSenderBase::SelectStartingChannel()
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AnnounceSenderBase::HandleTimer()
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::GetNextAnnounceChannel(unsigned char&) const
</UL>

<P><STRONG><a name="[90f]"></a>ot::Mac::ChannelMask::ChooseRandomChannel() const</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, channel_mask.o(.text._ZNK2ot3Mac11ChannelMask19ChooseRandomChannelEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ot::Mac::ChannelMask::ChooseRandomChannel() const &rArr; ot::Random::NonCrypto::GetUint8InRange(unsigned char, unsigned char) &rArr; ot::Random::Manager::NonCryptoGetUint32() &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint8InRange(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Info::GenerateRandom(ot::Instance&)
</UL>

<P><STRONG><a name="[752]"></a>ot::Mac::ChannelMask::GetNumberOfChannels() const</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, channel_mask.o(.text._ZNK2ot3Mac11ChannelMask19GetNumberOfChannelsEv))
<BR><BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::PrepareAnnounceState()
</UL>

<P><STRONG><a name="[84a]"></a>ot::Mac::KeyMaterial::ConvertToCryptoKey(ot::Crypto::Key&) const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mac_types.o(.text._ZNK2ot3Mac11KeyMaterial18ConvertToCryptoKeyERNS_6Crypto3KeyE))
<BR><BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::SetKey(ot::Mac::KeyMaterial const&)
</UL>

<P><STRONG><a name="[740]"></a>ot::Mac::LinkFrameCounters::GetMaximum() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mac_types.o(.text._ZNK2ot3Mac17LinkFrameCounters10GetMaximumEv))
<BR><BR>[Called By]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendLinkFrameCounterTlv()
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateResponse(ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildIdRequest()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Store()
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::Info::SetFrom(ot::Neighbor const&)
</UL>

<P><STRONG><a name="[74c]"></a>ot::Mac::Mac::ComputeLinkMargin(signed char) const</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mac.o(.text._ZNK2ot3Mac3Mac17ComputeLinkMarginEa))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::ComputeLinkMargin(signed char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::GetNoiseFloor() const
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ComputeLinkMargin(signed char, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkConvertRssToLinkQuality
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HasNeighborWithGoodLinkQuality() const
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkAccept(ot::Ip6::MessageInfo const&, ot::Neighbor*, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::Mle::RxInfo&, unsigned short, ot::Mle::LeaderData const&)
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleParentResponse(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[69b]"></a>ot::Mac::Mac::LogFrameRxFailure(ot::Mac::RxFrame const*, otError) const</STRONG> (Thumb, 104 bytes, Stack size 160 bytes, mac.o(.text._ZNK2ot3Mac3Mac17LogFrameRxFailureEPKNS0_7RxFrameE7otError))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::LogFrameRxFailure(ot::Mac::RxFrame const*, otError) const &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...)
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::ToInfoString() const
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[6ae]"></a>ot::Mac::Mac::LogFrameTxFailure(ot::Mac::TxFrame const&, otError, unsigned char, bool) const</STRONG> (Thumb, 76 bytes, Stack size 168 bytes, mac.o(.text._ZNK2ot3Mac3Mac17LogFrameTxFailureERKNS0_7TxFrameE7otErrorhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Mac::LogFrameTxFailure(ot::Mac::TxFrame const&, otError, unsigned char, bool) const &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::ToInfoString() const
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::RecordFrameTransmitStatus(ot::Mac::TxFrame const&, ot::Mac::RxFrame*, otError, unsigned char, bool)
</UL>

<P><STRONG><a name="[39b]"></a>ot::Mac::Frame::GetDstAddr(ot::Mac::Address&) const</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mac_frame.o(.text._ZNK2ot3Mac5Frame10GetDstAddrERNS0_7AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::Mac::Frame::GetDstAddr(ot::Mac::Address&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::CopyAddress(unsigned char*, unsigned char const*, ot::Mac::ExtAddress::CopyByteOrder)
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::IsDstPanIdPresent(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::ToInfoString() const
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::RecordFrameTransmitStatus(ot::Mac::TxFrame const&, ot::Mac::RxFrame*, otError, unsigned char, bool)
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessEnhAckSecurity(ot::Mac::TxFrame&, ot::Mac::RxFrame&)
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleReceivedFrame(ot::Mac::RxFrame&)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleSentFrame(ot::Mac::TxFrame&, otError)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::HandlePollSent(ot::Mac::TxFrame&, otError)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleSentFrameToChild(ot::Mac::TxFrame const&, ot::IndirectSenderBase::FrameContext const&, otError, ot::Child&)
</UL>

<P><STRONG><a name="[3b2]"></a>ot::Mac::Frame::GetPayload() const</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mac_frame.o(.text._ZNK2ot3Mac5Frame10GetPayloadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ot::Mac::Frame::GetPayload() const &rArr; ot::Mac::Frame::FindPayloadIndex() const &rArr; ot::Mac::Frame::SkipSecurityHeaderIndex() const &rArr; ot::Mac::Frame::CalculateAddrFieldSize(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindPayloadIndex() const
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PrepareBeacon()
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleReceivedFrame(ot::Mac::RxFrame&)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMesh(ot::Message&, ot::Mac::TxFrame&)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool)
</UL>

<P><STRONG><a name="[3d2]"></a>ot::Mac::Frame::GetSrcAddr(ot::Mac::Address&) const</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mac_frame.o(.text._ZNK2ot3Mac5Frame10GetSrcAddrERNS0_7AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ot::Mac::Frame::GetSrcAddr(ot::Mac::Address&) const &rArr; ot::Mac::Frame::FindSrcAddrIndex() const
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::CopyAddress(unsigned char*, unsigned char const*, ot::Mac::ExtAddress::CopyByteOrder)
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindSrcAddrIndex() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::ToInfoString() const
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ConvertBeaconToActiveScanResult(ot::Mac::RxFrame const*, otActiveScanResult&)
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessEnhAckSecurity(ot::Mac::TxFrame&, ot::Mac::RxFrame&)
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleReceivedFrame(ot::Mac::RxFrame&)
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::HandleDataPoll(ot::Mac::RxFrame&)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMacFrameGetSrcAddr
</UL>

<P><STRONG><a name="[435]"></a>ot::Mac::Frame::GetDstPanId(unsigned short&) const</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mac_frame.o(.text._ZNK2ot3Mac5Frame11GetDstPanIdERt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::Mac::Frame::GetDstPanId(unsigned short&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::IsDstPanIdPresent(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ConvertBeaconToActiveScanResult(ot::Mac::RxFrame const*, otActiveScanResult&)
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ThreadLinkInfo::SetFrom(ot::Mac::RxFrame const&)
</UL>

<P><STRONG><a name="[681]"></a>ot::Mac::Frame::GetHeaderIe(unsigned char) const</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, mac_frame.o(.text._ZNK2ot3Mac5Frame11GetHeaderIeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ot::Mac::Frame::GetHeaderIe(unsigned char) const &rArr; ot::Mac::Frame::FindPayloadIndex() const &rArr; ot::Mac::Frame::SkipSecurityHeaderIndex() const &rArr; ot::Mac::Frame::CalculateAddrFieldSize(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SkipSecurityHeaderIndex() const
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindPayloadIndex() const
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessCsl(ot::Mac::RxFrame const&, ot::Mac::Address const&)
</UL>

<P><STRONG><a name="[434]"></a>ot::Mac::Frame::GetSrcPanId(unsigned short&) const</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mac_frame.o(.text._ZNK2ot3Mac5Frame11GetSrcPanIdERt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::Mac::Frame::GetSrcPanId(unsigned short&) const &rArr; ot::Mac::Frame::FindSrcPanIdIndex() const
</UL>
<BR>[Calls]<UL><LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindSrcPanIdIndex() const
</UL>
<BR>[Called By]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ConvertBeaconToActiveScanResult(ot::Mac::RxFrame const*, otActiveScanResult&)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ThreadLinkInfo::SetFrom(ot::Mac::RxFrame const&)
</UL>

<P><STRONG><a name="[696]"></a>ot::Mac::Frame::GetCommandId(unsigned char&) const</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mac_frame.o(.text._ZNK2ot3Mac5Frame12GetCommandIdERh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ot::Mac::Frame::GetCommandId(unsigned char&) const &rArr; ot::Mac::Frame::FindPayloadIndex() const &rArr; ot::Mac::Frame::SkipSecurityHeaderIndex() const &rArr; ot::Mac::Frame::CalculateAddrFieldSize(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindPayloadIndex() const
</UL>
<BR>[Called By]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleMacCommand(ot::Mac::RxFrame&)
</UL>

<P><STRONG><a name="[6a0]"></a>ot::Mac::Frame::GetKeyIdMode(unsigned char&) const</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mac_frame.o(.text._ZNK2ot3Mac5Frame12GetKeyIdModeERh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::Mac::Frame::GetKeyIdMode(unsigned char&) const &rArr; ot::Mac::Frame::FindSecurityHeaderIndex() const &rArr; ot::Mac::Frame::CalculateAddrFieldSize(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindSecurityHeaderIndex() const
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessTransmitSecurity(ot::Mac::TxFrame&)
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessReceiveSecurity(ot::Mac::RxFrame&, ot::Mac::Address const&, ot::Neighbor*)
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessEnhAckSecurity(ot::Mac::TxFrame&, ot::Mac::RxFrame&)
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SignalFrameCounterUsedOnTxDone(ot::Mac::TxFrame const&)
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::ProcessTransmitSecurity()
</UL>

<P><STRONG><a name="[3d8]"></a>ot::Mac::Frame::ToInfoString() const</STRONG> (Thumb, 236 bytes, Stack size 112 bytes, mac_frame.o(.text._ZNK2ot3Mac5Frame12ToInfoStringEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Frame::ToInfoString() const &rArr; ot::Mac::Address::ToString() const &rArr; ot::StringWriter::AppendHexBytes(unsigned char const*, unsigned short) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::StringWriter__sub_object(char*, unsigned short)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::Append(char const*, ...)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetDstAddr(ot::Mac::Address&) const
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetSrcAddr(ot::Mac::Address&) const
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ToYesNo(bool)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Address::ToString() const
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindPayloadIndex() const
</UL>
<BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::LogFrameTxFailure(ot::Mac::TxFrame const&, otError, unsigned char, bool) const
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::LogFrameRxFailure(ot::Mac::RxFrame const*, otError) const
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleReceivedFrame(ot::Mac::RxFrame&)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogFrame(char const*, ot::Mac::Frame const&, otError)
</UL>

<P><STRONG><a name="[69c]"></a>ot::Mac::Frame::ValidatePsdu() const</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mac_frame.o(.text._ZNK2ot3Mac5Frame12ValidatePsduEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ot::Mac::Frame::ValidatePsdu() const &rArr; ot::Mac::Frame::FindPayloadIndex() const &rArr; ot::Mac::Frame::SkipSecurityHeaderIndex() const &rArr; ot::Mac::Frame::CalculateAddrFieldSize(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindPayloadIndex() const
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetFooterLength() const
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[3b6]"></a>ot::Mac::Frame::GetFooterLength() const</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mac_frame.o(.text._ZNK2ot3Mac5Frame15GetFooterLengthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::Mac::Frame::GetFooterLength() const &rArr; ot::Mac::Frame::FindSecurityHeaderIndex() const &rArr; ot::Mac::Frame::CalculateAddrFieldSize(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindSecurityHeaderIndex() const
</UL>
<BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::ValidatePsdu() const
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::TxFrame::ProcessTransmitAesCcm(ot::Mac::ExtAddress const&)
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::RxFrame::ProcessReceiveAesCcm(ot::Mac::ExtAddress const&, ot::Mac::KeyMaterial const&)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetMaxPayloadLength() const
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetPayloadLength() const
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindPayloadIndex() const
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetPayloadLength(unsigned short)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool)
</UL>

<P><STRONG><a name="[403]"></a>ot::Mac::Frame::GetFrameCounter(unsigned int&) const</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mac_frame.o(.text._ZNK2ot3Mac5Frame15GetFrameCounterERj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::Mac::Frame::GetFrameCounter(unsigned int&) const &rArr; ot::Mac::Frame::FindSecurityHeaderIndex() const &rArr; ot::Mac::Frame::CalculateAddrFieldSize(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindSecurityHeaderIndex() const
</UL>
<BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::TxFrame::ProcessTransmitAesCcm(ot::Mac::ExtAddress const&)
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::RxFrame::ProcessReceiveAesCcm(ot::Mac::ExtAddress const&, ot::Mac::KeyMaterial const&)
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessReceiveSecurity(ot::Mac::RxFrame&, ot::Mac::Address const&, ot::Neighbor*)
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessEnhAckSecurity(ot::Mac::TxFrame&, ot::Mac::RxFrame&)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::HandleSentFrame(ot::Mac::TxFrame const&, otError, ot::Child&)
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SignalFrameCounterUsedOnTxDone(ot::Mac::TxFrame const&)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::HandleSentFrame(ot::Mac::TxFrame const&, otError, ot::Child&)
</UL>

<P><STRONG><a name="[3b5]"></a>ot::Mac::Frame::GetHeaderLength() const</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mac_frame.o(.text._ZNK2ot3Mac5Frame15GetHeaderLengthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ot::Mac::Frame::GetHeaderLength() const &rArr; ot::Mac::Frame::FindPayloadIndex() const &rArr; ot::Mac::Frame::SkipSecurityHeaderIndex() const &rArr; ot::Mac::Frame::CalculateAddrFieldSize(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindPayloadIndex() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool)
</UL>

<P><STRONG><a name="[6b7]"></a>ot::Mac::Frame::FindPayloadIndex() const</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, mac_frame.o(.text._ZNK2ot3Mac5Frame16FindPayloadIndexEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ot::Mac::Frame::FindPayloadIndex() const &rArr; ot::Mac::Frame::SkipSecurityHeaderIndex() const &rArr; ot::Mac::Frame::CalculateAddrFieldSize(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SkipSecurityHeaderIndex() const
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetFooterLength() const
</UL>
<BR>[Called By]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::IsDataRequestCommand() const
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::ValidatePsdu() const
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::ToInfoString() const
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetCommandId(unsigned char&) const
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetHeaderIe(unsigned char) const
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetPayload() const
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::TxFrame::ProcessTransmitAesCcm(ot::Mac::ExtAddress const&)
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::RxFrame::ProcessReceiveAesCcm(ot::Mac::ExtAddress const&, ot::Mac::KeyMaterial const&)
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetCommandId(unsigned char)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetMaxPayloadLength() const
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetPayloadLength() const
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetHeaderLength() const
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetPayloadLength(unsigned short)
</UL>

<P><STRONG><a name="[96d]"></a>ot::Mac::Frame::FindSrcAddrIndex() const</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, mac_frame.o(.text._ZNK2ot3Mac5Frame16FindSrcAddrIndexEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::Mac::Frame::FindSrcAddrIndex() const
</UL>
<BR>[Calls]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::IsDstPanIdPresent(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetSrcAddr(ot::Mac::Address&) const
</UL>

<P><STRONG><a name="[3d5]"></a>ot::Mac::Frame::GetPayloadLength() const</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mac_frame.o(.text._ZNK2ot3Mac5Frame16GetPayloadLengthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ot::Mac::Frame::GetPayloadLength() const &rArr; ot::Mac::Frame::FindPayloadIndex() const &rArr; ot::Mac::Frame::SkipSecurityHeaderIndex() const &rArr; ot::Mac::Frame::CalculateAddrFieldSize(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindPayloadIndex() const
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetFooterLength() const
</UL>
<BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::TxFrame::ProcessTransmitAesCcm(ot::Mac::ExtAddress const&)
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::RxFrame::ProcessReceiveAesCcm(ot::Mac::ExtAddress const&, ot::Mac::KeyMaterial const&)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleReceivedFrame(ot::Mac::RxFrame&)
</UL>

<P><STRONG><a name="[6a5]"></a>ot::Mac::Frame::GetSecurityLevel(unsigned char&) const</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mac_frame.o(.text._ZNK2ot3Mac5Frame16GetSecurityLevelERh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::Mac::Frame::GetSecurityLevel(unsigned char&) const &rArr; ot::Mac::Frame::FindSecurityHeaderIndex() const &rArr; ot::Mac::Frame::CalculateAddrFieldSize(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindSecurityHeaderIndex() const
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessReceiveSecurity(ot::Mac::RxFrame&, ot::Mac::Address const&, ot::Neighbor*)
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessEnhAckSecurity(ot::Mac::TxFrame&, ot::Mac::RxFrame&)
</UL>

<P><STRONG><a name="[96f]"></a>ot::Mac::Frame::FindSrcPanIdIndex() const</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, mac_frame.o(.text._ZNK2ot3Mac5Frame17FindSrcPanIdIndexEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Mac::Frame::FindSrcPanIdIndex() const
</UL>
<BR>[Calls]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::IsDstPanIdPresent(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetSrcPanId(unsigned short&) const
</UL>

<P><STRONG><a name="[3b3]"></a>ot::Mac::Frame::GetMaxPayloadLength() const</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mac_frame.o(.text._ZNK2ot3Mac5Frame19GetMaxPayloadLengthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ot::Mac::Frame::GetMaxPayloadLength() const &rArr; ot::Mac::Frame::FindPayloadIndex() const &rArr; ot::Mac::Frame::SkipSecurityHeaderIndex() const &rArr; ot::Mac::Frame::CalculateAddrFieldSize(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindPayloadIndex() const
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetFooterLength() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMesh(ot::Message&, ot::Mac::TxFrame&)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool)
</UL>

<P><STRONG><a name="[69f]"></a>ot::Mac::Frame::GetFrameControlField() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mac_frame.o(.text._ZNK2ot3Mac5Frame20GetFrameControlFieldEv))
<BR><BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::RecordFrameTransmitStatus(ot::Mac::TxFrame const&, ot::Mac::RxFrame*, otError, unsigned char, bool)
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessEnhAckSecurity(ot::Mac::TxFrame&, ot::Mac::RxFrame&)
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMacFrameIsVersion2015
</UL>

<P><STRONG><a name="[6a1]"></a>ot::Mac::Frame::IsDataRequestCommand() const</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mac_frame.o(.text._ZNK2ot3Mac5Frame20IsDataRequestCommandEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ot::Mac::Frame::IsDataRequestCommand() const &rArr; ot::Mac::Frame::FindPayloadIndex() const &rArr; ot::Mac::Frame::SkipSecurityHeaderIndex() const &rArr; ot::Mac::Frame::CalculateAddrFieldSize(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindPayloadIndex() const
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMacFrameIsDataRequest
</UL>

<P><STRONG><a name="[6b8]"></a>ot::Mac::Frame::FindSecurityHeaderIndex() const</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mac_frame.o(.text._ZNK2ot3Mac5Frame23FindSecurityHeaderIndexEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Mac::Frame::FindSecurityHeaderIndex() const &rArr; ot::Mac::Frame::CalculateAddrFieldSize(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::CalculateAddrFieldSize(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetSecurityLevel(unsigned char&) const
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetKeyIdMode(unsigned char&) const
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::TxFrame::ProcessTransmitAesCcm(ot::Mac::ExtAddress const&)
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::RxFrame::ProcessReceiveAesCcm(ot::Mac::ExtAddress const&, ot::Mac::KeyMaterial const&)
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetKeySource(unsigned char const*)
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetKeyId(unsigned char&) const
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetFrameCounter(unsigned int&) const
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetKeyId(unsigned char)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetFrameCounter(unsigned int)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetFooterLength() const
</UL>

<P><STRONG><a name="[96e]"></a>ot::Mac::Frame::SkipSecurityHeaderIndex() const</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mac_frame.o(.text._ZNK2ot3Mac5Frame23SkipSecurityHeaderIndexEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::Mac::Frame::SkipSecurityHeaderIndex() const &rArr; ot::Mac::Frame::CalculateAddrFieldSize(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::CalculateAddrFieldSize(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetHeaderIe(unsigned char) const
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindPayloadIndex() const
</UL>

<P><STRONG><a name="[404]"></a>ot::Mac::Frame::GetKeyId(unsigned char&) const</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mac_frame.o(.text._ZNK2ot3Mac5Frame8GetKeyIdERh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::Mac::Frame::GetKeyId(unsigned char&) const &rArr; ot::Mac::Frame::FindSecurityHeaderIndex() const &rArr; ot::Mac::Frame::CalculateAddrFieldSize(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::FindSecurityHeaderIndex() const
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessReceiveSecurity(ot::Mac::RxFrame&, ot::Mac::Address const&, ot::Neighbor*)
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessEnhAckSecurity(ot::Mac::TxFrame&, ot::Mac::RxFrame&)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::HandleSentFrame(ot::Mac::TxFrame const&, otError, ot::Child&)
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SignalFrameCounterUsedOnTxDone(ot::Mac::TxFrame const&)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::HandleSentFrame(ot::Mac::TxFrame const&, otError, ot::Child&)
</UL>

<P><STRONG><a name="[6a8]"></a>ot::Mac::Links::GetCurrentMacKey(ot::Mac::Frame const&) const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mac_links.o(.text._ZNK2ot3Mac5Links16GetCurrentMacKeyERKNS0_5FrameE))
<BR><BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessReceiveSecurity(ot::Mac::RxFrame&, ot::Mac::Address const&, ot::Neighbor*)
</UL>

<P><STRONG><a name="[6a9]"></a>ot::Mac::Links::GetTemporaryMacKey(ot::Mac::Frame const&, unsigned int) const</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mac_links.o(.text._ZNK2ot3Mac5Links18GetTemporaryMacKeyERKNS0_5FrameEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Links::GetTemporaryMacKey(ot::Mac::Frame const&, unsigned int) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessReceiveSecurity(ot::Mac::RxFrame&, ot::Mac::Address const&, ot::Neighbor*)
</UL>

<P><STRONG><a name="[b02]"></a>ot::Mac::Filter::GetNextRssIn(unsigned char&, otMacFilterEntry&) const</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, mac_filter.o(.text._ZNK2ot3Mac6Filter12GetNextRssInERhR16otMacFilterEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Mac::Filter::GetNextRssIn(unsigned char&, otMacFilterEntry&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkFilterGetNextRssIn
</UL>

<P><STRONG><a name="[69d]"></a>ot::Mac::Filter::ApplyToRxFrame(ot::Mac::RxFrame&, ot::Mac::ExtAddress const&, ot::Neighbor*) const</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, mac_filter.o(.text._ZNK2ot3Mac6Filter14ApplyToRxFrameERNS0_7RxFrameERKNS0_10ExtAddressEPNS_8NeighborE))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ot::Mac::Filter::ApplyToRxFrame(ot::Mac::RxFrame&, ot::Mac::ExtAddress const&, ot::Neighbor*) const &rArr; ot::Mac::Filter::Apply(ot::Mac::ExtAddress const&, signed char&) const &rArr; ot::Mac::Filter::FindEntry(ot::Mac::ExtAddress const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Filter::Apply(ot::Mac::ExtAddress const&, signed char&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::RecordFrameTransmitStatus(ot::Mac::TxFrame const&, ot::Mac::RxFrame*, otError, unsigned char, bool)
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
</UL>

<P><STRONG><a name="[b01]"></a>ot::Mac::Filter::GetNextAddress(unsigned char&, otMacFilterEntry&) const</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, mac_filter.o(.text._ZNK2ot3Mac6Filter14GetNextAddressERhR16otMacFilterEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Mac::Filter::GetNextAddress(unsigned char&, otMacFilterEntry&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkFilterGetNextAddress
</UL>

<P><STRONG><a name="[970]"></a>ot::Mac::Filter::Apply(ot::Mac::ExtAddress const&, signed char&) const</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, mac_filter.o(.text._ZNK2ot3Mac6Filter5ApplyERKNS0_10ExtAddressERa))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ot::Mac::Filter::Apply(ot::Mac::ExtAddress const&, signed char&) const &rArr; ot::Mac::Filter::FindEntry(ot::Mac::ExtAddress const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Filter::FindEntry(ot::Mac::ExtAddress const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Filter::ApplyToRxFrame(ot::Mac::RxFrame&, ot::Mac::ExtAddress const&, ot::Neighbor*) const
</UL>

<P><STRONG><a name="[6c0]"></a>ot::Mac::Filter::FindEntry(ot::Mac::ExtAddress const&) const</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mac_filter.o(.text._ZNK2ot3Mac6Filter9FindEntryERKNS0_10ExtAddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ot::Mac::Filter::FindEntry(ot::Mac::ExtAddress const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Filter::AddRssIn(ot::Mac::ExtAddress const&, signed char)
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Filter::RemoveAddress(ot::Mac::ExtAddress const&)
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Filter::RemoveRssIn(ot::Mac::ExtAddress const&)
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Filter::AddAddress(ot::Mac::ExtAddress const&)
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Filter::Apply(ot::Mac::ExtAddress const&, signed char&) const
</UL>

<P><STRONG><a name="[965]"></a>ot::Mac::SubMac::GetNoiseFloor() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sub_mac.o(.text._ZNK2ot3Mac6SubMac13GetNoiseFloorEv))
<BR><BR>[Calls]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetReceiveSensitivity
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkConvertLinkQualityToRss
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ComputeLinkMargin(signed char) const
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::LinkQualityInfo::GetLinkMargin() const
</UL>

<P><STRONG><a name="[698]"></a>ot::Mac::SubMac::GetRssi() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sub_mac.o(.text._ZNK2ot3Mac6SubMac7GetRssiEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ot::Mac::SubMac::GetRssi() const &rArr; otPlatRadioGetRssi &rArr; lmac15p4_read_rssi &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetRssi
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformEnergyScan()
</UL>

<P><STRONG><a name="[34e]"></a>ot::Mac::Address::ToString() const</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mac_types.o(.text._ZNK2ot3Mac7Address8ToStringEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::Mac::Address::ToString() const &rArr; ot::StringWriter::AppendHexBytes(unsigned char const*, unsigned short) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::StringWriter__sub_object(char*, unsigned short)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::Append(char const*, ...)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::AppendHexBytes(unsigned char const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::ToInfoString() const
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::GetForwardFramePriority(ot::FrameData const&, ot::Mac::Addresses const&, ot::Message::Priority&)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogLowpanHcFrameDrop(otError, unsigned short, ot::Mac::Addresses const&, bool)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogFragmentFrameDrop(otError, unsigned short, ot::Mac::Addresses const&, ot::Lowpan::FragmentHeader const&, bool)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::LogIp6Message(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[488]"></a>ot::Mle::DeviceMode::Get(otLinkModeConfig&) const</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mle_types.o(.text._ZNK2ot3Mle10DeviceMode3GetER16otLinkModeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::GetNextDiagTlv(ot::Coap::Message const&, unsigned short&, otNetworkDiagTlv&)
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetLinkMode
</UL>

<P><STRONG><a name="[701]"></a>ot::Mle::DeviceMode::ToString() const</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, mle_types.o(.text._ZNK2ot3Mle10DeviceMode8ToStringEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::Mle::DeviceMode::ToString() const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::StringWriter__sub_object(char*, unsigned short)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::Append(char const*, ...)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ToYesNo(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetDeviceMode(ot::Mle::DeviceMode)
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[7b2]"></a>ot::Mle::RouterIdSet::GetNumberOfAllocatedIds() const</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mle_types.o(.text._ZNK2ot3Mle11RouterIdSet23GetNumberOfAllocatedIdsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Mle::RouterIdSet::GetNumberOfAllocatedIds() const
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::RouteTlv::IsValid() const
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::Mle::RxInfo&, unsigned short, ot::Mle::LeaderData const&)
</UL>

<P><STRONG><a name="[713]"></a>ot::Mle::ConnectivityTlv::GetParentPriority() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mle_tlvs.o(.text._ZNK2ot3Mle15ConnectivityTlv17GetParentPriorityEv))
<BR><BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Preference::From2BitUint(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleParentResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsBetterParent(unsigned short, ot::LinkQuality, unsigned char, ot::Mle::ConnectivityTlv const&, unsigned short, ot::Mac::CslAccuracy const&)
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::ConnectivityTlv::GetConnectivity(otNetworkDiagConnectivity&) const
</UL>

<P><STRONG><a name="[726]"></a>ot::Mle::DiscoverScanner::HandleDiscoveryResponse(ot::Mle::Mle::RxInfo&) const</STRONG> (Thumb, 510 bytes, Stack size 160 bytes, discover_scanner.o(.text._ZNK2ot3Mle15DiscoverScanner23HandleDiscoveryResponseERNS0_3Mle6RxInfoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlvValueOffset(ot::Message const&, unsigned char, unsigned short&, unsigned short&)
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::ReadTlvValue(ot::Message const&, unsigned short, void*, unsigned char)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::ReadUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned short, unsigned short&)
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkNameTlv::IsValid() const
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SteeringData::Contains(ot::MeshCoP::SteeringData::HashBitIndexes const&) const
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SteeringData::Init(unsigned char)
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkNameTlv::GetNetworkName() const
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkName::Set(ot::MeshCoP::NameData const&)
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Log(ot::Mle::Mle::MessageAction, ot::Mle::Mle::MessageType, ot::Ip6::Address const&)
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::LogProcessError(ot::Mle::Mle::MessageType, otError)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::ConvertToExtAddress(ot::Mac::ExtAddress&) const
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[7b9]"></a>ot::Mle::DeviceProperties::CalculateLeaderWeight() const</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, mle_types.o(.text._ZNK2ot3Mle16DeviceProperties21CalculateLeaderWeightEv))
<BR><BR>[Called By]<UL><LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::MleRouter(ot::Instance&)
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetDeviceProperties(ot::Mle::DeviceProperties const&)
</UL>

<P><STRONG><a name="[230]"></a>ot::Mle::Mle::IsAttached() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mle.o(.text._ZNK2ot3Mle3Mle10IsAttachedEv))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetNextHopAndPathCost(unsigned short, unsigned short&, unsigned char&) const
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetLeaderData
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::IsSingleton() const
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::HandleNotifierEvents(ot::Events)
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::ApplyActiveDataset(ot::MeshCoP::Timestamp const&, ot::Coap::Message&)
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::GenerateLocal()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::PerformNextRegistration()
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::SynchronizeServerData()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistration()
</UL>

<P><STRONG><a name="[974]"></a>ot::Mle::Mle::GetParentInfo(ot::Router::Info&) const</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mle.o(.text._ZNK2ot3Mle3Mle13GetParentInfoERNS_6Router4InfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Mle::Mle::GetParentInfo(ot::Router::Info&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Router::Info::SetFrom(ot::Parent const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetParentInfo
</UL>

<P><STRONG><a name="[23e]"></a>ot::Mle::Mle::GetServiceAloc(unsigned char, ot::Ip6::Address&) const</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mle.o(.text._ZNK2ot3Mle3Mle14GetServiceAlocEhRNS_3Ip67AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Mle::Mle::GetServiceAloc(unsigned char, ot::Ip6::Address&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLocator(ot::Ip6::NetworkPrefix const&, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::PerformNextRegistration()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistrationMessage(otIp6Address const*, unsigned char, unsigned int const*, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
</UL>

<P><STRONG><a name="[7d9]"></a>ot::Mle::Mle::GetLeaderAddress(ot::Ip6::Address&) const</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mle.o(.text._ZNK2ot3Mle3Mle16GetLeaderAddressERNS_3Ip67AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Mle::Mle::GetLeaderAddress(ot::Ip6::Address&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetToLocator(ot::Ip6::NetworkPrefix const&, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderRloc()
</UL>

<P><STRONG><a name="[3c4]"></a>ot::Mle::Mle::IsAnycastLocator(ot::Ip6::Address const&) const</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mle.o(.text._ZNK2ot3Mle3Mle16IsAnycastLocatorERKNS_3Ip67AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ot::Mle::Mle::IsAnycastLocator(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::IsAnycastLocator() const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SelectSourceAddress(ot::Ip6::Address const&) const
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Mle::Mle::AddressRegistrationMode)
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HasUnregisteredAddress()
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateIp6RouteFtd(ot::Ip6::Header&, ot::Message&)
</UL>

<P><STRONG><a name="[2f7]"></a>ot::Mle::Mle::IsRouterOrLeader() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mle.o(.text._ZNK2ot3Mle3Mle16IsRouterOrLeaderEv))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool)
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::GetMaxChildTimeout(unsigned int&) const
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SynchronizeChildNetworkData()
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ResetAdvertiseInterval()
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleNetworkDataUpdateRouter()
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendChildTable(ot::Message&)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::RemoveStaleChildEntries()
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Neighbor::AddressMatcher const&)
</UL>

<P><STRONG><a name="[3c3]"></a>ot::Mle::Mle::IsRoutingLocator(ot::Ip6::Address const&) const</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mle.o(.text._ZNK2ot3Mle3Mle16IsRoutingLocatorERKNS_3Ip67AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ot::Mle::Mle::IsRoutingLocator(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::IsRoutingLocator() const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Leader::HandleTmf&lang;(ot::Uri)23&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SelectSourceAddress(ot::Ip6::Address const&) const
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressSolicitResponse(ot::Coap::Message const&, ot::ThreadStatusTlv::Status, ot::Router const*, ot::Ip6::MessageInfo const&)
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Mle::Mle::AddressRegistrationMode)
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HasUnregisteredAddress()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Ip6::Address const&, ot::Neighbor::StateFilter)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateIp6RouteFtd(ot::Ip6::Header&, ot::Message&)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::GetMacDestinationAddress(ot::Ip6::Address const&, ot::Mac::Address&)
</UL>

<P><STRONG><a name="[456]"></a>ot::Mle::Mle::GetLocatorAddress(ot::Ip6::Address&, unsigned short) const</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mle.o(.text._ZNK2ot3Mle3Mle17GetLocatorAddressERNS_3Ip67AddressEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::Mle::Mle::GetLocatorAddress(ot::Ip6::Address&, unsigned short) const &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc()
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)0&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode)
</UL>

<P><STRONG><a name="[615]"></a>ot::Mle::Mle::IsMeshLocalAddress(ot::Ip6::Address const&) const</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mle.o(.text._ZNK2ot3Mle3Mle18IsMeshLocalAddressERKNS_3Ip67AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ot::Mle::Mle::IsMeshLocalAddress(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::HasIp6Address(ot::Ip6::Address const&) const
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::RemoveIp6Address(ot::Ip6::Address const&)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::IsTmfMessage(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned short) const
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::IsOnMesh(ot::Ip6::Address const&) const
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::PassToHost(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo const&, unsigned char, bool, ot::Message::Ownership)
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddIp6Address(ot::Ip6::Address const&)
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetContext(ot::Ip6::Address const&, ot::Lowpan::Context&) const
</UL>

<P><STRONG><a name="[769]"></a>ot::Mle::Mle::GetAttachStartDelay() const</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, mle.o(.text._ZNK2ot3Mle3Mle19GetAttachStartDelayEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::GetAttachStartDelay() const &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::AddJitter(unsigned int, unsigned short)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint32InRange(unsigned int, unsigned int)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)3&rang;(char const*, char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Attach(ot::Mle::Mle::AttachMode)
</UL>

<P><STRONG><a name="[73d]"></a>ot::Mle::Mle::GetNextAnnounceChannel(unsigned char&) const</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mle.o(.text._ZNK2ot3Mle3Mle22GetNextAnnounceChannelERh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::GetNextAnnounceChannel(unsigned char&) const &rArr; ot::MeshCoP::DatasetManager::GetChannelMask(ot::Mac::ChannelMask&) const &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ChannelMask::GetNextChannel(unsigned char&) const
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::GetChannelMask(ot::Mac::ChannelMask&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HasAcceptableParentCandidate() const
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAttachTimer()
</UL>

<P><STRONG><a name="[748]"></a>ot::Mle::Mle::DelayedResponseMetadata::RemoveFrom(ot::Message&) const</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mle.o(.text._ZNK2ot3Mle3Mle23DelayedResponseMetadata10RemoveFromERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::DelayedResponseMetadata::RemoveFrom(ot::Message&) const &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetLength(unsigned short)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendDelayedResponse(ot::Mle::Mle::TxMessage&, ot::Mle::Mle::DelayedResponseMetadata const&)
</UL>

<P><STRONG><a name="[73b]"></a>ot::Mle::Mle::DetermineParentRequestType(ot::Mle::Mle::ParentRequestType&) const</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, mle.o(.text._ZNK2ot3Mle3Mle26DetermineParentRequestTypeERNS1_17ParentRequestTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::DetermineParentRequestType(ot::Mle::Mle::ParentRequestType&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HasAcceptableParentCandidate() const
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAttachTimer()
</UL>

<P><STRONG><a name="[739]"></a>ot::Mle::Mle::HasAcceptableParentCandidate() const</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, mle.o(.text._ZNK2ot3Mle3Mle28HasAcceptableParentCandidateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = ot::Mle::Mle::HasAcceptableParentCandidate() const &rArr; ot::Mle::Mle::GetNextAnnounceChannel(unsigned char&) const &rArr; ot::MeshCoP::DatasetManager::GetChannelMask(ot::Mac::ChannelMask&) const &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Router::GetTwoWayLinkQuality() const
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::DetermineParentRequestType(ot::Mle::Mle::ParentRequestType&) const
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::GetNextAnnounceChannel(unsigned char&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAttachTimer()
</UL>

<P><STRONG><a name="[7a5]"></a>ot::Mle::Mle::Challenge::Matches(unsigned char const*, unsigned char) const</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mle.o(.text._ZNK2ot3Mle3Mle9Challenge7MatchesEPKhh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[7a6]"></a>ot::Mle::Mle::RxMessage::ReadRouteTlv(ot::Mle::RouteTlv&) const</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mle.o(.text._ZNK2ot3Mle3Mle9RxMessage12ReadRouteTlvERNS0_8RouteTlvE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, unsigned short, ot::Tlv&)
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::RouteTlv::IsValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ReadAndProcessRouteTlvOnFed(ot::Mle::Mle::RxInfo&, unsigned char)
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::Mle::RxInfo&, unsigned short, ot::Mle::LeaderData const&)
</UL>

<P><STRONG><a name="[7a4]"></a>ot::Mle::Mle::RxMessage::ReadResponseTlv(ot::Mle::Mle::Challenge&) const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mle.o(.text._ZNK2ot3Mle3Mle9RxMessage15ReadResponseTlvERNS1_9ChallengeE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadChallengeOrResponse(unsigned char, ot::Mle::Mle::Challenge&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[7a8]"></a>ot::Mle::Mle::RxMessage::ReadChallengeTlv(ot::Mle::Mle::Challenge&) const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mle.o(.text._ZNK2ot3Mle3Mle9RxMessage16ReadChallengeTlvERNS1_9ChallengeE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadChallengeOrResponse(unsigned char, ot::Mle::Mle::Challenge&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleParentRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[720]"></a>ot::Mle::Mle::RxMessage::ReadLeaderDataTlv(ot::Mle::LeaderData&) const</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mle.o(.text._ZNK2ot3Mle3Mle9RxMessage17ReadLeaderDataTlvERNS0_10LeaderDataE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, unsigned short, ot::Tlv&)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildIdResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleParentResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAdvertisement(ot::Mle::Mle::RxInfo&)
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleLeaderData(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[75e]"></a>ot::Mle::Mle::RxMessage::ReadTlvRequestTlv(ot::Mle::Mle::TlvList&) const</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, mle.o(.text._ZNK2ot3Mle3Mle9RxMessage17ReadTlvRequestTlvERNS1_7TlvListE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ReadBytes(unsigned short, void*, unsigned short) const
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlvValueOffset(ot::Message const&, unsigned char, unsigned short&, unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleDataRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[750]"></a>ot::Mle::Mle::RxMessage::ReadFrameCounterTlvs(unsigned int&, unsigned int&) const</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mle.o(.text._ZNK2ot3Mle3Mle9RxMessage20ReadFrameCounterTlvsERjS3_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Tlv::FindUintTlv&lang;unsigned int&rang;(ot::Message const&, unsigned char, unsigned int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleParentResponse(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[74b]"></a>ot::Mle::Mle::RxMessage::ReadChallengeOrResponse(unsigned char, ot::Mle::Mle::Challenge&) const</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mle.o(.text._ZNK2ot3Mle3Mle9RxMessage23ReadChallengeOrResponseEhRNS1_9ChallengeE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ReadBytes(unsigned short, void*, unsigned short) const
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlvValueOffset(ot::Message const&, unsigned char, unsigned short&, unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadChallengeTlv(ot::Mle::Mle::Challenge&) const
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadResponseTlv(ot::Mle::Mle::Challenge&) const
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleParentResponse(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[48a]"></a>ot::Mle::RouteTlv::IsValid() const</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mle_tlvs.o(.text._ZNK2ot3Mle8RouteTlv7IsValidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::Mle::RouteTlv::IsValid() const &rArr; ot::Mle::RouterIdSet::GetNumberOfAllocatedIds() const
</UL>
<BR>[Calls]<UL><LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::RouterIdSet::GetNumberOfAllocatedIds() const
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::GetNextDiagTlv(ot::Coap::Message const&, unsigned short&, otNetworkDiagTlv&)
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadRouteTlv(ot::Mle::RouteTlv&) const
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::Mle::RxInfo&, unsigned short, ot::Mle::LeaderData const&)
</UL>

<P><STRONG><a name="[74e]"></a>ot::Mle::MleRouter::IsSingleton() const</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mle_router.o(.text._ZNK2ot3Mle9MleRouter11IsSingletonEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Mle::MleRouter::IsSingleton() const
</UL>
<BR>[Calls]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::IsRouterEligible() const
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsAttached() const
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadIsSingleton
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::Mle::RxInfo&, unsigned short, ot::Mle::LeaderData const&)
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleParentResponse(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[7b3]"></a>ot::Mle::MleRouter::ShouldDowngrade(unsigned char, ot::Mle::RouteTlv const&) const</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, mle_router.o(.text._ZNK2ot3Mle9MleRouter15ShouldDowngradeEhRKNS0_8RouteTlvE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::GetNumChildren(ot::Neighbor::StateFilter) const
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::NeighborHasComparableConnectivity(ot::Mle::RouteTlv const&, unsigned char) const
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Router::GetTwoWayLinkQuality() const
</UL>
<BR>[Called By]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::Mle::RxInfo&, unsigned short, ot::Mle::LeaderData const&)
</UL>

<P><STRONG><a name="[795]"></a>ot::Mle::MleRouter::IsRouterEligible() const</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, mle_router.o(.text._ZNK2ot3Mle9MleRouter16IsRouterEligibleEv))
<BR><BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadIsRouterEligible
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeRouter(ot::ThreadStatusTlv::Status)
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeLeader()
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::IsSingleton() const
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertiseTrickleTimer()
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleDiscoveryRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleParentRequest(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[497]"></a>ot::Mle::MleRouter::GetMaxChildTimeout(unsigned int&) const</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mle_router.o(.text._ZNK2ot3Mle9MleRouter18GetMaxChildTimeoutERj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ot::Mle::MleRouter::GetMaxChildTimeout(unsigned int&) const &rArr; ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter) &rArr; ot::ChildTable::Iterator::Reset() &rArr; ot::ChildTable::Iterator::Advance()
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Iterator(ot::Instance&, ot::Neighbor::StateFilter)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsRouterOrLeader() const
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendDiagTlv(unsigned char, ot::Message&)
</UL>

<P><STRONG><a name="[b2b]"></a>ot::Mle::MleRouter::GetMaxChildIpAddresses() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mle_router.o(.text._ZNK2ot3Mle9MleRouter22GetMaxChildIpAddressesEv))
<BR><BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetMaxChildIpAddresses
</UL>

<P><STRONG><a name="[79a]"></a>ot::Mle::MleRouter::HasNeighborWithGoodLinkQuality() const</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, mle_router.o(.text._ZNK2ot3Mle9MleRouter30HasNeighborWithGoodLinkQualityEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = ot::Mle::MleRouter::HasNeighborWithGoodLinkQuality() const &rArr; ot::Mac::Mac::ComputeLinkMargin(signed char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ComputeLinkMargin(signed char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
</UL>

<P><STRONG><a name="[976]"></a>ot::Mle::MleRouter::NeighborHasComparableConnectivity(ot::Mle::RouteTlv const&, unsigned char) const</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, mle_router.o(.text._ZNK2ot3Mle9MleRouter33NeighborHasComparableConnectivityERKNS0_8RouteTlvEh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::FindRouterById(unsigned char) const
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Router::GetTwoWayLinkQuality() const
</UL>
<BR>[Called By]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ShouldDowngrade(unsigned char, ot::Mle::RouteTlv const&) const
</UL>

<P><STRONG><a name="[2dd]"></a>ot::Tlv::GetSize() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tlvs.o(.text._ZNK2ot3Tlv7GetSizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::GetNextDiagTlv(ot::Coap::Message const&, unsigned short&, otNetworkDiagTlv&)
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::IsValid() const
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::Discover(ot::Mac::ChannelMask const&, unsigned short, bool, bool, ot::MeshCoP::SteeringData::HashBitIndexes const*, void (*)(otActiveScanResult*, void*), void*)
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ChannelMaskBaseTlv::IsValid() const
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::ApplyActiveDataset(ot::MeshCoP::Timestamp const&, ot::Coap::Message&)
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendGetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, unsigned char*, unsigned char) const
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::AppendMleDatasetTlv(ot::MeshCoP::Dataset::Type, ot::Message&) const
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ApplyConfiguration(ot::Instance&, bool*) const
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ChannelMaskTlv::GetChannelMask() const
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Tlv::FindTlv(unsigned char const*, unsigned short, ot::MeshCoP::Tlv::Type)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)16&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::SendCommissioningGetResponse(ot::Coap::Message const&, unsigned short, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[2de]"></a>ot::Tlv::AppendTo(ot::Message&) const</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tlvs.o(.text._ZNK2ot3Tlv8AppendToERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = ot::Tlv::AppendTo(ot::Message&) const &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::Discover(ot::Mac::ChannelMask const&, unsigned short, bool, bool, ot::MeshCoP::SteeringData::HashBitIndexes const*, void (*)(otActiveScanResult*, void*), void*)
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SendPetitionResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::MeshCoP::StateTlv::State)
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::PrepareJoinerEntrustMessage()
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::PrepareJoinerFinalizeMessage(char const*, char const*, char const*, char const*, char const*)
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendGetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, unsigned char*, unsigned char) const
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::AppendMleDatasetTlv(ot::MeshCoP::Dataset::Type, ot::Message&) const
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAddressSolicitResponse(ot::Coap::Message const&, ot::ThreadStatusTlv::Status, ot::Router const*, ot::Ip6::MessageInfo const&)
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDiscoveryResponse(ot::Ip6::Address const&, ot::Message const&)
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendConnectivityTlv()
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendLeaderDataTlv()
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendRouteTlv(ot::Neighbor*)
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendAnnounce(unsigned char, ot::Ip6::Address const&, ot::Mle::Mle::AnnounceMode)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::EnergyScanServer::HandleTmf&lang;(ot::Uri)19&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PanIdQueryServer::SendConflict()
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendMacCounters(ot::Message&)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendDiagTlv(unsigned char, ot::Message&)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::SendCommissioningGetResponse(ot::Coap::Message const&, unsigned short, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[89e]"></a>ot::Tlv::GetValue() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tlvs.o(.text._ZNK2ot3Tlv8GetValueEv))
<BR><BR>[Called By]<UL><LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetFrom(ot::MeshCoP::Dataset::Info const&)
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ChannelMaskBaseTlv::IsValid() const
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::IsJoiningEnabled() const
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ChannelMaskTlv::GetChannelMask() const
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetTlv(ot::MeshCoP::Tlv const&)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ChannelMaskTlv::SetChannelMask(unsigned int)
</UL>

<P><STRONG><a name="[3ae]"></a>ot::Tmf::Agent::IsTmfMessage(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned short) const</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tmf.o(.text._ZNK2ot3Tmf5Agent12IsTmfMessageERKNS_3Ip67AddressES5_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ot::Tmf::Agent::IsTmfMessage(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned short) const &rArr; ot::Mle::Mle::IsMeshLocalAddress(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsLinkLocalMulticast() const
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsMeshLocalAddress(ot::Ip6::Address const&) const
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsRealmLocalMulticast() const
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsLinkLocal() const
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::GetFramePriority(ot::FrameData const&, ot::Mac::Addresses const&, ot::Message::Priority&)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::Agent::Filter(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, void*)
</UL>

<P><STRONG><a name="[977]"></a>ot::Coap::MessageQueue::begin() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, coap_message.o(.text._ZNK2ot4Coap12MessageQueue5beginEv))
<BR><BR>[Called By]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::FindMatchedResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) const
</UL>

<P><STRONG><a name="[af6]"></a>ot::Coap::TxParameters::IsValid() const</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, coap.o(.text._ZNK2ot4Coap12TxParameters7IsValidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Coap::TxParameters::IsValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapSendRequestWithParameters
</UL>

<P><STRONG><a name="[7fe]"></a>ot::Coap::ResponsesQueue::FindMatchedResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) const</STRONG> (Thumb, 108 bytes, Stack size 80 bytes, coap.o(.text._ZNK2ot4Coap14ResponsesQueue19FindMatchedResponseERKNS0_7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ot::Coap::ResponsesQueue::FindMatchedResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) const &rArr; ot::Coap::ResponsesQueue::ResponseMetadata::ReadFrom(ot::Coap::Message const&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetNext() const
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::MessageQueue::begin() const
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::ResponseMetadata::ReadFrom(ot::Coap::Message const&)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::GetMatchedResponseCopy(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::Coap::Message**)
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&)
</UL>

<P><STRONG><a name="[81c]"></a>ot::Coap::Message::IsTokenEqual(ot::Coap::Message const&) const</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, coap_message.o(.text._ZNK2ot4Coap7Message12IsTokenEqualERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ot::Coap::Message::IsTokenEqual(ot::Coap::Message const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ProcessReceivedResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::FindRelatedRequest(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::Coap::CoapBase::Metadata&)
</UL>

<P><STRONG><a name="[81e]"></a>ot::Coap::Message::ReadUriPathOptions(char (&) [33]) const</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, coap_message.o(.text._ZNK2ot4Coap7Message18ReadUriPathOptionsERA33_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ot::Coap::Message::ReadUriPathOptions(char (&) [33]) const &rArr; ot::Coap::Option::Iterator::InitOrAdvance(ot::Coap::Message const*, unsigned short) &rArr; ot::Coap::Option::Iterator::Advance() &rArr; ot::Coap::Option::Iterator::ReadExtendedOptionField(unsigned short&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ReadBytes(unsigned short, void*, unsigned short) const
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Option::Iterator::InitOrAdvance(ot::Coap::Message const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::ProcessReceivedRequest(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[458]"></a>ot::Coap::Message::IsConfirmablePostRequest() const</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, coap_message.o(.text._ZNK2ot4Coap7Message24IsConfirmablePostRequestEv))
<BR><BR>[Called By]<UL><LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::Joiner::HandleTmf&lang;(ot::Uri)20&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)1&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)4&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)3&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)35&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)33&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Client::HandleTmf&lang;(ot::Uri)32&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[45b]"></a>ot::Coap::Message::IsNonConfirmablePostRequest() const</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, coap_message.o(.text._ZNK2ot4Coap7Message27IsNonConfirmablePostRequestEv))
<BR><BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::JoinerRouter::HandleTmf&lang;(ot::Uri)29&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)2&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[7ff]"></a>ot::Coap::Message::Clone(unsigned short) const</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, coap_message.o(.text._ZNK2ot4Coap7Message5CloneEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Clone(unsigned short) const
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendCopy(ot::Coap::Message const&, ot::Ip6::MessageInfo const&)
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::CopyAndEnqueueMessage(ot::Coap::Message const&, unsigned short, ot::Coap::CoapBase::Metadata const&)
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::GetMatchedResponseCopy(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, ot::Coap::Message**)
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&)
</UL>

<P><STRONG><a name="[22b]"></a>ot::Child::HasIp6Address(ot::Ip6::Address const&) const</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, topology.o(.text._ZNK2ot5Child13HasIp6AddressERKNS_3Ip67AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ot::Child::HasIp6Address(ot::Ip6::Address const&) const &rArr; ot::Mle::Mle::IsMeshLocalAddress(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsUnspecified() const
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsMeshLocalAddress(ot::Ip6::Address const&) const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::ProcessDuaResponse(ot::Coap::Message&)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)2&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::HasSleepyChildWithAddress(ot::Ip6::Address const&) const
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMessage(ot::Message&)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindNeighbor(ot::Ip6::Address const&, ot::Neighbor::StateFilter)
</UL>

<P><STRONG><a name="[27a]"></a>ot::Child::AddressIterator::GetAddress() const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, topology.o(.text._ZNK2ot5Child15AddressIterator10GetAddressEv))
<BR><BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetChildNextIp6Address
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::UpdateProxiedSubscriptions(ot::Child&, ot::Ip6::Address const*, unsigned short)
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendAddressRegistrationTlv(ot::Child&)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::FinishMulticastListenerRegistration(bool, ot::Ip6::Address const*, unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistration()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SetMulticastAddressMlrState(ot::MlrState, ot::MlrState)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::LogMulticastAddresses()
</UL>

<P><STRONG><a name="[27b]"></a>ot::Child::GetAddressMlrState(ot::Ip6::Address const&) const</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, topology.o(.text._ZNK2ot5Child18GetAddressMlrStateERKNS_3Ip67AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::Child::GetAddressMlrState(ot::Ip6::Address const&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::HasMlrRegisteredAddress(ot::Ip6::Address const&) const
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::FinishMulticastListenerRegistration(bool, ot::Ip6::Address const*, unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistration()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SetMulticastAddressMlrState(ot::MlrState, ot::MlrState)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::LogMulticastAddresses()
</UL>

<P><STRONG><a name="[824]"></a>ot::Child::GetMeshLocalIp6Address(ot::Ip6::Address&) const</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, topology.o(.text._ZNK2ot5Child22GetMeshLocalIp6AddressERNS_3Ip67AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::Child::GetMeshLocalIp6Address(ot::Ip6::Address&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::IsUnspecified() const
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SetPrefix(ot::Ip6::NetworkPrefix const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddressIterator::Update()
</UL>

<P><STRONG><a name="[235]"></a>ot::Child::GetDomainUnicastAddress() const</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, topology.o(.text._ZNK2ot5Child23GetDomainUnicastAddressEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ot::Child::GetDomainUnicastAddress() const &rArr; ot::BackboneRouter::Leader::IsDomainUnicast(ot::Ip6::Address const&) const &rArr; ot::Ip6::Address::MatchesPrefix(ot::Ip6::Prefix const&) const &rArr; ot::Ip6::Prefix::MatchLength(unsigned char const*, unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::IsUnspecified() const
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::IsDomainUnicast(ot::Ip6::Address const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::PerformNextRegistration()
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
</UL>

<P><STRONG><a name="[945]"></a>ot::Child::HasMlrRegisteredAddress(ot::Ip6::Address const&) const</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, topology.o(.text._ZNK2ot5Child23HasMlrRegisteredAddressERKNS_3Ip67AddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::Child::HasMlrRegisteredAddress(ot::Ip6::Address const&) const &rArr; ot::Child::AddressIterator::Update() &rArr; ot::Child::GetMeshLocalIp6Address(ot::Ip6::Address&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddressIterator::Update()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::GetAddressMlrState(ot::Ip6::Address const&) const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::IsAddressMlrRegisteredByAnyChildExcept(ot::Ip6::Address const&, ot::Child const*) const
</UL>

<P><STRONG><a name="[4d0]"></a>ot::Utils::CmdLineParser::Arg::GetLength() const</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, parse_cmdline.o(.text._ZNK2ot5Utils13CmdLineParser3Arg9GetLengthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::Utils::CmdLineParser::Arg::GetLength() const
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;1665316120ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Coap::Process&lang;7568770ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Coap::Process&lang;7108473799409246994ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::ProcessRequest(ot::Utils::CmdLineParser::Arg*, otCoapCode)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;119073513618444ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4c9]"></a>ot::Utils::CmdLineParser::Arg::operator==(char const*) const</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, parse_cmdline.o(.text._ZNK2ot5Utils13CmdLineParser3ArgeqEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::Utils::CmdLineParser::Arg::operator==(char const*) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;1665317123ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;1665316120ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::NetworkData::Process&lang;4362819052862294378ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::NetworkData::Process&lang;3328099188798998309ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::NetworkData::Process&lang;1980428035ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Joiner::Process&lang;16073431636142911865ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;7568770ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;28438073741397367ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;1930295280ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;1648543237ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;12771032504430052662ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;12771032453691045162ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;125517434289129ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;109399277033242ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Coap::Process&lang;16542423019117308726ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::ProcessRequest(ot::Utils::CmdLineParser::Arg*, otCoapCode)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Dataset::Process(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Joiner::Process(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::Process(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::Process(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8094126837366616329ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;807264858141456911ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8059602322220575993ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8023188516701246990ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8020460690342608375ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7506025ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7308159ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7250330901759102465ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7113582ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;6725988ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;6462319ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;5255620471931187573ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;428983089745ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;424622705244ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;31451632477041015ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;30907139684939619ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;30363746172521848ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;29803101196888419ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1998604769390126437ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1830284035ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1715061262ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1681701387ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1681249789ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1648543237ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;16075074835862503559ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1495474164342561146ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;14182804244553304960ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;13711823289570935762ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;125538443212822ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;123344230057719ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;123339735204840ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;112553419349005ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;108232213406486ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterAddress(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ParseEnableOrDisable(ot::Utils::CmdLineParser::Arg const&, bool&)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessUserCommands(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterRss(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessCommand(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::UdpExample::Process(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[83d]"></a>ot::Utils::Slaac::GenerateIid(ot::Ip6::Netif::UnicastAddress&, unsigned char*, unsigned char, unsigned char*) const</STRONG> (Thumb, 232 bytes, Stack size 240 bytes, slaac_address.o(.text._ZNK2ot5Utils5Slaac11GenerateIidERNS_3Ip65Netif14UnicastAddressEPhhS6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768 + Unknown Stack Size
<LI>Call Chain = ot::Utils::Slaac::GenerateIid(ot::Ip6::Netif::UnicastAddress&, unsigned char*, unsigned char, unsigned char*) const &rArr; ot::Utils::Slaac::GetIidSecretKey(ot::Utils::Slaac::IidSecretKey&) const &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::Sha256::~Sha256()
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::Sha256::Sha256()
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::Sha256::Update(void const*, unsigned short)
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::Sha256::Finish(ot::Crypto::Sha256::Hash&)
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::Sha256::Start()
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::IsReserved() const
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::SetBytes(unsigned char const*)
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::GetIidSecretKey(ot::Utils::Slaac::IidSecretKey&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::Update(unsigned char)
</UL>

<P><STRONG><a name="[978]"></a>ot::Utils::Slaac::GetIidSecretKey(ot::Utils::Slaac::IidSecretKey&) const</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, slaac_address.o(.text._ZNK2ot5Utils5Slaac15GetIidSecretKeyERNS1_12IidSecretKeyE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528 + Unknown Stack Size
<LI>Call Chain = ot::Utils::Slaac::GetIidSecretKey(ot::Utils::Slaac::IidSecretKey&) const &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoRandomGet
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::ReadEntry(ot::SettingsBase::Key, void*, unsigned short) const
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::SaveEntry(ot::SettingsBase::Key, void const*, void*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::GenerateIid(ot::Ip6::Netif::UnicastAddress&, unsigned char*, unsigned char, unsigned char*) const
</UL>

<P><STRONG><a name="[3b8]"></a>ot::Lowpan::MeshHeader::AppendTo(ot::FrameBuilder&) const</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lowpan.o(.text._ZNK2ot6Lowpan10MeshHeader8AppendToERNS_12FrameBuilderE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::Lowpan::MeshHeader::AppendTo(ot::FrameBuilder&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::AppendBigEndianUint16(unsigned short)
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::AppendUint8(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::MeshHeader::AppendTo(ot::Message&) const
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool)
</UL>

<P><STRONG><a name="[35a]"></a>ot::Lowpan::MeshHeader::AppendTo(ot::Message&) const</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, lowpan.o(.text._ZNK2ot6Lowpan10MeshHeader8AppendToERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = ot::Lowpan::MeshHeader::AppendTo(ot::Message&) const &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::Init(void*, unsigned short)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::MeshHeader::AppendTo(ot::FrameBuilder&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&)
</UL>

<P><STRONG><a name="[3aa]"></a>ot::Lowpan::Lowpan::DecompressEcn(ot::Message const&, unsigned short) const</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lowpan.o(.text._ZNK2ot6Lowpan6Lowpan13DecompressEcnERKNS_7MessageEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ot::Lowpan::Lowpan::DecompressEcn(ot::Message const&, unsigned short) const &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateEcnOrDrop(ot::Message&, bool)
</UL>

<P><STRONG><a name="[712]"></a>ot::Router::GetTwoWayLinkQuality() const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, topology.o(.text._ZNK2ot6Router20GetTwoWayLinkQualityEv))
<BR><BR>[Called By]<UL><LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::NeighborHasComparableConnectivity(ot::Mle::RouteTlv const&, unsigned char) const
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ShouldDowngrade(unsigned char, ot::Mle::RouteTlv const&) const
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetLinkCost(ot::Router const&) const
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HasAcceptableParentCandidate() const
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::FillConnectivityTlv(ot::Mle::ConnectivityTlv&)
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsBetterParent(unsigned short, ot::LinkQuality, unsigned char, ot::Mle::ConnectivityTlv const&, unsigned short, ot::Mac::CslAccuracy const&)
</UL>

<P><STRONG><a name="[8ad]"></a>ot::MeshCoP::ChannelTlv::IsValid() const</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, meshcop_tlvs.o(.text._ZNK2ot7MeshCoP10ChannelTlv7IsValidEv))
<BR><BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[7bd]"></a>ot::MeshCoP::NetworkName::GetAsData() const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, network_name.o(.text._ZNK2ot7MeshCoP11NetworkName9GetAsDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::MeshCoP::NetworkName::GetAsData() const
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringLength(char const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetFrom(ot::MeshCoP::Dataset::Info const&)
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::PrepareJoinerEntrustMessage()
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::GenerateLocal()
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendDiscoveryResponse(ot::Ip6::Address const&, ot::Message const&)
</UL>

<P><STRONG><a name="[97b]"></a>ot::MeshCoP::DatasetLocal::Read(otOperationalDatasetTlvs&) const</STRONG> (Thumb, 50 bytes, Stack size 280 bytes, dataset_local.o(.text._ZNK2ot7MeshCoP12DatasetLocal4ReadER24otOperationalDatasetTlvs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetLocal::Read(otOperationalDatasetTlvs&) const &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ConvertTo(otOperationalDatasetTlvs&) const
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Dataset()
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetGetPendingTlvs
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetGetActiveTlvs
</UL>

<P><STRONG><a name="[97d]"></a>ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset::Info&) const</STRONG> (Thumb, 50 bytes, Stack size 280 bytes, dataset_local.o(.text._ZNK2ot7MeshCoP12DatasetLocal4ReadERNS0_7Dataset4InfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset::Info&) const &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Dataset()
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetGetActive
</UL>

<P><STRONG><a name="[886]"></a>ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, dataset_local.o(.text._ZNK2ot7MeshCoP12DatasetLocal4ReadERNS0_7DatasetE))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::GetTlv(ot::MeshCoP::Tlv::Type) const
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::RemoveTlv(ot::MeshCoP::Tlv::Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset::Info&) const
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(otOperationalDatasetTlvs&) const
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::PrepareJoinerEntrustMessage()
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::AppendMleDatasetTlv(ot::Message&) const
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::GenerateLocal()
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::ApplyConfiguration() const
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendGetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, unsigned char*, unsigned char) const
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::GetChannelMask(ot::Mac::ChannelMask&) const
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::HandleDelayTimer()
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::StartDelayTimer()
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSet()
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Restore(ot::MeshCoP::Dataset&)
</UL>

<P><STRONG><a name="[8fd]"></a>ot::MeshCoP::SteeringData::DoesAllMatch(unsigned char) const</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, meshcop.o(.text._ZNK2ot7MeshCoP12SteeringData12DoesAllMatchEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::MeshCoP::SteeringData::DoesAllMatch(unsigned char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SaveDiscoveredJoinerRouter(otActiveScanResult const&)
</UL>

<P><STRONG><a name="[94d]"></a>ot::MeshCoP::SteeringData::Contains(ot::MeshCoP::SteeringData::HashBitIndexes const&) const</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, meshcop.o(.text._ZNK2ot7MeshCoP12SteeringData8ContainsERKNS1_14HashBitIndexesE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::MeshCoP::SteeringData::Contains(ot::MeshCoP::SteeringData::HashBitIndexes const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoveryResponse(ot::Mle::Mle::RxInfo&) const
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SteeringDataCheck(ot::MeshCoP::SteeringData::HashBitIndexes const&) const
</UL>

<P><STRONG><a name="[980]"></a>ot::MeshCoP::ChannelMaskTlv::GetChannelMask() const</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, meshcop_tlvs.o(.text._ZNK2ot7MeshCoP14ChannelMaskTlv14GetChannelMaskEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ot::MeshCoP::ChannelMaskTlv::GetChannelMask() const
</UL>
<BR>[Calls]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::GetValue() const
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::GetSize() const
</UL>
<BR>[Called By]<UL><LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::GetChannelMask(ot::Mac::ChannelMask&) const
</UL>

<P><STRONG><a name="[70f]"></a>ot::MeshCoP::DatasetManager::GetTimestamp() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dataset_manager.o(.text._ZNK2ot7MeshCoP14DatasetManager12GetTimestampEv))
<BR><BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleDataRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendPendingTimestampTlv()
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendActiveTimestampTlv()
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleLeaderData(ot::Mle::Mle::RxInfo&)
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAnnounce(ot::Mle::Mle::RxInfo&)
</UL>

<P><STRONG><a name="[751]"></a>ot::MeshCoP::DatasetManager::GetChannelMask(ot::Mac::ChannelMask&) const</STRONG> (Thumb, 82 bytes, Stack size 280 bytes, dataset_manager.o(.text._ZNK2ot7MeshCoP14DatasetManager14GetChannelMaskERNS_3Mac11ChannelMaskE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetManager::GetChannelMask(ot::Mac::ChannelMask&) const &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Dataset()
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::GetTlv(ot::MeshCoP::Tlv::Type) const
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ChannelMaskTlv::GetChannelMask() const
</UL>
<BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::GetNextAnnounceChannel(unsigned char&) const
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::PrepareAnnounceState()
</UL>

<P><STRONG><a name="[981]"></a>ot::MeshCoP::DatasetManager::SendGetRequest(ot::MeshCoP::Dataset::Components const&, unsigned char const*, unsigned char, otIp6Address const*) const</STRONG> (Thumb, 356 bytes, Stack size 96 bytes, dataset_manager.o(.text._ZNK2ot7MeshCoP14DatasetManager14SendGetRequestERKNS0_7Dataset10ComponentsEPKhhPK12otIp6Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetManager::SendGetRequest(ot::MeshCoP::Dataset::Components const&, unsigned char const*, unsigned char, otIp6Address const*) const &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tmf::MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetSendMgmtPendingGet
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetSendMgmtActiveGet
</UL>

<P><STRONG><a name="[982]"></a>ot::MeshCoP::DatasetManager::SendGetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, unsigned char*, unsigned char) const</STRONG> (Thumb, 248 bytes, Stack size 352 bytes, dataset_manager.o(.text._ZNK2ot7MeshCoP14DatasetManager15SendGetResponseERKNS_4Coap7MessageERKNS_3Ip611MessageInfoEPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetManager::SendGetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, unsigned char*, unsigned char) const &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Dataset()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewPriorityResponseMessage(ot::Coap::Message const&)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTo(ot::Message&) const
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::GetSize() const
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString() const
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::GetTlv(ot::MeshCoP::Tlv::Type) const
</UL>
<BR>[Called By]<UL><LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleGet(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) const
</UL>

<P><STRONG><a name="[770]"></a>ot::MeshCoP::DatasetManager::ApplyConfiguration() const</STRONG> (Thumb, 44 bytes, Stack size 280 bytes, dataset_manager.o(.text._ZNK2ot7MeshCoP14DatasetManager18ApplyConfigurationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetManager::ApplyConfiguration() const &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Dataset()
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ApplyConfiguration(ot::Instance&, bool*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::ActiveDatasetManager::HandleTmf&lang;(ot::Uri)12&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Reattach()
</UL>

<P><STRONG><a name="[786]"></a>ot::MeshCoP::DatasetManager::AppendMleDatasetTlv(ot::Message&) const</STRONG> (Thumb, 38 bytes, Stack size 280 bytes, dataset_manager_ftd.o(.text._ZNK2ot7MeshCoP14DatasetManager19AppendMleDatasetTlvERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetManager::AppendMleDatasetTlv(ot::Message&) const &rArr; ot::MeshCoP::Dataset::AppendMleDatasetTlv(ot::MeshCoP::Dataset::Type, ot::Message&) const &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Dataset()
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::AppendMleDatasetTlv(ot::MeshCoP::Dataset::Type, ot::Message&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendPendingDatasetTlv()
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendActiveDatasetTlv()
</UL>

<P><STRONG><a name="[8a3]"></a>ot::MeshCoP::DatasetManager::AppendDatasetToMessage(ot::MeshCoP::Dataset::Info const&, ot::Message&) const</STRONG> (Thumb, 38 bytes, Stack size 280 bytes, dataset_manager.o(.text._ZNK2ot7MeshCoP14DatasetManager22AppendDatasetToMessageERKNS0_7Dataset4InfoERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetManager::AppendDatasetToMessage(ot::MeshCoP::Dataset::Info const&, ot::Message&) const &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Dataset()
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetFrom(ot::MeshCoP::Dataset::Info const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSetRequest(ot::MeshCoP::Dataset::Info const&, unsigned char const*, unsigned char, void (*)(otError, void*), void*)
</UL>

<P><STRONG><a name="[8c0]"></a>ot::MeshCoP::DatasetManager::HandleGet(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) const</STRONG> (Thumb, 146 bytes, Stack size 104 bytes, dataset_manager.o(.text._ZNK2ot7MeshCoP14DatasetManager9HandleGetERKNS_4Coap7MessageERKNS_3Ip611MessageInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::DatasetManager::HandleGet(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) const &rArr; ot::MeshCoP::DatasetManager::SendGetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, unsigned char*, unsigned char) const &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ReadBytes(unsigned short, void*, unsigned short) const
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendGetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, unsigned char*, unsigned char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::PendingDatasetManager::HandleTmf&lang;(ot::Uri)25&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::MeshCoP::ActiveDatasetManager::HandleTmf&lang;(ot::Uri)11&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[973]"></a>ot::MeshCoP::NetworkNameTlv::GetNetworkName() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, meshcop_tlvs.o(.text._ZNK2ot7MeshCoP14NetworkNameTlv14GetNetworkNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ApplyConfiguration(ot::Instance&, bool*) const
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoveryResponse(ot::Mle::Mle::RxInfo&) const
</UL>

<P><STRONG><a name="[972]"></a>ot::MeshCoP::NetworkNameTlv::IsValid() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, meshcop_tlvs.o(.text._ZNK2ot7MeshCoP14NetworkNameTlv7IsValidEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IsValidUtf8String(char const*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoveryResponse(ot::Mle::Mle::RxInfo&) const
</UL>

<P><STRONG><a name="[8f2]"></a>ot::MeshCoP::JoinerDiscerner::GenerateJoinerId(ot::Mac::ExtAddress&) const</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, meshcop.o(.text._ZNK2ot7MeshCoP15JoinerDiscerner16GenerateJoinerIdERNS_3Mac10ExtAddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::JoinerDiscerner::GenerateJoinerId(ot::Mac::ExtAddress&) const &rArr; ot::Mac::ExtAddress::GenerateRandom() &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::GenerateRandom()
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerDiscerner::CopyTo(ot::Mac::ExtAddress&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SetDiscerner(ot::MeshCoP::JoinerDiscerner const&)
</UL>

<P><STRONG><a name="[89a]"></a>ot::MeshCoP::JoinerDiscerner::CopyTo(ot::Mac::ExtAddress&) const</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, meshcop.o(.text._ZNK2ot7MeshCoP15JoinerDiscerner6CopyToERNS_3Mac10ExtAddressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::JoinerDiscerner::CopyTo(ot::Mac::ExtAddress&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerDiscerner::GenerateJoinerId(ot::Mac::ExtAddress&) const
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SteeringData::CalculateHashBitIndexes(ot::MeshCoP::JoinerDiscerner const&, ot::MeshCoP::SteeringData::HashBitIndexes&)
</UL>

<P><STRONG><a name="[94c]"></a>ot::MeshCoP::SteeringDataTlv::CopyTo(ot::MeshCoP::SteeringData&) const</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, meshcop_tlvs.o(.text._ZNK2ot7MeshCoP15SteeringDataTlv6CopyToERNS0_12SteeringDataE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::SteeringDataTlv::CopyTo(ot::MeshCoP::SteeringData&) const &rArr; ot::MeshCoP::SteeringData::Init(unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SteeringData::Init(unsigned char)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SteeringDataCheck(ot::MeshCoP::SteeringData::HashBitIndexes const&) const
</UL>

<P><STRONG><a name="[984]"></a>ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy() const</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, meshcop_tlvs.o(.text._ZNK2ot7MeshCoP17SecurityPolicyTlv17GetSecurityPolicyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy() const &rArr; ot::SecurityPolicy::SetFlags(unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SecurityPolicy::SetFlags(unsigned char const*, unsigned char)
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SecurityPolicy::SetToDefault()
</UL>
<BR>[Called By]<UL><LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ApplyConfiguration(ot::Instance&, bool*) const
</UL>

<P><STRONG><a name="[8cb]"></a>ot::MeshCoP::ChannelMaskBaseTlv::IsValid() const</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, meshcop_tlvs.o(.text._ZNK2ot7MeshCoP18ChannelMaskBaseTlv7IsValidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::MeshCoP::ChannelMaskBaseTlv::IsValid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::GetValue() const
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::GetSize() const
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Tlv::IsValid(ot::MeshCoP::Tlv const&)
</UL>

<P><STRONG><a name="[771]"></a>ot::MeshCoP::ActiveDatasetManager::IsPartiallyComplete() const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dataset_manager.o(.text._ZNK2ot7MeshCoP20ActiveDatasetManager19IsPartiallyCompleteEv))
<BR><BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeLeader()
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Reattach()
</UL>

<P><STRONG><a name="[afb]"></a>ot::MeshCoP::Joiner::GetDiscerner() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, joiner.o(.text._ZNK2ot7MeshCoP6Joiner12GetDiscernerEv))
<BR><BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otJoinerGetDiscerner
</UL>

<P><STRONG><a name="[8f5]"></a>ot::MeshCoP::Joiner::LogCertMessage(char const*, ot::Coap::Message const&) const</STRONG> (Thumb, 62 bytes, Stack size 152 bytes, joiner.o(.text._ZNK2ot7MeshCoP6Joiner14LogCertMessageEPKcRKNS_4Coap7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Joiner::LogCertMessage(char const*, ot::Coap::Message const&) const &rArr; ot::Logger::DumpInModule(char const*, ot::LogLevel, char const*, void const*, unsigned short) &rArr; ot::Logger::DumpLine(char const*, ot::LogLevel, unsigned char const*, unsigned short) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ReadBytes(unsigned short, void*, unsigned short) const
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::DumpInModule(char const*, ot::LogLevel, char const*, void const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleJoinerFinalizeResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SendJoinerFinalize()
</UL>

<P><STRONG><a name="[8b0]"></a>ot::MeshCoP::Leader::GetDelayTimerMinimal() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, meshcop_leader.o(.text._ZNK2ot7MeshCoP6Leader20GetDelayTimerMinimalEv))
<BR><BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetGetDelayTimerMinimal
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::ApplyActiveDataset(ot::MeshCoP::Timestamp const&, ot::Coap::Message&)
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[883]"></a>ot::MeshCoP::Dataset::GetTimestamp(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Timestamp&) const</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dataset.o(.text._ZNK2ot7MeshCoP7Dataset12GetTimestampENS1_4TypeERNS0_9TimestampE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::MeshCoP::Dataset::GetTimestamp(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Timestamp&) const &rArr; ot::MeshCoP::Tlv::FindTlv(unsigned char const*, unsigned short, ot::MeshCoP::Tlv::Type)
</UL>
<BR>[Calls]<UL><LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Tlv::FindTlv(unsigned char const*, unsigned short, ot::MeshCoP::Tlv::Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSet()
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Restore()
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset const&)
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Restore(ot::MeshCoP::Dataset&)
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Save(ot::MeshCoP::Dataset const&)
</UL>

<P><STRONG><a name="[8ab]"></a>ot::MeshCoP::Dataset::ApplyConfiguration(ot::Instance&, bool*) const</STRONG> (Thumb, 320 bytes, Stack size 64 bytes, dataset.o(.text._ZNK2ot7MeshCoP7Dataset18ApplyConfigurationERNS_8InstanceEPb))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Dataset::ApplyConfiguration(ot::Instance&, bool*) const &rArr; ot::KeyManager::SetNetworkKey(ot::NetworkKey const&) &rArr; ot::KeyManager::UpdateKeyMaterial() &rArr; ot::KeyManager::ComputeKeys(unsigned int, ot::KeyManager::HashKeys&) const &rArr; ot::Crypto::HmacSha256::Start(ot::Crypto::Key const&) &rArr; otPlatCryptoHmacSha256Start &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetPanId(unsigned short)
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetPanChannel(unsigned char)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::IsValid() const
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)2&rang;(char const*, char const*, ...)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetPskc(ot::Pskc const&)
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::GetNetworkKey(ot::NetworkKey&) const
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ExtendedPanIdManager::SetExtPanId(ot::MeshCoP::ExtendedPanId const&)
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetMeshLocalPrefix(ot::Ip6::NetworkPrefix const&)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetNetworkKey(ot::NetworkKey const&)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::GetSize() const
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy() const
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkNameTlv::GetNetworkName() const
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkNameManager::SetNetworkName(ot::MeshCoP::NameData const&)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetSecurityPolicy(ot::SecurityPolicy const&)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::ApplyConfiguration() const
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Restore()
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset const&)
</UL>

<P><STRONG><a name="[983]"></a>ot::MeshCoP::Dataset::AppendMleDatasetTlv(ot::MeshCoP::Dataset::Type, ot::Message&) const</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, dataset.o(.text._ZNK2ot7MeshCoP7Dataset19AppendMleDatasetTlvENS1_4TypeERNS_7MessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Dataset::AppendMleDatasetTlv(ot::MeshCoP::Dataset::Type, ot::Message&) const &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTo(ot::Message&) const
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::GetSize() const
</UL>
<BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::AppendMleDatasetTlv(ot::Message&) const
</UL>

<P><STRONG><a name="[895]"></a>ot::MeshCoP::Dataset::GetTlv(ot::MeshCoP::Tlv::Type) const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dataset.o(.text._ZNK2ot7MeshCoP7Dataset6GetTlvENS0_3Tlv4TypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ot::MeshCoP::Dataset::GetTlv(ot::MeshCoP::Tlv::Type) const &rArr; ot::MeshCoP::Tlv::FindTlv(unsigned char const*, unsigned short, ot::MeshCoP::Tlv::Type)
</UL>
<BR>[Calls]<UL><LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Tlv::FindTlv(unsigned char const*, unsigned short, ot::MeshCoP::Tlv::Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::PrepareJoinerEntrustMessage()
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::GenerateLocal()
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendGetResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&, unsigned char*, unsigned char) const
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::GetChannelMask(ot::Mac::ChannelMask&) const
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::HandleDelayTimer()
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::StartDelayTimer()
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const
</UL>

<P><STRONG><a name="[90d]"></a>ot::MeshCoP::Dataset::IsValid() const</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dataset.o(.text._ZNK2ot7MeshCoP7Dataset7IsValidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ot::MeshCoP::Dataset::IsValid() const &rArr; ot::MeshCoP::Tlv::IsValid(ot::MeshCoP::Tlv const&) &rArr; ot::IsValidUtf8String(char const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::GetSize() const
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Tlv::IsValid(ot::MeshCoP::Tlv const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetParseTlvs
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ApplyConfiguration(ot::Instance&, bool*) const
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ReadFromMessage(ot::Message const&, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[97c]"></a>ot::MeshCoP::Dataset::ConvertTo(otOperationalDatasetTlvs&) const</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dataset.o(.text._ZNK2ot7MeshCoP7Dataset9ConvertToER24otOperationalDatasetTlvs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::MeshCoP::Dataset::ConvertTo(otOperationalDatasetTlvs&) const &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetUpdateTlvs
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetConvertToTlvs
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(otOperationalDatasetTlvs&) const
</UL>

<P><STRONG><a name="[97e]"></a>ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const</STRONG> (Thumb, 394 bytes, Stack size 48 bytes, dataset.o(.text._ZNK2ot7MeshCoP7Dataset9ConvertToERNS1_4InfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const &rArr; ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy() const &rArr; ot::SecurityPolicy::SetFlags(unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::GetSize() const
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Timestamp::ConvertTo(otTimestamp&) const
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy() const
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkNameTlv::GetNetworkName() const
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ChannelMaskTlv::GetChannelMask() const
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkName::Set(ot::MeshCoP::NameData const&)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetParseTlvs
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset::Info&) const
</UL>

<P><STRONG><a name="[8b2]"></a>ot::MeshCoP::NameData::CopyTo(char*, unsigned char) const</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, network_name.o(.text._ZNK2ot7MeshCoP8NameData6CopyToEPch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ot::MeshCoP::NameData::CopyTo(char*, unsigned char) const &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkNameTlv::SetNetworkName(ot::MeshCoP::NameData const&)
</UL>

<P><STRONG><a name="[985]"></a>ot::MeshCoP::Timestamp::ConvertTo(otTimestamp&) const</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timestamp.o(.text._ZNK2ot7MeshCoP9Timestamp9ConvertToER11otTimestamp))
<BR><BR>[Called By]<UL><LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const
</UL>

<P><STRONG><a name="[759]"></a>ot::Message::CompareBytes(unsigned short, void const*, unsigned short, bool (*)(unsigned char, unsigned char)) const</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, message.o(.text._ZNK2ot7Message12CompareBytesEtPKvtPFbhhE))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = ot::Message::CompareBytes(unsigned short, void const*, unsigned short, bool (*)(unsigned char, unsigned char)) const &rArr; ot::DataUtils::MatchBytes(unsigned char const*, unsigned char const*, unsigned short, bool (*)(unsigned char, unsigned char)) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataUtils::MatchBytes(unsigned char const*, unsigned char const*, unsigned short, bool (*)(unsigned char, unsigned char))
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&)
</UL>

<P><STRONG><a name="[420]"></a>ot::Message::GetChildMask(unsigned short) const</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, message.o(.text._ZNK2ot7Message12GetChildMaskEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::Message::GetChildMask(unsigned short) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleSentFrameToChild(ot::Mac::TxFrame const&, ot::IndirectSenderBase::FrameContext const&, otError, ot::Child&)
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child&)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::AddMessageForSleepyChild(ot::Message&, ot::Child&)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleChildModeChange(ot::Child&, ot::Mle::DeviceMode)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::RequestMessageUpdate(ot::Child&)
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::FindIndirectMessage(ot::Child&, bool)
</UL>

<P><STRONG><a name="[84d]"></a>ot::Message::GetNextChunk(unsigned short&, ot::Message::Chunk&) const</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, message.o(.text._ZNK2ot7Message12GetNextChunkERtRNS0_5ChunkE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::Message::GetNextChunk(unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Payload(ot::Message&, unsigned short, unsigned short, ot::Crypto::AesCcm::Mode)
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Checksum::Calculate(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned char, ot::Message const&)
</UL>

<P><STRONG><a name="[397]"></a>ot::Message::IsSubTypeMle() const</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, message.o(.text._ZNK2ot7Message12IsSubTypeMleEv))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateIp6Route(ot::Message&)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool)
</UL>

<P><STRONG><a name="[84c]"></a>ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, message.o(.text._ZNK2ot7Message13GetFirstChunkEtRtRNS0_5ChunkE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ReadBytes(unsigned short, void*, unsigned short) const
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Payload(ot::Message&, unsigned short, unsigned short, ot::Crypto::AesCcm::Mode)
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::CompareBytes(unsigned short, void const*, unsigned short, bool (*)(unsigned char, unsigned char)) const
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytesFromMessage(unsigned short, ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Checksum::Calculate(ot::Ip6::Address const&, ot::Ip6::Address const&, unsigned char, ot::Message const&)
</UL>

<P><STRONG><a name="[368]"></a>ot::Message::IsChildPending() const</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, message.o(.text._ZNK2ot7Message14IsChildPendingEv))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::EvictMessage(ot::Message::Priority)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessageIfNoPendingTx(ot::Message&)
</UL>

<P><STRONG><a name="[289]"></a>ot::Message::Read(unsigned short, void*, unsigned short) const</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, message.o(.text._ZNK2ot7Message4ReadEtPvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ReadBytes(unsigned short, void*, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::GetNextDiagTlv(ot::Coap::Message const&, unsigned short&, otNetworkDiagTlv&)
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Option::Iterator::Advance()
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Option::Iterator::ReadExtendedOptionField(unsigned short&)
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::Metadata::ReadFrom(ot::Coap::Message const&)
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::ParseHeader()
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::ResponseMetadata::ReadFrom(ot::Coap::Message const&)
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::ParsedInfo::ParseFrom(ot::Message const&, unsigned short)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ChannelMaskTlv::GetChannelMask(ot::Message const&)
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata::ReadFrom(ot::Message const&)
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleSet(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::DatasetTlv::ReadFromMessage(ot::Message const&, unsigned short)
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleGet(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) const
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ReadFromMessage(ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoveryResponse(ot::Mle::Mle::RxInfo&) const
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildSupervisor::GetDestination(ot::Message const&) const
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::HandleIcmpReceive(ot::Message&, ot::Ip6::MessageInfo const&, ot::Ip6::Icmp::Header const&)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError)
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::Metadata::ReadFrom(ot::Message const&)
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::AddBufferedMessage(ot::Message&, unsigned short, unsigned char, bool)
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Option::ParseFrom(ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Header::ParseFrom(ot::Message const&)
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::HandleMessage(ot::Message&, ot::Ip6::MessageInfo&)
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::ProcessOption(ot::Message&, unsigned short, ot::Ip6::Address const&, bool, bool&)
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleExtensionHeaders(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&, ot::Ip6::Header&, unsigned char&, bool&)
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char)
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::RemoveMplOption(ot::Message&)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleDatagram(ot::Message&, ot::Ip6::Ip6::MessageOrigin, void const*, bool)
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendIcmpError(ot::Message&, ot::Ip6::Icmp::Header::Type, ot::Ip6::Icmp::Header::Code)
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleOptions(ot::Message&, ot::Ip6::Header&, bool, bool&)
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::PassToHost(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo const&, unsigned char, bool, ot::Message::Ownership)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMessage(ot::Message&)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Headers::ParseFrom(ot::Message const&)
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::HandleEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Icmp::HandleMessage(ot::Message&, ot::Ip6::MessageInfo&)
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleDiscoveryRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::DelayedResponseMetadata::ReadFrom(ot::Message const&)
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleUdpReceive(ot::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SetNetworkData(unsigned char, unsigned char, ot::NetworkData::Type, ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveDataResponseMessages()
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessages(ot::Child&, ot::Message::SubType)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateEcnOrDrop(ot::Message&, bool)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateIp6Route(ot::Message&)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::DecompressEcn(ot::Message const&, unsigned short) const
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::Compress(ot::Message&, ot::Mac::Addresses const&, ot::FrameBuilder&, unsigned char&)
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressExtensionHeader(ot::Message&, ot::FrameBuilder&, unsigned char&)
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::Lowpan::CompressUdp(ot::Message&, ot::FrameBuilder&)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::PrepareDataFrame(ot::Mac::TxFrame&, ot::Child&, ot::Message&)
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::PingSender::HandleIcmpReceive(ot::Message const&, ot::Ip6::MessageInfo const&, ot::Ip6::Icmp::Header const&)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkDiagnostic::Server::HandleTmf&lang;(ot::Uri)35&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Server::AppendRequestedTlvs(ot::Message const&, ot::Message&)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::SendCommissioningGetResponse(ot::Coap::Message const&, unsigned short, ot::Ip6::MessageInfo const&)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::ParseMulticastListenerRegistrationResponse(otError, ot::Coap::Message*, unsigned char&, ot::Ip6::Address*, unsigned char&)
</UL>

<P><STRONG><a name="[61a]"></a>ot::Message::Clone(unsigned short) const</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, message.o(.text._ZNK2ot7Message5CloneEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::Free(ot::Message*)
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Clone(unsigned short) const
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::HandleRetransmissionTimer()
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::AddBufferedMessage(ot::Message&, unsigned short, unsigned char, bool)
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandlePayload(ot::Ip6::Header&, ot::Message&, ot::Ip6::MessageInfo&, unsigned char, ot::Message::Ownership)
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::PassToHost(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo const&, unsigned char, bool, ot::Message::Ownership)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char)
</UL>

<P><STRONG><a name="[331]"></a>ot::Message::GetNext() const</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, message.o(.text._ZNK2ot7Message7GetNextEv))
<BR><BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::begin()
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::EvictMessage(ot::Message::Priority)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::begin()
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::GetInfo(otMessageQueueInfo&) const
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::GetInfo(otMessageQueueInfo&) const
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::FindMatchedResponse(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) const
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Iterator::Advance()
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::MessageQueue::begin()
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendChildUpdateRequest(ot::Child&)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::IsDirectTxQueueOverMaxFrameThreshold() const
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareNextDirectTransmission()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveAgedMessages()
</UL>

<P><STRONG><a name="[2ec]"></a>ot::Message::ReadBytes(unsigned short, void*, unsigned short) const</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, message.o(.text._ZNK2ot7Message9ReadBytesEtPvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::GetNextDiagTlv(ot::Coap::Message const&, unsigned short&, otNetworkDiagTlv&)
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageRead
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Send(ot::Message&, unsigned short)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Read(unsigned short, void*, unsigned short) const
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::ReadUriPathOptions(char (&) [33]) const
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, unsigned short, ot::Tlv&)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::FindTlv(ot::Message const&, unsigned char, void*, unsigned char)
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::ReadTlvValue(ot::Message const&, unsigned short, void*, unsigned char)
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytesFromMessage(unsigned short, ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::LogCertMessage(char const*, ot::Coap::Message const&) const
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsReceive(unsigned char*, unsigned int)
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::HandleGet(ot::Coap::Message const&, ot::Ip6::MessageInfo const&) const
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Headers::DecompressFrom(ot::Message const&, unsigned short, ot::Mac::Addresses const&)
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadChallengeOrResponse(unsigned char, ot::Mle::Mle::Challenge&) const
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::RxMessage::ReadTlvRequestTlv(ot::Mle::Mle::TlvList&) const
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMesh(ot::Message&, ot::Mac::TxFrame&)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::FragmentHeader::ParseFrom(ot::Message const&, unsigned short, unsigned short&)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::MeshHeader::ParseFrom(ot::Message const&, unsigned short&)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Lowpan::MeshHeader::ParseFrom(ot::Message const&)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::NetworkData::Leader::HandleTmf&lang;(ot::Uri)16&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[218]"></a>ot::Neighbor::MatchesFilter(ot::Neighbor::StateFilter) const</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, topology.o(.text._ZNK2ot8Neighbor13MatchesFilterENS0_11StateFilterE))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Advance()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::GetNumChildren(ot::Neighbor::StateFilter) const
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Iterator::Reset()
</UL>

<P><STRONG><a name="[204]"></a>ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, topology.o(.text._ZNK2ot8Neighbor14AddressMatcher7MatchesERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::MatchesFilter(ot::Neighbor::StateFilter) const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::FindChild(ot::Mac::Address const&, ot::Neighbor::StateFilter)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::FindChild(ot::Neighbor::AddressMatcher const&) const
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::FindChild(unsigned short, ot::Neighbor::StateFilter)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::FindChild(ot::Mac::ExtAddress const&, ot::Neighbor::StateFilter)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::GetNewChild()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::HasChildren(ot::Neighbor::StateFilter) const
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::FindRouter(ot::Mac::ExtAddress const&)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::FindRouter(ot::Neighbor::AddressMatcher const&) const
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::FindParent(ot::Neighbor::AddressMatcher const&)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::FindNeighbor(ot::Mac::Address const&)
</UL>

<P><STRONG><a name="[936]"></a>ot::Notifier::LogEvents(ot::Events) const</STRONG> (Thumb, 264 bytes, Stack size 152 bytes, notifier.o(.text._ZNK2ot8Notifier9LogEventsENS_6EventsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ot::Notifier::LogEvents(ot::Events) const &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::StringWriter__sub_object(char*, unsigned short)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::Append(char const*, ...)
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::Clear()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::EmitEvents()
</UL>

<P><STRONG><a name="[97f]"></a>ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, settings.o(.text._ZNK2ot8Settings22ReadOperationalDatasetENS_7MeshCoP7Dataset4TypeERS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsGet
</UL>
<BR>[Called By]<UL><LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const
</UL>

<P><STRONG><a name="[766]"></a>ot::Settings::ReadEntry(ot::SettingsBase::Key, void*, unsigned short) const</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, settings.o(.text._ZNK2ot8Settings9ReadEntryENS_12SettingsBase3KeyEPvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ot::Settings::ReadEntry(ot::SettingsBase::Key, void*, unsigned short) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsGet
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::Log(ot::SettingsBase::Action, otError, ot::SettingsBase::Key, void const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Restore()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Store()
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::GetIidSecretKey(ot::Utils::Slaac::IidSecretKey&) const
</UL>

<P><STRONG><a name="[986]"></a>__app_task_signal</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, app_task.o(.text.__app_task_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __app_task_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_data_send
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_tx_callback
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart2_rx_callback
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart1_rx_callback
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udp_received_queue_push
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_stateChangeCallback
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerCallback
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
<LI><a href="#[b79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_queue
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_queue
</UL>

<P><STRONG><a name="[989]"></a>__das_dlms_task</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, das_dlms_cmd.o(.text.__das_dlms_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 2316 + Unknown Stack Size
<LI>Call Chain = __das_dlms_task &rArr; ReceiveCommand_Queue_processing &rArr; udf_Set_Transmit &rArr; udf_AES_GCM_Encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_command
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Queue_processing
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCommand_Queue_processing
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AAFIRST
</UL>
<BR>[Called By]<UL><LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task
</UL>

<P><STRONG><a name="[993]"></a>__uart1_data_parse</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, app_uart.o(.text.__uart1_data_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __uart1_data_parse &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_uart_ioctl
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_task
</UL>

<P><STRONG><a name="[996]"></a>__uart2_data_parse</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, app_uart.o(.text.__uart2_data_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 3692 + Unknown Stack Size
<LI>Call Chain = __uart2_data_parse &rArr; udf_Meter_received_task &rArr; udf_Meter_Process &rArr; Set_TOU_C2 &rArr; udf_Set_Transmit &rArr; udf_AES_GCM_Encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_uart_ioctl
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_received_task
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_task
</UL>

<P><STRONG><a name="[998]"></a>__uart_task</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, app_uart.o(.text.__uart_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 3724 + Unknown Stack Size
<LI>Call Chain = __uart_task &rArr; __uart2_data_parse &rArr; udf_Meter_received_task &rArr; udf_Meter_Process &rArr; Set_TOU_C2 &rArr; udf_Set_Transmit &rArr; udf_AES_GCM_Encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_uart_ioctl
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart2_data_parse
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart1_data_parse
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task
</UL>

<P><STRONG><a name="[999]"></a>__udp_task</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, app_udp.o(.text.__udp_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 2668 + Unknown Stack Size
<LI>Call Chain = __udp_task &rArr; evaluate_commandAM1 &rArr; Set_TOU_C2 &rArr; udf_Set_Transmit &rArr; udf_AES_GCM_Encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_commandAM1
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task
</UL>

<P><STRONG><a name="[9b0]"></a>app_main</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, main.o(.text.app_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 3740 + Unknown Stack Size
<LI>Call Chain = app_main &rArr; app_task &rArr; __uart_task &rArr; __uart2_data_parse &rArr; udf_Meter_received_task &rArr; udf_Meter_Process &rArr; Set_TOU_C2 &rArr; udf_Set_Transmit &rArr; udf_AES_GCM_Encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_Start
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_init
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrStart
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_init
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_entry
</UL>

<P><STRONG><a name="[9b8]"></a>app_sockInit</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, app_udp.o(.text.app_sockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = app_sockInit &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otUdpOpen
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otUdpBind
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrInitUser
</UL>

<P><STRONG><a name="[9b6]"></a>app_task</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, app_task.o(.text.app_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 3724 + Unknown Stack Size
<LI>Call Chain = app_task &rArr; __uart_task &rArr; __uart2_data_parse &rArr; udf_Meter_received_task &rArr; udf_Meter_Process &rArr; Set_TOU_C2 &rArr; udf_Set_Transmit &rArr; udf_AES_GCM_Encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udp_task
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_task
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__das_dlms_task
</UL>
<BR>[Called By]<UL><LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[198]"></a>app_uart_data_send</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, app_uart.o(.text.app_uart_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = app_uart_data_send &rArr; __app_task_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__app_task_signal
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerCallback
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Send_SNRM
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Send_DISC
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_get_noEn
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Set_Transmit
<LI><a href="#[b7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Send_AARQ
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Get_New_Number_of_pens
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_GetData_Request
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Action_Transmit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_Command
</UL>

<P><STRONG><a name="[9ba]"></a>app_uart_init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, app_uart.o(.text.app_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = app_uart_init &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_uart_ioctl
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_uart_init
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_uart_callback_set
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task
</UL>

<P><STRONG><a name="[19a]"></a>app_udpSend</STRONG> (Thumb, 122 bytes, Stack size 72 bytes, app_udp.o(.text.app_udpSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = app_udpSend &rArr; otUdpSend &rArr; ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageFree
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageAppend
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otUdpSend
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otUdpNewMessage
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrGetInstance
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_udpsend
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udp_cb
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Queue_processing
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Broadcast_function_timeout_handlr
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Rafael_data
</UL>

<P><STRONG><a name="[9bf]"></a>app_udp_received_queue_push</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, app_udp.o(.text.app_udp_received_queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = app_udp_received_queue_push &rArr; __app_task_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__app_task_signal
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udp_cb
</UL>

<P><STRONG><a name="[9b4]"></a>cli_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cli_1.o(.text.cli_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cli_init &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[22]"></a>commsubsystem_handler</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, rf_mcu.o(.text.commsubsystem_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = commsubsystem_handler &rArr; RfMcu_AhbIsrHandler &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_AhbIsrHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[9d0]"></a>crc32checksum</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, ot_ota_handler.o(.text.crc32checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = crc32checksum &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[b46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bootloader_info_check
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[99d]"></a>debug_flag_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, debug_1.o(.text.debug_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_debug
</UL>

<P><STRONG><a name="[99c]"></a>debug_flag_setting</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, debug_1.o(.text.debug_flag_setting))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_debug
</UL>

<P><STRONG><a name="[17]"></a>dma0_c0_handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dma.o(.text.dma0_c0_handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>dma0_c1_handler</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, dma.o(.text.dma0_c1_handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>dma0_c2_handler</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, dma.o(.text.dma0_c2_handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>dma0_c3_handler</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, dma.o(.text.dma0_c3_handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[a50]"></a>dma_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dma.o(.text.dma_init))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b82]"></a>eTaskConfirmSleepModeStatus</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tasks.o(.text.eTaskConfirmSleepModeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[9de]"></a>eTaskGetState</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, tasks.o(.text.eTaskGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = eTaskGetState &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[9d5]"></a>efd_calc_crc32</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, efd_utils.o(.text.efd_calc_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = efd_calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_env_cache
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>

<P><STRONG><a name="[a10]"></a>efd_del_env</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, efd_kv.o(.text.efd_del_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = efd_del_env &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_env_unlock
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_env_lock
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
</UL>
<BR>[Called By]<UL><LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsDelete
</UL>

<P><STRONG><a name="[a13]"></a>efd_env_init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, efd_kv.o(.text.efd_env_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = efd_env_init &rArr; efd_load_env &rArr; efd_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_load_env
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enhanced_flash_dataset_init
</UL>

<P><STRONG><a name="[a15]"></a>efd_env_set_default</STRONG> (Thumb, 232 bytes, Stack size 72 bytes, efd_kv.o(.text.efd_env_set_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = efd_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_env_unlock
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_env_lock
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsWipe
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_load_env
</UL>

<P><STRONG><a name="[a16]"></a>efd_get_env_blob</STRONG> (Thumb, 92 bytes, Stack size 112 bytes, efd_kv.o(.text.efd_get_env_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = efd_get_env_blob &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_read
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_env_unlock
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_env_lock
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
</UL>
<BR>[Called By]<UL><LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsGet
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsDelete
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsAdd
</UL>

<P><STRONG><a name="[a17]"></a>efd_get_env_obj</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, efd_kv.o(.text.efd_get_env_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = efd_get_env_obj &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_env_unlock
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_env_lock
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
</UL>
<BR>[Called By]<UL><LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsGet
</UL>

<P><STRONG><a name="[a14]"></a>efd_load_env</STRONG> (Thumb, 160 bytes, Stack size 160 bytes, efd_kv.o(.text.efd_load_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = efd_load_env &rArr; efd_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_env_unlock
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_env_lock
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_env_set_default
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
</UL>
<BR>[Called By]<UL><LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_env_init
</UL>

<P><STRONG><a name="[a11]"></a>efd_port_env_lock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, efd_port.o(.text.efd_port_env_lock))
<BR><BR>[Calls]<UL><LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsGet
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsDelete
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsAdd
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_set_env_blob
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_load_env
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_get_env_obj
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_get_env_blob
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_env_set_default
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_del_env
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[a12]"></a>efd_port_env_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, efd_port.o(.text.efd_port_env_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = efd_port_env_unlock &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsGet
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsDelete
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsAdd
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_set_env_blob
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_load_env
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_get_env_obj
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_get_env_blob
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_env_set_default
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_del_env
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[a1b]"></a>efd_port_erase</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, efd_port.o(.text.efd_port_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = efd_port_erase &rArr; flash_erase &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>

<P><STRONG><a name="[a20]"></a>efd_port_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, efd_port.o(.text.efd_port_init))
<BR><BR>[Called By]<UL><LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enhanced_flash_dataset_init
</UL>

<P><STRONG><a name="[9db]"></a>efd_port_read</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, efd_port.o(.text.efd_port_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = efd_port_read &rArr; flash_read_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_page
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_byte
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_get_env_blob
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_env_addr
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
</UL>

<P><STRONG><a name="[9c8]"></a>efd_port_write</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, efd_port.o(.text.efd_port_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_page
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_byte
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_env_cb
</UL>

<P><STRONG><a name="[a1e]"></a>efd_set_env_blob</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, efd_kv.o(.text.efd_set_env_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_env_unlock
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_env_lock
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsGet
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsDelete
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[a40]"></a>enable_perclk</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sysctrl.o(.text.enable_perclk))
<BR><BR>[Called By]<UL><LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_uart_init
</UL>

<P><STRONG><a name="[a1f]"></a>enhanced_flash_dataset_init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, enhancedflashdataset.o(.text.enhanced_flash_dataset_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = enhanced_flash_dataset_init &rArr; efd_env_init &rArr; efd_load_env &rArr; efd_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_init
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_env_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c3]"></a>enter_critical_section</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sysfun.o(.text.enter_critical_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = enter_critical_section &rArr; vPortEnterCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_MemorySetAhb
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_MemoryGetAhb
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_page
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_byte
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sec_register
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_page
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_byte
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_unique_id
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_data_send
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udp_received_queue_push
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_stateChangeCallback
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_stdio_read
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_timer_handler
<LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_reg_table_remove
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_reg_table_add
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerCallback
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
<LI><a href="#[b79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_queue
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_queue
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_IoSetAhb
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_IoGetAhb
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_AhbIsrHandler
<LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_tx_pwr_set
<LI><a href="#[b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_rssi_offset_set
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_pta_default_set
<LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_pmu_operation_mode
<LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_cal_set
</UL>

<P><STRONG><a name="[99a]"></a>evaluate_commandAM1</STRONG> (Thumb, 2288 bytes, Stack size 368 bytes, das_dlms_cmd.o(.text.evaluate_commandAM1))
<BR><BR>[Stack]<UL><LI>Max Depth = 2644 + Unknown Stack Size
<LI>Call Chain = evaluate_commandAM1 &rArr; Set_TOU_C2 &rArr; udf_Set_Transmit &rArr; udf_AES_GCM_Encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_page
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Set_Transmit
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Rafael_data
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_AES_GCM_Decrypt
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_queue
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashData
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TOU_C2
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_Command
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udp_task
</UL>

<P><STRONG><a name="[1e8]"></a>flash_erase</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, flashctl.o(.text.flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = flash_erase &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
</UL>
<BR>[Called By]<UL><LI><a href="#[b46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bootloader_info_check
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bootinfo_reset
<LI><a href="#[b44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_erase
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashData
</UL>

<P><STRONG><a name="[1a2]"></a>flash_get_deviceinfo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, flashctl.o(.text.flash_get_deviceinfo))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPmuUpdateDcdc
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMpSectorInfo
</UL>

<P><STRONG><a name="[a2a]"></a>flash_get_unique_id</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, flashctl.o(.text.flash_get_unique_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = flash_get_unique_id &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
</UL>
<BR>[Called By]<UL><LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioInit
</UL>

<P><STRONG><a name="[a1c]"></a>flash_read_byte</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, flashctl.o(.text.flash_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = flash_read_byte &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
</UL>
<BR>[Called By]<UL><LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_read
</UL>

<P><STRONG><a name="[1b2]"></a>flash_read_otp_sec_page</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, flashctl.o(.text.flash_read_otp_sec_page))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtpToMpCalibration
</UL>

<P><STRONG><a name="[1e7]"></a>flash_read_page</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, flashctl.o(.text.flash_read_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = flash_read_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
</UL>
<BR>[Called By]<UL><LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_commandAM1
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_init
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_read
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_Information
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashData
</UL>

<P><STRONG><a name="[a2b]"></a>flash_read_sec_register</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, flashctl.o(.text.flash_read_sec_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = flash_read_sec_register &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
</UL>
<BR>[Called By]<UL><LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioInit
</UL>

<P><STRONG><a name="[19d]"></a>flash_timing_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, flashctl.o(.text.flash_timing_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_timing_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Ahb_System_Clk
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Ahb_System_Clk
</UL>

<P><STRONG><a name="[a1d]"></a>flash_write_byte</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, flashctl.o(.text.flash_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = flash_write_byte &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_write
</UL>

<P><STRONG><a name="[1e9]"></a>flash_write_page</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, flashctl.o(.text.flash_write_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
</UL>
<BR>[Called By]<UL><LI><a href="#[b46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bootloader_info_check
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bootinfo_reset
<LI><a href="#[b44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_write
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashData
</UL>

<P><STRONG><a name="[d0]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, debug_1.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_stdio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0printf)
<LI> printfa.o(i.__0vprintf)
</UL>
<P><STRONG><a name="[b35]"></a>get_random_number</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sysctrl.o(.text.get_random_number))
<BR><BR>[Called By]<UL><LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_entropy_init
</UL>

<P><STRONG><a name="[a31]"></a>gpio_cfg</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, gpio.o(.text.gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_cfg &rArr; pin_set_pullopt
</UL>
<BR>[Calls]<UL><LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_set_pullopt
</UL>
<BR>[Called By]<UL><LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_init
<LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_gpio29
</UL>

<P><STRONG><a name="[e]"></a>gpio_handler</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gpio.o(.text.gpio_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[b7b]"></a>gpio_register_isr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gpio.o(.text.gpio_register_isr))
<BR><BR>[Called By]<UL><LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_gpio29
</UL>

<P><STRONG><a name="[a45]"></a>hosal_rf_callback_set</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hosal_rf.o(.text.hosal_rf_callback_set))
<BR><BR>[Called By]<UL><LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_init
</UL>

<P><STRONG><a name="[9b2]"></a>hosal_rf_init</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, hosal_rf.o(.text.hosal_rf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = hosal_rf_init &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_init_by_fw
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_DmaInit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[a37]"></a>hosal_rf_ioctl</STRONG> (Thumb, 2488 bytes, Stack size 80 bytes, hosal_rf.o(.text.hosal_rf_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_write_tx_data
<LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_wrire_command
<LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_read_event
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_MemorySet
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_MemoryGet
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpCalRftrimRead
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_init
<LI><a href="#[b3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_ctrl_filter_set
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_tx_data_send
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_src_match_short_entry
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_src_match_extended_entry
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_src_match_ctrl
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_read_rssi
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_read_ack
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_phy_pib_set
<LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_mac_pib_set
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_key_set
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_channel_set
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_auto_state_set
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_auto_ack_set
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_address_filter_set
<LI><a href="#[b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_ctrl_sleep_set
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_ctrl_sfd_set
<LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_ctrl_preamble_set
<LI><a href="#[b3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_ctrl_modem_config_set
<LI><a href="#[b3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_ctrl_mac_set
<LI><a href="#[b39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_ctrl_idle_set
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_ctrl_frequency_set
</UL>

<P><STRONG><a name="[a39]"></a>hosal_rf_read_event</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, hosal_rf.o(.text.hosal_rf_read_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>

<P><STRONG><a name="[a38]"></a>hosal_rf_wrire_command</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, hosal_rf.o(.text.hosal_rf_wrire_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = hosal_rf_wrire_command &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_PowerStateCheck
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_HostWakeUpMcu
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_CmdQueueSend
</UL>
<BR>[Called By]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>

<P><STRONG><a name="[a3a]"></a>hosal_rf_write_tx_data</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, hosal_rf.o(.text.hosal_rf_write_tx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = hosal_rf_write_tx_data &rArr; RfMcu_TxQueueSendById &rArr; RfMcu_TxQueueSendAhb &rArr; RfMcu_IoSetAhb &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_TxQueueSendById
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_PowerStateCheck
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_MemoryGet
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_HostWakeUpMcu
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>

<P><STRONG><a name="[9bd]"></a>hosal_uart_callback_set</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, hosal_uart.o(.text.hosal_uart_callback_set))
<BR><BR>[Called By]<UL><LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_stdio_init
</UL>

<P><STRONG><a name="[9bc]"></a>hosal_uart_init</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, hosal_uart.o(.text.hosal_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hosal_uart_init &rArr; pin_set_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_set_mode
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_perclk
</UL>
<BR>[Called By]<UL><LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_stdio_init
</UL>

<P><STRONG><a name="[994]"></a>hosal_uart_ioctl</STRONG> (Thumb, 452 bytes, Stack size 16 bytes, hosal_uart.o(.text.hosal_uart_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hosal_uart_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart2_data_parse
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart1_data_parse
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_task
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_stdio_init
</UL>

<P><STRONG><a name="[995]"></a>hosal_uart_receive</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, hosal_uart.o(.text.hosal_uart_receive))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart2_rx_callback
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart1_rx_callback
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uartstdio_rx_callback
</UL>

<P><STRONG><a name="[b1c]"></a>hosal_uart_send</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hosal_uart.o(.text.hosal_uart_send))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatUartSend
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_stdio_write
</UL>

<P><STRONG><a name="[1c4]"></a>leave_critical_section</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sysfun.o(.text.leave_critical_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_MemorySetAhb
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_MemoryGetAhb
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_page
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_byte
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sec_register
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_page
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_byte
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_unique_id
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_data_send
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udp_received_queue_push
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_stateChangeCallback
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_stdio_read
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_timer_handler
<LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_reg_table_remove
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_reg_table_add
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerCallback
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
<LI><a href="#[b79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_queue
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_queue
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_IoSetAhb
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_IoGetAhb
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_AhbIsrHandler
<LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_tx_pwr_set
<LI><a href="#[b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_rssi_offset_set
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_pta_default_set
<LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_pmu_operation_mode
<LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_cal_set
</UL>

<P><STRONG><a name="[992]"></a>lmac15p4_TxDoneEvent</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, lmac15p4_1.o(.text.lmac15p4_TxDoneEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = lmac15p4_TxDoneEvent &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[a41]"></a>lmac15p4_address_filter_set</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, lmac15p4_1.o(.text.lmac15p4_address_filter_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = lmac15p4_address_filter_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSetPromiscuous
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSetPanId
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSetShortAddress
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSetExtendedAddress
</UL>

<P><STRONG><a name="[a42]"></a>lmac15p4_auto_ack_set</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, lmac15p4_1.o(.text.lmac15p4_auto_ack_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = lmac15p4_auto_ack_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioInit
</UL>

<P><STRONG><a name="[a43]"></a>lmac15p4_auto_state_set</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, lmac15p4_1.o(.text.lmac15p4_auto_state_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = lmac15p4_auto_state_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSleep
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioReceive
<LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioInit
</UL>

<P><STRONG><a name="[b37]"></a>lmac15p4_cb_set</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, lmac15p4_1.o(.text.lmac15p4_cb_set))
<BR><BR>[Called By]<UL><LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioInit
</UL>

<P><STRONG><a name="[a44]"></a>lmac15p4_channel_set</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, lmac15p4_1.o(.text.lmac15p4_channel_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = lmac15p4_channel_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioEnergyScan
</UL>

<P><STRONG><a name="[9b3]"></a>lmac15p4_init</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, lmac15p4_1.o(.text.lmac15p4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = lmac15p4_init &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_callback_set
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[a46]"></a>lmac15p4_key_set</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, lmac15p4_1.o(.text.lmac15p4_key_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = lmac15p4_key_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSetMacKey
</UL>

<P><STRONG><a name="[a47]"></a>lmac15p4_mac_pib_set</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, lmac15p4_1.o(.text.lmac15p4_mac_pib_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = lmac15p4_mac_pib_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioInit
</UL>

<P><STRONG><a name="[a48]"></a>lmac15p4_phy_pib_set</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, lmac15p4_1.o(.text.lmac15p4_phy_pib_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = lmac15p4_phy_pib_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSetCcaEnergyDetectThreshold
<LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioInit
</UL>

<P><STRONG><a name="[1f5]"></a>lmac15p4_read_ack</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, lmac15p4_1.o(.text.lmac15p4_read_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = lmac15p4_read_ack &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[a49]"></a>lmac15p4_read_rssi</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, lmac15p4_1.o(.text.lmac15p4_read_rssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = lmac15p4_read_rssi &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetRssi
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioEnergyScan
</UL>

<P><STRONG><a name="[a4a]"></a>lmac15p4_src_match_ctrl</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, lmac15p4_1.o(.text.lmac15p4_src_match_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = lmac15p4_src_match_ctrl &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioEnableSrcMatch
<LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioInit
</UL>

<P><STRONG><a name="[a4b]"></a>lmac15p4_src_match_extended_entry</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, lmac15p4_1.o(.text.lmac15p4_src_match_extended_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = lmac15p4_src_match_extended_entry &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radio_extend_addr_ctrl
</UL>

<P><STRONG><a name="[a4c]"></a>lmac15p4_src_match_short_entry</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, lmac15p4_1.o(.text.lmac15p4_src_match_short_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = lmac15p4_src_match_short_entry &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radio_short_addr_ctrl
</UL>

<P><STRONG><a name="[a4d]"></a>lmac15p4_tx_data_send</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, lmac15p4_1.o(.text.lmac15p4_tx_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = lmac15p4_tx_data_send &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioTransmit
</UL>

<P><STRONG><a name="[2f]"></a>main</STRONG> (Thumb, 352 bytes, Stack size 8 bytes, rt_main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = main &rArr; enhanced_flash_dataset_init &rArr; efd_env_init &rArr; efd_load_env &rArr; efd_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_set_mode
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortDefineHeapRegions
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_stdio_init
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enhanced_flash_dataset_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[a52]"></a>mbedtls_aes_cmac_prf_128</STRONG> (Thumb, 136 bytes, Stack size 72 bytes, cmac.o(.text.mbedtls_aes_cmac_prf_128))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mbedtls_aes_cmac_prf_128 &rArr; mbedtls_cipher_cmac &rArr; mbedtls_cipher_cmac_finish &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoPbkdf2GenerateKey
</UL>

<P><STRONG><a name="[9a7]"></a>mbedtls_aes_crypt_ecb</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, aes.o(.text.mbedtls_aes_crypt_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_encrypt
<LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoAesEncrypt
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_ecb_wrap
</UL>

<P><STRONG><a name="[9aa]"></a>mbedtls_aes_free</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, aes.o(.text.mbedtls_aes_free))
<BR><BR>[Calls]<UL><LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoAesFree
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_free
</UL>

<P><STRONG><a name="[9a9]"></a>mbedtls_aes_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, aes.o(.text.mbedtls_aes_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_aes_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoAesInit
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_alloc
</UL>

<P><STRONG><a name="[9ac]"></a>mbedtls_aes_setkey_dec</STRONG> (Thumb, 276 bytes, Stack size 320 bytes, aes.o(.text.mbedtls_aes_setkey_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_dec_wrap
</UL>

<P><STRONG><a name="[9ad]"></a>mbedtls_aes_setkey_enc</STRONG> (Thumb, 494 bytes, Stack size 32 bytes, aes.o(.text.mbedtls_aes_setkey_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_aes_setkey_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoAesSetKey
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_enc_wrap
</UL>

<P><STRONG><a name="[9a8]"></a>mbedtls_calloc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, platform.o(.text.mbedtls_calloc))
<BR><BR>[Called By]<UL><LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_starts
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_alloc
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_ctx_alloc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_alloc
</UL>

<P><STRONG><a name="[a57]"></a>mbedtls_ccm_auth_decrypt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ccm.o(.text.mbedtls_ccm_auth_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mbedtls_ccm_auth_decrypt &rArr; mbedtls_ccm_star_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_star_auth_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_aead_decrypt
</UL>

<P><STRONG><a name="[a59]"></a>mbedtls_ccm_encrypt_and_tag</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, ccm.o(.text.mbedtls_ccm_encrypt_and_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
</UL>
<BR>[Called By]<UL><LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_aead_encrypt
</UL>

<P><STRONG><a name="[9c6]"></a>mbedtls_ccm_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ccm.o(.text.mbedtls_ccm_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ccm_free &rArr; mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_ctx_free
</UL>

<P><STRONG><a name="[9c5]"></a>mbedtls_ccm_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ccm.o(.text.mbedtls_ccm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ccm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_ctx_alloc
</UL>

<P><STRONG><a name="[9c2]"></a>mbedtls_ccm_setkey</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ccm.o(.text.mbedtls_ccm_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ccm_setkey &rArr; mbedtls_cipher_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[a5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_values
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_aes_setkey_wrap
</UL>

<P><STRONG><a name="[a58]"></a>mbedtls_ccm_star_auth_decrypt</STRONG> (Thumb, 102 bytes, Stack size 72 bytes, ccm.o(.text.mbedtls_ccm_star_auth_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mbedtls_ccm_star_auth_decrypt &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_auth_decrypt
</UL>

<P><STRONG><a name="[a62]"></a>mbedtls_cipher_auth_decrypt_ext</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, cipher.o(.text.mbedtls_cipher_auth_decrypt_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = mbedtls_cipher_auth_decrypt_ext &rArr; mbedtls_cipher_aead_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_aead_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_decrypt_buf
</UL>

<P><STRONG><a name="[a63]"></a>mbedtls_cipher_auth_encrypt_ext</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, cipher.o(.text.mbedtls_cipher_auth_encrypt_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mbedtls_cipher_auth_encrypt_ext &rArr; mbedtls_cipher_aead_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_aead_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_encrypt_buf
</UL>

<P><STRONG><a name="[a54]"></a>mbedtls_cipher_cmac</STRONG> (Thumb, 110 bytes, Stack size 88 bytes, cmac.o(.text.mbedtls_cipher_cmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mbedtls_cipher_cmac &rArr; mbedtls_cipher_cmac_finish &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_update
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_starts
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_cmac_prf_128
</UL>

<P><STRONG><a name="[a67]"></a>mbedtls_cipher_cmac_finish</STRONG> (Thumb, 346 bytes, Stack size 96 bytes, cmac.o(.text.mbedtls_cipher_cmac_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_cipher_cmac_finish &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmac_multiply_by_u
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac
</UL>

<P><STRONG><a name="[a65]"></a>mbedtls_cipher_cmac_starts</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cmac.o(.text.mbedtls_cipher_cmac_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_cipher_cmac_starts &rArr; mbedtls_cipher_setkey
</UL>
<BR>[Calls]<UL><LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac
</UL>

<P><STRONG><a name="[a66]"></a>mbedtls_cipher_cmac_update</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, cmac.o(.text.mbedtls_cipher_cmac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_cipher_cmac_update &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac
</UL>

<P><STRONG><a name="[a5a]"></a>mbedtls_cipher_free</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, cipher.o(.text.mbedtls_cipher_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_free
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
</UL>

<P><STRONG><a name="[a53]"></a>mbedtls_cipher_info_from_type</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cipher.o(.text.mbedtls_cipher_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_cmac_prf_128
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[a5b]"></a>mbedtls_cipher_info_from_values</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, cipher.o(.text.mbedtls_cipher_info_from_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_cipher_info_from_values
</UL>
<BR>[Called By]<UL><LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[a64]"></a>mbedtls_cipher_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cipher.o(.text.mbedtls_cipher_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_cipher_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac
</UL>

<P><STRONG><a name="[a5d]"></a>mbedtls_cipher_setkey</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, cipher.o(.text.mbedtls_cipher_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_cipher_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_starts
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[a5c]"></a>mbedtls_cipher_setup</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cipher.o(.text.mbedtls_cipher_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_cipher_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[9c4]"></a>mbedtls_cipher_update</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, cipher.o(.text.mbedtls_cipher_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
</UL>
<BR>[Called By]<UL><LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_auth_crypt
<LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_update
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_finish
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>

<P><STRONG><a name="[ad6]"></a>mbedtls_ct_memcmp</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, constant_time.o(.text.mbedtls_ct_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_ct_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
</UL>

<P><STRONG><a name="[a6a]"></a>mbedtls_ctr_drbg_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ctr_drbg.o(.text.mbedtls_ctr_drbg_init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoRandomInit
</UL>

<P><STRONG><a name="[a6b]"></a>mbedtls_ctr_drbg_random</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ctr_drbg.o(.text.mbedtls_ctr_drbg_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoRandomGet
</UL>

<P><STRONG><a name="[a6c]"></a>mbedtls_ctr_drbg_random_with_add</STRONG> (Thumb, 236 bytes, Stack size 96 bytes, ctr_drbg.o(.text.mbedtls_ctr_drbg_random_with_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed_internal
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random
</UL>

<P><STRONG><a name="[a6e]"></a>mbedtls_ctr_drbg_seed</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, ctr_drbg.o(.text.mbedtls_ctr_drbg_seed), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed_internal
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoRandomInit
</UL>

<P><STRONG><a name="[a6f]"></a>mbedtls_ecdh_free</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ecdh.o(.text.mbedtls_ecdh_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ecdh_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>

<P><STRONG><a name="[a71]"></a>mbedtls_ecdh_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ecdh.o(.text.mbedtls_ecdh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecdh_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[ad2]"></a>mbedtls_ecjpake_check</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ecjpake.o(.text.mbedtls_ecjpake_check))
<BR><BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[ace]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_validate_ciphersuite
</UL>

<P><STRONG><a name="[a72]"></a>mbedtls_ecjpake_derive_secret</STRONG> (Thumb, 230 bytes, Stack size 144 bytes, ecjpake.o(.text.mbedtls_ecjpake_derive_secret))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = mbedtls_ecjpake_derive_secret &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_mul_secret
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[a74]"></a>mbedtls_ecjpake_free</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ecjpake.o(.text.mbedtls_ecjpake_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_ecjpake_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_setup
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>

<P><STRONG><a name="[a75]"></a>mbedtls_ecjpake_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ecjpake.o(.text.mbedtls_ecjpake_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ecjpake_init &rArr; mbedtls_ecp_group_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[a77]"></a>mbedtls_ecjpake_read_round_one</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, ecjpake.o(.text.mbedtls_ecjpake_read_round_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = mbedtls_ecjpake_read_round_one &rArr; ecjpake_kkp_read &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_kkp_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[a78]"></a>mbedtls_ecjpake_read_round_two</STRONG> (Thumb, 192 bytes, Stack size 208 bytes, ecjpake.o(.text.mbedtls_ecjpake_read_round_two))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = mbedtls_ecjpake_read_round_two &rArr; ecjpake_kkp_read &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_kkp_read
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_ecp_add3
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[a7a]"></a>mbedtls_ecjpake_setup</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ecjpake.o(.text.mbedtls_ecjpake_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbedtls_ecjpake_setup &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_resize_clear &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_free
</UL>
<BR>[Called By]<UL><LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hs_ecjpake_password
</UL>

<P><STRONG><a name="[a7d]"></a>mbedtls_ecjpake_write_round_one</STRONG> (Thumb, 156 bytes, Stack size 72 bytes, ecjpake.o(.text.mbedtls_ecjpake_write_round_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = mbedtls_ecjpake_write_round_one &rArr; ecjpake_kkp_write &rArr; ecjpake_zkp_write &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_kkp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[a7e]"></a>mbedtls_ecjpake_write_round_two</STRONG> (Thumb, 318 bytes, Stack size 160 bytes, ecjpake.o(.text.mbedtls_ecjpake_write_round_two))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = mbedtls_ecjpake_write_round_two &rArr; ecjpake_ecp_add3 &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_zkp_write
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_mul_secret
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_ecp_add3
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
<LI><a href="#[a7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_group
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[a80]"></a>mbedtls_ecp_check_privkey</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ecp.o(.text.mbedtls_ecp_check_privkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_ecp_check_privkey &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>

<P><STRONG><a name="[a81]"></a>mbedtls_ecp_check_pubkey</STRONG> (Thumb, 378 bytes, Stack size 56 bytes, ecp.o(.text.mbedtls_ecp_check_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = mbedtls_ecp_check_pubkey &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mod
</UL>
<BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>

<P><STRONG><a name="[9ff]"></a>mbedtls_ecp_copy</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ecp.o(.text.mbedtls_ecp_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ecp_copy &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>

<P><STRONG><a name="[ad0]"></a>mbedtls_ecp_curve_info_from_grp_id</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ecp.o(.text.mbedtls_ecp_curve_info_from_grp_id))
<BR><BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[9f1]"></a>mbedtls_ecp_gen_keypair_base</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, ecp.o(.text.mbedtls_ecp_gen_keypair_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_random
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>
<BR>[Called By]<UL><LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_zkp_write
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_kkp_write
</UL>

<P><STRONG><a name="[a70]"></a>mbedtls_ecp_group_free</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ecp.o(.text.mbedtls_ecp_group_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_read_round_two
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_free
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
</UL>

<P><STRONG><a name="[a76]"></a>mbedtls_ecp_group_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ecp.o(.text.mbedtls_ecp_group_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ecp_group_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_read_round_two
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_init
</UL>

<P><STRONG><a name="[a7c]"></a>mbedtls_ecp_group_load</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, ecp_curves.o(.text.mbedtls_ecp_group_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_ecp_group_load &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_group
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_setup
</UL>

<P><STRONG><a name="[aad]"></a>mbedtls_ecp_grp_id_list</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ecp.o(.text.mbedtls_ecp_grp_id_list))
<BR><BR>[Called By]<UL><LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[9ec]"></a>mbedtls_ecp_is_zero</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ecp.o(.text.mbedtls_ecp_is_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ecp_is_zero &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_kkp_read
</UL>

<P><STRONG><a name="[a73]"></a>mbedtls_ecp_mul</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, ecp.o(.text.mbedtls_ecp_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = mbedtls_ecp_mul &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>
<BR>[Called By]<UL><LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_write_round_two
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_derive_secret
</UL>

<P><STRONG><a name="[a83]"></a>mbedtls_ecp_mul_restartable</STRONG> (Thumb, 950 bytes, Stack size 304 bytes, ecp.o(.text.mbedtls_ecp_mul_restartable))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_list
<LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_init
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
</UL>

<P><STRONG><a name="[9e2]"></a>mbedtls_ecp_muladd</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, ecp.o(.text.mbedtls_ecp_muladd))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = mbedtls_ecp_muladd &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd_restartable
</UL>
<BR>[Called By]<UL><LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_derive_secret
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_kkp_read
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_ecp_add3
</UL>

<P><STRONG><a name="[a8b]"></a>mbedtls_ecp_muladd_restartable</STRONG> (Thumb, 156 bytes, Stack size 80 bytes, ecp.o(.text.mbedtls_ecp_muladd_restartable))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>
<BR>[Called By]<UL><LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
</UL>

<P><STRONG><a name="[9ef]"></a>mbedtls_ecp_point_cmp</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ecp.o(.text.mbedtls_ecp_point_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ecp_point_cmp &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_kkp_read
</UL>

<P><STRONG><a name="[9ee]"></a>mbedtls_ecp_point_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecp.o(.text.mbedtls_ecp_point_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_write_round_two
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_read_round_two
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_free
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_derive_secret
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_zkp_write
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_kkp_read
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
</UL>

<P><STRONG><a name="[9ed]"></a>mbedtls_ecp_point_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ecp.o(.text.mbedtls_ecp_point_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ecp_point_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_write_round_two
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_read_round_two
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_init
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_derive_secret
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_zkp_write
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_kkp_read
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>

<P><STRONG><a name="[a8c]"></a>mbedtls_ecp_point_read_binary</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ecp.o(.text.mbedtls_ecp_point_read_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_resize_clear &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
</UL>

<P><STRONG><a name="[9f8]"></a>mbedtls_ecp_point_write_binary</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, ecp.o(.text.mbedtls_ecp_point_write_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_write_len_point
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
</UL>

<P><STRONG><a name="[a04]"></a>mbedtls_ecp_set_zero</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ecp.o(.text.mbedtls_ecp_set_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_ecp_set_zero &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[a79]"></a>mbedtls_ecp_tls_read_group</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ecp.o(.text.mbedtls_ecp_tls_read_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_ecp_tls_read_group &rArr; mbedtls_ecp_group_load &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
</UL>
<BR>[Called By]<UL><LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_read_round_two
</UL>

<P><STRONG><a name="[9eb]"></a>mbedtls_ecp_tls_read_point</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ecp.o(.text.mbedtls_ecp_tls_read_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_ecp_tls_read_point &rArr; mbedtls_ecp_point_read_binary &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_resize_clear &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_kkp_read
</UL>

<P><STRONG><a name="[a7f]"></a>mbedtls_ecp_tls_write_group</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ecp.o(.text.mbedtls_ecp_tls_write_group))
<BR><BR>[Called By]<UL><LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_write_round_two
</UL>

<P><STRONG><a name="[9f2]"></a>mbedtls_ecp_tls_write_point</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, ecp.o(.text.mbedtls_ecp_tls_write_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_ecp_tls_write_point &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_write_round_two
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_zkp_write
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_kkp_write
</UL>

<P><STRONG><a name="[b0b]"></a>mbedtls_entropy_add_source</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, entropy.o(.text.mbedtls_entropy_add_source), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoRandomInit
</UL>

<P><STRONG><a name="[b5]"></a>mbedtls_entropy_func</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, entropy.o(.text.mbedtls_entropy_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = mbedtls_entropy_func &rArr; entropy_gather_internal &rArr; entropy_update &rArr; mbedtls_sha256_ret &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
<LI><a href="#[a8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_platform.o(.text.otPlatCryptoRandomInit)
</UL>
<P><STRONG><a name="[a90]"></a>mbedtls_entropy_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, entropy.o(.text.mbedtls_entropy_init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoRandomInit
</UL>

<P><STRONG><a name="[9ab]"></a>mbedtls_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, platform.o(.text.mbedtls_free))
<BR><BR>[Called By]<UL><LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flight_free
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_free_buffered_record
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_buffering_free_slot
<LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
<LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_free
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccm_ctx_free
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_free
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_reset_int
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>

<P><STRONG><a name="[a5f]"></a>mbedtls_gcm_auth_decrypt</STRONG> (Thumb, 104 bytes, Stack size 72 bytes, gcm.o(.text.mbedtls_gcm_auth_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_aead_decrypt
</UL>

<P><STRONG><a name="[a61]"></a>mbedtls_gcm_crypt_and_tag</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, gcm.o(.text.mbedtls_gcm_crypt_and_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
<LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_aead_encrypt
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_AES_GCM_Encrypt
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_AES_GCM_Decrypt
</UL>

<P><STRONG><a name="[a92]"></a>mbedtls_gcm_finish</STRONG> (Thumb, 298 bytes, Stack size 64 bytes, gcm.o(.text.mbedtls_gcm_finish), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[a30]"></a>mbedtls_gcm_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gcm.o(.text.mbedtls_gcm_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_gcm_free &rArr; mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_free
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_AES_GCM_Encrypt
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_AES_GCM_Decrypt
</UL>

<P><STRONG><a name="[a2f]"></a>mbedtls_gcm_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gcm.o(.text.mbedtls_gcm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_gcm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ctx_alloc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_AES_GCM_Encrypt
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_AES_GCM_Decrypt
</UL>

<P><STRONG><a name="[a2e]"></a>mbedtls_gcm_setkey</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, gcm.o(.text.mbedtls_gcm_setkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_gcm_setkey &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[a5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_values
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_aes_setkey_wrap
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_AES_GCM_Encrypt
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_AES_GCM_Decrypt
</UL>

<P><STRONG><a name="[a91]"></a>mbedtls_gcm_starts</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, gcm.o(.text.mbedtls_gcm_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mbedtls_gcm_starts &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
</UL>

<P><STRONG><a name="[a69]"></a>mbedtls_gcm_update</STRONG> (Thumb, 244 bytes, Stack size 64 bytes, gcm.o(.text.mbedtls_gcm_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>

<P><STRONG><a name="[a88]"></a>mbedtls_hmac_drbg_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hmac_drbg.o(.text.mbedtls_hmac_drbg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_hmac_drbg_free &rArr; mbedtls_md_free
</UL>
<BR>[Calls]<UL><LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>

<P><STRONG><a name="[a85]"></a>mbedtls_hmac_drbg_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hmac_drbg.o(.text.mbedtls_hmac_drbg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_hmac_drbg_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>

<P><STRONG><a name="[a07]"></a>mbedtls_hmac_drbg_random</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hmac_drbg.o(.text.mbedtls_hmac_drbg_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = mbedtls_hmac_drbg_random &rArr; mbedtls_hmac_drbg_random_with_add &rArr; hmac_drbg_reseed_core &rArr; mbedtls_hmac_drbg_update_ret &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_drbg_random
</UL>

<P><STRONG><a name="[a95]"></a>mbedtls_hmac_drbg_random_with_add</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, hmac_drbg.o(.text.mbedtls_hmac_drbg_random_with_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = mbedtls_hmac_drbg_random_with_add &rArr; hmac_drbg_reseed_core &rArr; mbedtls_hmac_drbg_update_ret &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_drbg_reseed_core
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update_ret
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random
</UL>

<P><STRONG><a name="[a87]"></a>mbedtls_hmac_drbg_seed_buf</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, hmac_drbg.o(.text.mbedtls_hmac_drbg_seed_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = mbedtls_hmac_drbg_seed_buf &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>

<P><STRONG><a name="[a34]"></a>mbedtls_hmac_drbg_update_ret</STRONG> (Thumb, 204 bytes, Stack size 80 bytes, hmac_drbg.o(.text.mbedtls_hmac_drbg_update_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = mbedtls_hmac_drbg_update_ret &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_drbg_reseed_core
</UL>

<P><STRONG><a name="[a56]"></a>mbedtls_internal_aes_decrypt</STRONG> (Thumb, 1026 bytes, Stack size 96 bytes, aes.o(.text.mbedtls_internal_aes_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_internal_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[a55]"></a>mbedtls_internal_aes_encrypt</STRONG> (Thumb, 1002 bytes, Stack size 96 bytes, aes.o(.text.mbedtls_internal_aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[a9b]"></a>mbedtls_internal_sha256_process</STRONG> (Thumb, 298 bytes, Stack size 344 bytes, sha256_1.o(.text.mbedtls_internal_sha256_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
</UL>

<P><STRONG><a name="[9e6]"></a>mbedtls_md</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = mbedtls_md &rArr; mbedtls_sha256_ret &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_derive_secret
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_hash
</UL>

<P><STRONG><a name="[a94]"></a>mbedtls_md_free</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, md.o(.text.mbedtls_md_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_free
</UL>
<BR>[Calls]<UL><LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoHmacSha256Deinit
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
</UL>

<P><STRONG><a name="[9e7]"></a>mbedtls_md_get_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_derive_secret
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_hash
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update_ret
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
</UL>

<P><STRONG><a name="[a98]"></a>mbedtls_md_hmac_finish</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, md.o(.text.mbedtls_md_hmac_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = mbedtls_md_hmac_finish &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoHmacSha256Finish
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update_ret
</UL>

<P><STRONG><a name="[a96]"></a>mbedtls_md_hmac_reset</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, md.o(.text.mbedtls_md_hmac_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = mbedtls_md_hmac_reset &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update_ret
</UL>

<P><STRONG><a name="[a9a]"></a>mbedtls_md_hmac_starts</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, md.o(.text.mbedtls_md_hmac_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = mbedtls_md_hmac_starts &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoHmacSha256Start
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update_ret
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
</UL>

<P><STRONG><a name="[a97]"></a>mbedtls_md_hmac_update</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md_hmac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mbedtls_md_hmac_update &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoHmacSha256Update
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update_ret
</UL>

<P><STRONG><a name="[a7b]"></a>mbedtls_md_info_from_type</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoHmacSha256Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_setup
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>

<P><STRONG><a name="[b0a]"></a>mbedtls_md_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md_init))
<BR><BR>[Called By]<UL><LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoHmacSha256Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
</UL>

<P><STRONG><a name="[a86]"></a>mbedtls_md_list</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md_list))
<BR><BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>

<P><STRONG><a name="[a99]"></a>mbedtls_md_setup</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, md.o(.text.mbedtls_md_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_md_setup &rArr; mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoHmacSha256Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_seed_buf
</UL>

<P><STRONG><a name="[a9c]"></a>mbedtls_md_starts</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_md_starts &rArr; mbedtls_sha256_starts_ret
</UL>
<BR>[Calls]<UL><LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
</UL>

<P><STRONG><a name="[a9d]"></a>mbedtls_mpi_add_abs</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, bignum.o(.text.mbedtls_mpi_add_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>

<P><STRONG><a name="[9f7]"></a>mbedtls_mpi_add_mpi</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_add_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mod
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_mul_secret
</UL>

<P><STRONG><a name="[a84]"></a>mbedtls_mpi_bitlen</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, bignum.o(.text.mbedtls_mpi_bitlen))
<BR><BR>[Called By]<UL><LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_load
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_random
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mod
</UL>

<P><STRONG><a name="[a9e]"></a>mbedtls_mpi_cmp_abs</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, bignum.o(.text.mbedtls_mpi_cmp_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>

<P><STRONG><a name="[9fd]"></a>mbedtls_mpi_cmp_int</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_cmp_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mod
<LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
</UL>

<P><STRONG><a name="[a02]"></a>mbedtls_mpi_cmp_mpi</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, bignum.o(.text.mbedtls_mpi_cmp_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_random
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_privkey
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mod
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_cmp
</UL>

<P><STRONG><a name="[a00]"></a>mbedtls_mpi_copy</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, bignum.o(.text.mbedtls_mpi_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>

<P><STRONG><a name="[a9f]"></a>mbedtls_mpi_div_mpi</STRONG> (Thumb, 940 bytes, Stack size 152 bytes, bignum.o(.text.mbedtls_mpi_div_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
</UL>

<P><STRONG><a name="[9f5]"></a>mbedtls_mpi_fill_random</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_fill_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_mpi_fill_random &rArr; mpi_fill_random_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_fill_random_internal
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_resize_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_mul_secret
</UL>

<P><STRONG><a name="[9e3]"></a>mbedtls_mpi_free</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bignum.o(.text.mbedtls_mpi_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_random
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_resize_clear
<LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_write_round_two
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_free
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_derive_secret
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_zkp_write
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_mul_secret
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_kkp_read
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_ecp_add3
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd_restartable
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
</UL>

<P><STRONG><a name="[aa3]"></a>mbedtls_mpi_gcd</STRONG> (Thumb, 492 bytes, Stack size 80 bytes, bignum.o(.text.mbedtls_mpi_gcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbedtls_mpi_gcd &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
</UL>

<P><STRONG><a name="[a89]"></a>mbedtls_mpi_get_bit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bignum.o(.text.mbedtls_mpi_get_bit))
<BR><BR>[Called By]<UL><LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>

<P><STRONG><a name="[a08]"></a>mbedtls_mpi_grow</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bignum.o(.text.mbedtls_mpi_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_random
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_resize_clear
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_mod_p256
</UL>

<P><STRONG><a name="[9e0]"></a>mbedtls_mpi_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bignum.o(.text.mbedtls_mpi_init))
<BR><BR>[Called By]<UL><LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_write_round_two
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_init
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_derive_secret
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_zkp_write
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_mul_secret
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_kkp_read
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_ecp_add3
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd_restartable
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_init
</UL>

<P><STRONG><a name="[a0a]"></a>mbedtls_mpi_inv_mod</STRONG> (Thumb, 832 bytes, Stack size 160 bytes, bignum.o(.text.mbedtls_mpi_inv_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
</UL>

<P><STRONG><a name="[9e1]"></a>mbedtls_mpi_lset</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bignum.o(.text.mbedtls_mpi_lset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_random
<LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_derive_secret
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_ecp_add3
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>

<P><STRONG><a name="[aa5]"></a>mbedtls_mpi_lt_mpi_ct</STRONG> (Thumb, 156 bytes, Stack size 28 bytes, constant_time.o(.text.mbedtls_mpi_lt_mpi_ct))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_mpi_lt_mpi_ct
</UL>
<BR>[Called By]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_random
</UL>

<P><STRONG><a name="[9e9]"></a>mbedtls_mpi_mod_mpi</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, bignum.o(.text.mbedtls_mpi_mod_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mod
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_zkp_write
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_mul_secret
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_hash
</UL>

<P><STRONG><a name="[a06]"></a>mbedtls_mpi_mul_int</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_mul_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_mul_int &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
</UL>

<P><STRONG><a name="[9f6]"></a>mbedtls_mpi_mul_mpi</STRONG> (Thumb, 328 bytes, Stack size 64 bytes, bignum.o(.text.mbedtls_mpi_mul_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_mpi_mul_mpi &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mod
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_zkp_write
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_mul_secret
</UL>

<P><STRONG><a name="[a0c]"></a>mbedtls_mpi_random</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, bignum.o(.text.mbedtls_mpi_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_mpi_random &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lt_mpi_ct
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_fill_random_internal
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_resize_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
</UL>

<P><STRONG><a name="[9e8]"></a>mbedtls_mpi_read_binary</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, bignum.o(.text.mbedtls_mpi_read_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_mpi_read_binary &rArr; mbedtls_mpi_resize_clear &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_resize_clear
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_setup
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_kkp_read
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_hash
</UL>

<P><STRONG><a name="[a0e]"></a>mbedtls_mpi_safe_cond_assign</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, constant_time.o(.text.mbedtls_mpi_safe_cond_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_safe_cond_assign &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>

<P><STRONG><a name="[a01]"></a>mbedtls_mpi_shift_l</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_shift_l))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_mpi_shift_l &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[aa0]"></a>mbedtls_mpi_shift_r</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, bignum.o(.text.mbedtls_mpi_shift_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_mpi_shift_r &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_random
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[9fa]"></a>mbedtls_mpi_size</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bignum.o(.text.mbedtls_mpi_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_size
</UL>
<BR>[Calls]<UL><LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_read_binary
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_zkp_write
</UL>

<P><STRONG><a name="[a03]"></a>mbedtls_mpi_sub_abs</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, bignum.o(.text.mbedtls_mpi_sub_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mod
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[a82]"></a>mbedtls_mpi_sub_int</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_sub_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
</UL>

<P><STRONG><a name="[9f9]"></a>mbedtls_mpi_sub_mpi</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_sub_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_shortcuts
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_zkp_write
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>

<P><STRONG><a name="[9fb]"></a>mbedtls_mpi_write_binary</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_write_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_mpi_write_binary
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_derive_secret
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_zkp_write
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>

<P><STRONG><a name="[85d]"></a>mbedtls_platform_set_calloc_free</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, platform.o(.text.mbedtls_platform_set_calloc_free))
<BR><BR>[Called By]<UL><LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::MbedTls::MbedTls()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[9c1]"></a>mbedtls_platform_zeroize</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, platform_util.o(.text.mbedtls_platform_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_cmac_prf_128
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_star_auth_decrypt
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_free
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_encrypt
<LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_aes_decrypt
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_buffering_free_slot
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha256_process
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_drbg_reseed_core
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update_ret
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_free
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_group_free
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed_internal
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_starts
<LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_finish
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_reset_int
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>

<P><STRONG><a name="[aa6]"></a>mbedtls_sha256_clone</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sha256_1.o(.text.mbedtls_sha256_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[a8d]"></a>mbedtls_sha256_finish_ret</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, sha256_1.o(.text.mbedtls_sha256_finish_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = mbedtls_sha256_finish_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha256_process
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoSha256Finish
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
</UL>

<P><STRONG><a name="[a8e]"></a>mbedtls_sha256_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sha256_1.o(.text.mbedtls_sha256_free))
<BR><BR>[Calls]<UL><LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoSha256Deinit
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>

<P><STRONG><a name="[a8f]"></a>mbedtls_sha256_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sha256_1.o(.text.mbedtls_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoSha256Init
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
</UL>

<P><STRONG><a name="[a24]"></a>mbedtls_sha256_ret</STRONG> (Thumb, 208 bytes, Stack size 144 bytes, sha256_1.o(.text.mbedtls_sha256_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = mbedtls_sha256_ret &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
</UL>

<P><STRONG><a name="[a25]"></a>mbedtls_sha256_starts_ret</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, sha256_1.o(.text.mbedtls_sha256_starts_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_sha256_starts_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoSha256Start
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_reset_checksum
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
</UL>

<P><STRONG><a name="[a26]"></a>mbedtls_sha256_update_ret</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, sha256_1.o(.text.mbedtls_sha256_update_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha256_process
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoSha256Update
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_sha256
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
</UL>

<P><STRONG><a name="[aa7]"></a>mbedtls_ssl_buffering_free</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ssl_msg.o(.text.mbedtls_ssl_buffering_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ssl_buffering_free &rArr; ssl_buffering_free_slot
</UL>
<BR>[Calls]<UL><LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_free_buffered_record
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_buffering_free_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_recv_flight_completed
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>

<P><STRONG><a name="[ab0]"></a>mbedtls_ssl_ciphersuite_from_id</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssl_ciphersuites.o(.text.mbedtls_ssl_ciphersuite_from_id))
<BR><BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[acf]"></a>mbedtls_ssl_ciphersuite_uses_ec</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ssl_ciphersuites.o(.text.mbedtls_ssl_ciphersuite_uses_ec))
<BR><BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[8cd]"></a>mbedtls_ssl_close_notify</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ssl_msg.o(.text.mbedtls_ssl_close_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = mbedtls_ssl_close_notify &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt_ext &rArr; mbedtls_cipher_aead_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
</UL>
<BR>[Called By]<UL><LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Process()
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Disconnect()
</UL>

<P><STRONG><a name="[8e3]"></a>mbedtls_ssl_conf_ciphersuites</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(.text.mbedtls_ssl_conf_ciphersuites))
<BR><BR>[Called By]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Setup(bool)
</UL>

<P><STRONG><a name="[8e4]"></a>mbedtls_ssl_conf_curves</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl_tls.o(.text.mbedtls_ssl_conf_curves))
<BR><BR>[Called By]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Setup(bool)
</UL>

<P><STRONG><a name="[8e7]"></a>mbedtls_ssl_conf_dbg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text.mbedtls_ssl_conf_dbg))
<BR><BR>[Called By]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Setup(bool)
</UL>

<P><STRONG><a name="[8e5]"></a>mbedtls_ssl_conf_export_keys_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text.mbedtls_ssl_conf_export_keys_cb))
<BR><BR>[Called By]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Setup(bool)
</UL>

<P><STRONG><a name="[8e6]"></a>mbedtls_ssl_conf_handshake_timeout</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text.mbedtls_ssl_conf_handshake_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Setup(bool)
</UL>

<P><STRONG><a name="[8e2]"></a>mbedtls_ssl_conf_max_version</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text.mbedtls_ssl_conf_max_version))
<BR><BR>[Called By]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Setup(bool)
</UL>

<P><STRONG><a name="[8e1]"></a>mbedtls_ssl_conf_min_version</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text.mbedtls_ssl_conf_min_version))
<BR><BR>[Called By]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Setup(bool)
</UL>

<P><STRONG><a name="[8e0]"></a>mbedtls_ssl_conf_rng</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text.mbedtls_ssl_conf_rng))
<BR><BR>[Called By]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Setup(bool)
</UL>

<P><STRONG><a name="[8df]"></a>mbedtls_ssl_config_defaults</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, ssl_tls.o(.text.mbedtls_ssl_config_defaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_config_defaults
</UL>
<BR>[Calls]<UL><LI><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_list_ciphersuites
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_grp_id_list
</UL>
<BR>[Called By]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Setup(bool)
</UL>

<P><STRONG><a name="[8ce]"></a>mbedtls_ssl_config_free</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text.mbedtls_ssl_config_free))
<BR><BR>[Calls]<UL><LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Setup(bool)
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Disconnect()
</UL>

<P><STRONG><a name="[8de]"></a>mbedtls_ssl_config_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ssl_tls.o(.text.mbedtls_ssl_config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_config_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Setup(bool)
</UL>

<P><STRONG><a name="[aae]"></a>mbedtls_ssl_decrypt_buf</STRONG> (Thumb, 312 bytes, Stack size 152 bytes, ssl_msg.o(.text.mbedtls_ssl_decrypt_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = mbedtls_ssl_decrypt_buf &rArr; mbedtls_cipher_auth_decrypt_ext &rArr; mbedtls_cipher_aead_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_decrypt_ext
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[aaf]"></a>mbedtls_ssl_derive_keys</STRONG> (Thumb, 648 bytes, Stack size 328 bytes, ssl_tls.o(.text.mbedtls_ssl_derive_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = mbedtls_ssl_derive_keys &rArr; tls_prf_sha256 &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
<LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[ad8]"></a>mbedtls_ssl_dtls_replay_check</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, ssl_msg.o(.text.mbedtls_ssl_dtls_replay_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_dtls_replay_check
</UL>
<BR>[Called By]<UL><LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[add]"></a>mbedtls_ssl_dtls_replay_reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssl_msg.o(.text.mbedtls_ssl_dtls_replay_reset), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_reset_int
</UL>

<P><STRONG><a name="[ad9]"></a>mbedtls_ssl_dtls_replay_update</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, ssl_msg.o(.text.mbedtls_ssl_dtls_replay_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_dtls_replay_update
</UL>
<BR>[Called By]<UL><LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[ab1]"></a>mbedtls_ssl_encrypt_buf</STRONG> (Thumb, 320 bytes, Stack size 144 bytes, ssl_msg.o(.text.mbedtls_ssl_encrypt_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = mbedtls_ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt_ext &rArr; mbedtls_cipher_aead_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_encrypt_ext
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>

<P><STRONG><a name="[ab2]"></a>mbedtls_ssl_fetch_input</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, ssl_msg.o(.text.mbedtls_ssl_fetch_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = mbedtls_ssl_fetch_input &rArr; mbedtls_ssl_flight_transmit &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt_ext &rArr; mbedtls_cipher_aead_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flight_transmit
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[ab4]"></a>mbedtls_ssl_flight_free</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ssl_msg.o(.text.mbedtls_ssl_flight_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_flight_free
</UL>
<BR>[Calls]<UL><LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_recv_flight_completed
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>

<P><STRONG><a name="[ab3]"></a>mbedtls_ssl_flight_transmit</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, ssl_msg.o(.text.mbedtls_ssl_flight_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = mbedtls_ssl_flight_transmit &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt_ext &rArr; mbedtls_cipher_aead_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_swap_epochs
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_remaining_payload_in_datagram
<LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[aaa]"></a>mbedtls_ssl_flush_output</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ssl_msg.o(.text.mbedtls_ssl_flush_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_flush_output &rArr; mbedtls_ssl_update_out_pointers
</UL>
<BR>[Calls]<UL><LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_update_out_pointers
</UL>
<BR>[Called By]<UL><LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flight_transmit
</UL>

<P><STRONG><a name="[8cf]"></a>mbedtls_ssl_free</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, ssl_tls.o(.text.mbedtls_ssl_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_ssl_free &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecjpake_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>
<BR>[Called By]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Setup(bool)
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Disconnect()
</UL>

<P><STRONG><a name="[abc]"></a>mbedtls_ssl_get_current_mtu</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ssl_tls.o(.text.mbedtls_ssl_get_current_mtu))
<BR><BR>[Called By]<UL><LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_max_out_record_payload
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_remaining_payload_in_datagram
</UL>

<P><STRONG><a name="[aba]"></a>mbedtls_ssl_get_max_out_record_payload</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ssl_tls.o(.text.mbedtls_ssl_get_max_out_record_payload), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_record_expansion
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_output_max_frag_len
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_current_mtu
</UL>
<BR>[Called By]<UL><LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
</UL>

<P><STRONG><a name="[abb]"></a>mbedtls_ssl_get_output_max_frag_len</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, ssl_tls.o(.text.mbedtls_ssl_get_output_max_frag_len))
<BR><BR>[Called By]<UL><LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_max_out_record_payload
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_remaining_payload_in_datagram
</UL>

<P><STRONG><a name="[abd]"></a>mbedtls_ssl_get_record_expansion</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ssl_msg.o(.text.mbedtls_ssl_get_record_expansion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_get_record_expansion
</UL>
<BR>[Called By]<UL><LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_max_out_record_payload
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_remaining_payload_in_datagram
</UL>

<P><STRONG><a name="[abe]"></a>mbedtls_ssl_handle_message_type</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, ssl_msg.o(.text.mbedtls_ssl_handle_message_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = mbedtls_ssl_handle_message_type &rArr; mbedtls_ssl_prepare_handshake_record &rArr; mbedtls_ssl_flight_transmit &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt_ext &rArr; mbedtls_cipher_aead_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup_free_hs_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[8ec]"></a>mbedtls_ssl_handshake</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ssl_tls.o(.text.mbedtls_ssl_handshake))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ecjpake_read_round_two &rArr; ecjpake_kkp_read &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>
<BR>[Called By]<UL><LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Process()
</UL>

<P><STRONG><a name="[ac1]"></a>mbedtls_ssl_handshake_client_step</STRONG> (Thumb, 2690 bytes, Stack size 72 bytes, ssl_cli.o(.text.mbedtls_ssl_handshake_client_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = mbedtls_ssl_handshake_client_step &rArr; mbedtls_ecjpake_read_round_two &rArr; ecjpake_kkp_read &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_flight_completed
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_reset_checksum
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_recv_flight_completed
<LI><a href="#[acd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_version
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_optimize_checksum
<LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flight_transmit
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[ace]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_validate_ciphersuite
<LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_uses_ec
<LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_curve_info_from_grp_id
<LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_write_round_two
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_write_round_one
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_read_round_two
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_read_round_one
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_derive_secret
<LI><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_check
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
</UL>

<P><STRONG><a name="[ab9]"></a>mbedtls_ssl_handshake_free</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ssl_tls.o(.text.mbedtls_ssl_handshake_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_ssl_handshake_free &rArr; mbedtls_ecjpake_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flight_free
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_buffering_free
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_free
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_free
</UL>
<BR>[Called By]<UL><LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup_free_hs_transform
</UL>

<P><STRONG><a name="[acc]"></a>mbedtls_ssl_handshake_wrapup</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ssl_tls.o(.text.mbedtls_ssl_handshake_wrapup))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbedtls_ssl_handshake_wrapup &rArr; mbedtls_ssl_handshake_wrapup_free_hs_transform &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecjpake_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_timer
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup_free_hs_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[ac0]"></a>mbedtls_ssl_handshake_wrapup_free_hs_transform</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ssl_tls.o(.text.mbedtls_ssl_handshake_wrapup_free_hs_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_ssl_handshake_wrapup_free_hs_transform &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecjpake_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
</UL>
<BR>[Called By]<UL><LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
<LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
</UL>

<P><STRONG><a name="[8dd]"></a>mbedtls_ssl_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ssl_tls.o(.text.mbedtls_ssl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_init
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Setup(bool)
</UL>

<P><STRONG><a name="[aac]"></a>mbedtls_ssl_list_ciphersuites</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_ciphersuites.o(.text.mbedtls_ssl_list_ciphersuites))
<BR><BR>[Called By]<UL><LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[ad4]"></a>mbedtls_ssl_optimize_checksum</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssl_tls.o(.text.mbedtls_ssl_optimize_checksum))
<BR><BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[ac4]"></a>mbedtls_ssl_parse_certificate</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ssl_tls.o(.text.mbedtls_ssl_parse_certificate))
<BR><BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[aca]"></a>mbedtls_ssl_parse_change_cipher_spec</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, ssl_msg.o(.text.mbedtls_ssl_parse_change_cipher_spec))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = mbedtls_ssl_parse_change_cipher_spec &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_fetch_input &rArr; mbedtls_ssl_flight_transmit &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt_ext &rArr; mbedtls_cipher_aead_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[acb]"></a>mbedtls_ssl_parse_finished</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, ssl_tls.o(.text.mbedtls_ssl_parse_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = mbedtls_ssl_parse_finished &rArr; mbedtls_ssl_read_record &rArr; mbedtls_ssl_fetch_input &rArr; mbedtls_ssl_flight_transmit &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt_ext &rArr; mbedtls_cipher_aead_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ct_memcmp
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_recv_flight_completed
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[abf]"></a>mbedtls_ssl_prepare_handshake_record</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, ssl_msg.o(.text.mbedtls_ssl_prepare_handshake_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = mbedtls_ssl_prepare_handshake_record &rArr; mbedtls_ssl_flight_transmit &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt_ext &rArr; mbedtls_cipher_aead_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_hs_is_proper_fragment
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flight_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
</UL>

<P><STRONG><a name="[8ed]"></a>mbedtls_ssl_read</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, ssl_msg.o(.text.mbedtls_ssl_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_client_step &rArr; mbedtls_ecjpake_read_round_two &rArr; ecjpake_kkp_read &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flight_transmit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Process()
</UL>

<P><STRONG><a name="[ac3]"></a>mbedtls_ssl_read_record</STRONG> (Thumb, 1714 bytes, Stack size 88 bytes, ssl_msg.o(.text.mbedtls_ssl_read_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = mbedtls_ssl_read_record &rArr; mbedtls_ssl_fetch_input &rArr; mbedtls_ssl_flight_transmit &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt_ext &rArr; mbedtls_cipher_aead_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_update_handshake_status
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handle_message_type
<LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_dtls_replay_update
<LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_dtls_replay_check
<LI><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_decrypt_buf
<LI><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_hs_is_proper_fragment
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_free_buffered_record
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_buffering_free_slot
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[acd]"></a>mbedtls_ssl_read_version</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ssl_msg.o(.text.mbedtls_ssl_read_version))
<BR><BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[ac5]"></a>mbedtls_ssl_recv_flight_completed</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ssl_msg.o(.text.mbedtls_ssl_recv_flight_completed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_ssl_recv_flight_completed &rArr; mbedtls_ssl_buffering_free &rArr; ssl_buffering_free_slot
</UL>
<BR>[Calls]<UL><LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flight_free
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_buffering_free
</UL>
<BR>[Called By]<UL><LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[ad1]"></a>mbedtls_ssl_reset_checksum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssl_tls.o(.text.mbedtls_ssl_reset_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_ssl_reset_checksum &rArr; mbedtls_sha256_starts_ret
</UL>
<BR>[Calls]<UL><LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[adc]"></a>mbedtls_ssl_reset_in_out_pointers</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, ssl_msg.o(.text.mbedtls_ssl_reset_in_out_pointers))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_reset_in_out_pointers
</UL>
<BR>[Called By]<UL><LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_reset_int
</UL>

<P><STRONG><a name="[8ef]"></a>mbedtls_ssl_send_alert_message</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ssl_msg.o(.text.mbedtls_ssl_send_alert_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt_ext &rArr; mbedtls_cipher_aead_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>
<BR>[Called By]<UL><LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Process()
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[ad3]"></a>mbedtls_ssl_send_flight_completed</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ssl_msg.o(.text.mbedtls_ssl_send_flight_completed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_send_flight_completed
</UL>
<BR>[Called By]<UL><LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[8ee]"></a>mbedtls_ssl_session_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl_tls.o(.text.mbedtls_ssl_session_reset))
<BR><BR>[Called By]<UL><LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Process()
</UL>

<P><STRONG><a name="[adb]"></a>mbedtls_ssl_session_reset_int</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ssl_tls.o(.text.mbedtls_ssl_session_reset_int), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_timer
<LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_reset_in_out_pointers
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_dtls_replay_reset
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[8e9]"></a>mbedtls_ssl_set_bio</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssl_tls.o(.text.mbedtls_ssl_set_bio))
<BR><BR>[Called By]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Setup(bool)
</UL>

<P><STRONG><a name="[8eb]"></a>mbedtls_ssl_set_hs_ecjpake_password</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ssl_tls.o(.text.mbedtls_ssl_set_hs_ecjpake_password))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_ssl_set_hs_ecjpake_password &rArr; mbedtls_ecjpake_setup &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_resize_clear &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Process()
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Setup(bool)
</UL>

<P><STRONG><a name="[ad5]"></a>mbedtls_ssl_set_timer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_msg.o(.text.mbedtls_ssl_set_timer))
<BR><BR>[Called By]<UL><LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_timer_cb
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_reset_int
</UL>

<P><STRONG><a name="[8ea]"></a>mbedtls_ssl_set_timer_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssl_tls.o(.text.mbedtls_ssl_set_timer_cb))
<BR><BR>[Calls]<UL><LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Setup(bool)
</UL>

<P><STRONG><a name="[8e8]"></a>mbedtls_ssl_setup</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ssl_tls.o(.text.mbedtls_ssl_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_ssl_setup &rArr; ssl_handshake_init &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecjpake_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_reset_in_out_pointers
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Setup(bool)
</UL>

<P><STRONG><a name="[ab8]"></a>mbedtls_ssl_transform_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ssl_msg.o(.text.mbedtls_ssl_transform_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_ssl_transform_free &rArr; mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_reset_int
</UL>

<P><STRONG><a name="[ada]"></a>mbedtls_ssl_update_handshake_status</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ssl_msg.o(.text.mbedtls_ssl_update_handshake_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ssl_update_handshake_status &rArr; ssl_buffering_free_slot
</UL>
<BR>[Calls]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_buffering_free_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[ab7]"></a>mbedtls_ssl_update_out_pointers</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ssl_msg.o(.text.mbedtls_ssl_update_out_pointers))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_update_out_pointers
</UL>
<BR>[Called By]<UL><LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_swap_epochs
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
</UL>

<P><STRONG><a name="[8db]"></a>mbedtls_ssl_write</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ssl_msg.o(.text.mbedtls_ssl_write), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_max_out_record_payload
<LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Send(ot::Message&, unsigned short)
</UL>

<P><STRONG><a name="[ac6]"></a>mbedtls_ssl_write_certificate</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ssl_tls.o(.text.mbedtls_ssl_write_certificate))
<BR><BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[ac8]"></a>mbedtls_ssl_write_change_cipher_spec</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl_msg.o(.text.mbedtls_ssl_write_change_cipher_spec))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = mbedtls_ssl_write_change_cipher_spec &rArr; mbedtls_ssl_write_handshake_msg &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt_ext &rArr; mbedtls_cipher_aead_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[ac9]"></a>mbedtls_ssl_write_finished</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, ssl_tls.o(.text.mbedtls_ssl_write_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = mbedtls_ssl_write_finished &rArr; mbedtls_ssl_write_handshake_msg &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt_ext &rArr; mbedtls_cipher_aead_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_update_out_pointers
<LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
<LI><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_flight_completed
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flight_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[ac7]"></a>mbedtls_ssl_write_handshake_msg</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, ssl_msg.o(.text.mbedtls_ssl_write_handshake_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = mbedtls_ssl_write_handshake_msg &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt_ext &rArr; mbedtls_cipher_aead_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[aab]"></a>mbedtls_ssl_write_record</STRONG> (Thumb, 464 bytes, Stack size 64 bytes, ssl_msg.o(.text.mbedtls_ssl_write_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = mbedtls_ssl_write_record &rArr; mbedtls_ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt_ext &rArr; mbedtls_cipher_aead_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_update_out_pointers
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_current_mtu
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_encrypt_buf
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_get_remaining_payload_in_datagram
<LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
</UL>
<BR>[Called By]<UL><LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_handshake_msg
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flight_transmit
</UL>

<P><STRONG><a name="[ac2]"></a>mbedtls_ssl_write_version</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ssl_msg.o(.text.mbedtls_ssl_write_version))
<BR><BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[1a7]"></a>my_fault_handler_c</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, uart_stdio.o(.text.my_fault_handler_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = my_fault_handler_c &rArr; _exp_log_out
</UL>
<BR>[Calls]<UL><LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_exp_log_out
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[ae6]"></a>nwk_mgm_child_register_post</STRONG> (Thumb, 376 bytes, Stack size 592 bytes, network_management.o(.text.nwk_mgm_child_register_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176 + Unknown Stack Size
<LI>Call Chain = nwk_mgm_child_register_post &rArr; nwk_mgm_coap_request &rArr; otCoapMessageGenerateToken &rArr; ot::Coap::Message::GenerateRandomToken(unsigned char) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkGetExtendedAddress
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6AddressToString
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetMaxAllowedChildren
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetChildInfoByIndex
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetRloc16
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetRloc
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetParentInfo
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrGetInstance
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_coap_request
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_stateChangeCallback
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_timer_handler
</UL>

<P><STRONG><a name="[ae7]"></a>nwk_mgm_coap_request</STRONG> (Thumb, 202 bytes, Stack size 88 bytes, network_management.o(.text.nwk_mgm_coap_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584 + Unknown Stack Size
<LI>Call Chain = nwk_mgm_coap_request &rArr; otCoapMessageGenerateToken &rArr; ot::Coap::Message::GenerateRandomToken(unsigned char) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageFree
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageAppend
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapSendRequestWithParameters
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapNewMessage
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageSetPayloadMarker
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageInit
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageGenerateToken
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageAppendUriPathOptions
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrGetInstance
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_register_post
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_kick_child_post
</UL>

<P><STRONG><a name="[ae8]"></a>nwk_mgm_init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, network_management.o(.text.nwk_mgm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = nwk_mgm_init &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapAddResource
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrInitUser
</UL>

<P><STRONG><a name="[c4]"></a>nwk_mgm_neighbor_Change_Callback</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, network_management.o(.text.nwk_mgm_neighbor_Change_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784 + Unknown Stack Size
<LI>Call Chain = nwk_mgm_neighbor_Change_Callback &rArr; otLinkRemoveChildren &rArr; ot::Mle::MleRouter::RemoveChildrenRloc16(unsigned short) &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkRemoveChildren
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkGetPanId
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetRloc16
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetDeviceRole
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrGetInstance
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_kick_child_post
<LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_reg_table_remove
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_reg_table_add
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.text.otrInitUser)
</UL>
<P><STRONG><a name="[aee]"></a>otAppCliInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, cli_uart.o(.text.otAppCliInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = otAppCliInit &rArr; otCliInit &rArr; ot::Cli::Interpreter::Interpreter__sub_object(ot::Instance*, int (*)(void*, char const*, std::__va_list), void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatUartEnable
<LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCliInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrInitUser
</UL>

<P><STRONG><a name="[5a4]"></a>otBackboneRouterGetPrimary</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, backbone_router_api.o(.text.otBackboneRouterGetPrimary))
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BackboneRouter::Leader::GetConfig(otBackboneRouterConfig&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7437938ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5b1]"></a>otChildSupervisionGetCheckFailureCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, child_supervision_api.o(.text.otChildSupervisionGetCheckFailureCounter))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8059602322220575993ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5af]"></a>otChildSupervisionGetCheckTimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, child_supervision_api.o(.text.otChildSupervisionGetCheckTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8059602322220575993ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5b0]"></a>otChildSupervisionGetInterval</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, child_supervision_api.o(.text.otChildSupervisionGetInterval))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8059602322220575993ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5ae]"></a>otChildSupervisionResetCheckFailureCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, child_supervision_api.o(.text.otChildSupervisionResetCheckFailureCounter))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8059602322220575993ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5ac]"></a>otChildSupervisionSetCheckTimeout</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, child_supervision_api.o(.text.otChildSupervisionSetCheckTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = otChildSupervisionSetCheckTimeout &rArr; ot::SupervisionListener::SetTimeout(unsigned short) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::SetTimeout(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8059602322220575993ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5ad]"></a>otChildSupervisionSetInterval</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, child_supervision_api.o(.text.otChildSupervisionSetInterval))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768 + Unknown Stack Size
<LI>Call Chain = otChildSupervisionSetInterval &rArr; ot::SupervisionListener::SetInterval(unsigned short) &rArr; ot::Mle::Mle::SendChildUpdateRequest() &rArr; ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SupervisionListener::SetInterval(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8059602322220575993ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[af0]"></a>otCliInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cli.o(.text.otCliInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = otCliInit &rArr; ot::Cli::Interpreter::Interpreter__sub_object(ot::Instance*, int (*)(void*, char const*, std::__va_list), void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::Interpreter__sub_object(ot::Instance*, int (*)(void*, char const*, std::__va_list), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otAppCliInit
</UL>

<P><STRONG><a name="[af2]"></a>otCliInputLine</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cli.o(.text.otCliInputLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = otCliInputLine &rArr; ot::Cli::Interpreter::ProcessLine(char*) &rArr; ot::Cli::Interpreter::ProcessCommand(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Interpreter::ProcessUserCommands(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Utils::CmdLineParser::Arg::operator==(char const*) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessLine(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatUartReceived
</UL>

<P><STRONG><a name="[5eb]"></a>otCoapAddResource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, coap_api.o(.text.otCoapAddResource))
<BR><BR>[Calls]<UL><LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::AddResource(ot::Coap::Resource&)
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Coap::Process&lang;7108473799409246994ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_init
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_init
</UL>

<P><STRONG><a name="[5e5]"></a>otCoapMessageAppendUriPathOptions</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, coap_api.o(.text.otCoapMessageAppendUriPathOptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = otCoapMessageAppendUriPathOptions &rArr; ot::Coap::Message::AppendUriPathOptions(char const*) &rArr; ot::Coap::Message::AppendOption(unsigned short, unsigned short, void const*) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::AppendUriPathOptions(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::ProcessRequest(ot::Utils::CmdLineParser::Arg*, otCoapCode)
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_coap_request
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_coap_request
</UL>

<P><STRONG><a name="[5e4]"></a>otCoapMessageGenerateToken</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, coap_api.o(.text.otCoapMessageGenerateToken))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = otCoapMessageGenerateToken &rArr; ot::Coap::Message::GenerateRandomToken(unsigned char) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::GenerateRandomToken(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::ProcessRequest(ot::Utils::CmdLineParser::Arg*, otCoapCode)
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_coap_request
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_coap_request
</UL>

<P><STRONG><a name="[5da]"></a>otCoapMessageGetCode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, coap_api.o(.text.otCoapMessageGetCode))
<BR><BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::HandleRequest(otMessage*, otMessageInfo const*)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[5db]"></a>otCoapMessageGetType</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, coap_api.o(.text.otCoapMessageGetType))
<BR><BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::HandleRequest(otMessage*, otMessageInfo const*)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_request_proccess
</UL>

<P><STRONG><a name="[5e3]"></a>otCoapMessageInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, coap_api.o(.text.otCoapMessageInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = otCoapMessageInit &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code) &rArr; ot::Coap::Message::Init() &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::ProcessRequest(ot::Utils::CmdLineParser::Arg*, otCoapCode)
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_coap_request
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_coap_request
</UL>

<P><STRONG><a name="[5dd]"></a>otCoapMessageInitResponse</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, coap_api.o(.text.otCoapMessageInitResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = otCoapMessageInitResponse &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code) &rArr; ot::Coap::Message::Init() &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code)
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::SetTokenFromMessage(ot::Coap::Message const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::HandleRequest(otMessage*, otMessageInfo const*)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_request_proccess
</UL>

<P><STRONG><a name="[5de]"></a>otCoapMessageSetPayloadMarker</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, coap_api.o(.text.otCoapMessageSetPayloadMarker))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = otCoapMessageSetPayloadMarker &rArr; ot::Coap::Message::SetPayloadMarker() &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::SetPayloadMarker()
</UL>
<BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::ProcessRequest(ot::Utils::CmdLineParser::Arg*, otCoapCode)
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::HandleRequest(otMessage*, otMessageInfo const*)
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_coap_request
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_coap_request
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_request_proccess
</UL>

<P><STRONG><a name="[5dc]"></a>otCoapNewMessage</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, coap_api.o(.text.otCoapNewMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = otCoapNewMessage &rArr; ot::Coap::CoapBase::NewMessage(ot::Message::Settings const&) &rArr; ot::Ip6::Udp::NewMessage(unsigned short, ot::Message::Settings const&) &rArr; ot::Ip6::Ip6::NewMessage(unsigned short, ot::Message::Settings const&) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Settings::From(otMessageSettings const*)
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::NewMessage(ot::Message::Settings const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::ProcessRequest(ot::Utils::CmdLineParser::Arg*, otCoapCode)
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::HandleRequest(otMessage*, otMessageInfo const*)
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_coap_request
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_coap_request
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_request_proccess
</UL>

<P><STRONG><a name="[5e7]"></a>otCoapRemoveResource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, coap_api.o(.text.otCoapRemoveResource))
<BR><BR>[Calls]<UL><LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::RemoveResource(ot::Coap::Resource&)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Coap::Process&lang;1864361470ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5e6]"></a>otCoapSendRequestWithParameters</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, coap_api.o(.text.otCoapSendRequestWithParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = otCoapSendRequestWithParameters &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::TxParameters::IsValid() const
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::ProcessRequest(ot::Utils::CmdLineParser::Arg*, otCoapCode)
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_coap_request
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_coap_request
</UL>

<P><STRONG><a name="[5df]"></a>otCoapSendResponseWithParameters</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, coap_api.o(.text.otCoapSendResponseWithParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = otCoapSendResponseWithParameters &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::HandleRequest(otMessage*, otMessageInfo const*)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_request_proccess
</UL>

<P><STRONG><a name="[5e9]"></a>otCoapStart</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, coap_api.o(.text.otCoapStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = otCoapStart &rArr; ot::Coap::Coap::Start(unsigned short, ot::Ip6::NetifIdentifier) &rArr; ot::Ip6::Udp::Socket::Bind(unsigned short, ot::Ip6::NetifIdentifier) &rArr; ot::Ip6::Udp::Bind(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&, ot::Ip6::NetifIdentifier) &rArr; ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Address const&) const &rArr; bool ot::LinkedList&lang;ot::Ip6::Netif::UnicastAddress&rang;::ContainsMatching&lang;ot::Ip6::Address&rang;(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Coap::Start(unsigned short, ot::Ip6::NetifIdentifier)
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Coap::Process&lang;492373686370ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_init
</UL>

<P><STRONG><a name="[5e8]"></a>otCoapStop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, coap_api.o(.text.otCoapStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = otCoapStop &rArr; ot::Coap::Coap::Stop() &rArr; ot::Coap::CoapBase::ClearRequests(ot::Ip6::Address const*) &rArr; ot::Coap::CoapBase::Metadata::ReadFrom(ot::Coap::Message const&) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Coap::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Coap::Process&lang;1864361470ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[60c]"></a>otDatasetConvertToTlvs</STRONG> (Thumb, 38 bytes, Stack size 280 bytes, dataset_api.o(.text.otDatasetConvertToTlvs))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = otDatasetConvertToTlvs &rArr; ot::MeshCoP::Dataset::SetFrom(ot::MeshCoP::Dataset::Info const&) &rArr; ot::MeshCoP::Dataset::SetTlv(ot::MeshCoP::Tlv::Type, void const*, unsigned char) &rArr; ot::MeshCoP::Tlv::FindTlv(unsigned char const*, unsigned short, ot::MeshCoP::Tlv::Type)
</UL>
<BR>[Calls]<UL><LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ConvertTo(otOperationalDatasetTlvs&) const
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Dataset()
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetFrom(ot::MeshCoP::Dataset::Info const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;1930295280ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[60b]"></a>otDatasetCreateNewNetwork</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dataset_ftd_api.o(.text.otDatasetCreateNewNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = otDatasetCreateNewNetwork &rArr; ot::MeshCoP::Dataset::Info::GenerateRandom(ot::Instance&) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Info::GenerateRandom(ot::Instance&)
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;1930295280ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[549]"></a>otDatasetGeneratePskc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dataset_api.o(.text.otDatasetGeneratePskc))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = otDatasetGeneratePskc &rArr; ot::MeshCoP::GeneratePskc(char const*, ot::MeshCoP::NetworkName const&, ot::MeshCoP::ExtendedPanId const&, ot::Pskc&) &rArr; otPlatCryptoPbkdf2GenerateKey &rArr; mbedtls_aes_cmac_prf_128 &rArr; mbedtls_cipher_cmac &rArr; mbedtls_cipher_cmac_finish &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::GeneratePskc(char const*, ot::MeshCoP::NetworkName const&, ot::MeshCoP::ExtendedPanId const&, ot::Pskc&)
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;1648543237ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1648543237ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[af7]"></a>otDatasetGetActive</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dataset_api.o(.text.otDatasetGetActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = otDatasetGetActive &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset::Info&) const &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset::Info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrInitUser
</UL>

<P><STRONG><a name="[600]"></a>otDatasetGetActiveTlvs</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dataset_api.o(.text.otDatasetGetActiveTlvs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = otDatasetGetActiveTlvs &rArr; ot::MeshCoP::DatasetLocal::Read(otOperationalDatasetTlvs&) const &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(otOperationalDatasetTlvs&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;1930295280ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;109399277033242ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[58f]"></a>otDatasetGetDelayTimerMinimal</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dataset_ftd_api.o(.text.otDatasetGetDelayTimerMinimal))
<BR><BR>[Calls]<UL><LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::GetDelayTimerMinimal() const
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;5345021259271145584ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[60a]"></a>otDatasetGetPendingTlvs</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dataset_api.o(.text.otDatasetGetPendingTlvs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = otDatasetGetPendingTlvs &rArr; ot::MeshCoP::DatasetLocal::Read(otOperationalDatasetTlvs&) const &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(otOperationalDatasetTlvs&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;28438073741397367ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;1930295280ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5ff]"></a>otDatasetParseTlvs</STRONG> (Thumb, 48 bytes, Stack size 280 bytes, dataset_api.o(.text.otDatasetParseTlvs))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = otDatasetParseTlvs &rArr; ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const &rArr; ot::MeshCoP::SecurityPolicyTlv::GetSecurityPolicy() const &rArr; ot::SecurityPolicy::SetFlags(unsigned char const*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ConvertTo(ot::MeshCoP::Dataset::Info&) const
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::IsValid() const
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Dataset()
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetFrom(otOperationalDatasetTlvs const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;7568770ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;7040008844819482601ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;513233767555ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;424573284472ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;29803101196888419ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;2882870027264844783ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;17991946006187835024ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;1648543237ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;15490430763919346926ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;13879157579010930576ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;13154242556027051009ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;11734141454226389327ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;11015563977516890969ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Dataset::Print(otOperationalDatasetTlvs&)
</UL>

<P><STRONG><a name="[606]"></a>otDatasetSendMgmtActiveGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dataset_api.o(.text.otDatasetSendMgmtActiveGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = otDatasetSendMgmtActiveGet &rArr; ot::MeshCoP::DatasetManager::SendGetRequest(ot::MeshCoP::Dataset::Components const&, unsigned char const*, unsigned char, otIp6Address const*) const &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendGetRequest(ot::MeshCoP::Dataset::Components const&, unsigned char const*, unsigned char, otIp6Address const*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;12771032453691045162ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[608]"></a>otDatasetSendMgmtActiveSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dataset_api.o(.text.otDatasetSendMgmtActiveSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616 + Unknown Stack Size
<LI>Call Chain = otDatasetSendMgmtActiveSet &rArr; ot::MeshCoP::DatasetManager::SendSetRequest(ot::MeshCoP::Dataset::Info const&, unsigned char const*, unsigned char, void (*)(otError, void*), void*) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSetRequest(ot::MeshCoP::Dataset::Info const&, unsigned char const*, unsigned char, void (*)(otError, void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;12771032504430052662ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[607]"></a>otDatasetSendMgmtPendingGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dataset_api.o(.text.otDatasetSendMgmtPendingGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = otDatasetSendMgmtPendingGet &rArr; ot::MeshCoP::DatasetManager::SendGetRequest(ot::MeshCoP::Dataset::Components const&, unsigned char const*, unsigned char, otIp6Address const*) const &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendGetRequest(ot::MeshCoP::Dataset::Components const&, unsigned char const*, unsigned char, otIp6Address const*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;12771032453691045162ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[609]"></a>otDatasetSendMgmtPendingSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dataset_api.o(.text.otDatasetSendMgmtPendingSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616 + Unknown Stack Size
<LI>Call Chain = otDatasetSendMgmtPendingSet &rArr; ot::MeshCoP::DatasetManager::SendSetRequest(ot::MeshCoP::Dataset::Info const&, unsigned char const*, unsigned char, void (*)(otError, void*), void*) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::SendSetRequest(ot::MeshCoP::Dataset::Info const&, unsigned char const*, unsigned char, void (*)(otError, void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;12771032504430052662ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[aec]"></a>otDatasetSetActive</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dataset_api.o(.text.otDatasetSetActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176 + Unknown Stack Size
<LI>Call Chain = otDatasetSetActive &rArr; ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset::Info const&) &rArr; ot::MeshCoP::DatasetManager::HandleDatasetUpdated() &rArr; ot::MeshCoP::DatasetManager::SendSet() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset::Info const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrInitUser
<LI><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_reset
</UL>

<P><STRONG><a name="[603]"></a>otDatasetSetActiveTlvs</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dataset_api.o(.text.otDatasetSetActiveTlvs))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176 + Unknown Stack Size
<LI>Call Chain = otDatasetSetActiveTlvs &rArr; ot::MeshCoP::DatasetManager::Save(otOperationalDatasetTlvs const&) &rArr; ot::MeshCoP::DatasetManager::HandleDatasetUpdated() &rArr; ot::MeshCoP::DatasetManager::SendSet() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Save(otOperationalDatasetTlvs const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Reattach()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;7568770ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;125517434289129ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[590]"></a>otDatasetSetDelayTimerMinimal</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dataset_ftd_api.o(.text.otDatasetSetDelayTimerMinimal))
<BR><BR>[Calls]<UL><LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Leader::SetDelayTimerMinimal(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;5345021259271145584ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[604]"></a>otDatasetSetPendingTlvs</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dataset_api.o(.text.otDatasetSetPendingTlvs))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176 + Unknown Stack Size
<LI>Call Chain = otDatasetSetPendingTlvs &rArr; ot::MeshCoP::PendingDatasetManager::Save(otOperationalDatasetTlvs const&) &rArr; ot::MeshCoP::DatasetManager::HandleDatasetUpdated() &rArr; ot::MeshCoP::DatasetManager::SendSet() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::Save(otOperationalDatasetTlvs const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;7568770ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;125517434289129ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[602]"></a>otDatasetUpdateTlvs</STRONG> (Thumb, 48 bytes, Stack size 280 bytes, dataset_api.o(.text.otDatasetUpdateTlvs))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = otDatasetUpdateTlvs &rArr; ot::MeshCoP::Dataset::SetFrom(ot::MeshCoP::Dataset::Info const&) &rArr; ot::MeshCoP::Dataset::SetTlv(ot::MeshCoP::Tlv::Type, void const*, unsigned char) &rArr; ot::MeshCoP::Tlv::FindTlv(unsigned char const*, unsigned short, ot::MeshCoP::Tlv::Type)
</UL>
<BR>[Calls]<UL><LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ConvertTo(otOperationalDatasetTlvs&) const
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Dataset()
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetFrom(ot::MeshCoP::Dataset::Info const&)
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetFrom(otOperationalDatasetTlvs const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Reattach()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;7040008844819482601ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;513233767555ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;424573284472ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;29803101196888419ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;2882870027264844783ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;17991946006187835024ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;1648543237ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;15490430763919346926ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;13879157579010930576ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;13154242556027051009ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;11734141454226389327ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;11015563977516890969ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5a6]"></a>otDnsIsNameCompressionEnabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dns_api.o(.text.otDnsIsNameCompressionEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7506025ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5a5]"></a>otDnsSetNameCompressionEnabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dns_api.o(.text.otDnsSetNameCompressionEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7506025ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[566]"></a>otGetVersionString</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, instance_api.o(.text.otGetVersionString))
<BR><BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetVersionString
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7308159ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;30363746172521848ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrInitUser
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_get_fan_status
</UL>

<P><STRONG><a name="[5a7]"></a>otInstanceFactoryReset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, instance_api.o(.text.otInstanceFactoryReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = otInstanceFactoryReset &rArr; ot::Instance::FactoryReset() &rArr; ot::Settings::Wipe() &rArr; otPlatSettingsWipe &rArr; efd_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::FactoryReset()
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;775738714908436955ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[af9]"></a>otInstanceInitSingle</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, instance_api.o(.text.otInstanceInitSingle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = otInstanceInitSingle &rArr; ot::Instance::InitSingle() &rArr; ot::Mle::Mle::Restore() &rArr; ot::MeshCoP::DatasetManager::Restore() &rArr; ot::MeshCoP::DatasetLocal::Restore(ot::MeshCoP::Dataset&) &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::InitSingle()
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b07]"></a>otInstanceIsInitialized</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, instance_api.o(.text.otInstanceIsInitialized))
<BR><BR>[Called By]<UL><LI><a href="#[b29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otTaskletsProcess
<LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliFired
</UL>

<P><STRONG><a name="[588]"></a>otInstanceReset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, instance_api.o(.text.otInstanceReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = otInstanceReset &rArr; ot::Instance::Reset() &rArr; otPlatReset &rArr; Wdt_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;492159295119ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[837]"></a>otIp4AddressFromString</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nat64_api.o(.text.otIp4AddressFromString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = otIp4AddressFromString &rArr; ot::Ip4::Address::FromString(char const*, char)
</UL>
<BR>[Calls]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip4::Address::FromString(char const*, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsIp4Address(char const*, otIp4Address&)
</UL>

<P><STRONG><a name="[51f]"></a>otIp6AddUnicastAddress</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ip6_api.o(.text.otIp6AddUnicastAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = otIp6AddUnicastAddress &rArr; ot::Ip6::Netif::AddExternalUnicastAddress(ot::Ip6::Netif::UnicastAddress const&) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::AddExternalUnicastAddress(ot::Ip6::Netif::UnicastAddress const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;123339735204840ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5b2]"></a>otIp6AddUnsecurePort</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ip6_api.o(.text.otIp6AddUnsecurePort))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = otIp6AddUnsecurePort &rArr; ot::Ip6::Filter::UpdateUnsecurePorts(ot::Ip6::Filter::Action, unsigned short) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Filter::UpdateUnsecurePorts(ot::Ip6::Filter::Action, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;807264858141456911ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[838]"></a>otIp6AddressFromString</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ip6_api.o(.text.otIp6AddressFromString))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = otIp6AddressFromString &rArr; ot::Ip6::Address::FromString(char const*) &rArr; ot::Ip4::Address::FromString(char const*, char)
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::FromString(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsIp6Address(char const*, otIp6Address&)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_udpsend
<LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
</UL>

<P><STRONG><a name="[5f7]"></a>otIp6AddressToString</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ip6_api.o(.text.otIp6AddressToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = otIp6AddressToString &rArr; ot::Ip6::Address::ToString(char*, unsigned short) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::ToString(char*, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6AddressLine(otIp6Address const&)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6Address(otIp6Address const&)
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_register_post
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udp_cb
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_request_proccess
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_kick_child_post
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_ack_process
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Rafael_data
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_number
</UL>

<P><STRONG><a name="[56f]"></a>otIp6GetMulticastAddresses</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ip6_api.o(.text.otIp6GetMulticastAddresses))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;31451632477041015ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[520]"></a>otIp6GetUnicastAddresses</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ip6_api.o(.text.otIp6GetUnicastAddresses))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;123339735204840ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5b4]"></a>otIp6GetUnsecurePorts</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ip6_api.o(.text.otIp6GetUnsecurePorts))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;807264858141456911ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5a1]"></a>otIp6IsEnabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ip6_api.o(.text.otIp6IsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7250330901759102465ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[574]"></a>otIp6IsMulticastPromiscuousEnabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ip6_api.o(.text.otIp6IsMulticastPromiscuousEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;31451632477041015ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5f5]"></a>otIp6PrefixToString</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ip6_api.o(.text.otIp6PrefixToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = otIp6PrefixToString &rArr; ot::Ip6::Prefix::ToString(char*, unsigned short) const &rArr; ot::Ip6::Prefix::ToString(ot::StringWriter&) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::ToString(char*, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Output::OutputIp6Prefix(otIp6Prefix const&)
</UL>

<P><STRONG><a name="[5b3]"></a>otIp6RemoveAllUnsecurePorts</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ip6_api.o(.text.otIp6RemoveAllUnsecurePorts))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;807264858141456911ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[521]"></a>otIp6RemoveUnicastAddress</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ip6_api.o(.text.otIp6RemoveUnicastAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = otIp6RemoveUnicastAddress &rArr; ot::Ip6::Netif::RemoveExternalUnicastAddress(ot::Ip6::Address const&) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::RemoveExternalUnicastAddress(ot::Ip6::Address const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;123339735204840ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5b5]"></a>otIp6RemoveUnsecurePort</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ip6_api.o(.text.otIp6RemoveUnsecurePort))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = otIp6RemoveUnsecurePort &rArr; ot::Ip6::Filter::UpdateUnsecurePorts(ot::Ip6::Filter::Action, unsigned short) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Filter::UpdateUnsecurePorts(ot::Ip6::Filter::Action, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;807264858141456911ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5a2]"></a>otIp6SetEnabled</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ip6_api.o(.text.otIp6SetEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = otIp6SetEnabled &rArr; ot::ThreadNetif::Down() &rArr; ot::Mle::Mle::Disable() &rArr; ot::Mle::Mle::Stop(ot::Mle::Mle::StopMode) &rArr; ot::MeshCoP::DatasetManager::HandleDetach() &rArr; ot::MeshCoP::DatasetManager::Restore() &rArr; ot::MeshCoP::DatasetLocal::Restore(ot::MeshCoP::Dataset&) &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ThreadNetif::Down()
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ThreadNetif::Up()
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7250330901759102465ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrInitUser
</UL>

<P><STRONG><a name="[57e]"></a>otIp6SetMeshLocalIid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ip6_api.o(.text.otIp6SetMeshLocalIid))
<BR><BR>[Calls]<UL><LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetMeshLocalIid(ot::Ip6::InterfaceIdentifier const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;424572962149ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_init
</UL>

<P><STRONG><a name="[571]"></a>otIp6SetMulticastPromiscuousEnabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ip6_api.o(.text.otIp6SetMulticastPromiscuousEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;31451632477041015ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[57a]"></a>otIp6SockAddrToString</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ip6_api.o(.text.otIp6SockAddrToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = otIp6SockAddrToString &rArr; ot::Ip6::SockAddr::ToString(char*, unsigned short) const &rArr; ot::Ip6::Address::ToString() const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::SockAddr::ToString(char*, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;31998349810021265ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[56e]"></a>otIp6SubscribeMulticastAddress</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ip6_api.o(.text.otIp6SubscribeMulticastAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = otIp6SubscribeMulticastAddress &rArr; ot::Ip6::Netif::SubscribeExternalMulticast(ot::Ip6::Address const&) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::SubscribeExternalMulticast(ot::Ip6::Address const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;31451632477041015ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[570]"></a>otIp6UnsubscribeMulticastAddress</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ip6_api.o(.text.otIp6UnsubscribeMulticastAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = otIp6UnsubscribeMulticastAddress &rArr; ot::Ip6::Netif::UnsubscribeExternalMulticast(ot::Ip6::Address const&) &rArr; ot::Notifier::Signal(ot::Event) &rArr; ot::Tasklet::Post() &rArr; otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::UnsubscribeExternalMulticast(ot::Ip6::Address const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;31451632477041015ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5ee]"></a>otJoinerGetDiscerner</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, joiner_api.o(.text.otJoinerGetDiscerner))
<BR><BR>[Calls]<UL><LI><a href="#[afb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::GetDiscerner() const
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Joiner::Process&lang;16073431636142911865ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5f0]"></a>otJoinerGetId</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, joiner_api.o(.text.otJoinerGetId))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Joiner::Process&lang;25605ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5f1]"></a>otJoinerGetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, joiner_api.o(.text.otJoinerGetState))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Joiner::Process&lang;428983089745ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5ed]"></a>otJoinerSetDiscerner</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, joiner_api.o(.text.otJoinerSetDiscerner))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504 + Unknown Stack Size
<LI>Call Chain = otJoinerSetDiscerner &rArr; ot::MeshCoP::Joiner::SetDiscerner(ot::MeshCoP::JoinerDiscerner const&) &rArr; ot::MeshCoP::JoinerDiscerner::GenerateJoinerId(ot::Mac::ExtAddress&) const &rArr; ot::Mac::ExtAddress::GenerateRandom() &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::ClearDiscerner()
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SetDiscerner(ot::MeshCoP::JoinerDiscerner const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Joiner::Process&lang;16073431636142911865ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5f3]"></a>otJoinerStart</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, joiner_api.o(.text.otJoinerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = otJoinerStart &rArr; ot::MeshCoP::Joiner::Start(char const*, char const*, char const*, char const*, char const*, char const*, void (*)(otError, void*), void*) &rArr; ot::MeshCoP::Joiner::PrepareJoinerFinalizeMessage(char const*, char const*, char const*, char const*, char const*) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Start(char const*, char const*, char const*, char const*, char const*, char const*, void (*)(otError, void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Joiner::Process&lang;492373686370ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5f2]"></a>otJoinerStateToString</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, joiner_api.o(.text.otJoinerStateToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = otJoinerStateToString &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::StateToString(ot::MeshCoP::Joiner::State)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Joiner::Process&lang;428983089745ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5ef]"></a>otJoinerStop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, joiner_api.o(.text.otJoinerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = otJoinerStop &rArr; ot::MeshCoP::Joiner::Stop() &rArr; ot::MeshCoP::Joiner::Finish(otError) &rArr; ot::Coap::CoapSecure::Stop() &rArr; ot::MeshCoP::Dtls::Close() &rArr; ot::MeshCoP::Dtls::Disconnect() &rArr; mbedtls_ssl_close_notify &rArr; mbedtls_ssl_write_record &rArr; mbedtls_ssl_encrypt_buf &rArr; mbedtls_cipher_auth_encrypt_ext &rArr; mbedtls_cipher_aead_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Joiner::Process&lang;1864361470ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[556]"></a>otLinkActiveScan</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, link_api.o(.text.otLinkActiveScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = otLinkActiveScan &rArr; ot::Mac::Mac::ActiveScan(unsigned int, unsigned short, void (*)(otActiveScanResult*, void*), void*) &rArr; ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ActiveScan(unsigned int, unsigned short, void (*)(otActiveScanResult*, void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1830284035ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[ae2]"></a>otLinkBlackListAddPanId</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, link_api.o(.text.otLinkBlackListAddPanId))
<BR><BR>[Calls]<UL><LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::AddBlackList(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_request_proccess
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_ack_process
</UL>

<P><STRONG><a name="[4f5]"></a>otLinkConvertLinkQualityToRss</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, link_api.o(.text.otLinkConvertLinkQualityToRss))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = otLinkConvertLinkQualityToRss
</UL>
<BR>[Calls]<UL><LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::GetNoiseFloor() const
<LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::GetTypicalRssForLinkQuality(signed char, ot::LinkQuality)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterRss(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4e9]"></a>otLinkConvertRssToLinkQuality</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, link_api.o(.text.otLinkConvertRssToLinkQuality))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = otLinkConvertRssToLinkQuality &rArr; ot::Mac::Mac::ComputeLinkMargin(signed char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ComputeLinkMargin(signed char) const
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::LinkQualityForLinkMargin(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputMacFilterEntry(otMacFilterEntry const&)
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterRss(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::PrintMacFilter()
</UL>

<P><STRONG><a name="[555]"></a>otLinkEnergyScan</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, link_api.o(.text.otLinkEnergyScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = otLinkEnergyScan &rArr; ot::Mac::Mac::EnergyScan(unsigned int, unsigned short, void (*)(otEnergyScanResult*, void*), void*) &rArr; ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::EnergyScan(unsigned int, unsigned short, void (*)(otEnergyScanResult*, void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1830284035ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[50b]"></a>otLinkFilterAddAddress</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, link_api.o(.text.otLinkFilterAddAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = otLinkFilterAddAddress &rArr; ot::Mac::Filter::AddAddress(ot::Mac::ExtAddress const&) &rArr; ot::Mac::Filter::FindEntry(ot::Mac::ExtAddress const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Filter::AddAddress(ot::Mac::ExtAddress const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterAddress(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4fb]"></a>otLinkFilterAddRssIn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, link_api.o(.text.otLinkFilterAddRssIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = otLinkFilterAddRssIn &rArr; ot::Mac::Filter::AddRssIn(ot::Mac::ExtAddress const&, signed char) &rArr; ot::Mac::Filter::FindEntry(ot::Mac::ExtAddress const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Filter::AddRssIn(ot::Mac::ExtAddress const&, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterAddress(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterRss(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[50d]"></a>otLinkFilterClearAddresses</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, link_api.o(.text.otLinkFilterClearAddresses))
<BR><BR>[Calls]<UL><LI><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Filter::ClearAddresses()
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterAddress(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4f9]"></a>otLinkFilterClearAllRssIn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, link_api.o(.text.otLinkFilterClearAllRssIn))
<BR><BR>[Calls]<UL><LI><a href="#[b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Filter::ClearAllRssIn()
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterRss(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4f8]"></a>otLinkFilterClearDefaultRssIn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, link_api.o(.text.otLinkFilterClearDefaultRssIn))
<BR><BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterRss(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4e5]"></a>otLinkFilterGetAddressMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, link_api.o(.text.otLinkFilterGetAddressMode))
<BR><BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterAddress(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::PrintMacFilter()
</UL>

<P><STRONG><a name="[4e6]"></a>otLinkFilterGetNextAddress</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, link_api.o(.text.otLinkFilterGetNextAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = otLinkFilterGetNextAddress &rArr; ot::Mac::Filter::GetNextAddress(unsigned char&, otMacFilterEntry&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[b01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Filter::GetNextAddress(unsigned char&, otMacFilterEntry&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterAddress(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::PrintMacFilter()
</UL>

<P><STRONG><a name="[4e8]"></a>otLinkFilterGetNextRssIn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, link_api.o(.text.otLinkFilterGetNextRssIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = otLinkFilterGetNextRssIn &rArr; ot::Mac::Filter::GetNextRssIn(unsigned char&, otMacFilterEntry&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[b02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Filter::GetNextRssIn(unsigned char&, otMacFilterEntry&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterRss(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::PrintMacFilter()
</UL>

<P><STRONG><a name="[50c]"></a>otLinkFilterRemoveAddress</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, link_api.o(.text.otLinkFilterRemoveAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = otLinkFilterRemoveAddress &rArr; ot::Mac::Filter::RemoveAddress(ot::Mac::ExtAddress const&) &rArr; ot::Mac::Filter::FindEntry(ot::Mac::ExtAddress const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Filter::RemoveAddress(ot::Mac::ExtAddress const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterAddress(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4fc]"></a>otLinkFilterRemoveRssIn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, link_api.o(.text.otLinkFilterRemoveRssIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = otLinkFilterRemoveRssIn &rArr; ot::Mac::Filter::RemoveRssIn(ot::Mac::ExtAddress const&) &rArr; ot::Mac::Filter::FindEntry(ot::Mac::ExtAddress const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Filter::RemoveRssIn(ot::Mac::ExtAddress const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterRss(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[50a]"></a>otLinkFilterSetAddressMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, link_api.o(.text.otLinkFilterSetAddressMode))
<BR><BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterAddress(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4f7]"></a>otLinkFilterSetDefaultRssIn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, link_api.o(.text.otLinkFilterSetDefaultRssIn))
<BR><BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessMacFilterRss(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[562]"></a>otLinkGetChannel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, link_api.o(.text.otLinkGetChannel))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;29803101196888419ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrInitUser
</UL>

<P><STRONG><a name="[5b8]"></a>otLinkGetCounters</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, link_api.o(.text.otLinkGetCounters))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8094126837366616329ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[576]"></a>otLinkGetExtendedAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, link_api.o(.text.otLinkGetExtendedAddress))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;31451632477498226ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_register_post
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_stateChangeCallback
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_ack_process
</UL>

<P><STRONG><a name="[55b]"></a>otLinkGetFactoryAssignedIeeeEui64</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, link_api.o(.text.otLinkGetFactoryAssignedIeeeEui64))
<BR><BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetIeeeEui64
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;220771284311ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[597]"></a>otLinkGetMaxFrameRetriesDirect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, link_api.o(.text.otLinkGetMaxFrameRetriesDirect))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;6462319ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[599]"></a>otLinkGetMaxFrameRetriesIndirect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, link_api.o(.text.otLinkGetMaxFrameRetriesIndirect))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;6462319ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[57f]"></a>otLinkGetPanId</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, link_api.o(.text.otLinkGetPanId))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;424573284472ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrInitUser
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_neighbor_Change_Callback
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_ack_process
</UL>

<P><STRONG><a name="[550]"></a>otLinkGetPollPeriod</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, link_api.o(.text.otLinkGetPollPeriod))
<BR><BR>[Calls]<UL><LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::GetKeepAlivePollPeriod() const
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;16863212019509908256ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[537]"></a>otLinkIsPromiscuous</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, link_api.o(.text.otLinkIsPromiscuous))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;14555083096433720913ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[541]"></a>otLinkIsRadioFilterEnabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, link_api.o(.text.otLinkIsRadioFilterEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;15435009332132253075ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[ae1]"></a>otLinkRemoveChildren</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, link_api.o(.text.otLinkRemoveChildren))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760 + Unknown Stack Size
<LI>Call Chain = otLinkRemoveChildren &rArr; ot::Mle::MleRouter::RemoveChildrenRloc16(unsigned short) &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveChildrenRloc16(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_neighbor_Change_Callback
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_ack_process
</UL>

<P><STRONG><a name="[5b6]"></a>otLinkResetCounters</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, link_api.o(.text.otLinkResetCounters))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = otLinkResetCounters
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8094126837366616329ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[595]"></a>otLinkSendDataRequest</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, link_api.o(.text.otLinkSendDataRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = otLinkSendDataRequest &rArr; ot::DataPollSender::SendDataPoll() &rArr; ot::Mac::Mac::RequestDataPollTransmission() &rArr; ot::Mac::Mac::StartOperation(ot::Mac::Mac::Operation) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::SendDataPoll()
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;6462319ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[598]"></a>otLinkSendEmptyData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, link_api.o(.text.otLinkSendEmptyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = otLinkSendEmptyData &rArr; ot::MeshForwarder::SendEmptyMessage() &rArr; ot::MessagePool::Allocate(ot::Message::Type) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendEmptyMessage()
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;6462319ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[563]"></a>otLinkSetChannel</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, link_api.o(.text.otLinkSetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = otLinkSetChannel &rArr; ot::MeshCoP::PendingDatasetManager::Clear() &rArr; ot::MeshCoP::DatasetManager::Clear() &rArr; ot::MeshCoP::DatasetLocal::Clear() &rArr; ot::Settings::DeleteOperationalDataset(ot::MeshCoP::Dataset::Type) &rArr; otPlatSettingsDelete &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::Clear()
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Clear()
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetPanChannel(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;29803101196888419ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[575]"></a>otLinkSetExtendedAddress</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, link_api.o(.text.otLinkSetExtendedAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = otLinkSetExtendedAddress &rArr; ot::Mac::SubMac::SetExtAddress(ot::Mac::ExtAddress const&) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::UpdateLinkLocalAddress()
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetExtAddress(ot::Mac::ExtAddress const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;31451632477498226ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_init
</UL>

<P><STRONG><a name="[594]"></a>otLinkSetMaxFrameRetriesDirect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, link_api.o(.text.otLinkSetMaxFrameRetriesDirect))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;6462319ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[596]"></a>otLinkSetMaxFrameRetriesIndirect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, link_api.o(.text.otLinkSetMaxFrameRetriesIndirect))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;6462319ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[580]"></a>otLinkSetPanId</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, link_api.o(.text.otLinkSetPanId))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = otLinkSetPanId &rArr; ot::MeshCoP::PendingDatasetManager::Clear() &rArr; ot::MeshCoP::DatasetManager::Clear() &rArr; ot::MeshCoP::DatasetLocal::Clear() &rArr; ot::Settings::DeleteOperationalDataset(ot::MeshCoP::Dataset::Type) &rArr; otPlatSettingsDelete &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::Clear()
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Clear()
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetPanId(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;424573284472ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[535]"></a>otLinkSetPcapCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, link_api.o(.text.otLinkSetPcapCallback))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;14555083096433720913ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[551]"></a>otLinkSetPollPeriod</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, link_api.o(.text.otLinkSetPollPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = otLinkSetPollPeriod &rArr; ot::DataPollSender::SetExternalPollPeriod(unsigned int) &rArr; ot::DataPollSender::ScheduleNextPoll(ot::DataPollSender::PollPeriodSelector) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::SetExternalPollPeriod(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;16863212019509908256ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[536]"></a>otLinkSetPromiscuous</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, link_api.o(.text.otLinkSetPromiscuous))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = otLinkSetPromiscuous &rArr; ot::Mac::Mac::SetPromiscuous(bool) &rArr; ot::Mac::Mac::UpdateIdleMode() &rArr; ot::Mac::SubMac::Receive(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetPromiscuous(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;14555083096433720913ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[540]"></a>otLinkSetRadioFilterEnabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, link_api.o(.text.otLinkSetRadioFilterEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = otLinkSetRadioFilterEnabled &rArr; ot::Mac::Mac::SetRadioFilterEnabled(bool) &rArr; ot::Mac::Mac::UpdateIdleMode() &rArr; ot::Mac::SubMac::Receive(unsigned char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetRadioFilterEnabled(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;15435009332132253075ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[b04]"></a>otLogDebgPlat</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, logging_api.o(.text.otLogDebgPlat))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = otLogDebgPlat &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSleep
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioEnable
</UL>

<P><STRONG><a name="[1fa]"></a>otLogWarnPlat</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, logging_api.o(.text.otLogWarnPlat))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = otLogWarnPlat &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CliUartOutput(void*, char const*, std::__va_list)
</UL>

<P><STRONG><a name="[59a]"></a>otLoggingGetLevel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logging_api.o(.text.otLoggingGetLevel))
<BR><BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::DumpInModule(char const*, ot::LogLevel, char const*, void const*, unsigned short)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;6725988ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[59b]"></a>otLoggingSetLevel</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, logging_api.o(.text.otLoggingSetLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = otLoggingSetLevel
</UL>
<BR>[Calls]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::SetLogLevel(ot::LogLevel)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;6725988ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[b16]"></a>otMacFrameGetSequence</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mac_frame_1.o(.text.otMacFrameGetSequence))
<BR><BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioTransmit
</UL>

<P><STRONG><a name="[1ef]"></a>otMacFrameGetSrcAddr</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mac_frame_1.o(.text.otMacFrameGetSrcAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = otMacFrameGetSrcAddr &rArr; ot::Mac::Frame::GetSrcAddr(ot::Mac::Address&) const &rArr; ot::Mac::Frame::FindSrcAddrIndex() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetSrcAddr(ot::Mac::Address&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[1f2]"></a>otMacFrameIsAckRequested</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mac_frame_1.o(.text.otMacFrameIsAckRequested))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[1ed]"></a>otMacFrameIsCommand</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mac_frame_1.o(.text.otMacFrameIsCommand))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[1ee]"></a>otMacFrameIsDataRequest</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mac_frame_1.o(.text.otMacFrameIsDataRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = otMacFrameIsDataRequest &rArr; ot::Mac::Frame::IsDataRequestCommand() const &rArr; ot::Mac::Frame::FindPayloadIndex() const &rArr; ot::Mac::Frame::SkipSecurityHeaderIndex() const &rArr; ot::Mac::Frame::CalculateAddrFieldSize(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::IsDataRequestCommand() const
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[1f1]"></a>otMacFrameIsSecurityEnabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mac_frame_1.o(.text.otMacFrameIsSecurityEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[1ec]"></a>otMacFrameIsVersion2015</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mac_frame_1.o(.text.otMacFrameIsVersion2015))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = otMacFrameIsVersion2015
</UL>
<BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::GetFrameControlField() const
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[4c6]"></a>otMessageAppend</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, message_api.o(.text.otMessageAppend))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = otMessageAppend &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytes(void const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;1665316120ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::UdpExample::PrepareAutoGeneratedPayload(otMessage&, unsigned short)
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::UdpExample::PrepareHexStringPayload(otMessage&, char const*)
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::ProcessRequest(ot::Utils::CmdLineParser::Arg*, otCoapCode)
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::HandleRequest(otMessage*, otMessageInfo const*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udpSend
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_coap_request
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_coap_request
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_request_proccess
</UL>

<P><STRONG><a name="[4d2]"></a>otMessageFree</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, message_api.o(.text.otMessageFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = otMessageFree &rArr; ot::Message::Free() &rArr; ot::MessagePool::Free(ot::Message*) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Free()
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;1665316120ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::ProcessRequest(ot::Utils::CmdLineParser::Arg*, otCoapCode)
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::HandleRequest(otMessage*, otMessageInfo const*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udpSend
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_coap_request
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_coap_request
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_request_proccess
</UL>

<P><STRONG><a name="[52e]"></a>otMessageGetBufferInfo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, message_api.o(.text.otMessageGetBufferInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = otMessageGetBufferInfo &rArr; ot::Instance::GetBufferInfo(ot::Instance::BufferInfo&) &rArr; ot::PriorityQueue::GetInfo(otMessageQueueInfo&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::GetBufferInfo(ot::Instance::BufferInfo&)
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;13711823289570935762ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4be]"></a>otMessageGetLength</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, message_api.o(.text.otMessageGetLength))
<BR><BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::UdpExample::HandleUdpReceive(otMessage*, otMessageInfo const*)
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::PrintPayload(otMessage*)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage const*, ot::Ip6::MessageInfo const*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otUdpReceive_handler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udp_cb
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_request_proccess
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_ack_process
</UL>

<P><STRONG><a name="[4bf]"></a>otMessageGetOffset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, message_api.o(.text.otMessageGetOffset))
<BR><BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::UdpExample::HandleUdpReceive(otMessage*, otMessageInfo const*)
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::PrintPayload(otMessage*)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage const*, ot::Ip6::MessageInfo const*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udp_cb
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_request_proccess
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_ack_process
</UL>

<P><STRONG><a name="[4c2]"></a>otMessageRead</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, message_api.o(.text.otMessageRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = otMessageRead &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ReadBytes(unsigned short, void*, unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::UdpExample::HandleUdpReceive(otMessage*, otMessageInfo const*)
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::PrintPayload(otMessage*)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage const*, ot::Ip6::MessageInfo const*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udp_cb
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_request_proccess
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_ack_process
</UL>

<P><STRONG><a name="[52d]"></a>otMessageResetBufferInfo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, message_api.o(.text.otMessageResetBufferInfo))
<BR><BR>[Calls]<UL><LI><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::ResetBufferInfo()
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;13711823289570935762ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4ee]"></a>otNat64SynthesizeIp6Address</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, nat64_api.o(.text.otNat64SynthesizeIp6Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = otNat64SynthesizeIp6Address &rArr; ot::NetworkData::LeaderBase::GetPreferredNat64Prefix(ot::NetworkData::ExternalRouteConfig&) const &rArr; ot::NetworkData::NetworkData::GetNextExternalRoute(unsigned int&, ot::NetworkData::ExternalRouteConfig&) const &rArr; ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const &rArr; ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&) &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::GetPreferredNat64Prefix(ot::NetworkData::ExternalRouteConfig&) const
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SynthesizeFromIp4Address(ot::Ip6::Prefix const&, ot::Ip4::Address const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ParseToIp6Address(otInstance*, ot::Utils::CmdLineParser::Arg const&, otIp6Address&, bool&)
</UL>

<P><STRONG><a name="[5c7]"></a>otNetDataGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netdata_api.o(.text.otNetDataGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = otNetDataGet &rArr; ot::NetworkData::NetworkData::CopyNetworkData(ot::NetworkData::Type, unsigned char*, unsigned char&) const &rArr; ot::NetworkData::MutableNetworkData::RemoveTemporaryData() &rArr; ot::NetworkData::MutableNetworkData::RemoveTemporaryDataIn(ot::NetworkData::PrefixTlv&) &rArr; ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::CopyNetworkData(ot::NetworkData::Type, unsigned char*, unsigned char&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputBinary(bool)
</UL>

<P><STRONG><a name="[5d3]"></a>otNetDataGetLength</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netdata_api.o(.text.otNetDataGetLength))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::NetworkData::Process&lang;112625398707738ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5d7]"></a>otNetDataGetMaxLength</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netdata_api.o(.text.otNetDataGetMaxLength))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::NetworkData::Process&lang;4362819052862294378ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5d2]"></a>otNetDataGetNextLowpanContextInfo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netdata_api.o(.text.otNetDataGetNextLowpanContextInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = otNetDataGetNextLowpanContextInfo &rArr; ot::NetworkData::NetworkData::GetNextLowpanContextInfo(unsigned int&, ot::NetworkData::LowpanContextInfo&) const &rArr; ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const &rArr; ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&) &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::GetNextLowpanContextInfo(unsigned int&, ot::NetworkData::LowpanContextInfo&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputLowpanContexts(bool)
</UL>

<P><STRONG><a name="[5ce]"></a>otNetDataGetNextOnMeshPrefix</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netdata_api.o(.text.otNetDataGetNextOnMeshPrefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = otNetDataGetNextOnMeshPrefix &rArr; ot::NetworkData::NetworkData::GetNextOnMeshPrefix(unsigned int&, ot::NetworkData::OnMeshPrefixConfig&) const &rArr; ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const &rArr; ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&) &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::GetNextOnMeshPrefix(unsigned int&, ot::NetworkData::OnMeshPrefixConfig&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputPrefixes(bool)
</UL>

<P><STRONG><a name="[5cb]"></a>otNetDataGetNextRoute</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netdata_api.o(.text.otNetDataGetNextRoute))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = otNetDataGetNextRoute &rArr; ot::NetworkData::NetworkData::GetNextExternalRoute(unsigned int&, ot::NetworkData::ExternalRouteConfig&) const &rArr; ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const &rArr; ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&) &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::GetNextExternalRoute(unsigned int&, ot::NetworkData::ExternalRouteConfig&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputRoutes(bool)
</UL>

<P><STRONG><a name="[5d0]"></a>otNetDataGetNextService</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netdata_api.o(.text.otNetDataGetNextService))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = otNetDataGetNextService &rArr; ot::NetworkData::NetworkData::GetNextService(unsigned int&, ot::NetworkData::ServiceConfig&) const &rArr; ot::NetworkData::NetworkData::Iterate(unsigned int&, unsigned short, ot::NetworkData::NetworkData::Config&) const &rArr; ot::NetworkData::ExternalRouteConfig::SetFrom(ot::Instance&, ot::NetworkData::PrefixTlv const&, ot::NetworkData::HasRouteTlv const&, ot::NetworkData::HasRouteEntry const&) &rArr; ot::Ip6::Prefix::Set(unsigned char const*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::GetNextService(unsigned int&, ot::NetworkData::ServiceConfig&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::NetworkData::OutputServices(bool)
</UL>

<P><STRONG><a name="[5d6]"></a>otNetDataResetMaxLength</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, netdata_api.o(.text.otNetDataResetMaxLength))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::NetworkData::Process&lang;4362819052862294378ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5d5]"></a>otNetDataSteeringDataCheckJoiner</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netdata_api.o(.text.otNetDataSteeringDataCheckJoiner))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = otNetDataSteeringDataCheckJoiner &rArr; ot::NetworkData::LeaderBase::SteeringDataCheckJoiner(ot::Mac::ExtAddress const&) const &rArr; ot::MeshCoP::ComputeJoinerId(ot::Mac::ExtAddress const&, ot::Mac::ExtAddress&) &rArr; ot::Crypto::Sha256::Update(void const*, unsigned short) &rArr; otPlatCryptoSha256Update &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SteeringDataCheckJoiner(ot::Mac::ExtAddress const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::NetworkData::Process&lang;3328099188798998309ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5d4]"></a>otNetDataSteeringDataCheckJoinerWithDiscerner</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netdata_api.o(.text.otNetDataSteeringDataCheckJoinerWithDiscerner))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = otNetDataSteeringDataCheckJoinerWithDiscerner &rArr; ot::NetworkData::LeaderBase::SteeringDataCheckJoiner(ot::MeshCoP::JoinerDiscerner const&) const &rArr; ot::NetworkData::LeaderBase::SteeringDataCheck(ot::MeshCoP::SteeringData::HashBitIndexes const&) const &rArr; ot::MeshCoP::SteeringDataTlv::CopyTo(ot::MeshCoP::SteeringData&) const &rArr; ot::MeshCoP::SteeringData::Init(unsigned char) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::LeaderBase::SteeringDataCheckJoiner(ot::MeshCoP::JoinerDiscerner const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::NetworkData::Process&lang;3328099188798998309ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[601]"></a>otNetworkNameFromString</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dataset_api.o(.text.otNetworkNameFromString))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = otNetworkNameFromString &rArr; ot::MeshCoP::NetworkName::Set(char const*) &rArr; ot::MeshCoP::NetworkName::Set(ot::MeshCoP::NameData const&) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkName::Set(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;12771032504430052662ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;11015563977516890969ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[554]"></a>otPingSenderPing</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ping_sender_api.o(.text.otPingSenderPing))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + Unknown Stack Size
<LI>Call Chain = otPingSenderPing &rArr; ot::Utils::PingSender::Ping(ot::Utils::PingSender::Config const&) &rArr; ot::Utils::PingSender::SendPing() &rArr; ot::Ip6::Icmp::SendEchoRequest(ot::Message&, ot::Ip6::MessageInfo const&, unsigned short) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::PingSender::Ping(ot::Utils::PingSender::Config const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1715061262ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[552]"></a>otPingSenderStop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ping_sender_api.o(.text.otPingSenderStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = otPingSenderStop &rArr; ot::Utils::PingSender::Stop() &rArr; ot::TimerMilli::Stop() &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::PingSender::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1715061262ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[b06]"></a>otPlatAlarmMilliFired</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer.o(.text.otPlatAlarmMilliFired))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = otPlatAlarmMilliFired &rArr; ot::Timer::Scheduler::ProcessTimers(ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[b07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otInstanceIsInitialized
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Timer::Scheduler::ProcessTimers(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_alarmTask
</UL>

<P><STRONG><a name="[d5]"></a>otPlatAlarmMilliGetNow</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ot_alarm.o(.text.otPlatAlarmMilliGetNow))
<BR><BR>[Calls]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetFrom(ot::MeshCoP::Dataset::Info const&)
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::HandleRetransmissionTimer()
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&)
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::HandleTimer()
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Release(unsigned char)
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::EnergyScan(unsigned char, unsigned short)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::RequestCslFrameTransmission(unsigned int)
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::PerformNextOperation()
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError)
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessCsl(ot::Mac::RxFrame const&, ot::Mac::Address const&)
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::ResetKeepAliveTimer()
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::ScheduleNextPoll(ot::DataPollSender::PollPeriodSelector)
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::HandleDataPoll(ot::Mac::RxFrame&)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatEntropyGet
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::Start(unsigned int)
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::DelaySendingJoinerEntrust(ot::Ip6::MessageInfo const&, ot::Mac::Key const&)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::SendDelayedJoinerEntrust()
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsSetTimer(unsigned int, unsigned int)
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleMbedtlsGetTimer()
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetLocal::Save(ot::MeshCoP::Dataset const&)
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::AppendMleDatasetTlv(ot::MeshCoP::Dataset::Type, ot::Message&) const
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::SetTlv(ot::MeshCoP::Tlv::Type, void const*, unsigned char)
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::ReadFromMessage(ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SampleRssi()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::PerformNextRegistration()
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::HandleDiscoveryRequestFrameTxDone(ot::Message&)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::Info::SetFrom(ot::Child const&)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::Restore()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::AddressResolver::HandleTmf&lang;(ot::Uri)2&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::HandleRetransmissionTimer()
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::AddBufferedMessage(ot::Message&, unsigned short, unsigned char, bool)
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::UpdateReassemblyList()
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Ip6::HandleFragment(ot::Message&, ot::Ip6::Ip6::MessageOrigin, ot::Ip6::MessageInfo&)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMessage(ot::Message&)
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetLeaderAge() const
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkAccept(ot::Ip6::MessageInfo const&, ot::Neighbor*, ot::Mle::Mle::TlvList const&, ot::Mle::Mle::Challenge const&)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Allocate(unsigned char)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::UpdateRouterIdSet(unsigned char, ot::Mle::RouterIdSet const&)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::RemoveRouterLink(ot::Router&)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::HandleTimeTick()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::UpdateRoutes(ot::Mle::RouteTlv const&, unsigned char)
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildUpdateRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleParentRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAdvertisement(ot::Mle::Mle::RxInfo&, unsigned short, ot::Mle::LeaderData const&)
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::SendAfterDelay(ot::Ip6::Address const&, unsigned short)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleDelayedResponseTimer()
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleAdvertisement(ot::Mle::Mle::RxInfo&)
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::InitNeighbor(ot::Neighbor&, ot::Mle::Mle::RxInfo const&)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateReassemblyList()
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateEcnOrDrop(ot::Message&, bool)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&)
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::PingSender::SendPing()
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::PingSender::HandleIcmpReceive(ot::Message const&, ot::Ip6::MessageInfo const&, ot::Ip6::Icmp::Header const&)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Router::Info::SetFrom(ot::Router const&)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::ContextIds::ScheduleToRemove(unsigned char)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::ContextIds::HandleTimer()
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::Info::SetFrom(ot::Neighbor const&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.rodata._ZN2ot10TimerMilli9Scheduler14sAlarmMilliApiE)
</UL>
<P><STRONG><a name="[d3]"></a>otPlatAlarmMilliStartAt</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, ot_alarm.o(.text.otPlatAlarmMilliStartAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = otPlatAlarmMilliStartAt &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otSysEventSignalPending
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.rodata._ZN2ot10TimerMilli9Scheduler14sAlarmMilliApiE)
</UL>
<P><STRONG><a name="[d4]"></a>otPlatAlarmMilliStop</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, ot_alarm.o(.text.otPlatAlarmMilliStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = otPlatAlarmMilliStop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.rodata._ZN2ot10TimerMilli9Scheduler14sAlarmMilliApiE)
</UL>
<P><STRONG><a name="[1fc]"></a>otPlatAssertFail</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ot_misc.o(.text.otPlatAssertFail))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatReset
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint32InRange(unsigned int, unsigned int)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint16InRange(unsigned short, unsigned short)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint8InRange(unsigned char, unsigned char)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::Manager::NonCryptoGetUint32()
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Address::SynthesizeFromIp4Address(ot::Ip6::Prefix const&, ot::Ip4::Address const&)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ReadBytes(unsigned short, void*, unsigned short) const
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetOffset(unsigned short)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::Enqueue(ot::Message&, ot::MessageQueue::QueuePosition)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessageQueue::Dequeue(ot::Message&)
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otJoinerStateToString
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesEcb::~AesEcb()
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesEcb::AesEcb()
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesEcb::SetKey(ot::Crypto::Key const&)
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Finalize(void*)
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Payload(void*, void*, unsigned int, ot::Crypto::AesCcm::Mode)
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Header(void const*, unsigned int)
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesCcm::Init(unsigned int, unsigned int, unsigned char, void const*, unsigned char)
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::HmacSha256::~HmacSha256()
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::HmacSha256::HmacSha256()
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::HmacSha256::Update(void const*, unsigned short)
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::HmacSha256::Finish(ot::Crypto::Sha256::Hash&)
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::HmacSha256::Start(ot::Crypto::Key const&)
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::SetToken(unsigned char const*, unsigned char)
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::GenerateRandomToken(unsigned char)
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::RemoveHeader(unsigned short)
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::PrependBytes(void const*, unsigned short)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::Enqueue(ot::Message&)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::Dequeue(ot::Message&)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MessagePool::Free(ot::Message*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::AppendVarArgs(char const*, std::__va_list)
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::Manager::Manager()
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::FrameBuilder::InsertBytes(unsigned short, void const*, unsigned short)
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapSecure::SetPsk(ot::MeshCoP::JoinerPskd const&)
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Clone(unsigned short) const
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::MoveOffset(int)
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::CoapBase::Metadata::ReadFrom(ot::Coap::Message const&)
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::ParseHeader()
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::ResponsesQueue::ResponseMetadata::ReadFrom(ot::Coap::Message const&)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PathForUri(ot::Uri)
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Open(ot::Ip6::Udp::SocketHandle&, void (*)(void*, otMessage*, otMessageInfo const*), void*)
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::HandlePayload(ot::Message&, ot::Ip6::MessageInfo&)
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeRouter(ot::ThreadStatusTlv::Status)
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeLeader()
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Release(unsigned char)
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::DetachGracefully(void (*)(void*), void*)
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::Discover(ot::Mac::ChannelMask const&, unsigned short, bool, bool, ot::MeshCoP::SteeringData::HashBitIndexes const*, void (*)(otActiveScanResult*, void*), void*)
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Links::GetTemporaryMacKey(ot::Mac::Frame const&, unsigned int) const
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Enable()
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::EnergyScan(unsigned char, unsigned short)
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Links::Send()
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetKeySource(unsigned char const*)
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::ProcessTransmitSecurity(ot::Mac::TxFrame&)
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::BeginTransmit()
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::HandleTimer()
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::HandleSentFrame(ot::Mac::TxFrame&, otError)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollSender::StartPolling()
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetKeyId(unsigned char)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Frame::SetFrameCounter(unsigned int)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DataPollHandler::HandleSentFrame(ot::Mac::TxFrame const&, otError, ot::Child&)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::HandleSentFrameToChild(ot::Mac::TxFrame const&, ot::IndirectSenderBase::FrameContext const&, otError, ot::Child&)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::PrepareFrameForChild(ot::Mac::TxFrame&, ot::IndirectSenderBase::FrameContext&, ot::Child&)
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::Sha256::~Sha256()
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::Sha256::Sha256()
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::Sha256::Update(void const*, unsigned short)
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::Sha256::Finish(ot::Crypto::Sha256::Hash&)
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::Sha256::Start()
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoPbkdf2GenerateKey
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesEcb::Encrypt(unsigned char const*, unsigned char*)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TrickleTimer::Start(ot::TrickleTimer::Mode, unsigned int, unsigned int, unsigned short)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tlv::AppendTlv(ot::Message&, unsigned char, void const*, unsigned char)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::TimerMilli::StartAt(ot::Time, unsigned int)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleTimeTick()
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::HandleTimeTick()
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::Log(ot::SettingsBase::Action, otError, ot::SettingsBase::Key, void const*)
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatCryptoRandomInit
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetNextChunk(unsigned short&, ot::Message::Chunk&) const
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::GetChildMask(unsigned short) const
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::CompareBytes(unsigned short, void const*, unsigned short, bool (*)(unsigned char, unsigned char)) const
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::PriorityQueue::GetHeadForPriority(ot::Message::Priority) const
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::WriteBytesFromMessage(unsigned short, ot::Message const&, unsigned short, unsigned short)
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::ClearChildMask(unsigned short)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::SetChildMask(unsigned short)
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SecurityPolicy::GetFlags(unsigned char*, unsigned char) const
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SecurityPolicy::SetFlags(unsigned char const*, unsigned char)
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerDiscerner::CopyTo(ot::Mac::ExtAddress&) const
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::SteeringData::Init(unsigned char)
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata::ReadFrom(ot::Message const&)
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleJoinerFinalizeResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::SendJoinerFinalize()
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::HandleTimer()
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::Setup(bool)
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dtls::HandleTimer()
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ChannelMaskTlv::SetChannelMask(unsigned int)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetMacKey(unsigned char, unsigned char, ot::Mac::KeyMaterial const&, ot::Mac::KeyMaterial const&, ot::Mac::KeyMaterial const&)
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SignalFrameCounterUsedOnTxDone(ot::Mac::TxFrame const&)
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::BeginTransmit()
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SampleRssi()
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::UpdateChildDomainUnicastAddress(ot::Child const&, ot::Mle::ChildDuaState)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::PerformNextRegistration()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::ProcessDuaResponse(ot::Coap::Message&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::DuaManager::HandleDuaResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::HandleSentFrame(ot::Mac::TxFrame const&, otError, ot::Child&)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::Signal(ot::NeighborTable::Event, ot::Neighbor const&)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::UnsubscribeAllNodesMulticast()
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Netif::SubscribeAllRoutersMulticast()
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::Metadata::RemoveFrom(ot::Message&) const
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::Metadata::ReadFrom(ot::Message const&)
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Mpl::UpdateSeedSet(unsigned short, unsigned char)
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::GenerateRandom()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMessage(ot::Message&)
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Prefix::MatchLength(unsigned char const*, unsigned char const*, unsigned char)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::GetAddressMlrState(ot::Ip6::Address const&) const
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::CountBorderRouters(ot::NetworkData::RoleFilter) const
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::ProcessAddressRegistrationTlv(ot::Mle::Mle::RxInfo&, ot::Child&)
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleAddressSolicitResponse(ot::Coap::Message*, ot::Ip6::MessageInfo const*, otError)
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendAdvertisement()
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleLinkAccept(ot::Mle::Mle::RxInfo&, bool)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Allocate()
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HasAcceptableParentCandidate() const
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::DetermineParentRequestType(ot::Mle::Mle::ParentRequestType&) const
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::DelayedResponseMetadata::RemoveFrom(ot::Message&) const
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::FillRouteTlv(ot::Mle::RouteTlv&, ot::Neighbor const*) const
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::HandleChildIdRequest(ot::Mle::Mle::RxInfo&)
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SendLinkRequest(ot::Neighbor*)
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::HandleChildUpdateResponse(ot::Mle::Mle::RxInfo&)
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::DelayedResponseMetadata::ReadFrom(ot::Message const&)
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::ProcessAnnounce()
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::AnycastRouteLookup(unsigned char, ot::MeshForwarder::AnycastType, unsigned short&) const
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::SendMesh(ot::Message&, ot::Mac::TxFrame&)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::UpdateSendMessage(otError, ot::Mac::Address&, ot::Neighbor*)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::RemoveMessage(ot::Message&)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::IndirectSender::AddMessageForSleepyChild(ot::Message&, ot::Child&)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshForwarder::PrepareDataFrame(ot::Mac::TxFrame&, ot::Message&, ot::Mac::Addresses const&, bool, unsigned short, unsigned short, bool)
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::BitVector&lang;(unsigned short)3&rang;::Set(unsigned short, bool)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::SendCommand(ot::Uri, ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::SynchronizeServerData()
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Notifier::HandleCoapResponse(otError)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::Leader::AddService(ot::NetworkData::ServiceTlv const&, ot::NetworkData::Leader::ChangedFlags&)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::GetNextServer(unsigned int&, unsigned short&) const
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::Remove(void*, unsigned char)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::MutableNetworkData::Insert(void*, unsigned char)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::IsAddressMlrRegisteredByAnyChildExcept(ot::Ip6::Address const&, ot::Child const*) const
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::SetAddressMlrState(ot::Ip6::Address const&, ot::MlrState)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::SendMulticastListenerRegistrationMessage(otIp6Address const*, unsigned char, unsigned int const*, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::FinishMulticastListenerRegistration(bool, ot::Ip6::Address const*, unsigned char)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MlrManager::ScheduleSend(unsigned short)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CliUartOutput(void*, char const*, std::__va_list)
<LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCliInputLine
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::SetCommandTimeout(unsigned int)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputResult(otError)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::ProcessLine(char*)
<LI><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_reset
</UL>

<P><STRONG><a name="[2]"></a>otPlatCAlloc</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ot_memory.o(.text.otPlatCAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = otPlatCAlloc &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Heap::CAlloc(unsigned int, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data.mbedtls_calloc_func)
</UL>
<P><STRONG><a name="[84f]"></a>otPlatCryptoAesEncrypt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, crypto_platform.o(.text.otPlatCryptoAesEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = otPlatCryptoAesEncrypt &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesEcb::Encrypt(unsigned char const*, unsigned char*)
</UL>

<P><STRONG><a name="[851]"></a>otPlatCryptoAesFree</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, crypto_platform.o(.text.otPlatCryptoAesFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = otPlatCryptoAesFree
</UL>
<BR>[Calls]<UL><LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesEcb::~AesEcb()
</UL>

<P><STRONG><a name="[850]"></a>otPlatCryptoAesInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, crypto_platform.o(.text.otPlatCryptoAesInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = otPlatCryptoAesInit &rArr; mbedtls_aes_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesEcb::AesEcb()
</UL>

<P><STRONG><a name="[84e]"></a>otPlatCryptoAesSetKey</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, crypto_platform.o(.text.otPlatCryptoAesSetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = otPlatCryptoAesSetKey &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::LiteralKey::LiteralKey(ot::Crypto::Key const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::AesEcb::SetKey(ot::Crypto::Key const&)
</UL>

<P><STRONG><a name="[848]"></a>otPlatCryptoHmacSha256Deinit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, crypto_platform.o(.text.otPlatCryptoHmacSha256Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = otPlatCryptoHmacSha256Deinit &rArr; mbedtls_md_free
</UL>
<BR>[Calls]<UL><LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</UL>
<BR>[Called By]<UL><LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::HmacSha256::~HmacSha256()
</UL>

<P><STRONG><a name="[842]"></a>otPlatCryptoHmacSha256Finish</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, crypto_platform.o(.text.otPlatCryptoHmacSha256Finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = otPlatCryptoHmacSha256Finish &rArr; mbedtls_md_hmac_finish &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::HmacSha256::Finish(ot::Crypto::Sha256::Hash&)
</UL>

<P><STRONG><a name="[846]"></a>otPlatCryptoHmacSha256Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, crypto_platform.o(.text.otPlatCryptoHmacSha256Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = otPlatCryptoHmacSha256Init &rArr; mbedtls_md_setup &rArr; mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
</UL>
<BR>[Called By]<UL><LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::HmacSha256::HmacSha256()
</UL>

<P><STRONG><a name="[840]"></a>otPlatCryptoHmacSha256Start</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, crypto_platform.o(.text.otPlatCryptoHmacSha256Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = otPlatCryptoHmacSha256Start &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::LiteralKey::LiteralKey(ot::Crypto::Key const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::HmacSha256::Start(ot::Crypto::Key const&)
</UL>

<P><STRONG><a name="[844]"></a>otPlatCryptoHmacSha256Update</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, crypto_platform.o(.text.otPlatCryptoHmacSha256Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = otPlatCryptoHmacSha256Update &rArr; mbedtls_md_hmac_update &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
</UL>
<BR>[Called By]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::HmacSha256::Update(void const*, unsigned short)
</UL>

<P><STRONG><a name="[26d]"></a>otPlatCryptoInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, crypto_platform.o(.text.otPlatCryptoInit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::KeyManager(ot::Instance&)
</UL>

<P><STRONG><a name="[888]"></a>otPlatCryptoPbkdf2GenerateKey</STRONG> (Thumb, 350 bytes, Stack size 168 bytes, crypto_platform.o(.text.otPlatCryptoPbkdf2GenerateKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = otPlatCryptoPbkdf2GenerateKey &rArr; mbedtls_aes_cmac_prf_128 &rArr; mbedtls_cipher_cmac &rArr; mbedtls_cipher_cmac_finish &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_cmac_prf_128
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::GeneratePskc(char const*, ot::MeshCoP::NetworkName const&, ot::MeshCoP::ExtendedPanId const&, ot::Pskc&)
</UL>

<P><STRONG><a name="[26e]"></a>otPlatCryptoRandomGet</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, crypto_platform.o(.text.otPlatCryptoRandomGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::MbedTls::MapError(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Info::GenerateRandom(ot::Instance&)
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::GenerateRandomToken(unsigned char)
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::Manager::Manager()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::KeyManager(ot::Instance&)
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri)
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::ExtAddress::GenerateRandom()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::MbedTls::CryptoSecurePrng(void*, unsigned char*, unsigned int)
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ActiveDatasetManager::GenerateLocal()
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::NetworkPrefix::GenerateRandomUla()
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::InterfaceIdentifier::GenerateRandom()
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Neighbor::GenerateChallenge()
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::GenerateChallenge()
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Challenge::GenerateRandom()
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode)
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SendParentRequest(ot::Mle::Mle::ParentRequestType)
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::Slaac::GetIidSecretKey(ot::Utils::Slaac::IidSecretKey&) const
</UL>

<P><STRONG><a name="[875]"></a>otPlatCryptoRandomInit</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, crypto_platform.o(.text.otPlatCryptoRandomInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_init
<LI><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_add_source
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::Manager::Manager()
</UL>

<P><STRONG><a name="[85b]"></a>otPlatCryptoSha256Deinit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, crypto_platform.o(.text.otPlatCryptoSha256Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = otPlatCryptoSha256Deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>
<BR>[Called By]<UL><LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::Sha256::~Sha256()
</UL>

<P><STRONG><a name="[855]"></a>otPlatCryptoSha256Finish</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, crypto_platform.o(.text.otPlatCryptoSha256Finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = otPlatCryptoSha256Finish &rArr; mbedtls_sha256_finish_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::Sha256::Finish(ot::Crypto::Sha256::Hash&)
</UL>

<P><STRONG><a name="[859]"></a>otPlatCryptoSha256Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, crypto_platform.o(.text.otPlatCryptoSha256Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = otPlatCryptoSha256Init &rArr; mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
</UL>
<BR>[Called By]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::Sha256::Sha256()
</UL>

<P><STRONG><a name="[853]"></a>otPlatCryptoSha256Start</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, crypto_platform.o(.text.otPlatCryptoSha256Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = otPlatCryptoSha256Start &rArr; mbedtls_sha256_starts_ret
</UL>
<BR>[Calls]<UL><LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::Sha256::Start()
</UL>

<P><STRONG><a name="[857]"></a>otPlatCryptoSha256Update</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, crypto_platform.o(.text.otPlatCryptoSha256Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = otPlatCryptoSha256Update &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Crypto::Sha256::Update(void const*, unsigned short)
</UL>

<P><STRONG><a name="[1fd]"></a>otPlatEntropyGet</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, ot_entropy.o(.text.otPlatEntropyGet))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMbedtlsEntropyPoll(void*, unsigned char*, unsigned int, unsigned int*)
</UL>

<P><STRONG><a name="[7d2]"></a>otPlatFindNwkMgmChildRegTable</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, network_management.o(.text.otPlatFindNwkMgmChildRegTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = otPlatFindNwkMgmChildRegTable &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ot::Mle::MleRouter::HandleTmf&lang;(ot::Uri)4&rang;(ot::Coap::Message&, ot::Ip6::MessageInfo const&)
</UL>

<P><STRONG><a name="[3]"></a>otPlatFree</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ot_memory.o(.text.otPlatFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = otPlatFree &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Heap::Free(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.data.mbedtls_free_func)
</UL>
<P><STRONG><a name="[860]"></a>otPlatLog</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, ot_logging.o(.text.otPlatLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = otPlatLog &rArr; puts
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list)
</UL>

<P><STRONG><a name="[91c]"></a>otPlatLogHandleLevelChanged</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, instance.o(.text.otPlatLogHandleLevelChanged))
<BR><BR>[Called By]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::SetLogLevel(ot::LogLevel)
</UL>

<P><STRONG><a name="[4b1]"></a>otPlatRadioAddSrcMatchExtEntry</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, soft_source_match_table.o(.text.otPlatRadioAddSrcMatchExtEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = otPlatRadioAddSrcMatchExtEntry &rArr; ot_radio_extend_addr_ctrl &rArr; lmac15p4_src_match_extended_entry &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radio_extend_addr_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::AddAddress(ot::Child const&)
</UL>

<P><STRONG><a name="[4b3]"></a>otPlatRadioAddSrcMatchShortEntry</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, soft_source_match_table.o(.text.otPlatRadioAddSrcMatchShortEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = otPlatRadioAddSrcMatchShortEntry &rArr; ot_radio_short_addr_ctrl &rArr; lmac15p4_src_match_short_entry &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radio_short_addr_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::AddAddress(ot::Child const&)
</UL>

<P><STRONG><a name="[4bb]"></a>otPlatRadioClearSrcMatchExtEntries</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, soft_source_match_table.o(.text.otPlatRadioClearSrcMatchExtEntries), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radio_extend_addr_ctrl
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::ClearTable()
</UL>

<P><STRONG><a name="[4b5]"></a>otPlatRadioClearSrcMatchExtEntry</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, soft_source_match_table.o(.text.otPlatRadioClearSrcMatchExtEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = otPlatRadioClearSrcMatchExtEntry &rArr; ot_radio_extend_addr_ctrl &rArr; lmac15p4_src_match_extended_entry &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radio_extend_addr_ctrl
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilsSoftSrcMatchExtFindEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::ClearEntry(ot::Child&)
</UL>

<P><STRONG><a name="[4ba]"></a>otPlatRadioClearSrcMatchShortEntries</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, soft_source_match_table.o(.text.otPlatRadioClearSrcMatchShortEntries), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radio_short_addr_ctrl
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::ClearTable()
</UL>

<P><STRONG><a name="[4b6]"></a>otPlatRadioClearSrcMatchShortEntry</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, soft_source_match_table.o(.text.otPlatRadioClearSrcMatchShortEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = otPlatRadioClearSrcMatchShortEntry &rArr; ot_radio_short_addr_ctrl &rArr; lmac15p4_src_match_short_entry &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radio_short_addr_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::ClearEntry(ot::Child&)
</UL>

<P><STRONG><a name="[6e0]"></a>otPlatRadioEnable</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioEnable), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLogDebgPlat
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Enable()
</UL>

<P><STRONG><a name="[4b8]"></a>otPlatRadioEnableSrcMatch</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioEnableSrcMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = otPlatRadioEnableSrcMatch &rArr; lmac15p4_src_match_ctrl &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_src_match_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::AddEntry(ot::Child&)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::SourceMatchController::ClearEntry(ot::Child&)
</UL>

<P><STRONG><a name="[6c6]"></a>otPlatRadioEnergyScan</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioEnergyScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = otPlatRadioEnergyScan &rArr; otPlatRadioEnergyScanDone &rArr; ot::Radio::Callbacks::HandleEnergyScanDone(signed char) &rArr; ot::Mac::SubMac::HandleEnergyScanDone(signed char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioEnergyScanDone
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_read_rssi
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_channel_set
</UL>
<BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::EnergyScan(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[b10]"></a>otPlatRadioEnergyScanDone</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, radio_platform.o(.text.otPlatRadioEnergyScanDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = otPlatRadioEnergyScanDone &rArr; ot::Radio::Callbacks::HandleEnergyScanDone(signed char) &rArr; ot::Mac::SubMac::HandleEnergyScanDone(signed char) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Radio::Callbacks::HandleEnergyScanDone(signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioEnergyScan
</UL>

<P><STRONG><a name="[40e]"></a>otPlatRadioGetBusSpeed</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioGetBusSpeed), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::CslTxScheduler(ot::Instance&)
</UL>

<P><STRONG><a name="[6e3]"></a>otPlatRadioGetCaps</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioGetCaps), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SubMac(ot::Instance&)
</UL>

<P><STRONG><a name="[51c]"></a>otPlatRadioGetCcaEnergyDetectThreshold</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioGetCcaEnergyDetectThreshold))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;11512677311266953430ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[78b]"></a>otPlatRadioGetCslAccuracy</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioGetCslAccuracy), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendCslClockAccuracyTlv()
</UL>

<P><STRONG><a name="[78c]"></a>otPlatRadioGetCslUncertainty</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioGetCslUncertainty), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::TxMessage::AppendCslClockAccuracyTlv()
</UL>

<P><STRONG><a name="[5a0]"></a>otPlatRadioGetFemLnaGain</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioGetFemLnaGain))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7113582ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[6f1]"></a>otPlatRadioGetIeeeEui64</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioGetIeeeEui64))
<BR><BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkGetFactoryAssignedIeeeEui64
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::ClearDiscerner()
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Joiner::Joiner(ot::Instance&)
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::Discover(ot::Mac::ChannelMask const&, unsigned short, bool, bool, ot::MeshCoP::SteeringData::HashBitIndexes const*, void (*)(otActiveScanResult*, void*), void*)
</UL>

<P><STRONG><a name="[6d1]"></a>otPlatRadioGetNow</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioGetNow))
<BR><BR>[Calls]<UL><LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::StartCsmaBackoff()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::CslTxScheduler::GetNextCslTransmissionDelay(ot::Child const&, unsigned int&, unsigned int) const
</UL>

<P><STRONG><a name="[561]"></a>otPlatRadioGetPreferredChannelMask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_platform.o(.text.otPlatRadioGetPreferredChannelMask))
<BR><BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetSupportedChannelMask
</UL>
<BR>[Called By]<UL><LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Info::GenerateRandom(ot::Instance&)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;29803101196888419ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[538]"></a>otPlatRadioGetPromiscuous</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioGetPromiscuous))
<BR><BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Start(ot::Mle::Mle::StartMode)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;14555083096433720913ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[971]"></a>otPlatRadioGetReceiveSensitivity</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioGetReceiveSensitivity))
<BR><BR>[Called By]<UL><LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::GetNoiseFloor() const
</UL>

<P><STRONG><a name="[51e]"></a>otPlatRadioGetRegion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_platform.o(.text.otPlatRadioGetRegion))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;119073513618444ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[6c8]"></a>otPlatRadioGetRssi</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioGetRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = otPlatRadioGetRssi &rArr; lmac15p4_read_rssi &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_read_rssi
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::GetRssi() const
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SampleRssi()
</UL>

<P><STRONG><a name="[560]"></a>otPlatRadioGetSupportedChannelMask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio_platform.o(.text.otPlatRadioGetSupportedChannelMask))
<BR><BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::Mac(ot::Instance&)
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetPreferredChannelMask
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;29803101196888419ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[6e4]"></a>otPlatRadioGetTransmitBuffer</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioGetTransmitBuffer), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SubMac(ot::Instance&)
</UL>

<P><STRONG><a name="[578]"></a>otPlatRadioGetTransmitPower</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioGetTransmitPower))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;31452791250048641ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5a3]"></a>otPlatRadioGetVersionString</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_platform.o(.text.otPlatRadioGetVersionString))
<BR><BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otGetVersionString
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7308159ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[6c4]"></a>otPlatRadioReceive</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = otPlatRadioReceive &rArr; lmac15p4_auto_state_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_auto_state_set
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_ctrl_frequency_set
</UL>
<BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Receive(unsigned char)
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::EnergyScan(unsigned char, unsigned short)
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::StartTimerForBackoff(unsigned char)
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::BeginTransmit()
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::HandleTimer()
</UL>

<P><STRONG><a name="[b13]"></a>otPlatRadioReceiveDone</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, radio_platform.o(.text.otPlatRadioReceiveDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264 + Unknown Stack Size
<LI>Call Chain = otPlatRadioReceiveDone &rArr; ot::Radio::Callbacks::HandleReceiveDone(ot::Mac::RxFrame*, otError) &rArr; ot::Mac::SubMac::HandleReceiveDone(ot::Mac::RxFrame*, otError) &rArr; ot::Mac::SubMac::Callbacks::ReceiveDone(ot::Mac::RxFrame*, otError) &rArr; ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError) &rArr; ot::MeshForwarder::HandleReceivedFrame(ot::Mac::RxFrame&) &rArr; ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&) &rArr; ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&) &rArr; ot::MeshForwarder::UpdateRoutes(ot::FrameData const&, ot::Mac::Addresses const&) &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Radio::Callbacks::HandleReceiveDone(ot::Mac::RxFrame*, otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[b27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioTask
</UL>

<P><STRONG><a name="[51b]"></a>otPlatRadioSetCcaEnergyDetectThreshold</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioSetCcaEnergyDetectThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = otPlatRadioSetCcaEnergyDetectThreshold &rArr; lmac15p4_phy_pib_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_phy_pib_set
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;11512677311266953430ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[828]"></a>otPlatRadioSetExtendedAddress</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioSetExtendedAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = otPlatRadioSetExtendedAddress &rArr; lmac15p4_address_filter_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_address_filter_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Radio::SetExtendedAddress(ot::Mac::ExtAddress const&)
</UL>

<P><STRONG><a name="[59f]"></a>otPlatRadioSetFemLnaGain</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioSetFemLnaGain))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7113582ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[6cf]"></a>otPlatRadioSetMacFrameCounter</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioSetMacFrameCounter))
<BR><BR>[Called By]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSetMacFrameCounterIfLarger
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetFrameCounter(unsigned int, bool)
</UL>

<P><STRONG><a name="[6ce]"></a>otPlatRadioSetMacFrameCounterIfLarger</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_platform.o(.text.otPlatRadioSetMacFrameCounterIfLarger))
<BR><BR>[Calls]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSetMacFrameCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetFrameCounter(unsigned int, bool)
</UL>

<P><STRONG><a name="[6e2]"></a>otPlatRadioSetMacKey</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioSetMacKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = otPlatRadioSetMacKey &rArr; lmac15p4_key_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_key_set
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetMacKey(unsigned char, unsigned char, ot::Mac::KeyMaterial const&, ot::Mac::KeyMaterial const&, ot::Mac::KeyMaterial const&)
</UL>

<P><STRONG><a name="[6e1]"></a>otPlatRadioSetPanId</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioSetPanId))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = otPlatRadioSetPanId &rArr; lmac15p4_address_filter_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_address_filter_set
<LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilsSoftSrcMatchSetPanId
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::SetPanId(unsigned short)
</UL>

<P><STRONG><a name="[691]"></a>otPlatRadioSetPromiscuous</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioSetPromiscuous))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = otPlatRadioSetPromiscuous &rArr; lmac15p4_address_filter_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_address_filter_set
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::Mac::SetPromiscuous(bool)
</UL>

<P><STRONG><a name="[51d]"></a>otPlatRadioSetRegion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_platform.o(.text.otPlatRadioSetRegion))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;119073513618444ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[827]"></a>otPlatRadioSetShortAddress</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioSetShortAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = otPlatRadioSetShortAddress &rArr; lmac15p4_address_filter_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_address_filter_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Radio::SetShortAddress(unsigned short)
</UL>

<P><STRONG><a name="[577]"></a>otPlatRadioSetTransmitPower</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioSetTransmitPower))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;31452791250048641ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[6db]"></a>otPlatRadioSleep</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = otPlatRadioSleep &rArr; otLogDebgPlat &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLogDebgPlat
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_auto_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Receive(unsigned char)
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Enable()
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::Sleep()
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mac::SubMac::StartTimerForBackoff(unsigned char)
</UL>

<P><STRONG><a name="[829]"></a>otPlatRadioTransmit</STRONG> (Thumb, 188 bytes, Stack size unknown bytes, ot_radio.o(.text.otPlatRadioTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = otPlatRadioTransmit &rArr; lmac15p4_tx_data_send &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioTxStarted
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpm_Low_Power_Unmask
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpm_Low_Power_Mask
<LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMacFrameGetSequence
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_tx_data_send
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otSysEventSignalPending
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatTimeGet
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_ctrl_frequency_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Radio::Transmit(ot::Mac::TxFrame&)
</UL>

<P><STRONG><a name="[b18]"></a>otPlatRadioTxDone</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, radio_platform.o(.text.otPlatRadioTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856 + Unknown Stack Size
<LI>Call Chain = otPlatRadioTxDone &rArr; ot::Radio::Callbacks::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr; ot::Mac::SubMac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr; ot::Mac::SubMac::Callbacks::TransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr; ot::Mac::Mac::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError) &rArr;  ot::Mac::Links::Send() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Radio::Callbacks::HandleTransmitDone(ot::Mac::TxFrame&, ot::Mac::RxFrame*, otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[b27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioTask
</UL>

<P><STRONG><a name="[b17]"></a>otPlatRadioTxStarted</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, radio_platform.o(.text.otPlatRadioTxStarted))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = otPlatRadioTxStarted &rArr; ot::Radio::Callbacks::HandleTransmitStarted(ot::Mac::TxFrame&) &rArr; ot::Mac::SubMac::HandleTransmitStarted(ot::Mac::TxFrame&) &rArr; ot::TimerMilli::Start(unsigned int) &rArr; ot::TimerMilli::StartAt(ot::Time, unsigned int) &rArr; ot::Timer::Scheduler::Add(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Radio::Callbacks::HandleTransmitStarted(ot::Mac::TxFrame&)
</UL>
<BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioTransmit
</UL>

<P><STRONG><a name="[91f]"></a>otPlatReset</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, ot_misc.o(.text.otPlatReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = otPlatReset &rArr; Wdt_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::Reset()
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Instance::FactoryReset()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[937]"></a>otPlatSettingsAdd</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, ot_settings.o(.text.otPlatSettingsAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = otPlatSettingsAdd &rArr; [Anonymous Symbol] &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_env_unlock
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_env_lock
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_get_env_blob
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::AddChildInfo(ot::SettingsBase::ChildInfo const&)
</UL>

<P><STRONG><a name="[93c]"></a>otPlatSettingsDelete</STRONG> (Thumb, 150 bytes, Stack size unknown bytes, ot_settings.o(.text.otPlatSettingsDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = otPlatSettingsDelete &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_set_env_blob
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_env_unlock
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_env_lock
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_get_env_blob
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_del_env
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::DeleteOperationalDataset(ot::MeshCoP::Dataset::Type)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::DeleteAllChildInfo()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::ChildInfoIterator::Delete()
</UL>

<P><STRONG><a name="[93a]"></a>otPlatSettingsGet</STRONG> (Thumb, 208 bytes, Stack size unknown bytes, ot_settings.o(.text.otPlatSettingsGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_set_env_blob
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_env_unlock
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_env_lock
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_get_env_obj
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_get_env_blob
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::ReadEntry(ot::SettingsBase::Key, void*, unsigned short) const
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::SaveEntry(ot::SettingsBase::Key, void const*, void*, unsigned short)
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::ChildInfoIterator::Read()
</UL>

<P><STRONG><a name="[940]"></a>otPlatSettingsInit</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ot_settings.o(.text.otPlatSettingsInit))
<BR><BR>[Called By]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::Init()
</UL>

<P><STRONG><a name="[93d]"></a>otPlatSettingsSet</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, ot_settings.o(.text.otPlatSettingsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = otPlatSettingsSet &rArr; [Anonymous Symbol] &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::SaveEntry(ot::SettingsBase::Key, void const*, void*, unsigned short)
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::SaveOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset const&)
</UL>

<P><STRONG><a name="[941]"></a>otPlatSettingsWipe</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ot_settings.o(.text.otPlatSettingsWipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = otPlatSettingsWipe &rArr; efd_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_env_set_default
</UL>
<BR>[Called By]<UL><LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Settings::Wipe()
</UL>

<P><STRONG><a name="[b11]"></a>otPlatTimeGet</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ot_alarm.o(.text.otPlatTimeGet))
<BR><BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioTransmit
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioGetNow
</UL>

<P><STRONG><a name="[aef]"></a>otPlatUartEnable</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, ot_uart.o(.text.otPlatUartEnable))
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otAppCliInit
</UL>

<P><STRONG><a name="[1f9]"></a>otPlatUartFlush</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ot_uart.o(.text.otPlatUartFlush))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output(char const*, unsigned short)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CliUartOutput(void*, char const*, std::__va_list)
</UL>

<P><STRONG><a name="[b1b]"></a>otPlatUartReceived</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, cli_uart.o(.text.otPlatUartReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = otPlatUartReceived &rArr; otCliInputLine &rArr; ot::Cli::Interpreter::ProcessLine(char*) &rArr; ot::Cli::Interpreter::ProcessCommand(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Interpreter::ProcessUserCommands(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Utils::CmdLineParser::Arg::operator==(char const*) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output(char const*, unsigned short)
<LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCliInputLine
</UL>
<BR>[Called By]<UL><LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_uartTask
</UL>

<P><STRONG><a name="[1fe]"></a>otPlatUartSend</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, ot_uart.o(.text.otPlatUartSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = otPlatUartSend &rArr; otPlatUartSendDone &rArr;  Send() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatUartSendDone
<LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_uart_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send()
</UL>

<P><STRONG><a name="[b1d]"></a>otPlatUartSendDone</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, cli_uart.o(.text.otPlatUartSendDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = otPlatUartSendDone &rArr;  Send() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send()
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatUartSend
</UL>

<P><STRONG><a name="[b1e]"></a>otRandomNonCryptoGetUint16InRange</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, random_noncrypto_api.o(.text.otRandomNonCryptoGetUint16InRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = otRandomNonCryptoGetUint16InRange &rArr; ot::Random::NonCrypto::GetUint16InRange(unsigned short, unsigned short) &rArr; ot::Random::Manager::NonCryptoGetUint32() &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint16InRange(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b1f]"></a>otRandomNonCryptoGetUint32InRange</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, random_noncrypto_api.o(.text.otRandomNonCryptoGetUint32InRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = otRandomNonCryptoGetUint32InRange &rArr; ot::Random::NonCrypto::GetUint32InRange(unsigned int, unsigned int) &rArr; ot::Random::Manager::NonCryptoGetUint32() &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint32InRange(unsigned int, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b20]"></a>otRandomNonCryptoGetUint8InRange</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, random_noncrypto_api.o(.text.otRandomNonCryptoGetUint8InRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = otRandomNonCryptoGetUint8InRange &rArr; ot::Random::NonCrypto::GetUint8InRange(unsigned char, unsigned char) &rArr; ot::Random::Manager::NonCryptoGetUint32() &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Random::NonCrypto::GetUint8InRange(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b21]"></a>otSetStateChangedCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, instance_api.o(.text.otSetStateChangedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[b22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Notifier::RegisterCallback(void (*)(unsigned int, void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrInitUser
</UL>

<P><STRONG><a name="[1f3]"></a>otSysEventSignalPending</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, ot_freertos.o(.text.otSysEventSignalPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[b23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliStartAt
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioTransmit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioTask
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otTaskletsSignalPending
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b24]"></a>otSysProcessDrivers</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, ot_freertos.o(.text.otSysProcessDrivers))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264 + Unknown Stack Size
<LI>Call Chain = otSysProcessDrivers &rArr; ot_radioTask &rArr; otPlatRadioReceiveDone &rArr; ot::Radio::Callbacks::HandleReceiveDone(ot::Mac::RxFrame*, otError) &rArr; ot::Mac::SubMac::HandleReceiveDone(ot::Mac::RxFrame*, otError) &rArr; ot::Mac::SubMac::Callbacks::ReceiveDone(ot::Mac::RxFrame*, otError) &rArr; ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError) &rArr; ot::MeshForwarder::HandleReceivedFrame(ot::Mac::RxFrame&) &rArr; ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&) &rArr; ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&) &rArr; ot::MeshForwarder::UpdateRoutes(ot::FrameData const&, ot::Mac::Addresses const&) &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrAppProcess
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_uartTask
<LI><a href="#[b27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioTask
<LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_alarmTask
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b29]"></a>otTaskletsProcess</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tasklet_api.o(.text.otTaskletsProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = otTaskletsProcess &rArr; ot::Tasklet::Scheduler::ProcessQueuedTasklets()
</UL>
<BR>[Calls]<UL><LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Scheduler::ProcessQueuedTasklets()
<LI><a href="#[b07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otInstanceIsInitialized
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[915]"></a>otTaskletsSignalPending</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, ot_freertos.o(.text.otTaskletsSignalPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = otTaskletsSignalPending &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otSysEventSignalPending
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Tasklet::Post()
</UL>

<P><STRONG><a name="[585]"></a>otThreadBecomeChild</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadBecomeChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = otThreadBecomeChild &rArr; ot::Mle::Mle::BecomeChild() &rArr; ot::Mle::Mle::Attach(ot::Mle::Mle::AttachMode) &rArr; ot::MeshCoP::DatasetManager::Restore() &rArr; ot::MeshCoP::DatasetLocal::Restore(ot::MeshCoP::Dataset&) &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::BecomeChild()
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;428983089745ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[582]"></a>otThreadBecomeDetached</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadBecomeDetached))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712 + Unknown Stack Size
<LI>Call Chain = otThreadBecomeDetached &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::BecomeDetached()
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;428983089745ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_reset
</UL>

<P><STRONG><a name="[587]"></a>otThreadBecomeLeader</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadBecomeLeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800 + Unknown Stack Size
<LI>Call Chain = otThreadBecomeLeader &rArr; ot::Mle::MleRouter::BecomeLeader() &rArr; ot::Mle::MleRouter::SetStateRouterOrLeader(ot::Mle::DeviceRole, unsigned short, ot::Mle::LeaderStartMode) &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeLeader()
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;428983089745ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[586]"></a>otThreadBecomeRouter</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadBecomeRouter))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = otThreadBecomeRouter &rArr; ot::Mle::MleRouter::BecomeRouter(ot::ThreadStatusTlv::Status) &rArr; ot::Mle::MleRouter::SendAddressSolicit(ot::ThreadStatusTlv::Status) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::BecomeRouter(ot::ThreadStatusTlv::Status)
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;428983089745ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[51a]"></a>otThreadDetachGracefully</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadDetachGracefully))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760 + Unknown Stack Size
<LI>Call Chain = otThreadDetachGracefully &rArr; ot::Mle::Mle::DetachGracefully(void (*)(void*), void*) &rArr; ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::DetachGracefully(void (*)(void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;112553419349005ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[584]"></a>otThreadDeviceRoleToString</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadDeviceRoleToString))
<BR><BR>[Calls]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::RoleToString(ot::Mle::DeviceRole)
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;428983089745ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_stateChangeCallback
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_timer_handler
<LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_reg_table_remove
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_reg_table_add
</UL>

<P><STRONG><a name="[5a9]"></a>otThreadDiscover</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, thread_api.o(.text.otThreadDiscover))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + Unknown Stack Size
<LI>Call Chain = otThreadDiscover &rArr; ot::Mle::DiscoverScanner::Discover(ot::Mac::ChannelMask const&, unsigned short, bool, bool, ot::MeshCoP::SteeringData::HashBitIndexes const*, void (*)(otActiveScanResult*, void*), void*) &rArr; ot::Mle::Mle::TxMessage::SendTo(ot::Ip6::Address const&) &rArr; ot::Mle::Mle::ProcessMessageSecurity(ot::Crypto::AesCcm::Mode, ot::Message&, ot::Ip6::MessageInfo const&, unsigned short, ot::Mle::Mle::SecurityHeader const&) &rArr; ot::Message::AppendBytes(void const*, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DiscoverScanner::Discover(ot::Mac::ChannelMask const&, unsigned short, bool, bool, ot::MeshCoP::SteeringData::HashBitIndexes const*, void (*)(otActiveScanResult*, void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8020460690342608375ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[1fb]"></a>otThreadErrorToString</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, error_api.o(.text.otThreadErrorToString))
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ErrorToString(otError)
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CliUartOutput(void*, char const*, std::__va_list)
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Joiner::HandleCallback(otError)
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::HandleResponse(otMessage*, otMessageInfo const*, otError)
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Coap::HandleRequest(otMessage*, otMessageInfo const*)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::OutputResult(otError)
</UL>

<P><STRONG><a name="[581]"></a>otThreadGetChildInfoById</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadGetChildInfoById))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = otThreadGetChildInfoById &rArr; ot::ChildTable::GetChildInfoById(unsigned short, ot::Child::Info&) &rArr; ot::ChildTable::FindChild(unsigned short, ot::Neighbor::StateFilter) &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::GetChildInfoById(unsigned short, ot::Child::Info&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;424622705244ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[568]"></a>otThreadGetChildInfoByIndex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadGetChildInfoByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = otThreadGetChildInfoByIndex &rArr; ot::ChildTable::GetChildInfoByIndex(unsigned short, ot::Child::Info&) &rArr; ot::Child::Info::SetFrom(ot::Child const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::GetChildInfoByIndex(unsigned short, ot::Child::Info&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;424622705244ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;30907139684939619ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_register_post
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_timer_handler
</UL>

<P><STRONG><a name="[569]"></a>otThreadGetChildNextIp6Address</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, thread_ftd_api.o(.text.otThreadGetChildNextIp6Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = otThreadGetChildNextIp6Address &rArr; ot::Child::AddressIterator::Update() &rArr; ot::Child::GetMeshLocalIp6Address(ot::Ip6::Address&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddressIterator::GetAddress() const
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Child::AddressIterator::Update()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::GetChildAtIndex(unsigned short)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;30907139684939619ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[53e]"></a>otThreadGetChildRouterLinks</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadGetChildRouterLinks))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;15073379119283750636ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[564]"></a>otThreadGetChildTimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadGetChildTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;303229889220393947ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5be]"></a>otThreadGetContextIdReuseDelay</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadGetContextIdReuseDelay))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8846784157991210846ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[53b]"></a>otThreadGetDeviceProperties</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadGetDeviceProperties))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1495474164342561146ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[583]"></a>otThreadGetDeviceRole</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadGetDeviceRole))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;428983089745ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_neighbor_Change_Callback
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_stateChangeCallback
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_timer_handler
<LI><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_reset
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_request_proccess
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_ack_process
</UL>

<P><STRONG><a name="[543]"></a>otThreadGetDomainName</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadGetDomainName))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1562345116032201233ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[548]"></a>otThreadGetExtendedPanId</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadGetExtendedPanId))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;1648543237ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7040008844819482601ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1648543237ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5ba]"></a>otThreadGetIp6Counters</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadGetIp6Counters))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8094126837366616329ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[52b]"></a>otThreadGetJoinerUdpPort</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadGetJoinerUdpPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = otThreadGetJoinerUdpPort &rArr; ot::MeshCoP::JoinerRouter::GetJoinerUdpPort() &rArr; ot::NetworkData::LeaderBase::GetCommissioningDataSubTlv(ot::MeshCoP::Tlv::Type) const &rArr; ot::MeshCoP::Tlv::FindTlv(unsigned char const*, unsigned short, ot::MeshCoP::Tlv::Type)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::GetJoinerUdpPort()
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1366262738558941672ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[532]"></a>otThreadGetKeySequenceCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadGetKeySequenceCounter))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;14182804244553304960ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[533]"></a>otThreadGetKeySwitchGuardTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadGetKeySwitchGuardTime))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;14182804244553304960ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[591]"></a>otThreadGetLeaderData</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, thread_api.o(.text.otThreadGetLeaderData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = otThreadGetLeaderData
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::GetLeaderData()
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::IsAttached() const
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;5743589040336375053ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[572]"></a>otThreadGetLinkLocalAllThreadNodesMulticastAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadGetLinkLocalAllThreadNodesMulticastAddress))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;31451632477041015ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[522]"></a>otThreadGetLinkLocalIp6Address</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadGetLinkLocalIp6Address))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;123339735204840ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_stateChangeCallback
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_kick_child_post
</UL>

<P><STRONG><a name="[54c]"></a>otThreadGetLinkMode</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, thread_api.o(.text.otThreadGetLinkMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = otThreadGetLinkMode
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DeviceMode::Get(otLinkModeConfig&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1681249789ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrInitUser
</UL>

<P><STRONG><a name="[539]"></a>otThreadGetLocalLeaderWeight</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadGetLocalLeaderWeight))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;14765126478273032447ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[567]"></a>otThreadGetMaxAllowedChildren</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadGetMaxAllowedChildren))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8440012427400342744ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;424622705244ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;30907139684939619ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_register_post
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_timer_handler
</UL>

<P><STRONG><a name="[56a]"></a>otThreadGetMaxChildIpAddresses</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadGetMaxChildIpAddresses))
<BR><BR>[Calls]<UL><LI><a href="#[b2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::GetMaxChildIpAddresses() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;30907139684939619ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[527]"></a>otThreadGetMaxRouterId</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadGetMaxRouterId))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;123344230057719ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[524]"></a>otThreadGetMeshLocalEid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadGetMeshLocalEid))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;123339735204840ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Rafael_data
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_number
</UL>

<P><STRONG><a name="[b3f]"></a>otThreadGetMeshLocalPrefix</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadGetMeshLocalPrefix))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_stateChangeCallback
</UL>

<P><STRONG><a name="[5b9]"></a>otThreadGetMleCounters</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadGetMleCounters))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8094126837366616329ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[58b]"></a>otThreadGetNetworkIdTimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadGetNetworkIdTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;5126223071761830632ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[55e]"></a>otThreadGetNetworkKey</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadGetNetworkKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = otThreadGetNetworkKey &rArr; ot::KeyManager::GetNetworkKey(ot::NetworkKey&) const &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::GetNetworkKey(ot::NetworkKey&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;2882870027264844783ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[519]"></a>otThreadGetNetworkName</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadGetNetworkName))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Dataset::Process&lang;1648543237ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1648543237ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;11015563977516890969ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrInitUser
</UL>

<P><STRONG><a name="[59d]"></a>otThreadGetNextCacheEntry</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadGetNextCacheEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = otThreadGetNextCacheEntry &rArr; ot::AddressResolver::GetNextCacheEntry(ot::AddressResolver::EntryInfo&, ot::AddressResolver::Iterator&) const &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::GetNextCacheEntry(ot::AddressResolver::EntryInfo&, ot::AddressResolver::Iterator&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7109832251570096126ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[50f]"></a>otThreadGetNextDiagnosticTlv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, netdiag_api.o(.text.otThreadGetNextDiagnosticTlv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = otThreadGetNextDiagnosticTlv &rArr; ot::NetworkDiagnostic::Client::GetNextDiagTlv(ot::Coap::Message const&, unsigned short&, otNetworkDiagTlv&) &rArr; otError ot::Tlv::ReadUintTlv&lang;unsigned short&rang;(ot::Message const&, unsigned short, unsigned short&) &rArr; ot::Tlv::ReadTlvValue(ot::Message const&, unsigned short, void*, unsigned char) &rArr; ot::Tlv::ParsedInfo::ParseFrom(ot::Message const&, unsigned short) &rArr; ot::Message::Read(unsigned short, void*, unsigned short) const &rArr; ot::Message::ReadBytes(unsigned short, void*, unsigned short) const &rArr; ot::Message::GetFirstChunk(unsigned short, unsigned short&, ot::Message::Chunk&) const &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::GetNextDiagTlv(ot::Coap::Message const&, unsigned short&, otNetworkDiagTlv&)
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Cli::Interpreter::HandleDiagnosticGetResponse(otError, otMessage const*, ot::Ip6::MessageInfo const*)
</UL>

<P><STRONG><a name="[56c]"></a>otThreadGetNextHopAndPathCost</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, thread_ftd_api.o(.text.otThreadGetNextHopAndPathCost))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = otThreadGetNextHopAndPathCost &rArr; ot::RouterTable::GetNextHopAndPathCost(unsigned short, unsigned short&, unsigned char&) const &rArr; ot::ChildTable::FindChild(unsigned short, ot::Neighbor::StateFilter) &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetNextHopAndPathCost(unsigned short, unsigned short&, unsigned char&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;30913625955023990ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5aa]"></a>otThreadGetNextNeighborInfo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadGetNextNeighborInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = otThreadGetNextNeighborInfo &rArr; ot::NeighborTable::GetNextNeighborInfo(short&, ot::Neighbor::Info&) &rArr; ot::Neighbor::Info::SetFrom(ot::Neighbor const&) &rArr; ot::LinkQualityInfo::GetLinkMargin() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NeighborTable::GetNextNeighborInfo(short&, ot::Neighbor::Info&)
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8023188516701246990ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[52a]"></a>otThreadGetParentInfo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadGetParentInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = otThreadGetParentInfo &rArr; ot::Mle::Mle::GetParentInfo(ot::Router::Info&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::GetParentInfo(ot::Router::Info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;125538443212822ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_register_post
</UL>

<P><STRONG><a name="[546]"></a>otThreadGetParentPriority</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadGetParentPriority))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;16244709273642014994ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[558]"></a>otThreadGetPartitionId</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, thread_api.o(.text.otThreadGetPartitionId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = otThreadGetPartitionId
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::GetLeaderData()
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1998604769390126437ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[559]"></a>otThreadGetPreferredLeaderPartitionId</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadGetPreferredLeaderPartitionId))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1998604769390126437ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[54a]"></a>otThreadGetPskc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadGetPskc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = otThreadGetPskc &rArr; ot::KeyManager::GetPskc(ot::Pskc&) const &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::GetPskc(ot::Pskc&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1648543237ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[573]"></a>otThreadGetRealmLocalAllThreadNodesMulticastAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadGetRealmLocalAllThreadNodesMulticastAddress))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;31451632477041015ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[523]"></a>otThreadGetRloc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadGetRloc))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;123339735204840ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_register_post
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_stateChangeCallback
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Rafael_data
</UL>

<P><STRONG><a name="[592]"></a>otThreadGetRloc16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadGetRloc16))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;58431844188429ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_neighbor_Change_Callback
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_register_post
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_stateChangeCallback
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_timer_handler
</UL>

<P><STRONG><a name="[589]"></a>otThreadGetRouterDowngradeThreshold</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadGetRouterDowngradeThreshold))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;5021455550522604481ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[57b]"></a>otThreadGetRouterIdRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadGetRouterIdRange))
<BR><BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetRouterIdRange(unsigned char&, unsigned char&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;3200263406431374201ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[528]"></a>otThreadGetRouterInfo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadGetRouterInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = otThreadGetRouterInfo &rArr; ot::RouterTable::GetRouterInfo(unsigned short, ot::Router::Info&) &rArr; ot::Router::Info::SetFrom(ot::Router const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::GetRouterInfo(unsigned short, ot::Router::Info&)
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;123344230057719ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[514]"></a>otThreadGetRouterSelectionJitter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadGetRouterSelectionJitter))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;10320315516056133487ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[544]"></a>otThreadGetRouterUpgradeThreshold</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadGetRouterUpgradeThreshold))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;15712178869698907848ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[517]"></a>otThreadGetVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadGetVersion))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;108232213406486ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[513]"></a>otThreadIsRouterEligible</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadIsRouterEligible))
<BR><BR>[Calls]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::IsRouterEligible() const
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1030263388783878400ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[56d]"></a>otThreadIsRouterIdAllocated</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadIsRouterIdAllocated))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;30913625955023990ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[593]"></a>otThreadIsSingleton</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadIsSingleton))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = otThreadIsSingleton &rArr; ot::Mle::MleRouter::IsSingleton() const
</UL>
<BR>[Calls]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::IsSingleton() const
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;603988223085374603ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[b4d]"></a>otThreadRegisterNeighborTableCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadRegisterNeighborTableCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrInitUser
</UL>

<P><STRONG><a name="[52f]"></a>otThreadReleaseRouterId</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadReleaseRouterId))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = otThreadReleaseRouterId &rArr; ot::RouterTable::Release(unsigned char) &rArr; ot::AddressResolver::RemoveEntriesForRouterId(unsigned char) &rArr; ot::AddressResolver::Remove(unsigned short, bool) &rArr; ot::AddressResolver::RemoveCacheEntry(ot::AddressResolver::CacheEntry&, ot::AddressResolver::CacheEntryList&, ot::AddressResolver::CacheEntry*, ot::AddressResolver::Reason) &rArr; ot::MeshForwarder::HandleResolved(ot::Ip6::Address const&, otError) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::Release(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;13738210911291060331ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5bb]"></a>otThreadResetIp6Counters</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadResetIp6Counters))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8094126837366616329ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5b7]"></a>otThreadResetMleCounters</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, thread_api.o(.text.otThreadResetMleCounters))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = otThreadResetMleCounters
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8094126837366616329ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[529]"></a>otThreadSearchForBetterParent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadSearchForBetterParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = otThreadSearchForBetterParent &rArr; ot::Mle::Mle::SearchForBetterParent() &rArr; ot::Mle::Mle::Attach(ot::Mle::Mle::AttachMode) &rArr; ot::MeshCoP::DatasetManager::Restore() &rArr; ot::MeshCoP::DatasetLocal::Restore(ot::MeshCoP::Dataset&) &rArr; ot::MeshCoP::DatasetLocal::Read(ot::MeshCoP::Dataset&) const &rArr; ot::Settings::ReadOperationalDataset(ot::MeshCoP::Dataset::Type, ot::MeshCoP::Dataset&) const &rArr; otPlatSettingsGet &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SearchForBetterParent()
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;125538443212822ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[54f]"></a>otThreadSendAddressNotification</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, thread_ftd_api.o(.text.otThreadSendAddressNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = otThreadSendAddressNotification &rArr; ot::AddressResolver::SendAddressQueryResponse(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, unsigned int const*, ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::AddressResolver::SendAddressQueryResponse(ot::Ip6::Address const&, ot::Ip6::InterfaceIdentifier const&, unsigned int const*, ot::Ip6::Address const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1681701387ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[58d]"></a>otThreadSendDiagnosticGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netdiag_api.o(.text.otThreadSendDiagnosticGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680 + Unknown Stack Size
<LI>Call Chain = otThreadSendDiagnosticGet &rArr; ot::NetworkDiagnostic::Client::SendDiagnosticGet(ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(otError, otMessage*, otMessageInfo const*, void*), void*) &rArr; ot::NetworkDiagnostic::Client::SendCommand(ot::Uri, ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::CoapBase::NewNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::SendDiagnosticGet(ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(otError, otMessage*, otMessageInfo const*, void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;5255620471931187573ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[58e]"></a>otThreadSendDiagnosticReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netdiag_api.o(.text.otThreadSendDiagnosticReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = otThreadSendDiagnosticReset &rArr; ot::NetworkDiagnostic::Client::SendDiagnosticReset(ot::Ip6::Address const&, unsigned char const*, unsigned char) &rArr; ot::NetworkDiagnostic::Client::SendCommand(ot::Uri, ot::Ip6::Address const&, unsigned char const*, unsigned char, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::CoapBase::NewNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkDiagnostic::Client::SendDiagnosticReset(ot::Ip6::Address const&, unsigned char const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;5255620471931187573ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[59e]"></a>otThreadSetCcmEnabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadSetCcmEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7113069ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[53f]"></a>otThreadSetChildRouterLinks</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadSetChildRouterLinks))
<BR><BR>[Calls]<UL><LI><a href="#[b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetChildRouterLinks(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;15073379119283750636ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[565]"></a>otThreadSetChildTimeout</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadSetChildTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760 + Unknown Stack Size
<LI>Call Chain = otThreadSetChildTimeout &rArr; ot::Mle::Mle::SetTimeout(unsigned int) &rArr; ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetTimeout(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;303229889220393947ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5bf]"></a>otThreadSetContextIdReuseDelay</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadSetContextIdReuseDelay))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8846784157991210846ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[53d]"></a>otThreadSetDeviceProperties</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadSetDeviceProperties))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = otThreadSetDeviceProperties &rArr; ot::Mle::MleRouter::SetDeviceProperties(ot::Mle::DeviceProperties const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetDeviceProperties(ot::Mle::DeviceProperties const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1495474164342561146ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5a8]"></a>otThreadSetDiscoveryRequestCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadSetDiscoveryRequestCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8020460690342608375ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[542]"></a>otThreadSetDomainName</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadSetDomainName))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = otThreadSetDomainName &rArr; ot::MeshCoP::NetworkNameManager::SetDomainName(char const*) &rArr; ot::MeshCoP::NetworkName::Set(char const*) &rArr; ot::MeshCoP::NetworkName::Set(ot::MeshCoP::NameData const&) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkNameManager::SetDomainName(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1562345116032201233ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[516]"></a>otThreadSetEnabled</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, thread_api.o(.text.otThreadSetEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776 + Unknown Stack Size
<LI>Call Chain = otThreadSetEnabled &rArr; ot::Mle::Mle::Start(ot::Mle::Mle::StartMode) &rArr; ot::Mle::Mle::SendChildUpdateRequest(ot::Mle::Mle::ChildUpdateRequestMode) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Start(ot::Mle::Mle::StartMode)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::Stop(ot::Mle::Mle::StopMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;108232213406486ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrInitUser
</UL>

<P><STRONG><a name="[59c]"></a>otThreadSetExtendedPanId</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, thread_api.o(.text.otThreadSetExtendedPanId))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = otThreadSetExtendedPanId &rArr; ot::MeshCoP::PendingDatasetManager::Clear() &rArr; ot::MeshCoP::DatasetManager::Clear() &rArr; ot::MeshCoP::DatasetLocal::Clear() &rArr; ot::Settings::DeleteOperationalDataset(ot::MeshCoP::Dataset::Type) &rArr; otPlatSettingsDelete &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::Clear()
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Clear()
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::ExtendedPanIdManager::SetExtPanId(ot::MeshCoP::ExtendedPanId const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;7040008844819482601ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[52c]"></a>otThreadSetJoinerUdpPort</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, thread_ftd_api.o(.text.otThreadSetJoinerUdpPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = otThreadSetJoinerUdpPort &rArr; ot::MeshCoP::JoinerRouter::SetJoinerUdpPort(unsigned short) &rArr; ot::MeshCoP::JoinerRouter::Start() &rArr; ot::Ip6::Filter::UpdateUnsecurePorts(ot::Ip6::Filter::Action, unsigned short) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)4&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::JoinerRouter::SetJoinerUdpPort(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1366262738558941672ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[531]"></a>otThreadSetKeySequenceCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadSetKeySequenceCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = otThreadSetKeySequenceCounter &rArr; ot::KeyManager::SetCurrentKeySequence(unsigned int) &rArr; ot::KeyManager::UpdateKeyMaterial() &rArr; ot::KeyManager::ComputeKeys(unsigned int, ot::KeyManager::HashKeys&) const &rArr; ot::Crypto::HmacSha256::Start(ot::Crypto::Key const&) &rArr; otPlatCryptoHmacSha256Start &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetCurrentKeySequence(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;14182804244553304960ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[534]"></a>otThreadSetKeySwitchGuardTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_api.o(.text.otThreadSetKeySwitchGuardTime))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;14182804244553304960ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[54e]"></a>otThreadSetLinkMode</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, thread_api.o(.text.otThreadSetLinkMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896 + Unknown Stack Size
<LI>Call Chain = otThreadSetLinkMode &rArr; ot::Mle::Mle::SetDeviceMode(ot::Mle::DeviceMode) &rArr; ot::Mle::Mle::SetStateChild(unsigned short) &rArr; ot::Mle::MleRouter::HandleChildStart(ot::Mle::Mle::AttachMode) &rArr; ot::Mle::MleRouter::RemoveChildren() &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::Mle::SetDeviceMode(ot::Mle::DeviceMode)
<LI><a href="#[b2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::DeviceMode::Set(otLinkModeConfig const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1681249789ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[53a]"></a>otThreadSetLocalLeaderWeight</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadSetLocalLeaderWeight))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;14765126478273032447ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5bd]"></a>otThreadSetMaxAllowedChildren</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadSetMaxAllowedChildren))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = otThreadSetMaxAllowedChildren &rArr; ot::ChildTable::SetMaxChildrenAllowed(unsigned short) &rArr; ot::ChildTable::HasChildren(ot::Neighbor::StateFilter) const &rArr; ot::Neighbor::AddressMatcher::Matches(ot::Neighbor const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::ChildTable::SetMaxChildrenAllowed(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8440012427400342744ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[56b]"></a>otThreadSetMaxChildIpAddresses</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadSetMaxChildIpAddresses))
<BR><BR>[Calls]<UL><LI><a href="#[b2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetMaxChildIpAddresses(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;30907139684939619ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[58c]"></a>otThreadSetNetworkIdTimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadSetNetworkIdTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;5126223071761830632ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[55d]"></a>otThreadSetNetworkKey</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, thread_api.o(.text.otThreadSetNetworkKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = otThreadSetNetworkKey &rArr; ot::MeshCoP::PendingDatasetManager::Clear() &rArr; ot::MeshCoP::DatasetManager::Clear() &rArr; ot::MeshCoP::DatasetLocal::Clear() &rArr; ot::Settings::DeleteOperationalDataset(ot::MeshCoP::Dataset::Type) &rArr; otPlatSettingsDelete &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::Clear()
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Clear()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetNetworkKey(ot::NetworkKey const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;2882870027264844783ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[518]"></a>otThreadSetNetworkName</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, thread_api.o(.text.otThreadSetNetworkName))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = otThreadSetNetworkName &rArr; ot::MeshCoP::PendingDatasetManager::Clear() &rArr; ot::MeshCoP::DatasetManager::Clear() &rArr; ot::MeshCoP::DatasetLocal::Clear() &rArr; ot::Settings::DeleteOperationalDataset(ot::MeshCoP::Dataset::Type) &rArr; otPlatSettingsDelete &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::Clear()
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Clear()
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::NetworkNameManager::SetNetworkName(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;11015563977516890969ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[547]"></a>otThreadSetParentPriority</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadSetParentPriority))
<BR><BR>[Calls]<UL><LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetAssignParentPriority(signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;16244709273642014994ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[55a]"></a>otThreadSetPreferredLeaderPartitionId</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadSetPreferredLeaderPartitionId))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1998604769390126437ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[5bc]"></a>otThreadSetPreferredRouterId</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadSetPreferredRouterId))
<BR><BR>[Calls]<UL><LI><a href="#[b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetPreferredRouterId(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;8228328825147909356ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[54b]"></a>otThreadSetPskc</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, thread_ftd_api.o(.text.otThreadSetPskc))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = otThreadSetPskc &rArr; ot::MeshCoP::PendingDatasetManager::Clear() &rArr; ot::MeshCoP::DatasetManager::Clear() &rArr; ot::MeshCoP::DatasetLocal::Clear() &rArr; ot::Settings::DeleteOperationalDataset(ot::MeshCoP::Dataset::Type) &rArr; otPlatSettingsDelete &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::PendingDatasetManager::Clear()
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::DatasetManager::Clear()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::KeyManager::SetPskc(ot::Pskc const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1648543237ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[58a]"></a>otThreadSetRouterDowngradeThreshold</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadSetRouterDowngradeThreshold))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;5021455550522604481ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[512]"></a>otThreadSetRouterEligible</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadSetRouterEligible))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720 + Unknown Stack Size
<LI>Call Chain = otThreadSetRouterEligible &rArr; ot::Mle::MleRouter::SetRouterEligible(bool) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetRouterEligible(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;1030263388783878400ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[57c]"></a>otThreadSetRouterIdRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadSetRouterIdRange))
<BR><BR>[Calls]<UL><LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::RouterTable::SetRouterIdRange(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;3200263406431374201ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[515]"></a>otThreadSetRouterSelectionJitter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadSetRouterSelectionJitter))
<BR><BR>[Calls]<UL><LI><a href="#[b32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Mle::MleRouter::SetRouterSelectionJitter(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;10320315516056133487ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[545]"></a>otThreadSetRouterUpgradeThreshold</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadSetRouterUpgradeThreshold))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;15712178869698907848ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[55f]"></a>otThreadSetThreadVersionCheckEnabled</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread_ftd_api.o(.text.otThreadSetThreadVersionCheckEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;29525964638568806ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4d4]"></a>otUdpBind</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, udp_api.o(.text.otUdpBind))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = otUdpBind &rArr; ot::Ip6::Udp::Bind(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&, ot::Ip6::NetifIdentifier) &rArr; ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Address const&) const &rArr; bool ot::LinkedList&lang;ot::Ip6::Netif::UnicastAddress&rang;::ContainsMatching&lang;ot::Ip6::Address&rang;(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Bind(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&, ot::Ip6::NetifIdentifier)
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;1665317123ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sockInit
</UL>

<P><STRONG><a name="[4d8]"></a>otUdpClose</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, udp_api.o(.text.otUdpClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = otUdpClose &rArr; ot::Ip6::Udp::Close(ot::Ip6::Udp::SocketHandle&)
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Close(ot::Ip6::Udp::SocketHandle&)
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;428967416664ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4d7]"></a>otUdpConnect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, udp_api.o(.text.otUdpConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = otUdpConnect &rArr; ot::Ip6::Udp::Connect(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&) &rArr; ot::Ip6::Udp::Bind(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&, ot::Ip6::NetifIdentifier) &rArr; ot::Ip6::Netif::HasUnicastAddress(ot::Ip6::Address const&) const &rArr; bool ot::LinkedList&lang;ot::Ip6::Netif::UnicastAddress&rang;::ContainsMatching&lang;ot::Ip6::Address&rang;(ot::Ip6::Address const&) const &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Connect(ot::Ip6::Udp::SocketHandle&, ot::Ip6::SockAddr const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;32000442710786154ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[579]"></a>otUdpGetSockets</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, udp_api.o(.text.otUdpGetSockets))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::Interpreter::Process&lang;31998349810021265ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4d5]"></a>otUdpIsOpen</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, udp_api.o(.text.otUdpIsOpen))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;1830547446ull&rang;(ot::Utils::CmdLineParser::Arg*)
</UL>

<P><STRONG><a name="[4cf]"></a>otUdpNewMessage</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, udp_api.o(.text.otUdpNewMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = otUdpNewMessage &rArr; ot::Ip6::Udp::NewMessage(unsigned short, ot::Message::Settings const&) &rArr; ot::Ip6::Ip6::NewMessage(unsigned short, ot::Message::Settings const&) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Message::Settings::From(otMessageSettings const*)
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::NewMessage(unsigned short, ot::Message::Settings const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;1665316120ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udpSend
</UL>

<P><STRONG><a name="[4d6]"></a>otUdpOpen</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, udp_api.o(.text.otUdpOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = otUdpOpen &rArr; ot::Ip6::Udp::Open(ot::Ip6::Udp::SocketHandle&, void (*)(void*, otMessage*, otMessageInfo const*), void*) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::Open(ot::Ip6::Udp::SocketHandle&, void (*)(void*, otMessage*, otMessageInfo const*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;1830547446ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sockInit
</UL>

<P><STRONG><a name="[4d1]"></a>otUdpSend</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, udp_api.o(.text.otUdpSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = otUdpSend &rArr; ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otError ot::Cli::UdpExample::Process&lang;1665316120ull&rang;(ot::Utils::CmdLineParser::Arg*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udpSend
</UL>

<P><STRONG><a name="[b33]"></a>ot_alarmInit</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, ot_alarm.o(.text.ot_alarmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ot_alarmInit &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b25]"></a>ot_alarmTask</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, ot_alarm.o(.text.ot_alarmTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ot_alarmTask &rArr; otPlatAlarmMilliFired &rArr; ot::Timer::Scheduler::ProcessTimers(ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::Remove(ot::Timer&, ot::Timer::Scheduler::AlarmApi const&) &rArr; ot::Timer::Scheduler::SetAlarm(ot::Timer::Scheduler::AlarmApi const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliFired
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrGetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otSysProcessDrivers
</UL>

<P><STRONG><a name="[b34]"></a>ot_entropy_init</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ot_entropy.o(.text.ot_entropy_init))
<BR><BR>[Calls]<UL><LI><a href="#[b35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_random_number
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b36]"></a>ot_radioInit</STRONG> (Thumb, 388 bytes, Stack size unknown bytes, ot_radio.o(.text.ot_radioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ot_radioInit &rArr; subg_ctrl_filter_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sec_register
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_unique_id
<LI><a href="#[b3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_ctrl_filter_set
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_src_match_ctrl
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_phy_pib_set
<LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_mac_pib_set
<LI><a href="#[b37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_cb_set
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_auto_state_set
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_auto_ack_set
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_ctrl_sleep_set
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_ctrl_sfd_set
<LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_ctrl_preamble_set
<LI><a href="#[b3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_ctrl_modem_config_set
<LI><a href="#[b3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_ctrl_mac_set
<LI><a href="#[b39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_ctrl_idle_set
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_ctrl_frequency_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b27]"></a>ot_radioTask</STRONG> (Thumb, 420 bytes, Stack size unknown bytes, ot_radio.o(.text.ot_radioTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264 + Unknown Stack Size
<LI>Call Chain = ot_radioTask &rArr; otPlatRadioReceiveDone &rArr; ot::Radio::Callbacks::HandleReceiveDone(ot::Mac::RxFrame*, otError) &rArr; ot::Mac::SubMac::HandleReceiveDone(ot::Mac::RxFrame*, otError) &rArr; ot::Mac::SubMac::Callbacks::ReceiveDone(ot::Mac::RxFrame*, otError) &rArr; ot::Mac::Mac::HandleReceivedFrame(ot::Mac::RxFrame*, otError) &rArr; ot::MeshForwarder::HandleReceivedFrame(ot::Mac::RxFrame&) &rArr; ot::MeshForwarder::HandleMesh(ot::FrameData&, ot::Mac::Address const&, ot::ThreadLinkInfo const&) &rArr; ot::MeshForwarder::HandleFragment(ot::FrameData&, ot::Mac::Addresses const&, ot::ThreadLinkInfo const&) &rArr; ot::MeshForwarder::UpdateRoutes(ot::FrameData const&, ot::Mac::Addresses const&) &rArr; ot::Mle::MleRouter::RemoveNeighbor(ot::Neighbor&) &rArr; ot::Mle::Mle::BecomeDetached() &rArr; ot::Mle::Mle::SetRloc16(unsigned short) &rArr; ot::AddressResolver::RestartAddressQueries() &rArr; ot::AddressResolver::SendAddressQuery(ot::Ip6::Address const&) &rArr; ot::Coap::CoapBase::NewPriorityNonConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioTxDone
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioReceiveDone
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otSysEventSignalPending
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otSysProcessDrivers
</UL>

<P><STRONG><a name="[b0e]"></a>ot_radio_extend_addr_ctrl</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ot_radio.o(.text.ot_radio_extend_addr_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ot_radio_extend_addr_ctrl &rArr; lmac15p4_src_match_extended_entry &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_src_match_extended_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioClearSrcMatchExtEntry
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioClearSrcMatchExtEntries
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioAddSrcMatchExtEntry
</UL>

<P><STRONG><a name="[b0f]"></a>ot_radio_short_addr_ctrl</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ot_radio.o(.text.ot_radio_short_addr_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ot_radio_short_addr_ctrl &rArr; lmac15p4_src_match_short_entry &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_src_match_short_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioClearSrcMatchShortEntry
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioClearSrcMatchShortEntries
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioAddSrcMatchShortEntry
</UL>

<P><STRONG><a name="[b26]"></a>ot_uartTask</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, ot_uart.o(.text.ot_uartTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = ot_uartTask &rArr; otPlatUartReceived &rArr; otCliInputLine &rArr; ot::Cli::Interpreter::ProcessLine(char*) &rArr; ot::Cli::Interpreter::ProcessCommand(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Cli::Interpreter::ProcessUserCommands(ot::Utils::CmdLineParser::Arg*) &rArr; ot::Utils::CmdLineParser::Arg::operator==(char const*) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatUartReceived
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otSysProcessDrivers
</UL>

<P><STRONG><a name="[b40]"></a>ota_bitmap_get_bit</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, ot_ota_handler.o(.text.ota_bitmap_get_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ota_bitmap_get_bit &rArr; [Anonymous Symbol] &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b42]"></a>ota_bitmap_get_remain</STRONG> (Thumb, 144 bytes, Stack size unknown bytes, ot_ota_handler.o(.text.ota_bitmap_get_remain))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ota_bitmap_get_remain &rArr; [Anonymous Symbol] &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b43]"></a>ota_bitmap_init</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, ot_ota_handler.o(.text.ota_bitmap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ota_bitmap_init &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
</UL>

<P><STRONG><a name="[b45]"></a>ota_bootinfo_reset</STRONG> (Thumb, 192 bytes, Stack size unknown bytes, ot_ota_handler.o(.text.ota_bootinfo_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ota_bootinfo_reset &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_page
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
</UL>

<P><STRONG><a name="[b46]"></a>ota_bootloader_info_check</STRONG> (Thumb, 196 bytes, Stack size unknown bytes, ot_ota_handler.o(.text.ota_bootloader_info_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ota_bootloader_info_check &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_page
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32checksum
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrInitUser
</UL>

<P><STRONG><a name="[b4a]"></a>ota_coap_request</STRONG> (Thumb, 206 bytes, Stack size unknown bytes, ot_ota_handler.o(.text.ota_coap_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = ota_coap_request &rArr; otCoapMessageGenerateToken &rArr; ot::Coap::Message::GenerateRandomToken(unsigned char) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageFree
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageAppend
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapSendRequestWithParameters
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapNewMessage
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageSetPayloadMarker
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageInit
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageGenerateToken
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageAppendUriPathOptions
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
</UL>

<P><STRONG><a name="[c1]"></a>ota_event_handler</STRONG> (Thumb, 3540 bytes, Stack size unknown bytes, ot_ota_handler.o(.text.ota_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = ota_event_handler &rArr; ota_coap_request &rArr; otCoapMessageGenerateToken &rArr; ot::Coap::Message::GenerateRandomToken(unsigned char) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otRandomNonCryptoGetUint16InRange
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6AddressFromString
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_byte
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_coap_request
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bootinfo_reset
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bitmap_init
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bitmap_get_remain
<LI><a href="#[b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bitmap_get_bit
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32checksum
<LI><a href="#[b49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ot_ota_handler.o(.text.ota_init)
</UL>
<P><STRONG><a name="[b4b]"></a>ota_init</STRONG> (Thumb, 488 bytes, Stack size unknown bytes, ot_ota_handler.o(.text.ota_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ota_init &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6AddressFromString
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapStart
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapAddResource
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrInitUser
</UL>

<P><STRONG><a name="[b28]"></a>otrAppProcess</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ot_freertos.o(.text.otrAppProcess))
<BR><BR>[Called By]<UL><LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otSysProcessDrivers
</UL>

<P><STRONG><a name="[9be]"></a>otrGetInstance</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ot_freertos.o(.text.otrGetInstance))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_neighbor_Change_Callback
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_register_post
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udpSend
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udp_cb
<LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_alarmTask
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_coap_request
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_timer_handler
<LI><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_reset
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_request_proccess
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_kick_child_post
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_ack_process
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Rafael_data
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_number
</UL>

<P><STRONG><a name="[b4c]"></a>otrInitUser</STRONG> (Thumb, 392 bytes, Stack size 144 bytes, app_task.o(.text.otrInitUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 2320 + Unknown Stack Size
<LI>Call Chain = otrInitUser &rArr; otDatasetSetActive &rArr; ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset::Info const&) &rArr; ot::MeshCoP::DatasetManager::HandleDatasetUpdated() &rArr; ot::MeshCoP::DatasetManager::SendSet() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkGetPanId
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkGetChannel
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6SetEnabled
<LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otSetStateChangedCallback
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otGetVersionString
<LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetSetActive
<LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetGetActive
<LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadRegisterNeighborTableCallback
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadSetEnabled
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetNetworkName
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetLinkMode
<LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otAppCliInit
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_init
<LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_init
<LI><a href="#[b46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bootloader_info_check
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_init
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sockInit
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[9b5]"></a>otrStart</STRONG> (Thumb, 152 bytes, Stack size unknown bytes, ot_freertos.o(.text.otrStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = otrStart &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[a3f]"></a>pin_set_mode</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sysctrl.o(.text.pin_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pin_set_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_uart_init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a32]"></a>pin_set_pullopt</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sysctrl.o(.text.pin_set_pullopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pin_set_pullopt
</UL>
<BR>[Called By]<UL><LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
<LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_gpio29
</UL>

<P><STRONG><a name="[191]"></a>puts</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, debug_1.o(.text.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = puts
</UL>
<BR>[Calls]<UL><LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_stdio_write
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatLog
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_Handler
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_write_tx_data
<LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_wrire_command
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_init
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_commandAM1
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_received_task
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart1_data_parse
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_init
<LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_neighbor_Change_Callback
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_init
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udp_task
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_task
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task
<LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bootinfo_reset
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bitmap_init
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bitmap_get_remain
<LI><a href="#[b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bitmap_get_bit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioTask
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_request_proccess
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_ack_process
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerCallback
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Send_SNRM
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Send_DISC
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_AES_GCM_Encrypt
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_command
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Queue_processing
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCommand_Queue_processing
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rafael_Register
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleBusyFlagAndCount
<LI><a href="#[b7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Send_AARQ
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_GetData_Request
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_AES_GCM_Decrypt
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_get_fan_status
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_factory_id_set
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_Command
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[c5]"></a>pvPortCalloc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, heap_5.o(.text.pvPortCalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pvPortCalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_ps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ot_freertos.o(.text.otrStackTask)
</UL>
<P><STRONG><a name="[1bc]"></a>pvPortMalloc</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, heap_5.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rf_proc
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_commandAM1
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_udpsend
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_data_send
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_neighbor_Change_Callback
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_register_post
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udp_received_queue_push
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udp_cb
<LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortCalloc
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bitmap_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_request_proccess
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_kick_child_post
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_ack_process
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCommand_Queue_processing
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Rafael_data
<LI><a href="#[b79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_queue
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_queue
</UL>

<P><STRONG><a name="[b94]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[b60]"></a>pxPortInitialiseStack</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1b8]"></a>register_command</STRONG> (Thumb, 92 bytes, Stack size 112 bytes, das_dlms_cmd.o(.text.register_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424 + Unknown Stack Size
<LI>Call Chain = register_command &rArr; udf_Rafael_data &rArr; app_udpSend &rArr; otUdpSend &rArr; ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Rafael_data
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__das_dlms_task
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rafael_Register
</UL>

<P><STRONG><a name="[b6d]"></a>rf_common_cal_init</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, rf_common_init.o(.text.rf_common_cal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = rf_common_cal_init &rArr; MpCalRftrimRead &rArr; GetSpecValidMpId &rArr; GetMpSectorInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[b6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPmuSetMode
<LI><a href="#[b6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmuMode
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpCalRftrimRead
</UL>
<BR>[Called By]<UL><LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_init_by_fw
</UL>

<P><STRONG><a name="[b70]"></a>rf_common_cal_set</STRONG> (Thumb, 244 bytes, Stack size unknown bytes, rf_common_init.o(.text.rf_common_cal_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = rf_common_cal_set &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptClear
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_CmdQueueSend
<LI><a href="#[b72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptEnSet
<LI><a href="#[b71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptEnGet
<LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_init_by_fw
</UL>

<P><STRONG><a name="[b73]"></a>rf_common_event_get</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, rf_common_init.o(.text.rf_common_event_get))
<BR><BR>[Calls]<UL><LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_McuStateRead
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_HostCmdSet
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_EvtQueueRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_tx_pwr_set
<LI><a href="#[b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_rssi_offset_set
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_pta_default_set
<LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_pmu_operation_mode
<LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_cal_set
</UL>

<P><STRONG><a name="[a35]"></a>rf_common_init_by_fw</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, rf_common_init.o(.text.rf_common_init_by_fw))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = rf_common_init_by_fw &rArr; rf_common_update_band_info &rArr; MpCalRftrimRead &rArr; GetSpecValidMpId &rArr; GetMpSectorInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[b6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPmuMode
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_SysInit
<LI><a href="#[b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_update_band_info
<LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_tx_pwr_set
<LI><a href="#[b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_rssi_offset_set
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_pta_default_set
<LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_pmu_operation_mode
<LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_cal_set
<LI><a href="#[b6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_cal_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_init
</UL>

<P><STRONG><a name="[b75]"></a>rf_common_pmu_operation_mode</STRONG> (Thumb, 118 bytes, Stack size unknown bytes, rf_common_init.o(.text.rf_common_pmu_operation_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = rf_common_pmu_operation_mode &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptClear
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_CmdQueueSend
<LI><a href="#[b72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptEnSet
<LI><a href="#[b71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptEnGet
<LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_init_by_fw
</UL>

<P><STRONG><a name="[b76]"></a>rf_common_pta_default_set</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, rf_common_init.o(.text.rf_common_pta_default_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = rf_common_pta_default_set &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptClear
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_CmdQueueSend
<LI><a href="#[b72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptEnSet
<LI><a href="#[b71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptEnGet
<LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_init_by_fw
</UL>

<P><STRONG><a name="[b78]"></a>rf_common_rssi_offset_set</STRONG> (Thumb, 280 bytes, Stack size unknown bytes, rf_common_init.o(.text.rf_common_rssi_offset_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = rf_common_rssi_offset_set &rArr; MpCalRftrimRead &rArr; GetSpecValidMpId &rArr; GetMpSectorInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptClear
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_CmdQueueSend
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpCalRftrimRead
<LI><a href="#[b72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptEnSet
<LI><a href="#[b71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptEnGet
<LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_init_by_fw
</UL>

<P><STRONG><a name="[b77]"></a>rf_common_tx_pwr_set</STRONG> (Thumb, 468 bytes, Stack size unknown bytes, rf_common_init.o(.text.rf_common_tx_pwr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = rf_common_tx_pwr_set &rArr; MpCalRftrimRead &rArr; GetSpecValidMpId &rArr; GetMpSectorInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptClear
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_CmdQueueSend
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpCalRftrimRead
<LI><a href="#[b72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptEnSet
<LI><a href="#[b71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptEnGet
<LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_init_by_fw
</UL>

<P><STRONG><a name="[b74]"></a>rf_common_update_band_info</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, rf_common_init.o(.text.rf_common_update_band_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = rf_common_update_band_info &rArr; MpCalRftrimRead &rArr; GetSpecValidMpId &rArr; GetMpSectorInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpCalRftrimRead
</UL>
<BR>[Called By]<UL><LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_common_init_by_fw
</UL>

<P><STRONG><a name="[b8a]"></a>rt582_utick_set_clear</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_main.o(.text.rt582_utick_set_clear))
<BR><BR>[Called By]<UL><LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[b7a]"></a>setup_gpio29</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, das_dlms_cmd.o(.text.setup_gpio29))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setup_gpio29 &rArr; gpio_cfg &rArr; pin_set_pullopt
</UL>
<BR>[Calls]<UL><LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_set_pullopt
<LI><a href="#[b7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_register_isr
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_init
</UL>

<P><STRONG><a name="[9cc]"></a>shell_init</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, shell.o(.text.shell_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shell_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_task
</UL>

<P><STRONG><a name="[9ce]"></a>shell_proc</STRONG> (Thumb, 1532 bytes, Stack size 152 bytes, shell.o(.text.shell_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = shell_proc &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_task
</UL>

<P><STRONG><a name="[b3e]"></a>subg_ctrl_filter_set</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, subg_ctrl.o(.text.subg_ctrl_filter_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = subg_ctrl_filter_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioInit
</UL>

<P><STRONG><a name="[b12]"></a>subg_ctrl_frequency_set</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, subg_ctrl.o(.text.subg_ctrl_frequency_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = subg_ctrl_frequency_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioReceive
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioTransmit
<LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioInit
</UL>

<P><STRONG><a name="[b39]"></a>subg_ctrl_idle_set</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, subg_ctrl.o(.text.subg_ctrl_idle_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = subg_ctrl_idle_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioInit
</UL>

<P><STRONG><a name="[b3b]"></a>subg_ctrl_mac_set</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, subg_ctrl.o(.text.subg_ctrl_mac_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = subg_ctrl_mac_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioInit
</UL>

<P><STRONG><a name="[b3a]"></a>subg_ctrl_modem_config_set</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, subg_ctrl.o(.text.subg_ctrl_modem_config_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = subg_ctrl_modem_config_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioInit
</UL>

<P><STRONG><a name="[b3c]"></a>subg_ctrl_preamble_set</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, subg_ctrl.o(.text.subg_ctrl_preamble_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = subg_ctrl_preamble_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioInit
</UL>

<P><STRONG><a name="[b3d]"></a>subg_ctrl_sfd_set</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, subg_ctrl.o(.text.subg_ctrl_sfd_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = subg_ctrl_sfd_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioInit
</UL>

<P><STRONG><a name="[b38]"></a>subg_ctrl_sleep_set</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, subg_ctrl.o(.text.subg_ctrl_sleep_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = subg_ctrl_sleep_set &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioInit
</UL>

<P><STRONG><a name="[12]"></a>uart0_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hosal_uart.o(.text.uart0_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart0_handler &rArr; __uart_generic_notify_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_generic_notify_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>uart1_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hosal_uart.o(.text.uart1_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart1_handler &rArr; __uart_generic_notify_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_generic_notify_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>uart2_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hosal_uart.o(.text.uart2_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart2_handler &rArr; __uart_generic_notify_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_generic_notify_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[a4f]"></a>uart_stdio_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uart_stdio.o(.text.uart_stdio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart_stdio_init &rArr; hosal_uart_init &rArr; pin_set_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_uart_ioctl
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_uart_init
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_uart_callback_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9cd]"></a>uart_stdio_read</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uart_stdio.o(.text.uart_stdio_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_stdio_read &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_task
</UL>

<P><STRONG><a name="[9a6]"></a>uart_stdio_write</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart_stdio.o(.text.uart_stdio_write))
<BR><BR>[Calls]<UL><LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_uart_send
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sh_io_write
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
</UL>

<P><STRONG><a name="[197]"></a>udf_AES_GCM_Encrypt</STRONG> (Thumb, 480 bytes, Stack size 472 bytes, das_dlms_cmd.o(.text.udf_AES_GCM_Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = udf_AES_GCM_Encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerCallback
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Set_Transmit
<LI><a href="#[b7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Send_AARQ
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Get_New_Number_of_pens
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_GetData_Request
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Action_Transmit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_Command
</UL>

<P><STRONG><a name="[b4e]"></a>udf_Meter_init</STRONG> (Thumb, 684 bytes, Stack size 64 bytes, das_dlms_cmd.o(.text.udf_Meter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = udf_Meter_init &rArr; otLinkSetExtendedAddress &rArr; ot::Mac::SubMac::SetExtAddress(ot::Mac::ExtAddress const&) &rArr; void ot::Logger::LogAtLevel&lang;(ot::LogLevel)5&rang;(char const*, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkSetExtendedAddress
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6SetMeshLocalIid
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_page
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Send_DISC
<LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_gpio29
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_Information
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashData
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrInitUser
</UL>

<P><STRONG><a name="[997]"></a>udf_Meter_received_task</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, das_dlms_cmd.o(.text.udf_Meter_received_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 3668 + Unknown Stack Size
<LI>Call Chain = udf_Meter_received_task &rArr; udf_Meter_Process &rArr; Set_TOU_C2 &rArr; udf_Set_Transmit &rArr; udf_AES_GCM_Encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart2_data_parse
</UL>

<P><STRONG><a name="[18f]"></a>udf_Send_DISC</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, das_dlms_cmd.o(.text.udf_Send_DISC))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = udf_Send_DISC &rArr; app_uart_data_send &rArr; __app_task_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_data_send
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_COMPUTE
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerCallback
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCommand_Queue_processing
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rafael_Register
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AAFIRST
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
</UL>

<P><STRONG><a name="[1c0]"></a>udf_Send_SNRM</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, das_dlms_cmd.o(.text.udf_Send_SNRM))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = udf_Send_SNRM &rArr; app_uart_data_send &rArr; __app_task_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_data_send
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_COMPUTE
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCommand_Queue_processing
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
</UL>

<P><STRONG><a name="[991]"></a>ulTaskNotifyTake</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tasks.o(.text.ulTaskNotifyTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ulTaskNotifyTake &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rf_proc
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[c9]"></a>user_gpio29_isr_handler</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, das_dlms_cmd.o(.text.user_gpio29_isr_handler))
<BR>[Address Reference Count : 1]<UL><LI> das_dlms_cmd.o(.text.setup_gpio29)
</UL>
<P><STRONG><a name="[99b]"></a>utility_strtoul</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, util_string.o(.text.utility_strtoul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = utility_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_debug
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[9a4]"></a>utility_strtox</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, util_string.o(.text.utility_strtox))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = utility_strtox
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_udpsend
</UL>

<P><STRONG><a name="[1f0]"></a>utilsSoftSrcMatchExtFindEntry</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, soft_source_match_table.o(.text.utilsSoftSrcMatchExtFindEntry))
<BR><BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioClearSrcMatchExtEntry
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b14]"></a>utilsSoftSrcMatchSetPanId</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, soft_source_match_table.o(.text.utilsSoftSrcMatchSetPanId))
<BR><BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioSetPanId
</UL>

<P><STRONG><a name="[1f4]"></a>utilsSoftSrcMatchShortFindEntry</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, soft_source_match_table.o(.text.utilsSoftSrcMatchShortFindEntry))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b52]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(.text.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[b8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[b23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[b95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[b87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[b80]"></a>uxTaskGetSystemState</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, tasks.o(.text.uxTaskGetSystemState))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = uxTaskGetSystemState &rArr; prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
</UL>

<P><STRONG><a name="[b88]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_main.o(.text.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[b97]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_main.o(.text.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[b5c]"></a>vApplicationIdleHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_main.o(.text.vApplicationIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[b6c]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rt_main.o(.text.vApplicationMallocFailedHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vApplicationMallocFailedHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetFreeHeapSize
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[b81]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rt_main.o(.text.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[b96]"></a>vApplicationTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_main.o(.text.vApplicationTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[b8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[b9]"></a>vLightTimerCallback</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, app_task.o(.text.vLightTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = vLightTimerCallback &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.text.ot_stateChangeCallback)
</UL>
<P><STRONG><a name="[b56]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(.text.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[b55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[b5f]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[b54]"></a>vListInsert</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[b62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[b53]"></a>vListInsertEnd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, list.o(.text.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[b8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[b55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[b23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[b95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[b87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[a4e]"></a>vPortDefineHeapRegions</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, heap_5.o(.text.vPortDefineHeapRegions))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vPortDefineHeapRegions &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ea]"></a>vPortEnterCritical</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vPortEnterCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliStartAt
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioTransmit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[b46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bootloader_info_check
<LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[b55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[b23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[b67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bootinfo_reset
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32checksum
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioTask
<LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioInit
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otTaskletsSignalPending
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otSysProcessDrivers
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[1eb]"></a>vPortExitCritical</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliStartAt
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatRadioTransmit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[b46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bootloader_info_check
<LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[b55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[b23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[b67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bootinfo_reset
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32checksum
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioTask
<LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioInit
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otTaskletsSignalPending
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otSysProcessDrivers
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[c6]"></a>vPortFree</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, heap_5.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_read_event
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rf_proc
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_commandAM1
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_udpsend
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_neighbor_Change_Callback
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_register_post
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udp_task
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_task
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udp_cb
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_ps
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_timer_handler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_request_proccess
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_kick_child_post
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_ack_process
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Queue_processing
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCommand_Queue_processing
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Rafael_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ot_freertos.o(.text.otrStackTask)
</UL>
<P><STRONG><a name="[a]"></a>vPortSVCHandler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text.vPortSVCHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[b8d]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, port.o(.text.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[b8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[b5d]"></a>vPortSuppressTicksAndSleep</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, port.o(.text.vPortSuppressTicksAndSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortSuppressTicksAndSleep &rArr; vTaskStepTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[b82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskConfirmSleepModeStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[b84]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, port.o(.text.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[b58]"></a>vQueueAddToRegistry</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, queue.o(.text.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[b66]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, queue.o(.text.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[b67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[9cf]"></a>vTaskDelay</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tasks.o(.text.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_task
</UL>

<P><STRONG><a name="[9b7]"></a>vTaskDelete</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, tasks.o(.text.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_entry
</UL>

<P><STRONG><a name="[b64]"></a>vTaskGetInfo</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tasks.o(.text.vTaskGetInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
</UL>

<P><STRONG><a name="[9a3]"></a>vTaskGetRunTimeStats</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, tasks.o(.text.vTaskGetRunTimeStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = vTaskGetRunTimeStats &rArr; uxTaskGetSystemState &rArr; prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_ps
</UL>

<P><STRONG><a name="[b91]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(.text.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
</UL>

<P><STRONG><a name="[9a2]"></a>vTaskList</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, tasks.o(.text.vTaskList))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = vTaskList &rArr; uxTaskGetSystemState &rArr; prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_ps
</UL>

<P><STRONG><a name="[b69]"></a>vTaskMissedYield</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[b67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[98c]"></a>vTaskNotifyGiveFromISR</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, tasks.o(.text.vTaskNotifyGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rf_event_callback
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otSysEventSignalPending
</UL>

<P><STRONG><a name="[b86]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tasks.o(.text.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
</UL>

<P><STRONG><a name="[b85]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tasks.o(.text.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[b87]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, tasks.o(.text.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[a51]"></a>vTaskStartScheduler</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, tasks.o(.text.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[b8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[b8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt582_utick_set_clear
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b83]"></a>vTaskStepTick</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tasks.o(.text.vTaskStepTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskStepTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[a19]"></a>vTaskSuspendAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_env_lock
</UL>

<P><STRONG><a name="[b8c]"></a>vTaskSwitchContext</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortPendSVHandler
</UL>

<P><STRONG><a name="[cd]"></a>vTimerCallback</STRONG> (Thumb, 1508 bytes, Stack size 240 bytes, das_dlms_cmd.o(.text.vTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696 + Unknown Stack Size
<LI>Call Chain = vTimerCallback &rArr; Rafael_Register &rArr; register_command &rArr; udf_Rafael_data &rArr; app_udpSend &rArr; otUdpSend &rArr; ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_data_send
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__app_task_signal
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Send_DISC
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_AES_GCM_Encrypt
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rafael_Register
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleBusyFlagAndCount
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Broadcast_function_timeout_handlr
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Rafael_data
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> das_dlms_cmd.o(.text.udf_Meter_init)
</UL>
<P><STRONG><a name="[9a]"></a>wdt_isr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text.wdt_isr))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[9a1]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, heap_5.o(.text.xPortGetFreeHeapSize))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_ps
<LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
</UL>

<P><STRONG><a name="[c]"></a>xPortPendSVHandler</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, port.o(.text.xPortPendSVHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xPortPendSVHandler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[b8b]"></a>xPortStartScheduler</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, port.o(.text.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xPortStartScheduler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPortStartFirstTask
<LI><a href="#[b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[d]"></a>xPortSysTickHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(.text.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm3_mcu.o(RESET)
</UL>
<P><STRONG><a name="[b4f]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, queue.o(.text.xQueueCreateMutexStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = xQueueCreateMutexStatic &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrStart
</UL>

<P><STRONG><a name="[9b9]"></a>xQueueGenericCreate</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, queue.o(.text.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_init
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_init
<LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_init
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sockInit
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
</UL>

<P><STRONG><a name="[a36]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, queue.o(.text.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreateStatic &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_init
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_init
<LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>

<P><STRONG><a name="[b90]"></a>xQueueGenericReset</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, queue.o(.text.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[b56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[988]"></a>xQueueGenericSend</STRONG> (Thumb, 532 bytes, Stack size 56 bytes, queue.o(.text.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[b91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[b67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_wrire_command
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rf_proc
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_data_send
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udp_received_queue_push
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__app_task_signal
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrStart
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_init
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_tx_data_send
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_queue
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_queue
</UL>

<P><STRONG><a name="[b93]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, queue.o(.text.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[987]"></a>xQueueGiveFromISR</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, queue.o(.text.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__app_task_signal
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_TxDoneEvent
</UL>

<P><STRONG><a name="[1e2]"></a>xQueuePeek</STRONG> (Thumb, 466 bytes, Stack size 56 bytes, queue.o(.text.xQueuePeek))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xQueuePeek &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[b91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[b67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Queue_processing
</UL>

<P><STRONG><a name="[1bb]"></a>xQueueReceive</STRONG> (Thumb, 470 bytes, Stack size 56 bytes, queue.o(.text.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[b91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[b67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_read_event
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udp_task
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_task
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Queue_processing
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCommand_Queue_processing
</UL>

<P><STRONG><a name="[9bb]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 544 bytes, Stack size 56 bytes, queue.o(.text.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[b95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[b87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[b91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[b67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_wrire_command
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrStart
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_task
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_tx_data_send
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b92]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, tasks.o(.text.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
</UL>

<P><STRONG><a name="[9cb]"></a>xTaskCreate</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[b55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_init
<LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_init
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b50]"></a>xTaskCreateStatic</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, tasks.o(.text.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xTaskCreateStatic &rArr; prvAddNewTaskToReadyList &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[b55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrStart
<LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[b23]"></a>xTaskGenericNotify</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, tasks.o(.text.xTaskGenericNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xTaskGenericNotify &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otSysEventSignalPending
</UL>

<P><STRONG><a name="[a3d]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_wrire_command
</UL>

<P><STRONG><a name="[a21]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
</UL>

<P><STRONG><a name="[aea]"></a>xTaskGetTickCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliGetNow
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliStartAt
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_init
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_stateChangeCallback
<LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_timer_handler
</UL>

<P><STRONG><a name="[b8f]"></a>xTaskIncrementTick</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[b5a]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, tasks.o(.text.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[b95]"></a>xTaskPriorityInherit</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, tasks.o(.text.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[b68]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, tasks.o(.text.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[b67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[a1a]"></a>xTaskResumeAll</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_env_unlock
</UL>

<P><STRONG><a name="[ae9]"></a>xTimerCreate</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, timers.o(.text.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_init
<LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_init
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_stateChangeCallback
<LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_alarmInit
</UL>

<P><STRONG><a name="[b89]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, timers.o(.text.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[aeb]"></a>xTimerGenericCommand</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, timers.o(.text.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliStartAt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLightTimerCallback
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_init
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_stateChangeCallback
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_timer_handler
</UL>

<P><STRONG><a name="[b08]"></a>xTimerIsTimerActive</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, timers.o(.text.xTimerIsTimerActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTimerIsTimerActive &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliStop
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b98]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c01]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[192]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAlarmMilliStartAt
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatFindNwkMgmChildRegTable
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_write_tx_data
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_rf_ioctl
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rf_event_callback
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_commandAM1
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otUdpReceive_handler
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_received_task
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart1_data_parse
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_init
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrInitUser
<LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_init
<LI><a href="#[b46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bootloader_info_check
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_neighbor_Change_Callback
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_init
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_register_post
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sockInit
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udp_task
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_task
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_stateChangeCallback
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udp_cb
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrStart
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[b8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[b8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[b23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[b87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_shell_log
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_debug
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortDefineHeapRegions
<LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enhanced_flash_dataset_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioTask
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_erase
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_env_set_default
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_env_init
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_timer_handler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_request_proccess
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_kick_child_post
<LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_data_parse
<LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_reg_table_remove
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_reg_table_add
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_ack_process
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerCallback
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Send_SNRM
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Send_DISC
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_AES_GCM_Encrypt
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Queue_processing
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCommand_Queue_processing
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rafael_Register
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Broadcast_function_timeout_handlr
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_get_noEn
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Set_Transmit
<LI><a href="#[b7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Send_AARQ
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Rafael_data
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Get_New_Number_of_pens
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_GetData_Request
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Action_Transmit
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_AES_GCM_Decrypt
<LI><a href="#[b79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_queue
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_queue
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_Demand_Task_Assembly
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_Information
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_number
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_get_fan_status
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_factory_id_set
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TOU_C2
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_Command
</UL>

<P><STRONG><a name="[c02]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[c03]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[b9a]"></a>__0snprintf</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c04]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[911]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::MeshCoP::Dataset::Info::GenerateRandom(ot::Instance&)
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_proc
</UL>

<P><STRONG><a name="[c05]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[c06]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[b9b]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[b99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c07]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[b19]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsGet
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsDelete
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsAdd
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[c08]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[c09]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[b9c]"></a>__0vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c0a]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[c0b]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[c0c]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[b0d]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Called By]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatLog
</UL>

<P><STRONG><a name="[b9d]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c0d]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[c0e]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[c0f]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1f7]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::StringWriter::AppendVarArgs(char const*, std::__va_list)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CliUartOutput(void*, char const*, std::__va_list)
</UL>

<P><STRONG><a name="[c10]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[c11]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[c12]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[b0c]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatFree
</UL>

<P><STRONG><a name="[179]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[1be]"></a>putchar</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, putchar.o(i.putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_commandAM1
<LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Send_SNRM
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCommand_Queue_processing
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_get_noEn
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_Demand_Task_Assembly
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_Information
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b4]"></a>handleMbedtlsEntropyPoll(void*, unsigned char*, unsigned int, unsigned int*)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, crypto_platform.o(.text._ZL24handleMbedtlsEntropyPollPvPhjPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = handleMbedtlsEntropyPoll(void*, unsigned char*, unsigned int, unsigned int*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatEntropyGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> crypto_platform.o(.text.otPlatCryptoRandomInit)
</UL>
<P><STRONG><a name="[95c]"></a>ot::NetworkData::NetworkData::FindBorderRouters(ot::NetworkData::RoleFilter, unsigned short*, unsigned char&) const::Rlocs::AddRloc16(unsigned short)</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, network_data.o(.text._ZZNK2ot11NetworkData11NetworkData17FindBorderRoutersENS0_10RoleFilterEPtRhEN5Rlocs9AddRloc16Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ot::NetworkData::NetworkData::FindBorderRouters(ot::NetworkData::RoleFilter, unsigned short*, unsigned char&) const::Rlocs::AddRloc16(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::NetworkData::NetworkData::FindBorderRouters(ot::NetworkData::RoleFilter, unsigned short*, unsigned char&) const
</UL>

<P><STRONG><a name="[836]"></a>ot::Utils::CmdLineParser::ParseHexString(char const*&, unsigned short&, unsigned char*, ot::Utils::CmdLineParser::HexStringParseMode)</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, parse_cmdline.o(.text._ZN2ot5Utils13CmdLineParserL14ParseHexStringERPKcRtPhNS1_18HexStringParseModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ot::Utils::CmdLineParser::ParseHexString(char const*&, unsigned short&, unsigned char*, ot::Utils::CmdLineParser::HexStringParseMode)
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsHexStringSegment(char const*&, unsigned short&, unsigned char*)
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsHexString(char const*, unsigned short&, unsigned char*)
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot::Utils::CmdLineParser::ParseAsHexString(char const*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[b3]"></a>CliUartOutput(void*, char const*, std::__va_list)</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, cli_uart.o(.text._ZL13CliUartOutputPvPKcSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = CliUartOutput(void*, char const*, std::__va_list) &rArr; otLogWarnPlat &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLogWarnPlat
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadErrorToString
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatUartFlush
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send()
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_uart.o(.text.otAppCliInit)
</UL>
<P><STRONG><a name="[1f8]"></a>Send()</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, cli_uart.o(.text._ZL4Sendv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Send() &rArr; otPlatUartSend &rArr; otPlatUartSendDone &rArr;  Send() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatUartSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatUartSendDone
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output(char const*, unsigned short)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CliUartOutput(void*, char const*, std::__va_list)
</UL>

<P><STRONG><a name="[1ff]"></a>Output(char const*, unsigned short)</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, cli_uart.o(.text._ZL6OutputPKct))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Output(char const*, unsigned short) &rArr; Send() &rArr; otPlatUartSend &rArr; otPlatUartSendDone &rArr;  Send() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatUartFlush
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send()
</UL>
<BR>[Called By]<UL><LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatUartReceived
</UL>

<P><STRONG><a name="[aa1]"></a>mbedtls_mpi_resize_clear</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bignum.o(.text.mbedtls_mpi_resize_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_mpi_resize_clear &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_random
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
</UL>

<P><STRONG><a name="[aa2]"></a>mpi_fill_random_internal</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, bignum.o(.text.mpi_fill_random_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mpi_fill_random_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_random
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
</UL>

<P><STRONG><a name="[aa4]"></a>mpi_mul_hlp</STRONG> (Thumb, 840 bytes, Stack size 48 bytes, bignum.o(.text.mpi_mul_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
</UL>

<P><STRONG><a name="[9c3]"></a>ccm_auth_crypt</STRONG> (Thumb, 866 bytes, Stack size 120 bytes, ccm.o(.text.ccm_auth_crypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_star_auth_decrypt
<LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_encrypt_and_tag
</UL>

<P><STRONG><a name="[a5e]"></a>mbedtls_cipher_aead_decrypt</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, cipher.o(.text.mbedtls_cipher_aead_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = mbedtls_cipher_aead_decrypt &rArr; mbedtls_gcm_auth_decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_auth_decrypt
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_auth_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_decrypt_ext
</UL>

<P><STRONG><a name="[a60]"></a>mbedtls_cipher_aead_encrypt</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, cipher.o(.text.mbedtls_cipher_aead_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = mbedtls_cipher_aead_encrypt &rArr; mbedtls_ccm_encrypt_and_tag &rArr; ccm_auth_crypt &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_encrypt_and_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_auth_encrypt_ext
</UL>

<P><STRONG><a name="[154]"></a>aes_crypt_ecb_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(.text.aes_crypt_ecb_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = aes_crypt_ecb_wrap &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.aes_info)
</UL>
<P><STRONG><a name="[157]"></a>aes_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cipher_wrap.o(.text.aes_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = aes_ctx_alloc &rArr; mbedtls_aes_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.aes_info)
</UL>
<P><STRONG><a name="[158]"></a>aes_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cipher_wrap.o(.text.aes_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aes_ctx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.aes_info)
</UL>
<P><STRONG><a name="[156]"></a>aes_setkey_dec_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(.text.aes_setkey_dec_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = aes_setkey_dec_wrap &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.aes_info)
</UL>
<P><STRONG><a name="[155]"></a>aes_setkey_enc_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cipher_wrap.o(.text.aes_setkey_enc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = aes_setkey_enc_wrap &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.aes_info)
</UL>
<P><STRONG><a name="[159]"></a>ccm_aes_setkey_wrap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cipher_wrap.o(.text.ccm_aes_setkey_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ccm_aes_setkey_wrap &rArr; mbedtls_ccm_setkey &rArr; mbedtls_cipher_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_setkey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.ccm_aes_info)
</UL>
<P><STRONG><a name="[15a]"></a>ccm_ctx_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cipher_wrap.o(.text.ccm_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ccm_ctx_alloc &rArr; mbedtls_ccm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_init
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.ccm_aes_info)
</UL>
<P><STRONG><a name="[15b]"></a>ccm_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cipher_wrap.o(.text.ccm_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ccm_ctx_free &rArr; mbedtls_ccm_free &rArr; mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ccm_free
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.ccm_aes_info)
</UL>
<P><STRONG><a name="[15e]"></a>gcm_aes_setkey_wrap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cipher_wrap.o(.text.gcm_aes_setkey_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gcm_aes_setkey_wrap &rArr; mbedtls_gcm_setkey &rArr; mbedtls_cipher_update &rArr;  mbedtls_gcm_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.gcm_aes_info)
</UL>
<P><STRONG><a name="[15f]"></a>gcm_ctx_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cipher_wrap.o(.text.gcm_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gcm_ctx_alloc &rArr; mbedtls_gcm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.gcm_aes_info)
</UL>
<P><STRONG><a name="[160]"></a>gcm_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cipher_wrap.o(.text.gcm_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gcm_ctx_free &rArr; mbedtls_gcm_free &rArr; mbedtls_cipher_free
</UL>
<BR>[Calls]<UL><LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.rodata.gcm_aes_info)
</UL>
<P><STRONG><a name="[a68]"></a>cmac_multiply_by_u</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cmac.o(.text.cmac_multiply_by_u))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cmac_multiply_by_u
</UL>
<BR>[Called By]<UL><LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_cmac_finish
</UL>

<P><STRONG><a name="[9c0]"></a>block_cipher_df</STRONG> (Thumb, 384 bytes, Stack size 832 bytes, ctr_drbg.o(.text.block_cipher_df))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed_internal
</UL>

<P><STRONG><a name="[9d8]"></a>ctr_drbg_update_internal</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, ctr_drbg.o(.text.ctr_drbg_update_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ctr_drbg_update_internal &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed_internal
</UL>

<P><STRONG><a name="[a6d]"></a>mbedtls_ctr_drbg_reseed_internal</STRONG> (Thumb, 168 bytes, Stack size 416 bytes, ctr_drbg.o(.text.mbedtls_ctr_drbg_reseed_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>

<P><STRONG><a name="[9df]"></a>ecjpake_ecp_add3</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, ecjpake.o(.text.ecjpake_ecp_add3))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = ecjpake_ecp_add3 &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
</UL>
<BR>[Called By]<UL><LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_write_round_two
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_read_round_two
</UL>

<P><STRONG><a name="[9e4]"></a>ecjpake_hash</STRONG> (Thumb, 194 bytes, Stack size 296 bytes, ecjpake.o(.text.ecjpake_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = ecjpake_hash &rArr; mbedtls_md &rArr; mbedtls_sha256_ret &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_write_len_point
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_zkp_write
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_kkp_read
</UL>

<P><STRONG><a name="[9ea]"></a>ecjpake_kkp_read</STRONG> (Thumb, 274 bytes, Stack size 152 bytes, ecjpake.o(.text.ecjpake_kkp_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = ecjpake_kkp_read &rArr; mbedtls_ecp_muladd &rArr; mbedtls_ecp_muladd_restartable &rArr; mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_cmp
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_hash
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_read_point
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_is_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_read_round_two
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_read_round_one
</UL>

<P><STRONG><a name="[9f0]"></a>ecjpake_kkp_write</STRONG> (Thumb, 142 bytes, Stack size 72 bytes, ecjpake.o(.text.ecjpake_kkp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = ecjpake_kkp_write &rArr; ecjpake_zkp_write &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_zkp_write
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
</UL>
<BR>[Called By]<UL><LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_write_round_one
</UL>

<P><STRONG><a name="[9f4]"></a>ecjpake_mul_secret</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, ecjpake.o(.text.ecjpake_mul_secret))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ecjpake_mul_secret &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_write_round_two
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_derive_secret
</UL>

<P><STRONG><a name="[9e5]"></a>ecjpake_write_len_point</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ecjpake.o(.text.ecjpake_write_len_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ecjpake_write_len_point &rArr; mbedtls_ecp_point_write_binary &rArr; mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_write_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_hash
</UL>

<P><STRONG><a name="[9f3]"></a>ecjpake_zkp_write</STRONG> (Thumb, 304 bytes, Stack size 120 bytes, ecjpake.o(.text.ecjpake_zkp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = ecjpake_zkp_write &rArr; mbedtls_ecp_gen_keypair_base &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_gen_keypair_base
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_hash
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_tls_write_point
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_init
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_point_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_write_round_two
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecjpake_kkp_write
</UL>

<P><STRONG><a name="[9fc]"></a>ecp_add_mixed</STRONG> (Thumb, 874 bytes, Stack size 120 bytes, ecp.o(.text.ecp_add_mixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mod
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd_restartable
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>

<P><STRONG><a name="[a05]"></a>ecp_double_jac</STRONG> (Thumb, 1048 bytes, Stack size 88 bytes, ecp.o(.text.ecp_double_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mod
</UL>
<BR>[Called By]<UL><LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>

<P><STRONG><a name="[ab]"></a>ecp_drbg_random</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ecp.o(.text.ecp_drbg_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = ecp_drbg_random &rArr; mbedtls_hmac_drbg_random &rArr; mbedtls_hmac_drbg_random_with_add &rArr; hmac_drbg_reseed_core &rArr; mbedtls_hmac_drbg_update_ret &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp.o(.text.mbedtls_ecp_mul_restartable)
</UL>
<P><STRONG><a name="[a09]"></a>ecp_normalize_jac</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, ecp.o(.text.ecp_normalize_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ecp_normalize_jac &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mod
</UL>
<BR>[Called By]<UL><LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd_restartable
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>

<P><STRONG><a name="[a0b]"></a>ecp_randomize_jac</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, ecp.o(.text.ecp_randomize_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ecp_randomize_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_random
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mod
</UL>
<BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>

<P><STRONG><a name="[a0d]"></a>ecp_safe_invert_jac</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, ecp.o(.text.ecp_safe_invert_jac))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ecp_safe_invert_jac &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_select_comb
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>

<P><STRONG><a name="[a0f]"></a>ecp_select_comb</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, ecp.o(.text.ecp_select_comb))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ecp_select_comb &rArr; ecp_safe_invert_jac &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_safe_invert_jac
</UL>
<BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
</UL>

<P><STRONG><a name="[a8a]"></a>mbedtls_ecp_mul_shortcuts</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ecp.o(.text.mbedtls_ecp_mul_shortcuts))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = mbedtls_ecp_mul_shortcuts &rArr; mbedtls_ecp_mul_restartable &rArr; ecp_add_mixed &rArr; ecp_double_jac &rArr; mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_set_zero
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_mul_restartable
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_muladd_restartable
</UL>

<P><STRONG><a name="[9fe]"></a>mbedtls_mpi_mul_mod</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, ecp.o(.text.mbedtls_mpi_mul_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mbedtls_mpi_mul_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecp_check_pubkey
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_randomize_jac
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_normalize_jac
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_double_jac
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_add_mixed
</UL>

<P><STRONG><a name="[aa]"></a>ecp_mod_p256</STRONG> (Thumb, 1014 bytes, Stack size 56 bytes, ecp_curves.o(.text.ecp_mod_p256))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ecp_mod_p256 &rArr; mbedtls_mpi_grow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecp_curves.o(.text.mbedtls_ecp_group_load)
</UL>
<P><STRONG><a name="[a22]"></a>entropy_gather_internal</STRONG> (Thumb, 146 bytes, Stack size 168 bytes, entropy.o(.text.entropy_gather_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = entropy_gather_internal &rArr; entropy_update &rArr; mbedtls_sha256_ret &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_update
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_entropy_func
</UL>

<P><STRONG><a name="[a23]"></a>entropy_update</STRONG> (Thumb, 118 bytes, Stack size 64 bytes, entropy.o(.text.entropy_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = entropy_update &rArr; mbedtls_sha256_ret &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
<LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_gather_internal
</UL>

<P><STRONG><a name="[a93]"></a>gcm_mult</STRONG> (Thumb, 280 bytes, Stack size 44 bytes, gcm.o(.text.gcm_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gcm_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_update
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_starts
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_finish
</UL>

<P><STRONG><a name="[a33]"></a>hmac_drbg_reseed_core</STRONG> (Thumb, 168 bytes, Stack size 424 bytes, hmac_drbg.o(.text.hmac_drbg_reseed_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = hmac_drbg_reseed_core &rArr; mbedtls_hmac_drbg_update_ret &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_update_ret
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_hmac_drbg_random_with_add
</UL>

<P><STRONG><a name="[ace]"></a>ssl_validate_ciphersuite</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ssl_cli.o(.text.ssl_validate_ciphersuite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssl_validate_ciphersuite
</UL>
<BR>[Calls]<UL><LI><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_check
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[aa9]"></a>ssl_buffering_free_slot</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ssl_msg.o(.text.ssl_buffering_free_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_buffering_free_slot
</UL>
<BR>[Calls]<UL><LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_update_handshake_status
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_buffering_free
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[aa8]"></a>ssl_free_buffered_record</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ssl_msg.o(.text.ssl_free_buffered_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssl_free_buffered_record
</UL>
<BR>[Calls]<UL><LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_buffering_free
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[ab6]"></a>ssl_get_remaining_payload_in_datagram</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ssl_msg.o(.text.ssl_get_remaining_payload_in_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ssl_get_remaining_payload_in_datagram &rArr; mbedtls_ssl_get_record_expansion
</UL>
<BR>[Calls]<UL><LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_record_expansion
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_output_max_frag_len
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_current_mtu
</UL>
<BR>[Called By]<UL><LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flight_transmit
</UL>

<P><STRONG><a name="[ad7]"></a>ssl_hs_is_proper_fragment</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ssl_msg.o(.text.ssl_hs_is_proper_fragment))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ssl_hs_is_proper_fragment &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_prepare_handshake_record
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[ab5]"></a>ssl_swap_epochs</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ssl_msg.o(.text.ssl_swap_epochs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_swap_epochs &rArr; mbedtls_ssl_update_out_pointers
</UL>
<BR>[Calls]<UL><LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_update_out_pointers
</UL>
<BR>[Called By]<UL><LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flight_transmit
</UL>

<P><STRONG><a name="[ae]"></a>ssl_calc_finished_tls_sha256</STRONG> (Thumb, 108 bytes, Stack size 184 bytes, ssl_tls.o(.text.ssl_calc_finished_tls_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = ssl_calc_finished_tls_sha256 &rArr; mbedtls_sha256_finish_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[ac]"></a>ssl_calc_verify_tls_sha256</STRONG> (Thumb, 52 bytes, Stack size 128 bytes, ssl_tls.o(.text.ssl_calc_verify_tls_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ssl_calc_verify_tls_sha256 &rArr; mbedtls_sha256_finish_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish_ret
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[ade]"></a>ssl_handshake_init</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, ssl_tls.o(.text.ssl_handshake_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ssl_handshake_init &rArr; mbedtls_ssl_handshake_free &rArr; mbedtls_ecjpake_free &rArr; mbedtls_ecp_group_free &rArr; mbedtls_ecp_point_free &rArr; mbedtls_mpi_free
</UL>
<BR>[Calls]<UL><LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts_ret
<LI><a href="#[a8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_timer
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecjpake_init
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ecdh_init
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_reset_int
</UL>

<P><STRONG><a name="[af]"></a>ssl_update_checksum_sha256</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(.text.ssl_update_checksum_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ssl_update_checksum_sha256 &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text.mbedtls_ssl_optimize_checksum)
</UL>
<P><STRONG><a name="[cb]"></a>ssl_update_checksum_start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(.text.ssl_update_checksum_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ssl_update_checksum_start &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text.ssl_handshake_init)
</UL>
<P><STRONG><a name="[ad]"></a>tls_prf_sha256</STRONG> (Thumb, 362 bytes, Stack size 96 bytes, ssl_tls.o(.text.tls_prf_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = tls_prf_sha256 &rArr; mbedtls_md_hmac_starts &rArr; mbedtls_sha256_update_ret &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_free
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_calloc
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text.mbedtls_ssl_derive_keys)
</UL>
<P><STRONG><a name="[a5]"></a>__rf_event_callback</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, hosal_rf.o(.text.__rf_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __rf_event_callback &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptClear
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rf_push_state
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hosal_rf.o(.text.hosal_rf_init)
</UL>
<P><STRONG><a name="[a6]"></a>__rf_proc</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, hosal_rf.o(.text.__rf_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = __rf_proc &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_RxQueueRead
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_McuStateRead
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptEnableAll
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptDisableAll
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_HostCmdSet
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_EvtQueueRead
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hosal_rf.o(.text.hosal_rf_init)
</UL>
<P><STRONG><a name="[98b]"></a>__rf_push_state</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hosal_rf.o(.text.__rf_push_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rf_push_state
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptEnableAll
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMcu_InterruptDisableAll
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rf_event_callback
</UL>

<P><STRONG><a name="[b7c]"></a>__uart_generic_notify_handler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, hosal_uart.o(.text.__uart_generic_notify_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __uart_generic_notify_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_handler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_handler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_handler
</UL>

<P><STRONG><a name="[38]"></a>Delay_ms_32MHz</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, sysctrl.o(.text.Delay_ms_32MHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Delay_ms_32MHz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysctrl.o(.text.Delay_Init)
</UL>
<P><STRONG><a name="[39]"></a>Delay_ms_48MHz</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, sysctrl.o(.text.Delay_ms_48MHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Delay_ms_48MHz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysctrl.o(.text.Delay_Init)
</UL>
<P><STRONG><a name="[0]"></a>Delay_ms_64MHz</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, sysctrl.o(.text.Delay_ms_64MHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Delay_ms_64MHz
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sysctrl.o(.data.Delay_ms)
<LI> sysctrl.o(.text.Delay_Init)
</UL>
<P><STRONG><a name="[36]"></a>Delay_us_32MHz</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, sysctrl.o(.text.Delay_us_32MHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delay_us_32MHz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysctrl.o(.text.Delay_Init)
</UL>
<P><STRONG><a name="[37]"></a>Delay_us_48MHz</STRONG> (Thumb, 102 bytes, Stack size 4 bytes, sysctrl.o(.text.Delay_us_48MHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delay_us_48MHz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysctrl.o(.text.Delay_Init)
</UL>
<P><STRONG><a name="[1]"></a>Delay_us_64MHz</STRONG> (Thumb, 134 bytes, Stack size 4 bytes, sysctrl.o(.text.Delay_us_64MHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delay_us_64MHz
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sysctrl.o(.data.Delay_us)
<LI> sysctrl.o(.text.Delay_Init)
</UL>
<P><STRONG><a name="[a9]"></a>app_main_entry</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_main.o(.text.app_main_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 3748 + Unknown Stack Size
<LI>Call Chain = app_main_entry &rArr; app_main &rArr; app_task &rArr; __uart_task &rArr; __uart2_data_parse &rArr; udf_Meter_received_task &rArr; udf_Meter_Process &rArr; Set_TOU_C2 &rArr; udf_Set_Transmit &rArr; udf_AES_GCM_Encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_main.o(.text.main)
</UL>
<P><STRONG><a name="[163]"></a>_cli_cmd_debug</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cli_1.o(.text._cli_cmd_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _cli_cmd_debug &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_flag_setting
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_flag_get
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utility_strtoul
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_1.o(cli_cmd_pool)
</UL>
<P><STRONG><a name="[162]"></a>_cli_cmd_ps</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, cli_1.o(.text._cli_cmd_ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _cli_cmd_ps &rArr; vTaskList &rArr; uxTaskGetSystemState &rArr; prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortCalloc
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetFreeHeapSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_1.o(cli_cmd_pool)
</UL>
<P><STRONG><a name="[15c]"></a>_sh_io_read</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cli_1.o(.text._sh_io_read))
<BR>[Address Reference Count : 1]<UL><LI> cli_1.o(.rodata.g_sh_std_io)
</UL>
<P><STRONG><a name="[15d]"></a>_sh_io_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cli_1.o(.text._sh_io_write))
<BR><BR>[Calls]<UL><LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_stdio_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_1.o(.rodata.g_sh_std_io)
</UL>
<P><STRONG><a name="[9f]"></a>cli_task</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, cli_1.o(.text.cli_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = cli_task &rArr; shell_proc &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_stdio_read
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_proc
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_1.o(.text.cli_init)
</UL>
<P><STRONG><a name="[164]"></a>_sh_cmd_help</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, shell.o(.text._sh_cmd_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _sh_cmd_help &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(cli_cmd_pool)
</UL>
<P><STRONG><a name="[ca]"></a>_shell_log</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, shell.o(.text._shell_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _shell_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text.shell_proc)
</UL>
<P><STRONG><a name="[cc]"></a>__uartstdio_rx_callback</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, uart_stdio.o(.text.__uartstdio_rx_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __uartstdio_rx_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_uart_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_stdio.o(.text.uart_stdio_init)
</UL>
<P><STRONG><a name="[9a5]"></a>_exp_log_out</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, uart_stdio.o(.text._exp_log_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _exp_log_out
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_fault_handler_c
</UL>

<P><STRONG><a name="[b59]"></a>prvCopyDataToQueue</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, queue.o(.text.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[b67]"></a>prvUnlockQueue</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, queue.o(.text.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[b69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[b51]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, tasks.o(.text.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[b55]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, tasks.o(.text.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvAddNewTaskToReadyList &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[b56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[b5b]"></a>prvDeleteTCB</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(.text.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[ce]"></a>prvIdleTask</STRONG> (Thumb, 312 bytes, Stack size 8 bytes, tasks.o(.text.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[b5e]"></a>prvInitialiseNewTask</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, tasks.o(.text.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[b5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[b63]"></a>prvListTasksWithinSingleList</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, tasks.o(.text.prvListTasksWithinSingleList))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
</UL>

<P><STRONG><a name="[b6a]"></a>prvWriteNameToBuffer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tasks.o(.text.prvWriteNameToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvWriteNameToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
</UL>

<P><STRONG><a name="[b57]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, timers.o(.text.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[b56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[b61]"></a>prvInitialiseNewTimer</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, timers.o(.text.prvInitialiseNewTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[b5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[b62]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, timers.o(.text.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[b65]"></a>prvSampleTimeNow</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, timers.o(.text.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvSampleTimeNow &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[cf]"></a>prvTimerTask</STRONG> (Thumb, 572 bytes, Stack size 24 bytes, timers.o(.text.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvTimerTask &rArr; prvSampleTimeNow &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[b62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[b8e]"></a>prvPortStartFirstTask</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(.text.prvPortStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[b8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[c8]"></a>prvTaskExitError</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvTaskExitError &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[b6b]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, heap_5.o(.text.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[c3]"></a>app_udp_cb</STRONG> (Thumb, 184 bytes, Stack size 72 bytes, app_task.o(.text.app_udp_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = app_udp_cb &rArr; app_udpSend &rArr; otUdpSend &rArr; ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageRead
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageGetOffset
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageGetLength
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6AddressToString
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrGetInstance
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udp_received_queue_push
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udpSend
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.text.otrInitUser)
</UL>
<P><STRONG><a name="[c2]"></a>ot_stateChangeCallback</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, app_task.o(.text.ot_stateChangeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 2280 + Unknown Stack Size
<LI>Call Chain = ot_stateChangeCallback &rArr; nwk_mgm_child_register_post &rArr; nwk_mgm_coap_request &rArr; otCoapMessageGenerateToken &rArr; ot::Coap::Message::GenerateRandomToken(unsigned char) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkGetExtendedAddress
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetRloc16
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetRloc
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetMeshLocalPrefix
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetLinkLocalIp6Address
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetDeviceRole
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadDeviceRoleToString
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_register_post
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__app_task_signal
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.text.otrInitUser)
</UL>
<P><STRONG><a name="[9c]"></a>__uart1_rx_callback</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, app_uart.o(.text.__uart1_rx_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __uart1_rx_callback &rArr; __app_task_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_uart_receive
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__app_task_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart.o(.text.app_uart_init)
</UL>
<P><STRONG><a name="[9e]"></a>__uart2_rx_callback</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, app_uart.o(.text.__uart2_rx_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __uart2_rx_callback &rArr; __app_task_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosal_uart_receive
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__app_task_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart.o(.text.app_uart_init)
</UL>
<P><STRONG><a name="[9d]"></a>__uart_tx_callback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_uart.o(.text.__uart_tx_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __uart_tx_callback &rArr; __app_task_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__app_task_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart.o(.text.app_uart_init)
</UL>
<P><STRONG><a name="[165]"></a>_cli_cmd_udpsend</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, app_udp.o(.text._cli_cmd_udpsend))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248 + Unknown Stack Size
<LI>Call Chain = _cli_cmd_udpsend &rArr; app_udpSend &rArr; otUdpSend &rArr; ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6AddressFromString
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udpSend
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utility_strtox
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_udp.o(cli_cmd_pool)
</UL>
<P><STRONG><a name="[9b]"></a>otUdpReceive_handler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_udp.o(.text.otUdpReceive_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = otUdpReceive_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageGetLength
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_udp.o(.text.app_sockInit)
</UL>
<P><STRONG><a name="[190]"></a>AC_Command</STRONG> (Thumb, 856 bytes, Stack size 320 bytes, das_dlms_cmd.o(.text.AC_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 1236<LI>Call Chain = AC_Command &rArr; udf_GetData_Request &rArr; udf_AES_GCM_Encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_data_send
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_AES_GCM_Encrypt
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Get_New_Number_of_pens
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_GetData_Request
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_COMPUTE
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_commandAM1
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCommand_Queue_processing
</UL>

<P><STRONG><a name="[196]"></a>CRC_COMPUTE</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, das_dlms_cmd.o(.text.CRC_COMPUTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC_COMPUTE
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Send_SNRM
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Send_DISC
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_get_noEn
<LI><a href="#[b7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Send_AARQ
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Get_New_Number_of_pens
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_GetData_Request
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_Command
</UL>

<P><STRONG><a name="[1e3]"></a>Set_TOU_C2</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, das_dlms_cmd.o(.text.Set_TOU_C2))
<BR><BR>[Stack]<UL><LI>Max Depth = 2276<LI>Call Chain = Set_TOU_C2 &rArr; udf_Set_Transmit &rArr; udf_AES_GCM_Encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Set_Transmit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_commandAM1
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
</UL>

<P><STRONG><a name="[1bd]"></a>WriteFlashData</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, das_dlms_cmd.o(.text.WriteFlashData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WriteFlashData &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_page
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_page
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_commandAM1
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCommand_Queue_processing
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_factory_id_set
</UL>

<P><STRONG><a name="[166]"></a>_cli_cmd_factory_id_set</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, das_dlms_cmd.o(.text._cli_cmd_factory_id_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _cli_cmd_factory_id_set &rArr; WriteFlashData &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashData
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> das_dlms_cmd.o(cli_cmd_pool)
</UL>
<P><STRONG><a name="[167]"></a>_cli_cmd_get_fan_status</STRONG> (Thumb, 1708 bytes, Stack size 48 bytes, das_dlms_cmd.o(.text._cli_cmd_get_fan_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _cli_cmd_get_fan_status &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otGetVersionString
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> das_dlms_cmd.o(cli_cmd_pool)
</UL>
<P><STRONG><a name="[168]"></a>_cli_cmd_get_flash</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, das_dlms_cmd.o(.text._cli_cmd_get_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _cli_cmd_get_flash &rArr; flash_Information &rArr; flash_read_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_Information
</UL>
<BR>[Address Reference Count : 1]<UL><LI> das_dlms_cmd.o(cli_cmd_pool)
</UL>
<P><STRONG><a name="[1b7]"></a>fan_number</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, das_dlms_cmd.o(.text.fan_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = fan_number &rArr;  fan_number (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6AddressToString
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetMeshLocalEid
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrGetInstance
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_number
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rafael_Register
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_number
</UL>

<P><STRONG><a name="[99f]"></a>flash_Information</STRONG> (Thumb, 508 bytes, Stack size 16 bytes, das_dlms_cmd.o(.text.flash_Information))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = flash_Information &rArr; flash_read_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_page
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cli_cmd_get_flash
</UL>

<P><STRONG><a name="[aed]"></a>on_Demand_Task_Assembly</STRONG> (Thumb, 568 bytes, Stack size 48 bytes, das_dlms_cmd.o(.text.on_Demand_Task_Assembly))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360 + Unknown Stack Size
<LI>Call Chain = on_Demand_Task_Assembly &rArr; udf_Rafael_data &rArr; app_udpSend &rArr; otUdpSend &rArr; ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Rafael_data
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_GetData_Request
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
</UL>

<P><STRONG><a name="[a28]"></a>receive_queue</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, das_dlms_cmd.o(.text.receive_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = receive_queue &rArr; __app_task_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__app_task_signal
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_commandAM1
</UL>

<P><STRONG><a name="[b79]"></a>send_queue</STRONG> (Thumb, 200 bytes, Stack size 64 bytes, das_dlms_cmd.o(.text.send_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = send_queue &rArr; __app_task_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__app_task_signal
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Rafael_data
</UL>

<P><STRONG><a name="[a29]"></a>udf_AES_GCM_Decrypt</STRONG> (Thumb, 404 bytes, Stack size 464 bytes, das_dlms_cmd.o(.text.udf_AES_GCM_Decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = udf_AES_GCM_Decrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_crypt_and_tag
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_setkey
<LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_init
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_gcm_free
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_commandAM1
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
</UL>

<P><STRONG><a name="[1c1]"></a>udf_Action_Transmit</STRONG> (Thumb, 696 bytes, Stack size 1608 bytes, das_dlms_cmd.o(.text.udf_Action_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 2236<LI>Call Chain = udf_Action_Transmit &rArr; udf_AES_GCM_Encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_data_send
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_AES_GCM_Encrypt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCommand_Queue_processing
</UL>

<P><STRONG><a name="[194]"></a>udf_GetData_Request</STRONG> (Thumb, 716 bytes, Stack size 288 bytes, das_dlms_cmd.o(.text.udf_GetData_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 916<LI>Call Chain = udf_GetData_Request &rArr; udf_AES_GCM_Encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_data_send
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_AES_GCM_Encrypt
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_COMPUTE
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_Demand_Task_Assembly
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_Command
</UL>

<P><STRONG><a name="[193]"></a>udf_Get_New_Number_of_pens</STRONG> (Thumb, 268 bytes, Stack size 248 bytes, das_dlms_cmd.o(.text.udf_Get_New_Number_of_pens))
<BR><BR>[Stack]<UL><LI>Max Depth = 876<LI>Call Chain = udf_Get_New_Number_of_pens &rArr; udf_AES_GCM_Encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_data_send
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_AES_GCM_Encrypt
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_COMPUTE
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rafael_Register
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_Command
</UL>

<P><STRONG><a name="[b7d]"></a>udf_Meter_Process</STRONG> (Thumb, 6162 bytes, Stack size 1368 bytes, das_dlms_cmd.o(.text.udf_Meter_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 3644 + Unknown Stack Size
<LI>Call Chain = udf_Meter_Process &rArr; Set_TOU_C2 &rArr; udf_Set_Transmit &rArr; udf_AES_GCM_Encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_stdio_write
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_data_send
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__app_task_signal
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Send_SNRM
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Send_DISC
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_AES_GCM_Encrypt
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_get_noEn
<LI><a href="#[b7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Send_AARQ
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Rafael_data
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Get_New_Number_of_pens
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_GetData_Request
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_AES_GCM_Decrypt
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_Demand_Task_Assembly
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashData
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TOU_C2
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_COMPUTE
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_received_task
</UL>

<P><STRONG><a name="[1b9]"></a>udf_Rafael_data</STRONG> (Thumb, 408 bytes, Stack size 112 bytes, das_dlms_cmd.o(.text.udf_Rafael_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312 + Unknown Stack Size
<LI>Call Chain = udf_Rafael_data &rArr; app_udpSend &rArr; otUdpSend &rArr; ot::Ip6::Udp::SendTo(ot::Ip6::Udp::SocketHandle&, ot::Message&, ot::Ip6::MessageInfo const&) &rArr; ot::Ip6::Udp::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::SendDatagram(ot::Message&, ot::Ip6::MessageInfo&, unsigned char) &rArr; ot::Ip6::Ip6::FragmentDatagram(ot::Message&, unsigned char) &rArr; ot::MessagePool::Allocate(ot::Message::Type, unsigned short, ot::Message::Settings const&) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6AddressToString
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetRloc
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetMeshLocalEid
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrGetInstance
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_udpSend
<LI><a href="#[b79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_queue
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_commandAM1
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerCallback
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_command
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCommand_Queue_processing
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rafael_Register
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_Demand_Task_Assembly
</UL>

<P><STRONG><a name="[b7e]"></a>udf_Send_AARQ</STRONG> (Thumb, 468 bytes, Stack size 368 bytes, das_dlms_cmd.o(.text.udf_Send_AARQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 996<LI>Call Chain = udf_Send_AARQ &rArr; udf_AES_GCM_Encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_data_send
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_AES_GCM_Encrypt
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_COMPUTE
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
</UL>

<P><STRONG><a name="[1bf]"></a>udf_Set_Transmit</STRONG> (Thumb, 820 bytes, Stack size 1616 bytes, das_dlms_cmd.o(.text.udf_Set_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 2244<LI>Call Chain = udf_Set_Transmit &rArr; udf_AES_GCM_Encrypt &rArr; mbedtls_gcm_crypt_and_tag &rArr; mbedtls_gcm_update &rArr; gcm_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_data_send
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_AES_GCM_Encrypt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evaluate_commandAM1
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCommand_Queue_processing
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TOU_C2
</UL>

<P><STRONG><a name="[b7f]"></a>udf_get_noEn</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, das_dlms_cmd.o(.text.udf_get_noEn))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = udf_get_noEn &rArr; app_uart_data_send &rArr; __app_task_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_data_send
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_COMPUTE
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udf_Meter_Process
</UL>

<P><STRONG><a name="[b0]"></a>nwk_mgm_ack_process</STRONG> (Thumb, 392 bytes, Stack size 528 bytes, network_management.o(.text.nwk_mgm_ack_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 2840 + Unknown Stack Size
<LI>Call Chain = nwk_mgm_ack_process &rArr; nwk_mgm_reset &rArr; otDatasetSetActive &rArr; ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset::Info const&) &rArr; ot::MeshCoP::DatasetManager::HandleDatasetUpdated() &rArr; ot::MeshCoP::DatasetManager::SendSet() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageRead
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageGetOffset
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageGetLength
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkRemoveChildren
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkGetPanId
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkGetExtendedAddress
<LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkBlackListAddPanId
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6AddressToString
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetDeviceRole
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrGetInstance
<LI><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_reset
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_kick_child_post
<LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_data_parse
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_management.o(.text.nwk_mgm_coap_request)
</UL>
<P><STRONG><a name="[ae4]"></a>nwk_mgm_child_reg_table_add</STRONG> (Thumb, 372 bytes, Stack size 72 bytes, network_management.o(.text.nwk_mgm_child_reg_table_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nwk_mgm_child_reg_table_add &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadDeviceRoleToString
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_neighbor_Change_Callback
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_timer_handler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_request_proccess
</UL>

<P><STRONG><a name="[ae5]"></a>nwk_mgm_child_reg_table_remove</STRONG> (Thumb, 180 bytes, Stack size 72 bytes, network_management.o(.text.nwk_mgm_child_reg_table_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nwk_mgm_child_reg_table_remove &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadDeviceRoleToString
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_neighbor_Change_Callback
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_request_proccess
</UL>

<P><STRONG><a name="[adf]"></a>nwk_mgm_data_parse</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, network_management.o(.text.nwk_mgm_data_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nwk_mgm_data_parse &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_request_proccess
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_ack_process
</UL>

<P><STRONG><a name="[ae0]"></a>nwk_mgm_kick_child_post</STRONG> (Thumb, 152 bytes, Stack size 104 bytes, network_management.o(.text.nwk_mgm_kick_child_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688 + Unknown Stack Size
<LI>Call Chain = nwk_mgm_kick_child_post &rArr; nwk_mgm_coap_request &rArr; otCoapMessageGenerateToken &rArr; ot::Coap::Message::GenerateRandomToken(unsigned char) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6AddressToString
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetLinkLocalIp6Address
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrGetInstance
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_coap_request
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_neighbor_Change_Callback
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_ack_process
</UL>

<P><STRONG><a name="[b1]"></a>nwk_mgm_request_proccess</STRONG> (Thumb, 1212 bytes, Stack size 952 bytes, network_management.o(.text.nwk_mgm_request_proccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 3264 + Unknown Stack Size
<LI>Call Chain = nwk_mgm_request_proccess &rArr; nwk_mgm_reset &rArr; otDatasetSetActive &rArr; ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset::Info const&) &rArr; ot::MeshCoP::DatasetManager::HandleDatasetUpdated() &rArr; ot::MeshCoP::DatasetManager::SendSet() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageRead
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageGetOffset
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageGetLength
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageFree
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageAppend
<LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otLinkBlackListAddPanId
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6AddressToString
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapSendResponseWithParameters
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapNewMessage
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageSetPayloadMarker
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageInitResponse
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageGetType
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetDeviceRole
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrGetInstance
<LI><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_reset
<LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_data_parse
<LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_reg_table_remove
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_reg_table_add
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_management.o(.text.nwk_mgm_init)
</UL>
<P><STRONG><a name="[ae3]"></a>nwk_mgm_reset</STRONG> (Thumb, 94 bytes, Stack size 136 bytes, network_management.o(.text.nwk_mgm_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 2312 + Unknown Stack Size
<LI>Call Chain = nwk_mgm_reset &rArr; otDatasetSetActive &rArr; ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset::Info const&) &rArr; ot::MeshCoP::DatasetManager::HandleDatasetUpdated() &rArr; ot::MeshCoP::DatasetManager::SendSet() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otDatasetSetActive
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatAssertFail
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetDeviceRole
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadBecomeDetached
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrGetInstance
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_request_proccess
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_ack_process
</UL>

<P><STRONG><a name="[b2]"></a>nwk_mgm_timer_handler</STRONG> (Thumb, 372 bytes, Stack size 104 bytes, network_management.o(.text.nwk_mgm_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2280 + Unknown Stack Size
<LI>Call Chain = nwk_mgm_timer_handler &rArr; nwk_mgm_child_register_post &rArr; nwk_mgm_coap_request &rArr; otCoapMessageGenerateToken &rArr; ot::Coap::Message::GenerateRandomToken(unsigned char) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetMaxAllowedChildren
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetChildInfoByIndex
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetRloc16
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadGetDeviceRole
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otThreadDeviceRoleToString
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_critical_section
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical_section
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrGetInstance
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_register_post
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgm_child_reg_table_add
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_management.o(.text.nwk_mgm_init)
</UL>
<P><STRONG><a name="[9ae]"></a>alloc_env</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, efd_kv.o(.text.alloc_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = alloc_env &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
</UL>
<BR>[Called By]<UL><LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
</UL>

<P><STRONG><a name="[99]"></a>alloc_env_cb</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, efd_kv.o(.text.alloc_env_cb))
<BR>[Address Reference Count : 1]<UL><LI> efd_kv.o(.text.alloc_env)
</UL>
<P><STRONG><a name="[a2]"></a>check_and_recovery_env_cb</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, efd_kv.o(.text.check_and_recovery_env_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = check_and_recovery_env_cb &rArr; move_env &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_write
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
</UL>
<BR>[Address Reference Count : 1]<UL><LI> efd_kv.o(.text.efd_load_env)
</UL>
<P><STRONG><a name="[a1]"></a>check_and_recovery_gc_cb</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, efd_kv.o(.text.check_and_recovery_gc_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = check_and_recovery_gc_cb &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> efd_kv.o(.text.efd_load_env)
</UL>
<P><STRONG><a name="[a0]"></a>check_sec_hdr_cb</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, efd_kv.o(.text.check_sec_hdr_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = check_sec_hdr_cb &rArr; format_sector &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> efd_kv.o(.text.efd_load_env)
</UL>
<P><STRONG><a name="[9d1]"></a>create_env_blob</STRONG> (Thumb, 384 bytes, Stack size 64 bytes, efd_kv.o(.text.create_env_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_write
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_calc_crc32
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_env_cache
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_set_env_blob
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_env_set_default
</UL>

<P><STRONG><a name="[9d9]"></a>del_env</STRONG> (Thumb, 212 bytes, Stack size 112 bytes, efd_kv.o(.text.del_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_write
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_read
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_env_cache
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_set_env_blob
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_del_env
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
</UL>

<P><STRONG><a name="[a4]"></a>do_gc</STRONG> (Thumb, 138 bytes, Stack size 112 bytes, efd_kv.o(.text.do_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = do_gc &rArr; move_env &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_write
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_env_addr
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> efd_kv.o(.text.gc_collect)
</UL>
<P><STRONG><a name="[a18]"></a>env_iterator</STRONG> (Thumb, 168 bytes, Stack size 64 bytes, efd_kv.o(.text.env_iterator))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_env_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_load_env
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
</UL>

<P><STRONG><a name="[9da]"></a>find_env</STRONG> (Thumb, 206 bytes, Stack size 104 bytes, efd_kv.o(.text.find_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_read
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_calc_crc32
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_env_cache
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_set_env_blob
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_get_env_obj
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_get_env_blob
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
</UL>

<P><STRONG><a name="[a3]"></a>find_env_cb</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, efd_kv.o(.text.find_env_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = find_env_cb &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 2]<UL><LI> efd_kv.o(.text.find_env)
<LI> efd_kv.o(.text.move_env)
</UL>
<P><STRONG><a name="[9ca]"></a>format_sector</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, efd_kv.o(.text.format_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = format_sector &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_write
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_erase
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_env_set_default
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sec_hdr_cb
</UL>

<P><STRONG><a name="[9c9]"></a>gc_collect</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, efd_kv.o(.text.gc_collect))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comp_Int_Enable
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comp_Int_Disable
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
</UL>
<BR>[Called By]<UL><LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_set_env_blob
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_load_env
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_gc_cb
</UL>

<P><STRONG><a name="[9dc]"></a>get_next_env_addr</STRONG> (Thumb, 278 bytes, Stack size 72 bytes, efd_kv.o(.text.get_next_env_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = get_next_env_addr &rArr; efd_port_read &rArr; flash_read_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_read
</UL>
<BR>[Called By]<UL><LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
</UL>

<P><STRONG><a name="[9c7]"></a>move_env</STRONG> (Thumb, 334 bytes, Stack size 232 bytes, efd_kv.o(.text.move_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = move_env &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_write
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_read
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_env_cache
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_env
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_env_cb
</UL>

<P><STRONG><a name="[9d3]"></a>new_env</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, efd_kv.o(.text.new_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_env
</UL>
<BR>[Called By]<UL><LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_set_env_blob
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>

<P><STRONG><a name="[9dd]"></a>read_env</STRONG> (Thumb, 292 bytes, Stack size 88 bytes, efd_kv.o(.text.read_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_write
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_read
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_calc_crc32
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
</UL>

<P><STRONG><a name="[a27]"></a>read_sector_meta_data</STRONG> (Thumb, 568 bytes, Stack size 184 bytes, efd_kv.o(.text.read_sector_meta_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_read
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_env_addr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
</UL>

<P><STRONG><a name="[9af]"></a>sector_iterator</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, efd_kv.o(.text.sector_iterator))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
</UL>
<BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_load_env
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_env
</UL>

<P><STRONG><a name="[98]"></a>sector_statistics_cb</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, efd_kv.o(.text.sector_statistics_cb))
<BR>[Address Reference Count : 1]<UL><LI> efd_kv.o(.text.alloc_env)
</UL>
<P><STRONG><a name="[9d7]"></a>update_env_cache</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, efd_kv.o(.text.update_env_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = update_env_cache &rArr; efd_calc_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>

<P><STRONG><a name="[9d4]"></a>update_sec_status</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, efd_kv.o(.text.update_sec_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = update_sec_status &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_write
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>

<P><STRONG><a name="[9d6]"></a>update_sector_cache</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, efd_kv.o(.text.update_sector_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_sector_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>

<P><STRONG><a name="[b6]"></a>[Anonymous Symbol]</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, ot_alarm.o(.text.otPlatALarm_msTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otSysEventSignalPending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ot_alarm.o(.text.ot_alarmInit)
</UL>
<P><STRONG><a name="[c7]"></a>[Anonymous Symbol]</STRONG> (Thumb, 136 bytes, Stack size unknown bytes, ot_freertos.o(.text.otrStackTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 2320 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; otrInitUser &rArr; otDatasetSetActive &rArr; ot::MeshCoP::DatasetManager::Save(ot::MeshCoP::Dataset::Info const&) &rArr; ot::MeshCoP::DatasetManager::HandleDatasetUpdated() &rArr; ot::MeshCoP::DatasetManager::SendSet() &rArr; ot::Coap::CoapBase::NewPriorityConfirmablePostMessage(ot::Uri) &rArr; ot::Coap::CoapBase::InitMessage(ot::Coap::Message*, ot::Coap::Type, ot::Uri) &rArr; ot::Coap::Message::Init(ot::Coap::Type, ot::Coap::Code, ot::Uri) &rArr; otPlatCryptoRandomGet &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed_internal &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_internal_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[b29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otTaskletsProcess
<LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otInstanceInitSingle
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_set_calloc_free
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otrInitUser
<LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_radioInit
<LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otSysProcessDrivers
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_entropy_init
<LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ot_alarmInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ot_freertos.o(.text.otrStart)
</UL>
<P><STRONG><a name="[169]"></a>[Anonymous Symbol]</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, ot_ota_handler.o(.text._cli_cmd_ota))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utility_strtoul
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ot_ota_handler.o(cli_cmd_pool)
</UL>
<P><STRONG><a name="[b44]"></a>[Anonymous Symbol]</STRONG> (Thumb, 148 bytes, Stack size unknown bytes, ot_ota_handler.o(.text.ota_bootinfo_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_page
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b41]"></a>[Anonymous Symbol]</STRONG> (Thumb, 148 bytes, Stack size unknown bytes, ot_ota_handler.o(.text.ota_change_state_and_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bitmap_get_remain
<LI><a href="#[b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bitmap_get_bit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b47]"></a>[Anonymous Symbol]</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, ot_ota_handler.o(.text.ota_check_have_sleep_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[ba]"></a>[Anonymous Symbol]</STRONG> (Thumb, 200 bytes, Stack size unknown bytes, ot_ota_handler.o(.text.ota_coap_ack_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageRead
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageGetOffset
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageGetLength
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6AddressToString
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ot_ota_handler.o(.text.ota_coap_request)
</UL>
<P><STRONG><a name="[bb]"></a>[Anonymous Symbol]</STRONG> (Thumb, 278 bytes, Stack size unknown bytes, ot_ota_handler.o(.text.ota_coap_data_proccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; otCoapSendResponseWithParameters &rArr; ot::Coap::CoapBase::SendMessage(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&, void (*)(void*, otMessage*, otMessageInfo const*, otError), void*) &rArr; ot::Coap::ResponsesQueue::EnqueueResponse(ot::Coap::Message&, ot::Ip6::MessageInfo const&, ot::Coap::TxParameters const&) &rArr; ot::Coap::Message::Clone(unsigned short) const &rArr; ot::Message::Clone(unsigned short) const &rArr; ot::Message::AppendBytesFromMessage(ot::Message const&, unsigned short, unsigned short) &rArr; ot::Message::SetLength(unsigned short) &rArr; ot::Message::ResizeMessage(unsigned short) &rArr; ot::MessagePool::NewBuffer(ot::Message::Priority) &rArr; ot::MeshForwarder::EvictMessage(ot::Message::Priority) &rArr; ot::MeshForwarder::RemoveMessage(ot::Message&) &rArr; ot::IndirectSender::RemoveMessageFromSleepyChild(ot::Message&, ot::Child&) &rArr; ot::IndirectSender::RequestMessageUpdate(ot::Child&) &rArr; ot::DataPollHandler::RequestFrameChange(ot::DataPollHandler::FrameChange, ot::Child&) &rArr; ot::IndirectSender::HandleFrameChangeDone(ot::Child&) &rArr; ot::IndirectSender::UpdateIndirectMessage(ot::Child&) &rArr; ot::MeshForwarder::LogMessage(ot::MeshForwarder::MessageAction, ot::Message const&, otError, ot::Mac::Address const*) &rArr; ot::MeshForwarder::LogMeshMessage(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, ot::LogLevel) &rArr; ot::MeshForwarder::LogMeshFragmentHeader(ot::MeshForwarder::MessageAction, ot::Message const&, ot::Mac::Address const*, otError, unsigned short&, ot::Mac::Addresses&, ot::LogLevel) &rArr; ot::Logger::LogInModule(char const*, ot::LogLevel, char const*, ...) &rArr; ot::Logger::LogVarArgs(char const*, ot::LogLevel, char const*, std::__va_list) &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageRead
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageGetOffset
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageGetLength
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageFree
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageAppend
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6AddressToString
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapSendResponseWithParameters
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapNewMessage
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageSetPayloadMarker
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageInitResponse
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageGetType
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ot_ota_handler.o(.text.ota_init)
</UL>
<P><STRONG><a name="[be]"></a>[Anonymous Symbol]</STRONG> (Thumb, 260 bytes, Stack size unknown bytes, ot_ota_handler.o(.text.ota_coap_report_proccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; otIp6AddressToString &rArr; ot::Ip6::Address::ToString(char*, unsigned short) const &rArr; ot::Ip6::Address::AppendHexWords(ot::StringWriter&, unsigned char) const &rArr; ot::StringWriter::Append(char const*, ...) &rArr; ot::StringWriter::AppendVarArgs(char const*, std::__va_list) &rArr; otPlatAssertFail &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageRead
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageGetOffset
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageGetLength
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6AddressToString
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageGetType
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otCoapMessageGetCode
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ot_ota_handler.o(.text.ota_init)
</UL>
<P><STRONG><a name="[bc]"></a>[Anonymous Symbol]</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, ot_ota_handler.o(.text.ota_coap_request_proccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageRead
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageGetOffset
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageGetLength
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6AddressToString
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ot_ota_handler.o(.text.ota_init)
</UL>
<P><STRONG><a name="[bd]"></a>[Anonymous Symbol]</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, ot_ota_handler.o(.text.ota_coap_response_proccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; [Anonymous Symbol] &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageRead
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageGetOffset
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMessageGetLength
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otIp6AddressToString
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ot_ota_handler.o(.text.ota_init)
</UL>
<P><STRONG><a name="[b49]"></a>[Anonymous Symbol]</STRONG> (Thumb, 264 bytes, Stack size unknown bytes, ot_ota_handler.o(.text.ota_data_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_event_handler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[b48]"></a>[Anonymous Symbol]</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, ot_ota_handler.o(.text.ota_event_queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
</UL>

<P><STRONG><a name="[c0]"></a>[Anonymous Symbol]</STRONG> (Thumb, 544 bytes, Stack size unknown bytes, ot_ota_handler.o(.text.ota_response_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otRandomNonCryptoGetUint8InRange
<LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otRandomNonCryptoGetUint16InRange
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bitmap_get_bit
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ot_ota_handler.o(.text.ota_init)
</UL>
<P><STRONG><a name="[bf]"></a>[Anonymous Symbol]</STRONG> (Thumb, 1600 bytes, Stack size unknown bytes, ot_ota_handler.o(.text.ota_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; ota_bitmap_get_remain &rArr; [Anonymous Symbol] &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otRandomNonCryptoGetUint32InRange
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatReset
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bitmap_get_remain
<LI><a href="#[b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_bitmap_get_bit
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32checksum
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[Anonymous Symbol]
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ot_ota_handler.o(.text.ota_init)
</UL>
<P><STRONG><a name="[b7]"></a>[Anonymous Symbol]</STRONG> (Thumb, 438 bytes, Stack size unknown bytes, ot_radio.o(.text._RxDoneEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMacFrameIsVersion2015
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMacFrameIsSecurityEnabled
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMacFrameIsDataRequest
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMacFrameIsCommand
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMacFrameIsAckRequested
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otMacFrameGetSrcAddr
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otSysEventSignalPending
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilsSoftSrcMatchShortFindEntry
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilsSoftSrcMatchExtFindEntry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ot_radio.o(.text.ot_radioInit)
</UL>
<P><STRONG><a name="[b8]"></a>[Anonymous Symbol]</STRONG> (Thumb, 158 bytes, Stack size unknown bytes, ot_radio.o(.text._TxDoneEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; lmac15p4_read_ack &rArr; hosal_rf_ioctl &rArr; hosal_rf_read_event &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpm_Low_Power_Unmask
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_read_ack
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otSysEventSignalPending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ot_radio.o(.text.ot_radioInit)
</UL>
<P><STRONG><a name="[b1a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, ot_settings.o(.text.otPlatSettingsSet_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; efd_set_env_blob &rArr; del_env &rArr; find_env &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; efd_port_write &rArr; flash_write_page &rArr; leave_critical_section &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_set_env_blob
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_env_unlock
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efd_port_env_lock
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsSet
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otPlatSettingsAdd
</UL>

<P><STRONG><a name="[16a]"></a>[Anonymous Symbol]</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, ot_uart.o(.text._cli_cmd_ot))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; otSysEventSignalPending &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otSysEventSignalPending
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ot_uart.o(cli_cmd_pool)
</UL>
<P><STRONG><a name="[a7]"></a>[Anonymous Symbol]</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, lmac15p4_1.o(.text.__rxdone_cb))
<BR>[Address Reference Count : 1]<UL><LI> lmac15p4_1.o(.text.lmac15p4_init)
</UL>
<P><STRONG><a name="[a8]"></a>[Anonymous Symbol]</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, lmac15p4_1.o(.text.__txdone_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = [Anonymous Symbol] &rArr; lmac15p4_TxDoneEvent &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmac15p4_TxDoneEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmac15p4_1.o(.text.lmac15p4_init)
</UL>
<P><STRONG><a name="[b9e]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[b99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b99]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ba2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[b9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
<LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[b9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[ba1]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ba0]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d1]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[d2]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[34]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
